{"version":3,"sources":["/Users/joseangel/Workspace/map-components/src/countryflag/countryflag.js","/Users/joseangel/Workspace/map-components/src/countryflag/countryflag.mdx"],"names":["CountryFlag","error","info","console","this","props","iso","iso2","svg","svgBorder","size","margin","className","warn","flag","countryflag","e","emoji","style","height","marginRight","right","marginLeft","left","outline","alt","name","src","fontSize","role","aria-label","PureComponent","defaultProps","layoutProps","MDXContent","components","mdxType","of","__position","__code","__scope","Playground","Props","__codesandbox","isMDXComponent"],"mappings":"2jCAIMA,E,gLACcC,EAAOC,GACvBC,QAAQF,MAAMA,EAAOC,K,+BAGd,MAGwDE,KAAKC,MAA5DC,EAHD,EAGCA,IAAKC,EAHN,EAGMA,KAAMC,EAHZ,EAGYA,IAAKC,EAHjB,EAGiBA,UAAWC,EAH5B,EAG4BA,KAAMC,EAHlC,EAGkCA,OAAQC,EAH1C,EAG0CA,UACjD,IAAKN,IAAQC,EAEX,OADAJ,QAAQF,MAAM,sDACP,KAELM,GACFJ,QAAQU,KAAK,iDAEf,IAAIC,EAAO,KACX,IACEA,EAAOC,IAAYT,GAAOC,GAC1B,MAAOS,GACPb,QAAQU,KAAK,8CAA+CP,GAAOC,GAErE,OAAKO,GAEU,IAARN,GAA+B,OAAfM,EAAKG,MAC1B,yBACEC,MAAK,aACHC,OAAQT,EACRU,YAAaT,EAAOU,MACpBC,WAAYX,EAAOY,MACfd,GAAa,CACfe,QAAS,iEAGbZ,UAAWA,EACXa,IAAKX,EAAKY,KACVC,IAAKb,EAAKN,MAGZ,0BAAMU,MAAO,CAAEU,SAAUlB,GAAQmB,KAAK,MAAMC,aAAYhB,EAAKY,MAC1DZ,EAAKG,OAlBQ,S,GAtBIc,iBA0D1B/B,EAAYgC,aAAe,CACzBxB,KAAK,EACLC,WAAW,EACXG,UAAW,GACXF,KAAM,MACNC,OAAQ,CACNY,KAAM,QACNF,MAAO,UAIIrB,Q,6MCjEf,IAKMiC,EAAc,GAIL,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACG9B,EACF,8BACD,OAAO,YALS,UAKT,eAAe4B,EAAiB5B,EAAhC,CAAuC8B,WAAYA,EAAYC,QAAQ,cAE5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,+FACA,gDAEA,iBAAQ,CACN,GAAM,wBADR,wBAGA,YAAC,IAAD,CAAOC,GAAIrC,EAAaoC,QAAQ,UAChC,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYE,WAAY,EAAGC,OAAQ,sDAA2DC,QAAS,CACrGnC,MAAOD,KAAOA,KAAKC,MAAQA,EAC3BoC,eACAC,UACA1C,eACC2C,cAAa,kwFAAqwFP,QAAQ,cAC/xF,YAAC,EAAD,CAAa9B,IAAI,KAAK8B,QAAQ,gBAC9B,YAAC,EAAD,CAAa9B,IAAI,MAAM8B,QAAQ,kB,qLAMjCF,EAAWU,gBAAiB","file":"static/js/src-countryflag-countryflag.2fb6548f.js","sourcesContent":["import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\nimport countryflag from 'countryflag'\n\nclass CountryFlag extends PureComponent {\n  componentDidCatch(error, info) {\n    console.error(error, info)\n  }\n\n  render() {\n    // iso2 is deprecated, ignoring prop-types\n    // eslint-disable-next-line react/prop-types\n    const { iso, iso2, svg, svgBorder, size, margin, className } = this.props\n    if (!iso && !iso2) {\n      console.error(' Country flag iso (iso 3) or iso2 code is required')\n      return null\n    }\n    if (iso2) {\n      console.warn('iso2 parameter is deprecated, use iso instead')\n    }\n    let flag = null\n    try {\n      flag = countryflag(iso || iso2)\n    } catch (e) {\n      console.warn('Country flag error, incorrect iso code for:', iso || iso2)\n    }\n    if (!flag) return null\n\n    return svg === true || flag.emoji === null ? (\n      <img\n        style={{\n          height: size,\n          marginRight: margin.right,\n          marginLeft: margin.left,\n          ...(svgBorder && {\n            outline: '1px solid var(--color-border-light, rgba(22, 63, 137, 0.15))',\n          }),\n        }}\n        className={className}\n        alt={flag.name}\n        src={flag.svg}\n      />\n    ) : (\n      <span style={{ fontSize: size }} role=\"img\" aria-label={flag.name}>\n        {flag.emoji}\n      </span>\n    )\n  }\n}\n\nCountryFlag.propTypes = {\n  iso: PropTypes.string.isRequired,\n  svg: PropTypes.bool,\n  svgBorder: PropTypes.bool,\n  size: PropTypes.string,\n  className: PropTypes.string,\n  margin: PropTypes.shape({\n    left: PropTypes.string,\n    right: PropTypes.string,\n  }),\n}\n\nCountryFlag.defaultProps = {\n  svg: false,\n  svgBorder: true,\n  className: '',\n  size: '1em',\n  margin: {\n    left: '0.1em',\n    right: '0.2em',\n  },\n}\n\nexport default CountryFlag\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport CountryFlag from './countryflag'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"country-flag\"\n    }}>{`Country flag`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`Shows a country flag using an emoji by default. Can fallback to a SVG.`}</p>\n    <p>{`Currently used in:\nTBD`}</p>\n    <h2 {...{\n      \"id\": \"available-properties\"\n    }}>{`Available properties`}</h2>\n    <Props of={CountryFlag} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'<CountryFlag iso=\\\"ES\\\" />\\n<CountryFlag iso=\\\"FRA\\\" />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      CountryFlag\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtKZHGQ1FEgAMTg2cjVldoPTgARyABUiBESMAqOYmhWPY1wUgIiD2EDSUsNo01FTBVBdBRY5Tlw5wCESLF2G4dhgHWKIBGeVArnaAAGdgkxmLB2j3asZg7FgZx0gAWIz2AANiMkz1jAYDyO9aBEh0_hnEOBEHUwGChH4JYiGoSg4HMhFnOrVyaGcCBcMudgAEZrNM-QJKkqYAEE5mU9gIyg8gbCgdAw3YeQOWUsRCujGR2BRRSYG4YA8Pk5q4HkLca2AEroHK4IADIhvGRJ5koZp-rKiruDmuUwGQyUBlQdp2AAfg2AawwjaqrmmwbUEy6spBkKs3zMGF1WOGAwDCKApl2mq6pOvLl2rBMhIIHByMyFIrwIHqa1XNouIoqjODgSg-BAM9nH4dhNxXBMSLByjeMh6H-HIkUcoRpGPtrSQvp-v6AZ6qQ3vOswvxABimKoFi2I4xmwZ4lJ_y0ChgP0BhCOur6lig6C-hgNdqBdTCaJNTV2lta60MoGZLHG-ARLlfslfNBT5jgOXUH5-1WbI9n1faY3uKo_WzHIOC4DsVGyPR2dsBA9A7BFrpxYzSD1k-dcaC1Lh7GiEqIwyIQBCWNBXOqtTCakyhYBwCOhXDgRI-j1BY_WY71knSM45XR5MYAJkhm7-y2LJFk4FJUCFAo-wHbXVbgYvJGhOAoDQC0WAqDxYHNZ0sAtHvnQnTVJE1mZW91ldstUzHo6h0uljgVgUnXzfryFKd18SmBQtcTS0CWW3_DgAA5b1ukwlSJlsHAZ_bwmIGaCMAEJbGHEb2G_1eRdCYWETsnVOAhHwOiZoaCGP9CpwKTNVIUZdCyBVsJPAAjqECAXR0CvmRpPAgfRzCoFCAkFcx1gbv3gYA1SBDQF_hGCfVAj4f7l3MpkI8tAjjoMwFXOItBa55G6HAtAKJxR4LfMDShNZYBSghipUh5DCZkTocAmBGMVIW2ZrxCMcCAA--iy5SJrJhARJVCowCAcDEB1AobJyYQIFh7RHasQ0S7DOQos5UAzlsMcUNUHdFcmWEymN2CGOMRQlc1Cv7s2ql0IhTj2BKKgBJYGCTiGNU3speaqIGThKMezFOYV1AQByYoshUANovRsbWfkhR1EWCarAVq8danA02BAFIhArj5CSqZdpNYNJaRFF0np7BhloFDGMggAzBkTJPlpAAMrdAgVxJmoBwLAMAsyCHAxwAciMG8Ui7wEFOdgf82nzIsPsceyV2gpTsvYrg7BWAnwjOac0VAoBCnNF4M5GRzQ926bMicKQPCuAjKXNeDkkxLBSkmAA7EsXSOAUoAFYOQchitcqqczanyBkbUi-9sb5HlaiS6-t8iU2PiAQVqRTUDUr2Y1RiDKqI4GOTSiwBNgZ7RqTYxgkV3CNQUi04AUE4oEASklXph9KqYSEC0_g9SEYnwgK4IFrhAhQHZbxHATKjzdRZcAIpMASkQG5UTYVqAgbsBMcdPOqBXHg31TPFWusCpXJ_lcRWys26ctRAUHAtgxRYJwdkOZxzfUDg9fAHAXgk5Rp3nvDIMalZxrgAm4QUAo2H3Tf63Wgbpxbz9nbKlR4C2ZuLQUOZGyq0BrgH4eYRUVzbLWUFDNjag0znxROGZDai0ohLXMvFZgnUuudjgTAd0yEED9XYFSVzo2GniHAI-6xjmnKnFcPJG7qyUrJfcnFjV81yhSuak99a1HA3bTpVFF7rR9v6CC-9OBS6XtHRlCSV17QzvusRUGTsqI0yUCAKK2xeJ_k0NQQCugQIGDAlc_ghrGRIHYPwH4xZqiAp_GSNDcz-CsAyPkag_Arj8FRVRkK6x-DlHIP0GY3Z_Tof4DlU9v5oRYG9PhyuPzEi5jyE3MSFosN_FLDR6s_AohoHIxhlQ4YNDtxAIRkAfC6CYEkhAeAcmrkWDo7JOT_AAB6KUcBJjRZJ4G_ARNGZAKZ-yaKzO6SszWfgM8546dY_ZjFOBHOl1c_poCTN2Z2eM6XHA1l32BfkyJy0kQwspUcylZz_Bc7jtpth7wHxqCQA5jB1AcGeagRAGpEAtAfRZHI5h00tBzRxdmDMfg8gFCEqAA`} mdxType=\"Playground\">\n  <CountryFlag iso=\"ES\" mdxType=\"CountryFlag\" />\n  <CountryFlag iso=\"FRA\" mdxType=\"CountryFlag\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}