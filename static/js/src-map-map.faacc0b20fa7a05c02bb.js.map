{"version":3,"sources":["webpack:///./src/map/glmap/map.css","webpack:///./src/map/lib/Pack.js","webpack:///./src/map/lib/pelagosClient.js","webpack:///./src/map/proptypes/tracks.js","webpack:///./src/map/proptypes/layers.js","webpack:///./src/map/proptypes/shared.js","webpack:///./src/map/module/module.actions.js","webpack:///./src/map/tracks/tracks.selectors.js","webpack:///./src/map/module/module.selectors.js","webpack:///./src/map/constants.js","webpack:///./src/map/utils/getPBFTile.js","webpack:///./src/map/utils/heatmapTileData.js","webpack:///./src/map/utils/buildEndpoint.js","webpack:///./src/map/config.js","webpack:///./src/map/heatmap/heatmapTiles.actions.js","webpack:///./src/map/heatmap/heatmap.actions.js","webpack:///./src/map/glmap/viewport.actions.js","webpack:///./src/map/glmap/interaction.actions.js","webpack:///./src/map/utils/map-colors.js","webpack:///./src/map/heatmap/HeatmapSubLayer.js","webpack:///./src/map/heatmap/HeatmapLayer.js","webpack:///./src/map/tracks/TracksLayer.js","webpack:///./src/map/activity/ActivityLayers.js","webpack:///./src/map/activity/ActivityLayers.container.js","webpack:///./src/map/glmap/Map.js","webpack:///./src/map/glmap/Map.container.js","webpack:///./src/map/utils/getMainGeomType.js","webpack:///./src/map/glmap/style.actions.js","webpack:///./src/map/tracks/tracks.actions.js","webpack:///./src/map/utils/withReducerTypes.js","webpack:///./src/map/module/module.reducer.js","webpack:///./src/map/tracks/tracks.reducer.js","webpack:///./src/map/heatmap/heatmap.reducer.js","webpack:///./src/map/heatmap/heatmapTiles.reducer.js","webpack:///./src/map/glmap/viewport.reducer.js","webpack:///./src/map/glmap/style.reducer.js","webpack:///./src/map/glmap/interaction.reducer.js","webpack:///./src/map/map.js","webpack:///./src/map/map.mdx"],"names":["module","exports","map","googleLogo","byname","Uint8","size","Uint8Array","BYTES_PER_ELEMENT","array","getter","setter","Int8","Int8Array","Uint16","Uint16Array","Int16","Int16Array","Uint32","Uint32Array","Int32","Int32Array","Float32","Float32Array","Float64","Float64Array","writeStringToArrayBuffer","str","start","end","buf","bufstart","undefined","length","i","charCodeAt","arrayBufferToString","String","fromCharCode","apply","Pack","typemap","byarray","pack","typespec","value","littleendian","ArrayBuffer","DataView","stringToArrayBuffer","res","Uint8ClampedArray","buffer","name","spec","PelagosClient","_classCallCheck","this","MAGIC_COOKIE","url","token","Promise","resolve","reject","request","XMLHttpRequest","open","setRequestHeader","concat","responseType","onload","handleData","bind","onerror","send","self","error","readyState","success","status","isFileUri","response","byteLength","dataView","headerLen","cookie","slice","getInt32","offset","headerIsLoaded","header","JSON","parse","rowLen","colsByName","colidx","cols","col","idx","type","multiplier","min","max","orientation","errorLoading","toString","allLoaded","result","rowidx","row","val","colValues","eval","trackTypes","id","PropTypes","string","isRequired","color","oneOf","layerTemporalExtents","arrayOf","number","fitBoundsOnLoad","bool","shape","hue","filterValues","object","endpoints","isPBF","temporalExtents","temporalExtentsLess","field","values","node","startLoader","dispatch","state","loaderId","Date","getTime","payload","onLoadStart","completeLoader","getState","loaders","Object","assign","onLoadComplete","filterGeojsonByTimerange","geojson","_ref","features","featuresFiltered","reduce","filteredFeatures","feature","properties","coordinateProperties","times","filtered","geometry","coordinates","filteredCoordinates","coordinate","index","timeCoordinate","push","filteredFeature","_objectSpread","getTracksStyles","createSelector","temporalExtent","tracks","data","filteredTracks","filter","t","hasTemporalExtent","hasTracks","timerange","acc","track","source","style","sources","_defineProperty","layers","layout","paint","line-width","line-color","circle-radius","circle-color","_toConsumableArray","TRANSITION_TYPE","BRUSH_RENDERING_STYLE","NORMAL","BULLSEYE","BRUSH_ZOOM_RENDERING_STYLE","CUSTOM_LAYERS_SUBTYPES","getPBFTile","tileUrl","fetch","headers","Authorization","then","ok","Error","blob","reader","FileReader","addEventListener","pbf","Pbf","vectorTile","VectorTile","readAsArrayBuffer","catch","e","console","warn","getTemporalTileURLs","urlTemplate","params","urls","forEach","extent","urlParams","seriesgroup","startTimeISO","toISOString","endTimeISO","tileCoordinates","x","y","z","zoom","templateSettings","interpolate","template","urlTemplateCompiled","buildEndpoint","temporalExtentsIndices","indexOf","getTilePromises","tilesetUrl","promises","urlIndex","obtainTile","getCleanVectorArrays","rawTileData","vectorArray","groupData","cleanVectorArrays","columns","currentArray","totalVectorArraysLength","sumBy","a","longitude","filteredColumns","column","key","cumulatedOffsets","appendValues","set","getTilePlaybackData","prevPlaybackData","tilePlaybackData","zoomFactorRadius","convert","getZoomFactorRadius","zoomFactorRadiusRenderingMode","getZoomFactorRadiusRenderingMode","zoomFactorOpacity","getZoomFactorOpacity","columnsArr","keys","c","storedColumns","sigma","weight","hidden","pull","uniq","_loop","point","geom","toGeoJSON","latitude","timeIndex","getOffsetedTimeAtPrecision","datetime","_lngLatToWorld2","_slicedToArray","lngLatToWorld","worldX","worldY","radius","sigmaToRadius","opacity","weightToOpacity","series","frame","addTracksPointsRenderingData","hasFishing","_lngLatToWorld4","getTracksPlaybackData","playbackData","vesselSatisfiesFilters","every","selectVesselsAt","tileData","tileQuery","startIndex","endIndex","currentFilters","vessels","toleranceRadiusInWorldUnits","_loop2","f","_loop3","wx","wy","filters","pass","some","vesselSatisfiesAllFilters","vessel","VESSELS_BASE_RADIUS","MAX_SPRITES_PER_LAYER","getTilecoverLimits","viewportZoom","Math","ceil","tilesAvailable","min_zoom","max_zoom","flushToReleaseTiles","heatmapTiles","currentToLoadTileUids","currentTilesToReleaseUids","currentToReleaseTileUids","releaseTiles","markTileAsLoaded","tileUids","flushTileState","forceLoadingAllVisibleTiles","arguments","currentVisibleTiles","tilesToLoad","tilesToReleaseUids","currentLoadedTiles","visibleTile","find","uid","loadedTile","tilesToLoadUids","tile","referenceTile","ADD_REFERENCE_TILE","visibleHeatmapLayers","heatmap","heatmapLayers","visibleHeatmapLayersIds","visible","getTiles","updateLoadedTiles","debouncedFlushState","debounce","updateHeatmapTilesFromViewport","mapViewport","viewport","currentTransition","boundsViewport","PerspectiveMercatorViewport","bounds","unproject","width","height","wn","es","w","s","n","boundsPolygonsCoordinates","limits","w1","e2","viewportTilesCoords","tilecover","tiles","viewportTilesIndexes","indexes","visibleTiles","coords","prevZoom","queryHeatmapVessels","temporalExtentIndexes","uids","_queryHeatmap2","_queryHeatmap","layer","isEmpty","isCluster","isMouseCluster","foundVessels","highlightedVessels","layerId","HIGHLIGHT_VESSELS","tilesetId","subtype","clickableCluster","highlightableCluster","clearHighlightedVessels","highlightVesselFromHeatmap","heatmapTiles_actions_objectSpread","UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES","UPDATE_HEATMAP_TILE","getTemporalExtentsVisibleIndices","loadTemporalExtent","currentExtentStart","currentExtentEnd","indices","temporalExtentStart","layerIds","referenceTiles","newTemporalExtentsToLoad","loaderID","tilesByLayer","heatmap_actions_toConsumableArray","allPromises","heatmapLayerHeader","_heatmapLayerHeader","heatmap_actions_objectSpread","temporalExtentsIndicesLoaded","queriedTemporalExtentsIndices","visibleTemporalExtentsIndices","temporalExtentsIndicesToLoad","difference","tilePromise","pelagosPromises","allLayerPromises","all","loadedLayerId","loadLayerTile","_ref2","points","parseLayerTile","loadAllTilesForLayer","layersVessels","availableTiles","bestTile","layerVesselsResult","layersVesselsResults","layerVessels","hasEncounters","layerVessel","v","uniqBy","updateHeatmapLayers","newLayers","currentLoadTemporalExtent","prevLayersDict","newLayer","prevLayer","interactive","prevLayerId","l","transitionTo","increment","callback","onViewportChange","center","canZoomIn","canZoomOut","mouseLatLong","getFeatureMetaFields","staticLayerId","mapStyle","toJS","metadata","getStaticLayerIdFromGlFeature","glFeature","findFeature","glFeatures","mapClick","currentActivityLayersInteractionData","event","fields","metaFields","metaField","pow","area","toLocaleString","maximumFractionDigits","title","label","isLink","target","zoomIntoVesselCenter","onClick","interaction_actions_objectSpread","hsvToRgb","h_","s_","v_","h","parseFloat","floor","p","q","mod","r","g","b","round","hueToRgbDefaults","hueToRgbString","rgb","hexToRgb","hex","exec","parseInt","hueIncrementToHue","hueIncrement","wrapHue","HeatmapSubLayer","baseTexture","renderingStyleIndex","useNormalBlendMode","stage","PIXI","particles","ParticleContainer","scale","alpha","position","uvs","blendMode","BLEND_MODES","SCREEN","spritesPool","initialTextureFrame","Rectangle","mainVesselTexture","Texture","_setTextureFrame","clearSpriteProps","spritesProps","spritesPropsCount","destroy","children","textureFrame","clone","hueToHueIncrement","VESSELS_HUES_INCREMENTS_NUM","update","numProps","resizeSpritesPool","sprite","setTransform","numSprites","delta","toRemove","removeChildAt","toAdd","_addSprites","num","Sprite","anchor","addChild","worldToPixelsSimple","m","HeatmapLayer","React","Component","_build","_destroy","_redraw","nextProps","useRadialGradientStyle","props","setBrushZoomRenderingStyle","_this$props","rootStage","customRenderingStyle","subLayers","renderingStyle","rendering","setBrushRenderingStyle","brushRenderingStyle","toUpperCase","_setBrushRenderingStyleIndex","brushZoomRenderingStyle","_this","cappedZoomRenderingStyle","newStyleIndex","subLayer","setRenderingStyleIndex","_this2","_this$props2","defaultHue","allHuesToRender","currentlyUsedHues","allHues","_createSublayer","_destroySubLayer","_setSubLayersSpritePropsForTile","numFilters","hueToRender","render","_this$props3","viewportLeft","viewportRight","len","fi","scaledX","scaledY","mtx","pixelProjectionMatrix","_ref3","HeatmapLayer_slicedToArray","pitch","worldToPixels","pushSpriteProps","defaultOpacity","defaultSize","removeChild","TracksLayer","Graphics","nativeLines","clear","highlightTemporalExtentIndexes","overInInner","overExtent","drawFishingCircles","fishingCirclesRadius","drawOverTrack","_drawTrack","substr","lineThickness","lineOpacity","prevSeries","prevWorldX","prevWorldY","_ref$worldOffset","worldOffset","circlePoints","lineStyle","duplicateWorld","currentSeries","_worldToPixels2","TracksLayer_slicedToArray","moveTo","abs","atDatelineWorldY","isWestToEast","worldXEnd","atDatelineEndWorldX","atDatelineStartWorldX","_worldToPixels4","x1","y1","lineTo","_worldToPixels6","x2","y2","beginFill","circlesLength","drawCircle","endFill","ActivityLayers","touches","queryCoords","clientX","clientY","heatmapFadingIn","heatmapStage","_heatmapFadeinStep","BaseControl","exportNativeViewport","_context","_updateViewportSize","_this$props$viewport","pixi","transparent","antialias","renderer","canvas","view","container","appendChild","baseTextureCanvas","blurFactor","tplCanvas","document","createElement","tplCtx","getContext","diameter","yCenter","gradient","createRadialGradient","rgbString","addColorStop","rgbOuter","fillStyle","fillRect","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","getVesselTexture","fromCanvas","ticker","add","_onTick","viewportWidth","viewportHeight","resize","dim","_viewport$unproject2","ActivityLayers_slicedToArray","wrappedLongitude","heatmapFadeinStartTimestamp","now","timeElapsed","highlightedClickedVessel","highlightLayerData","highlightFilters","ActivityLayers_objectSpread","leftWorldScaled","rightWorldScaled","shouldUseRadialGradientStyle","toggleHeatmapDimming","_startHeatmapFadein","err","gl","getError","log","_this$_getHighlightDa","_getHighlightData","react_default","ref","onMouseMove","onTouchStart","heatmap_HeatmapLayer","tracks_TracksLayer","propTypes","func","contextTypes","getHeatmapLayersAsArray","ActivityLayers_container_objectSpread","getTracksWithData","getTemporalExtentIndexes","startTimestamp","endTimestamp","getHighlightTemporalExtentIndexes","highlightTemporalExtent","connect","ownProps","nativeViewport","topLeftPx","bottomRightPx","topLeftWorld","pixelsToWorld","pixelUnprojectionMatrix","bottomRightWorld","northWest","southEast","north","south","west","east","PopupWrapper","closeButton","onClose","esm","offsetTop","tipSize","closeOnClick","Map","Map_classCallCheck","Map_getPrototypeOf","call","Map_defineProperty","Map_assertThisInitialized","_mapContainerRef","mapContainerStyle","window","getComputedStyle","setViewport","Map_objectSpread","mapHover","lngLat","mouseOver","_resize","setTimeout","removeEventListener","_this3","maxZoom","minZoom","transitionEnd","onClosePopup","clickPopup","hoverPopup","cursor","interactiveLayerIds","className","styles","onMouseLeave","setState","onMouseEnter","onTransitionEnd","onHover","getCursor","isDragging","ActivityLayers_container","Map_PopupWrapper","content","getInteractiveLayerIds","staticLayers","getMapStyle","mapStyles","trackStyles","mergeDeep","fromJS","interaction","lat","long","popupFields","mainPopupFieldId","toLowerCase","featureTitle","objects","TYPES","geoJSON","setMapStyle","updateGLLayer","glLayerId","refLayer","currentStyleLayers","newStyle","glLayerIndex","findIndex","glLayer","visibility","setIn","toggleLayerVisibility","isBasemap","initialGLLayer","GL_STYLE","refLayerOpacity","labelsVisibility","getIn","showLabels","currentGlLayer","currentStyle","glType","defaultStyles","styleType","hasFeatures","applyStyleToAllFeatures","allPaintProperties","style_actions_objectSpread","layerColorRgb","layerColorRgbFragment","glPaintProperty","glPaintFinalValue","selectedValue","fallbackValue","paintOrLayout","replace","applyLayerExpressions","isTemporal","currentFilter","deleteIn","newFilter","applyLayerFilters","addCustomGLLayer","tileSize","allGeoJSONTypes","numByGLType","geoJSONType","glTypeMax","getMainGeomType","layerIndex","reverse","get","splice","instanciateCartoLayers","sourceId","cartoLayersPromises","sourceCartoSQL","mapConfig","options","sql","mapConfigURL","encodeURIComponent","stringify","cartoAnonymousMapUrl","json","layergroupid","instanciatedCartoLayers","cartoLayer","tilesURL","newSourceId","commitStyleUpdates","basemapLayers","style_actions_toConsumableArray","bl","currentGLSources","workspaceGLLayers","workspaceGLLayer","finalSource","srcGlLayer","source-layer","finalLayers","addWorkspaceGLLayers","customLayers","isCustom","glLayers","glSources","cartoLayersToInstanciate","glSource","cartoLayerInstanciated","cartoLayersInstanciated","ADD_TRACK","UPDATE_TRACK","getTrackDataParsed","time","Infinity","tbbox","geoBounds","minLat","minLng","maxLat","maxLng","timelineBounds","getOldTrackBoundsFormat","addOffset","geo","lng","updateTracks","newTracks","prevTracks","newTrack","trackId","prevTrack","cleanData","rawTrackData","statusText","_getTrackDataParsed","targetMapVessel","finally","withReducerPropTypes","propTypesSchema","reducer","initialState","onAttributionsChange","withReducerTypes","instanceOf","action","module_reducer_objectSpread","module_reducer_toConsumableArray","loaderIndex","exact","tracks_reducer_objectSpread","tracks_reducer_toConsumableArray","trackData","removedTrackId","DEFAULT_TRANSITION","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","bearing","attributions","sourceKey","attribution","mapReducer","combineReducers","ModuleReducer","TracksReducer","indicesAdded","heatmap_reducer_defineProperty","heatmap_reducer_objectSpread","heatmap_reducer_toConsumableArray","newTile","layerTiles","tileIndex","tileUid","releasedTileIndex","releasedRefTileIndex","newHeatmapLayers","heatmapTiles_reducer_objectSpread","tileUidsMarkedAsLoaded","newMapStyle","glyphsPath","style_reducer_objectSpread","style_reducer_toConsumableArray","viewport_reducer_objectSpread","currentZoom","interaction_reducer_objectSpread","composeEnhancers","compose","process","MAP_REDUX_REMOTE_DEBUG","store","createStore","applyMiddleware","thunk","throttleApplyTemporalExtent","throttle","applyTemporalExtent","setTemporalExtent","updateViewportFromIncomingProps","incomingViewport","viewportUpdate","MapModule","initialized","errorInfo","prevProps","indicesToAddByLayer","heatmapLayer","oldVisibleTemporalExtentsIndices","newVisibleTemporalExtentsIndices","layerIdsWithIndicesToAdd","currentViewport","componentStack","react_redux_es","Map_container","vp","fitBounds","padding","MDXContent","map_map_classCallCheck","map_map_possibleConstructorReturn","map_map_getPrototypeOf","components","_objectWithoutProperties","dist","parentName","href","index_m","__codesandbox","__position","__code","__scope","map_map"],"mappings":"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","file":"static/js/src-map-map.b2040ddd.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__2QkEc\",\"googleLogo\":\"map_googleLogo__1hHOD\"};","var byname = {\n  Uint8: {\n    size: Uint8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Int8: {\n    size: Int8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Uint16: {\n    size: Uint16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint16',\n    setter: 'setUint16',\n  },\n  Int16: {\n    size: Int16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt16',\n    setter: 'setInt16',\n  },\n  Uint32: {\n    size: Uint32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint32',\n    setter: 'setUint32',\n  },\n  Int32: {\n    size: Int32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt32',\n    setter: 'setInt32',\n  },\n  Float32: {\n    size: Float32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getFloat32',\n    setter: 'setFloat32',\n  },\n  Float64: {\n    size: Float64Array.BYTES_PER_ELEMENT,\n    array: 'Float64Array',\n    getter: 'getFloat64',\n    setter: 'setFloat64',\n  },\n}\n\nvar writeStringToArrayBuffer = function(str, start, end, buf, bufstart) {\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  if (bufstart == undefined) {\n    bufstart = start\n  }\n  for (var i = start; i < end; i++) {\n    buf[i - start + bufstart] = str.charCodeAt(i) & 0xff\n  }\n}\n\nvar stringToArrayBuffer = function(str, start, end) {\n  var self = this\n\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  var res = new Uint8ClampedArray(end - start)\n  writeStringToArrayBuffer(str, start, end, res, 0)\n  return res.buffer\n}\n\nvar arrayBufferToString = function(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf))\n}\n\nvar pack = function(typespec, value, littleendian) {\n  var array = new ArrayBuffer(typespec.size)\n  new DataView(array)[typespec.setter](0, value, littleendian)\n  return arrayBufferToString(array)\n}\n\nvar Pack = {\n  typemap: {\n    byname: byname,\n    byarray: {},\n  },\n  pack: pack,\n  arrayBufferToString: arrayBufferToString,\n  stringToArrayBuffer: stringToArrayBuffer,\n  writeStringToArrayBuffer: writeStringToArrayBuffer,\n}\nfor (var name in Pack.typemap.byname) {\n  var spec = Pack.typemap.byname[name]\n  spec.name = name\n  Pack.typemap.byarray[spec.array] = spec\n}\n\nexport default Pack\n","import Pack from './Pack'\n\nclass PelagosClient {\n  constructor() {\n    this.MAGIC_COOKIE = 'tmtx'\n  }\n\n  obtainTile(url, token) {\n    return new Promise(\n      function(resolve, reject) {\n        this.request = null\n        if (typeof XMLHttpRequest != 'undefined') {\n          this.request = new XMLHttpRequest()\n        } else {\n          throw 'XMLHttpRequest is disabled'\n        }\n        this.resolve = resolve\n        this.reject = reject\n        this.request.open('GET', url, true)\n        if (token) {\n          this.request.setRequestHeader('Authorization', `Bearer ${token}`)\n        }\n        this.request.responseType = 'arraybuffer'\n        this.request.onload = this.handleData.bind(this)\n        this.request.onerror = this.handleData.bind(this)\n        this.request.send(null)\n      }.bind(this)\n    )\n  }\n\n  handleData() {\n    var self = this\n    if (!this.request) {\n      return\n    }\n    if (this.error) {\n      return true\n    }\n\n    if (this.request.readyState == 4) {\n      /* HTTP reports success with a 200 status. The file protocol\n       reports success with zero. HTTP returns zero as a status\n       code for forbidden cross domain requests.\n       https://developer.mozilla.org/En/Using_XMLHttpRequest */\n      var success = this.request.status == 200 || (this.isFileUri && this.request.status == 0)\n      if (!success) {\n        this.resolve(null)\n        return\n      }\n    }\n\n    if (!this.request.response) {\n      return\n    }\n    var length = this.request.response.byteLength\n    var response = this.request.response\n    var dataView = new DataView(response)\n\n    if (length < 4 + 4) {\n      return\n    }\n    if (self.headerLen == null) {\n      var cookie = Pack.arrayBufferToString(response.slice(0, 4))\n      if (cookie != this.MAGIC_COOKIE) {\n        this.reject(\n          'Could not load ' +\n            this.url +\n            ' due to incorrect file format. Cookie: [' +\n            this.cookie +\n            ']'\n        )\n        return\n      }\n\n      self.headerLen = dataView.getInt32(4, true)\n\n      self.offset = 4 + 4\n    }\n    if (length < self.offset + self.headerLen) {\n      return\n    }\n    if (!self.headerIsLoaded) {\n      self.header = JSON.parse(\n        Pack.arrayBufferToString(response.slice(self.offset, self.offset + self.headerLen))\n      )\n      self.rowLen = 0\n      self.header.colsByName = {}\n      for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n        var col = self.header.cols[colidx]\n        col.idx = colidx\n        self.header.colsByName[col.name] = col\n        col.typespec = Pack.typemap.byname[col.type]\n\n        if (col.multiplier != undefined && col.min != undefined) {\n          col.min = col.min * col.multiplier\n        }\n        if (col.offset != undefined && col.min != undefined) {\n          col.min = col.min + col.offset\n        }\n        if (col.multiplier != undefined && col.max != undefined) {\n          col.max = col.max * col.multiplier\n        }\n        if (col.offset != undefined && col.max != undefined) {\n          col.max = col.max + col.offset\n        }\n\n        self.rowLen += col.typespec.size\n      }\n      self.offset += self.headerLen\n\n      // Add the padding to nearest 4-byte-boundary\n      self.offset += (4 - (self.headerLen % 4)) % 4\n\n      self.headerIsLoaded = true\n      if (self.header.orientation != 'rowwise' && self.header.orientation != 'columnwise') {\n        self.errorLoading({\n          orientation: self.header.orientation,\n          toString: function() {\n            return (\n              'Could not load ' +\n              this.url +\n              ' due to unsupported file orientation. Orientation: ' +\n              this.orientation +\n              '. Supported orientations: rowwise, columnwise.'\n            )\n          },\n        })\n        return true\n      }\n\n      // Empty tile, stop parsing.\n      if (!self.rowLen) {\n        self.allLoaded()\n        return true\n      }\n    }\n    if (self.header.orientation == 'rowwise') {\n      var result = {}\n      for (; self.offset + self.rowLen <= length; self.rowidx++) {\n        var row = {}\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n          var val = dataView[col.typespec.getter](self.offset, true)\n          row[col.name] = val\n          self.offset += col.typespec.size\n        }\n        // self.rowLoaded(row);\n\n        result[col.name] = row\n      }\n      if (self.rowidx == self.header.length) {\n        // self.allLoaded();\n        this.resolve(result)\n      } else {\n        // self.batchLoaded();\n      }\n    } else if (self.header.orientation == 'columnwise') {\n      var colValues = null\n      var result = {}\n      if (length >= self.offset + self.header.length * self.rowLen) {\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n\n          colValues = new (eval(col.typespec.array))(\n            response.slice(self.offset, self.offset + col.typespec.size * self.header.length)\n          )\n          self.offset += self.header.length * col.typespec.size\n\n          result[col.name] = colValues\n        }\n\n        // self.allLoaded();\n        this.resolve(result)\n        return true\n      }\n    }\n  }\n}\n\nexport default PelagosClient\n","import PropTypes from 'prop-types'\n\nexport const trackTypes = {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  type: PropTypes.oneOf(['geojson', undefined]),\n  layerTemporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  fitBoundsOnLoad: PropTypes.bool,\n}\n","import PropTypes from 'prop-types'\n\nexport const heatmapLayerTypes = {\n  id: PropTypes.string.isRequired,\n  tilesetId: PropTypes.string,\n  subtype: PropTypes.string,\n  visible: PropTypes.bool,\n  hue: PropTypes.number,\n  opacity: PropTypes.number,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      // hue overrides layer hue if set\n      hue: PropTypes.number,\n      // filterValues is a dictionary in which each key is a filterable field,\n      // and values is an array of all possible values (OR filter)\n      // ie: filterValues: { category: [5, 6] }\n      filterValues: PropTypes.object,\n    })\n  ),\n  header: PropTypes.shape({\n    endpoints: PropTypes.object,\n    isPBF: PropTypes.bool,\n    colsByName: PropTypes.object,\n    temporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    temporalExtentsLess: PropTypes.bool,\n  }).isRequired,\n  interactive: PropTypes.bool,\n}\n\nexport const basemapLayerTypes = {\n  id: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nexport const staticLayerTypes = {\n  id: PropTypes.string.isRequired,\n  // TODO MAP MODULE Is that needed and if so why\n  visible: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  highlighted: PropTypes.bool,\n  higlightedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  opacity: PropTypes.number,\n  color: PropTypes.string,\n  showLabels: PropTypes.bool,\n  interactive: PropTypes.bool,\n  filters: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  isCustom: PropTypes.bool,\n  subtype: PropTypes.oneOf([undefined, 'geojson', 'raster']),\n  url: PropTypes.string,\n  data: PropTypes.object,\n  gl: PropTypes.object,\n}\n","import PropTypes from 'prop-types'\n\nexport const popupTypes = {\n  content: PropTypes.node,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n}\n\nexport const viewportTypes = {\n  zoom: PropTypes.number,\n  center: PropTypes.arrayOf(PropTypes.number),\n}\n","export const INIT_MODULE = 'INIT_MODULE'\nexport const SET_TEMPORAL_EXTENT = 'SET_TEMPORAL_EXTENT'\nexport const SET_HIGHLIGHT_TEMPORAL_EXTENT = 'SET_HIGHLIGHT_TEMPORAL_EXTENT'\nexport const START_LOADER = 'START_LOADER'\nexport const COMPLETE_LOADER = 'COMPLETE_LOADER'\n\nexport const initModule = (props) => (dispatch) => {\n  dispatch({\n    type: INIT_MODULE,\n    payload: props,\n  })\n}\n\nexport const startLoader = (dispatch, state) => {\n  const loaderId = new Date().getTime()\n  dispatch({\n    type: START_LOADER,\n    payload: loaderId,\n  })\n  if (state.map.module.onLoadStart !== undefined) {\n    state.map.module.onLoadStart()\n  }\n  return loaderId\n}\n\nexport const completeLoader = (loaderId) => (dispatch, getState) => {\n  const state = getState()\n  const loaders = Object.assign({}, state.map.module.loaders)\n  dispatch({\n    type: COMPLETE_LOADER,\n    payload: loaderId,\n  })\n  if (!loaders.length && state.map.module.onLoadComplete !== undefined) {\n    state.map.module.onLoadComplete()\n  }\n}\n\nexport const onViewportChange = () => (dispatch, getState) => {\n  const state = getState()\n  const callback = state.map.module.onViewportChange\n\n  if (callback === undefined) {\n    return\n  }\n  const viewport = state.map.viewport\n\n  if (viewport.bounds === undefined) {\n    return\n  }\n\n  callback({\n    zoom: viewport.viewport.zoom,\n    center: [viewport.viewport.latitude, viewport.viewport.longitude],\n    bounds: viewport.bounds,\n    canZoomIn: viewport.canZoomIn,\n    canZoomOut: viewport.canZoomOut,\n    mouseLatLong: viewport.mouseLatLong,\n  })\n}\n\nexport const setTemporalExtent = (temporalExtent) => ({\n  type: SET_TEMPORAL_EXTENT,\n  payload: temporalExtent,\n})\n\nexport const setHighlightTemporalExtent = (highlightTemporalExtent) => ({\n  type: SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  payload: highlightTemporalExtent,\n})\n\nexport const closePopup = () => (dispatch, getState) => {\n  const state = getState()\n  if (state.map.module.onClosePopup !== undefined) {\n    state.map.module.onClosePopup()\n  }\n}\n","import { createSelector } from 'reselect'\nimport { getTemporalExtent } from '../module/module.selectors.js'\n\nexport const getTracksData = (state) => state.map.tracks.data\n\nconst filterGeojsonByTimerange = (geojson, { start, end }) => {\n  if (!geojson || !geojson.features) return null\n  const featuresFiltered = geojson.features.reduce((filteredFeatures, feature) => {\n    const hasTimes =\n      feature.properties.coordinateProperties.times &&\n      feature.properties.coordinateProperties.times.length > 0\n    if (hasTimes) {\n      const filtered = feature.geometry.coordinates.reduce(\n        (filteredCoordinates, coordinate, index) => {\n          const timeCoordinate = feature.properties.coordinateProperties.times[index]\n          const isInTimeline = timeCoordinate > start && timeCoordinate < end\n          if (isInTimeline) {\n            filteredCoordinates.coordinates.push(coordinate)\n            filteredCoordinates.times.push(timeCoordinate)\n          }\n          return filteredCoordinates\n        },\n        { coordinates: [], times: [] }\n      )\n      if (!filtered.coordinates.length) return filteredFeatures\n\n      const filteredFeature = {\n        ...feature,\n        geometry: {\n          ...feature.geometry,\n          coordinates: filtered.coordinates,\n        },\n        properties: {\n          ...feature.properties,\n          coordinateProperties: {\n            times: filtered.times,\n          },\n        },\n      }\n      filteredFeatures.push(filteredFeature)\n    }\n    return filteredFeatures\n  }, [])\n  const geojsonFiltered = {\n    ...geojson,\n    features: featuresFiltered,\n  }\n  return geojsonFiltered\n}\n\nexport const getTracksStyles = createSelector(\n  [getTemporalExtent, getTracksData],\n  (temporalExtent, tracks) => {\n    const filteredTracks = tracks.filter((t) => t.type === 'geojson')\n    const hasTemporalExtent = temporalExtent && temporalExtent.length > 0\n    const hasTracks = filteredTracks && filteredTracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: temporalExtent[0].getTime(),\n      end: temporalExtent[1].getTime(),\n    }\n    const styles = filteredTracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}Track`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}Lines`,\n              source,\n              type: 'line',\n              layout: {},\n              paint: {\n                'line-width': 1,\n                'line-color': track.color,\n              },\n            },\n            {\n              id: `${track.id}Points`,\n              source,\n              type: 'circle',\n              filter: ['match', ['geometry-type'], ['', 'Point'], true, false],\n              layout: {},\n              paint: {\n                'circle-radius': 4,\n                'circle-color': track.color,\n              },\n            },\n          ],\n        }\n        return {\n          sources: {\n            ...acc.sources,\n            ...style.sources,\n          },\n          layers: [...acc.layers, ...style.layers],\n        }\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n","export const getTemporalExtent = (state) => state.map.module.temporalExtent\n","export const GL_TRANSPARENT = 'rgba(0,0,0,0)'\n\nexport const TRANSITION_TYPE = {\n  ZOOM: 'ZOOM',\n}\n\nexport const ENCOUNTERS = 'Encounters'\n\nexport const BRUSH_RENDERING_STYLE = {\n  NORMAL: 0,\n  BULLSEYE: 2,\n}\n\nexport const BRUSH_ZOOM_RENDERING_STYLE = {\n  RADIAL_GRADIENT: 0,\n  CIRCLE: 1,\n}\n\nexport const POLYGON_LAYERS_AREA = 'POLYGON_LAYERS_AREA'\n\nexport const CUSTOM_LAYERS_SUBTYPES = {\n  geojson: 'geojson',\n  raster: 'raster',\n}\n","import Pbf from 'pbf'\nimport { VectorTile } from '@mapbox/vector-tile'\n\nexport default (tileUrl, token) => {\n  const vectorTilePromise = fetch(tileUrl, {\n    headers: token\n      ? {\n          Authorization: `Bearer ${token}`,\n        }\n      : {},\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`could not load tile ${tileUrl}`)\n      }\n      return response.blob().then((blob) => {\n        const reader = new FileReader()\n        return new Promise((resolve) => {\n          reader.addEventListener('loadend', () => {\n            // reader.result contains the contents of blob as a typed array\n            // blob.type === 'application/x-protobuf'\n            const pbf = new Pbf(reader.result)\n            const vectorTile = new VectorTile(pbf)\n            return resolve(vectorTile)\n          })\n          reader.readAsArrayBuffer(blob)\n        })\n      })\n    })\n    .catch((e) => {\n      console.warn(e)\n    })\n  return vectorTilePromise\n}\n","import pull from 'lodash/pull'\nimport uniq from 'lodash/uniq'\nimport sumBy from 'lodash/sumBy'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport convert from '@globalfishingwatch/map-convert'\nimport buildEndpoint from './buildEndpoint'\nimport PelagosClient from '../lib/pelagosClient'\n\nimport getPBFTile from './getPBFTile'\n\n/**\n * Generates the URLs to load vessel track data for a tile\n *\n * @param {string} tilesetUrl       the tileset base URL\n * @param {array} temporalExtents   all tileset temporal extents\n * @param {object} params           - seriesgroup: a seriesgroup id, used for tracks loading\n *                                  - tileCoordinates: this tiles tile coordinates (zoom, x, y). Will default to 0,0,0\n *                                  - temporalExtentsIndices: restrict to these temporalExtents indices\n * @returns {Array}                 an array of URLs for this tile\n */\nconst getTemporalTileURLs = (urlTemplate, temporalExtents, params) => {\n  const urls = []\n\n  ;(temporalExtents || [null]).forEach((extent, index) => {\n    const urlParams = {\n      id: params.seriesgroup,\n    }\n    if (extent !== null && params.temporalExtentsLess !== true) {\n      urlParams.startTimeISO = new Date(extent[0]).toISOString()\n      urlParams.endTimeISO = new Date(extent[1]).toISOString()\n    }\n    if (params.tileCoordinates) {\n      urlParams.x = params.tileCoordinates.x\n      urlParams.y = params.tileCoordinates.y\n      urlParams.z = params.tileCoordinates.zoom\n    }\n\n    const url = buildEndpoint(urlTemplate, urlParams)\n\n    if (\n      params.temporalExtentsLess === true ||\n      !params.temporalExtentsIndices ||\n      params.temporalExtentsIndices.indexOf(index) > -1\n    ) {\n      urls.push(url)\n    }\n  })\n  return urls\n}\n\n/**\n * See getTemporalTileURLs.\n */\nexport const getTilePromises = (tilesetUrl, token, temporalExtents, params) => {\n  const promises = []\n  const urls = getTemporalTileURLs(tilesetUrl, temporalExtents, params)\n  for (let urlIndex = 0, length = urls.length; urlIndex < length; urlIndex++) {\n    if (params.isPBF === true) {\n      promises.push(getPBFTile(urls[urlIndex], token))\n    } else {\n      promises.push(new PelagosClient().obtainTile(urls[urlIndex], token))\n    }\n  }\n\n  return promises\n}\n\nexport const getCleanVectorArrays = (rawTileData) =>\n  rawTileData.filter((vectorArray) => vectorArray !== null)\n\n/**\n * As data will come in multiple arrays (1 per API query/year basically), they need to be merged here\n *\n * @param cleanVectorArrays an array of objects containing a Float32Array for each vessel param (lat, lon, weight...)\n * @param columns the keys to pick on the vectorArrays (lat, lon, weight, etc)\n * @returns an object containing a Float32Array for each API_RETURNED_KEY (lat, lon, weight, etc)\n */\nexport const groupData = (cleanVectorArrays, columns) => {\n  const data = {}\n\n  const totalVectorArraysLength = sumBy(cleanVectorArrays, (a) => a.longitude.length)\n\n  const filteredColumns = columns.filter((column) => {\n    if (cleanVectorArrays[0] && cleanVectorArrays[0][column] === undefined) {\n      console.warn(`column ${column} is present in layerHeader.colsByName but not in tile data`)\n      return false\n    }\n    return true\n  })\n\n  filteredColumns.forEach((key) => {\n    data[key] = new Float32Array(totalVectorArraysLength)\n  })\n\n  let currentArray\n  let cumulatedOffsets = 0\n\n  const appendValues = (key) => {\n    data[key].set(currentArray[key], cumulatedOffsets)\n  }\n\n  for (let index = 0, length = cleanVectorArrays.length; index < length; index++) {\n    currentArray = cleanVectorArrays[index]\n    filteredColumns.forEach(appendValues)\n    cumulatedOffsets += currentArray.longitude.length\n  }\n  return data\n}\n\n/**\n * Converts Vector Array data to Playback format and stores it locally.\n * The data structure is an array indexed by a time unit, ie a set of points every day\n * This preprocessing step allows playback to play smoothly as the necessary conversions and data structure set up\n * is done once (after tile has been loaded)\n *\n * @param data the source data before indexing by day, an object containing\n *  - a vector (Float32Array) for each header's column in the case of Pelagos tiles\n *  - an array of points int the case of PBF tiles\n * @param colsByName the columns present on the dataset, determined by tileset headers\n * @param tileCoordinates x, y, z\n * @param isPBF bool whether data is a PBF vector tile (true) or a Pelagos tile (false)\n * @param prevPlaybackData an optional previously loaded tilePlaybackData array (when adding time range)\n */\nexport const getTilePlaybackData = (data, colsByName, tileCoordinates, isPBF, prevPlaybackData) => {\n  const tilePlaybackData = prevPlaybackData === undefined ? [] : prevPlaybackData\n\n  const zoom = tileCoordinates.zoom\n  const zoomFactorRadius = convert.getZoomFactorRadius(zoom)\n  const zoomFactorRadiusRenderingMode = convert.getZoomFactorRadiusRenderingMode(zoom)\n  const zoomFactorOpacity = convert.getZoomFactorOpacity(zoom)\n\n  // store all available columns as object keys\n  const columns = {}\n  const columnsArr = Object.keys(colsByName)\n  columnsArr.forEach((c) => {\n    columns[c] = true\n  })\n\n  // columns specified by layer header columns\n  let storedColumns = [].concat(columnsArr)\n  if (columns.sigma === true) storedColumns.push('radius')\n  if (columns.weight === true) storedColumns.push('opacity')\n  if (columns.longitude === true) {\n    storedColumns.push('worldX')\n    storedColumns.push('worldY')\n  }\n  if (columns.id === true) {\n    storedColumns.push('series')\n  }\n\n  // omit values that will be transformed before being stored to playback data (ie lat -> worldY)\n  // only if hidden: true flag is set on header\n  ;['latitude', 'longitude', 'datetime'].forEach((col) => {\n    if (colsByName[col] === undefined || colsByName[col].hidden === true) {\n      pull(storedColumns, col)\n    }\n  })\n  // always pull sigma and weight\n  pull(storedColumns, 'sigma', 'weight')\n  storedColumns = uniq(storedColumns)\n\n  const numPoints = isPBF === true ? data.length : data.latitude.length\n\n  for (let index = 0, length = numPoints; index < length; index++) {\n    let point\n    if (isPBF === true) {\n      const feature = data.feature(index)\n      point = feature.properties\n      // WARNING: toGeoJSON is expensive. Avoid using raw coordinates in PBF tiles, pregenerate world coords\n      // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n      const geom = feature.toGeoJSON(tileCoordinates.x, tileCoordinates.y, zoom).geometry\n        .coordinates\n      point.longitude = geom[0]\n      point.latitude = geom[1]\n    } else {\n      point = {}\n      columnsArr.forEach((c) => {\n        point[c] = data[c][index]\n      })\n    }\n\n    const timeIndex = columns.timeIndex\n      ? point.timeIndex\n      : convert.getOffsetedTimeAtPrecision(point.datetime)\n\n    // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n    const [worldX, worldY] = lngLatToWorld([point.longitude, point.latitude], 1)\n    point.worldX = worldX\n    point.worldY = worldY\n\n    if (columns.sigma) {\n      point.radius = convert.sigmaToRadius(\n        point.sigma,\n        zoomFactorRadiusRenderingMode,\n        zoomFactorRadius\n      )\n    }\n    if (columns.weight) {\n      point.opacity = convert.weightToOpacity(point.weight, zoomFactorOpacity)\n    }\n    if (columns.id) {\n      point.series = point.id\n    }\n\n    if (!tilePlaybackData[timeIndex]) {\n      const frame = {}\n      storedColumns.forEach((column) => {\n        frame[column] = [point[column]]\n      })\n      tilePlaybackData[timeIndex] = frame\n      continue\n    }\n    const frame = tilePlaybackData[timeIndex]\n    storedColumns.forEach((column) => {\n      frame[column].push(point[column])\n    })\n  }\n  return tilePlaybackData\n}\n\nexport const addTracksPointsRenderingData = (data) => {\n  data.hasFishing = []\n  data.worldX = []\n  data.worldY = []\n\n  for (let index = 0, length = data.weight.length; index < length; index++) {\n    const [worldX, worldY] = lngLatToWorld([data.longitude[index], data.latitude[index]], 1)\n    data.worldX[index] = worldX\n    data.worldY[index] = worldY\n    data.hasFishing[index] = data.weight[index] > 0\n  }\n  return data\n}\n\n/**\n * A simplified version of getTilePlaybackData for tracks\n * Converts Vector Array data to Playback format (organized by days) and stores it locally\n * @param vectorArray the source data before indexing by day\n */\nexport const getTracksPlaybackData = (vectorArray) => {\n  const playbackData = []\n\n  for (let index = 0, length = vectorArray.series.length; index < length; index++) {\n    const datetime = vectorArray.datetime[index]\n    const timeIndex = convert.getOffsetedTimeAtPrecision(datetime)\n\n    if (!playbackData[timeIndex]) {\n      const frame = {\n        worldX: [vectorArray.worldX[index]],\n        worldY: [vectorArray.worldY[index]],\n        series: [vectorArray.series[index]],\n        hasFishing: [vectorArray.hasFishing[index]],\n      }\n      playbackData[timeIndex] = frame\n      continue\n    }\n    const frame = playbackData[timeIndex]\n    frame.worldX.push(vectorArray.worldX[index])\n    frame.worldY.push(vectorArray.worldY[index])\n    frame.series.push(vectorArray.series[index])\n    frame.hasFishing.push(vectorArray.hasFishing[index])\n  }\n  return playbackData\n}\n\nexport const vesselSatisfiesFilters = (frame, index, filterValues) => {\n  const satisfiesFilters = Object.keys(filterValues).every((field) => {\n    if (frame[field] === undefined) {\n      // this field is not available on this layer. This can happen in an edge case described\n      // here: https://github.com/GlobalFishingWatch/map-client/issues/661#issuecomment-334496469\n      return false\n    }\n    return filterValues[field].indexOf(frame[field][index]) > -1\n  })\n  return satisfiesFilters\n}\n\nconst vesselSatisfiesAllFilters = (frame, index, filters) => {\n  const satisfiesAllFilters = filters\n    .filter((f) => f.pass !== true)\n    .some((filter) => vesselSatisfiesFilters(frame, index, filter.filterValues))\n  return satisfiesAllFilters\n}\n\nexport const selectVesselsAt = (tileData, tileQuery, startIndex, endIndex, currentFilters) => {\n  const vessels = []\n\n  const { worldX, worldY, toleranceRadiusInWorldUnits } = tileQuery\n\n  for (let f = startIndex; f < endIndex; f++) {\n    const frame = tileData[f]\n    if (frame === undefined) continue\n    for (let i = 0; i < frame.worldX.length; i++) {\n      const wx = frame.worldX[i]\n      const wy = frame.worldY[i]\n\n      if (\n        (!currentFilters.length || vesselSatisfiesAllFilters(frame, i, currentFilters)) &&\n        wx >= worldX - toleranceRadiusInWorldUnits &&\n        wx <= worldX + toleranceRadiusInWorldUnits &&\n        wy >= worldY - toleranceRadiusInWorldUnits &&\n        wy <= worldY + toleranceRadiusInWorldUnits\n      ) {\n        const vessel = {}\n\n        Object.keys(frame).forEach((key) => {\n          vessel[key] = frame[key][i]\n        })\n        vessels.push(vessel)\n      }\n    }\n  }\n  return vessels\n}\n\n/*\nexport const getHistogram = (tiles, propName = 'weight') => {\n  let data = tiles\n    .filter(tile => tile.ready)\n    .map(tile => tile.data\n      .map(frame => frame[propName]));\n  data = flattenDeep(data);\n  if (data.length) {\n    const bins = d3.histogram().thresholds(d3.thresholdScott)(data);\n    const x = d3.scaleLinear().domain([0, d3.max(bins, d => d.length)]).range([0, 50]);\n    console.table(bins.filter(bin => bin.length).map((bin) => {\n      const binMin = d3.min(bin).toLocaleString({ maximumFractionDigits: 2 });\n      const binMax = d3.max(bin).toLocaleString({ maximumFractionDigits: 2 });\n      return {\n        range: [binMin, binMax].join('﹣'),\n        bars: Array(Math.round(x(bin.length))).join('█'),\n        num: bin.length\n      };\n    }));\n  }\n};\n*/\n","import template from 'lodash/template'\nimport templateSettings from 'lodash/templateSettings'\n\nexport default (urlTemplate, urlParams) => {\n  templateSettings.interpolate = /{{([\\s\\S]+?)}}/g\n  const urlTemplateCompiled = template(urlTemplate)\n  return urlTemplateCompiled(urlParams)\n}\n","// Application settings\nexport const TIMELINE_STEP = 24 * 60 * 60 * 1000 // 1 day\nexport const MIN_FRAME_LENGTH_MS = TIMELINE_STEP // 1 day\n\n// vessels rendering\n// from this zoom level and above, render using circle style instead of heatmap\nexport const VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD = 6\n// the base radius, it can only be scaled down by the radius factor calculated on the dataset\nexport const VESSELS_BASE_RADIUS = 8\n// in heatmap style, defines how 'blurry' a point will look. Higher = less blur\nexport const VESSELS_HEATMAP_BLUR_FACTOR = 0.15\n\nexport const ACTIVITY_HIGHLIGHT_HUE = 312\n\nexport const VESSELS_HEATMAP_DIMMING_ALPHA = 0.5\n\nexport const TRACKS_DOTS_STYLE_ZOOM_THRESHOLD = 2\n\nexport const MAX_SPRITES_PER_LAYER = 200000\n\n// interaction\n// radius of vessels lookup in pixels,\n// ie how large the clicked region should be for including vessels\nexport const VESSEL_CLICK_TOLERANCE_PX = 10\n\nexport const CLUSTER_CLICK_ZOOM_INCREMENT = 1\n\nexport const MIN_ZOOM_LEVEL = 1\n// user can zoom up to this z level, but it doesn't guarantee availability of tiles\nexport const MAX_ZOOM_LEVEL = 14\n\n// data\n// Limit tile loading for activity layers up to this z level.\n// Beyond, layer is still displayed but with coarse data from the lower zoom level\nexport const ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING = 10\n\n// Sets what should be the discrete zoom level to load tiles, from a non-discrete\n// viewport zoom values. For instance, a values of 0.5 will load z 3 with a viewport\n// z of 2 (ceiling of 2 + 0.5)\n// this has a direct impact on the number of points displayed on the map, thus on the\n// performance of the app.\nexport const TILES_LOAD_ZOOM_OFFSET = 0.5\n\nexport const STATIC_LAYERS_CARTO_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map?config=$MAPCONFIG'\nexport const STATIC_LAYERS_CARTO_TILES_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map/$LAYERGROUPID/{z}/{x}/{y}.mvt'\n","import tilecover from '@mapbox/tile-cover/index'\nimport debounce from 'lodash/debounce'\nimport { PerspectiveMercatorViewport } from 'viewport-mercator-project'\nimport { ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING, TILES_LOAD_ZOOM_OFFSET } from '../config'\nimport {\n  getTile,\n  releaseTiles,\n  highlightVesselFromHeatmap,\n  updateLoadedTiles,\n} from './heatmap.actions'\n\nexport const SET_CURRENTLY_VISIBLE_TILES = 'SET_CURRENTLY_VISIBLE_TILES'\nexport const SET_CURRENTLY_LOADED_TILES = 'SET_CURRENTLY_LOADED_TILES'\nexport const SET_CURRENTLY_SWAPPED_TILE_UIDS = 'SET_CURRENTLY_SWAPPED_TILE_UIDS'\nexport const MARK_TILES_UIDS_AS_LOADED = 'MARK_TILES_UIDS_AS_LOADED'\nexport const RELEASE_MARKED_TILES_UIDS = 'RELEASE_MARKED_TILES_UIDS'\n\n// restrict tilecover to a single zoom level\n// could be customized to load less or more detailed tiles\nconst getTilecoverLimits = (viewportZoom) => {\n  let zoom = Math.ceil(viewportZoom + TILES_LOAD_ZOOM_OFFSET)\n  let tilesAvailable = true\n  if (zoom > ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING) {\n    zoom = ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING\n    tilesAvailable = false\n  }\n  return {\n    min_zoom: zoom,\n    max_zoom: zoom,\n    tilesAvailable,\n  }\n}\n\nconst flushToReleaseTiles = () => (dispatch, getState) => {\n  const state = getState()\n  const currentToLoadTileUids = state.map.heatmapTiles.currentToLoadTileUids\n  // console.log('Tiles left to load: ', currentToLoadTileUids);\n\n  // Tiles are released only when all to-load tiles have finished loading\n  // this is to ensure smooth visual transitions between zoom levels\n  if (!currentToLoadTileUids.length) {\n    const currentTilesToReleaseUids = state.map.heatmapTiles.currentToReleaseTileUids\n    // console.log('no more tiles to load, releasing ', currentTilesToReleaseUids);\n    dispatch(releaseTiles(currentTilesToReleaseUids))\n    dispatch({\n      type: RELEASE_MARKED_TILES_UIDS,\n    })\n  }\n}\n\nexport const markTileAsLoaded = (tileUids) => (dispatch) => {\n  dispatch({\n    type: MARK_TILES_UIDS_AS_LOADED,\n    payload: tileUids,\n  })\n  // console.log(tileUids, 'have finished loading');\n  dispatch(flushToReleaseTiles())\n}\n\nconst flushTileState = (forceLoadingAllVisibleTiles = false) => (dispatch, getState) => {\n  const state = getState()\n  const currentVisibleTiles = state.map.heatmapTiles.currentVisibleTiles\n  let tilesToLoad = []\n  const tilesToReleaseUids = []\n\n  if (forceLoadingAllVisibleTiles === true) {\n    tilesToLoad = currentVisibleTiles\n  } else {\n    const currentLoadedTiles = state.map.heatmapTiles.currentLoadedTiles\n\n    currentVisibleTiles.forEach((visibleTile) => {\n      if (currentLoadedTiles.find((t) => t.uid === visibleTile.uid) === undefined) {\n        tilesToLoad.push(visibleTile)\n      }\n    })\n\n    currentLoadedTiles.forEach((loadedTile) => {\n      if (currentVisibleTiles.find((t) => t.uid === loadedTile.uid) === undefined) {\n        tilesToReleaseUids.push(loadedTile.uid)\n      }\n    })\n  }\n\n  const tilesToLoadUids = tilesToLoad.map((t) => t.uid)\n  // console.log('force loading:', forceLoadingAllVisibleTiles)\n  // console.log('visible', currentVisibleTiles.map(t => t.uid))\n  // console.log('load', tilesToLoadUids)\n  // console.log('release', tilesToReleaseUids)\n  // console.log('----')\n\n  tilesToLoad.forEach((tile) => {\n    dispatch(getTile(tile))\n  })\n  dispatch({\n    type: SET_CURRENTLY_LOADED_TILES,\n    payload: currentVisibleTiles,\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_SWAPPED_TILE_UIDS,\n    payload: {\n      tilesToLoadUids,\n      tilesToReleaseUids,\n    },\n  })\n\n  dispatch(updateLoadedTiles())\n  dispatch(flushToReleaseTiles())\n}\n\nconst _debouncedFlushState = (dispatch) => {\n  dispatch(flushTileState())\n}\nconst debouncedFlushState = debounce(_debouncedFlushState, 500)\n\nexport const updateHeatmapTilesFromViewport = (forceLoadingAllVisibleTiles = false) => (\n  dispatch,\n  getState\n) => {\n  // if in transition, skip loading/releasing\n  // else\n  //   collect all tiles in viewport\n  //   save them to reducer: currentVisibleTiles\n  // if not zooming: flush immediately\n  //   if forceLoadingAllVisiblelTiles\n  //     get tiles from currentVisibleTiles\n  //   else\n  //     get tiles from currentVisibleTiles\n  //     make delta with currentLoadedTiles\n  //     get tiles from delta+\n  //     release tiles from delta-\n  //   save to reducer: currentVisibleTiles -> currentLoadedTiles\n  // if zooming: debounced flush to avoid \"tile spam\"\n  const mapViewport = getState().map.viewport\n  const viewport = mapViewport.viewport\n\n  // do not allow any tile update during transitions (currently only zoom)\n  // wait for the end of the transition to look at viewport and load matching tiles\n  if (mapViewport.currentTransition !== null) {\n    return\n  }\n\n  // instanciate a viewport instance to get lat/lon from screen top left/ bottom right bounds\n  const boundsViewport = new PerspectiveMercatorViewport(viewport)\n  const bounds = [\n    boundsViewport.unproject([0, 0]),\n    boundsViewport.unproject([viewport.width, viewport.height]),\n  ]\n\n  const [wn, es] = bounds\n  const [w, s, e, n] = [wn[0], es[1], es[0], wn[1]]\n  const boundsPolygonsCoordinates = []\n\n  const limits = getTilecoverLimits(viewport.zoom)\n  if (limits.tilesAvailable === false && forceLoadingAllVisibleTiles !== true) {\n    return\n  }\n\n  if (e > 180 || w < -180) {\n    // deal with the antimeridian situation by splitting the bounds polygon into two polygons\n    const w1 = e > 180 ? w : w + 360\n    const e1 = 180 - 0.001\n    const w2 = -180\n    const e2 = e > 180 ? e - 360 : e\n    boundsPolygonsCoordinates.push([[[w1, n], [e1, n], [e1, s], [w1, s], [w1, n]]])\n    boundsPolygonsCoordinates.push([[[w2, n], [e2, n], [e2, s], [w2, s], [w2, n]]])\n  } else {\n    boundsPolygonsCoordinates.push([[[w, n], [e, n], [e, s], [w, s], [w, n]]])\n  }\n\n  const geom = {\n    type: 'MultiPolygon',\n    coordinates: boundsPolygonsCoordinates,\n  }\n\n  // using tilecover, get xyz tile coords as well as quadkey indexes (named uid through the app)\n  const viewportTilesCoords = tilecover.tiles(geom, limits)\n  const viewportTilesIndexes = tilecover.indexes(geom, limits)\n  const visibleTiles = []\n\n  viewportTilesCoords.forEach((coords, i) => {\n    const uid = viewportTilesIndexes[i]\n    const zoom = coords[2]\n    if (zoom >= 2) {\n      visibleTiles.push({\n        tileCoordinates: {\n          x: coords[0],\n          y: coords[1],\n          zoom: coords[2],\n        },\n        uid,\n      })\n    }\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_VISIBLE_TILES,\n    payload: visibleTiles,\n  })\n\n  const isMouseWheelZooming = mapViewport.prevZoom !== viewport.zoom\n\n  if (isMouseWheelZooming === false) {\n    dispatch(flushTileState(forceLoadingAllVisibleTiles))\n  } else {\n    debouncedFlushState(dispatch)\n  }\n}\n\nexport const queryHeatmapVessels = (coords, temporalExtentIndexes) => (dispatch, getState) => {\n  // use tilecover to get what tile quadkey/uid \"belongs\" to the point\n  const geom = {\n    type: 'Point',\n    coordinates: [coords.longitude, coords.latitude],\n  }\n  const zoom = getState().map.viewport.viewport.zoom\n\n  // get quadkey for tile at current zoom level, but also neighbouring zoom levels,\n  // in case current zoom level tiles has not been loaded yet\n  const uids = [zoom, zoom - 1, zoom + 1]\n    .map((z) => getTilecoverLimits(z))\n    .map((limits) => tilecover.indexes(geom, limits))\n    .map((indexes) => indexes[0])\n\n  const query = {\n    ...coords,\n    uids,\n  }\n\n  // console.log(query);\n  dispatch(highlightVesselFromHeatmap(query, temporalExtentIndexes))\n}\n","import difference from 'lodash/difference'\nimport uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  getTilePlaybackData,\n  selectVesselsAt,\n} from '../utils/heatmapTileData'\nimport { ENCOUNTERS } from '../constants'\nimport { markTileAsLoaded } from './heatmapTiles.actions'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_HEATMAP_LAYER = 'ADD_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_STYLE = 'UPDATE_HEATMAP_LAYER_STYLE'\nexport const ADD_REFERENCE_TILE = 'ADD_REFERENCE_TILE'\nexport const HIGHLIGHT_VESSELS = 'HIGHLIGHT_VESSELS'\nexport const INIT_HEATMAP_LAYERS = 'INIT_HEATMAP_LAYERS'\nexport const REMOVE_HEATMAP_LAYER = 'REMOVE_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES =\n  'UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES'\nexport const UPDATE_HEATMAP_TILE = 'UPDATE_HEATMAP_TILE'\nexport const RELEASE_HEATMAP_TILES = 'RELEASE_HEATMAP_TILES'\nexport const UPDATE_LOADED_TILES = 'UPDATE_LOADED_TILES'\nexport const HIGHLIGHT_CLICKED_VESSEL = 'HIGHLIGHT_CLICKED_VESSEL'\nexport const CLEAR_HIGHLIGHT_CLICKED_VESSEL = 'CLEAR_HIGHLIGHT_CLICKED_VESSEL'\n\n/**\n * getTemporalExtentsVisibleIndices - Compares timebar outer extent with temporal extents present on the layer header\n * @param  {array} loadTemporalExtent Current timebar outer extent\n * @param  {array} layerTemporalExtents Temporal extent present on the layer's header (an array of extent arrays)\n * @return {array}                    Indices of the layer's temporal extents that should be visible\n */\nfunction getTemporalExtentsVisibleIndices(loadTemporalExtent, layerTemporalExtents) {\n  const currentExtentStart = loadTemporalExtent[0].getTime()\n  const currentExtentEnd = loadTemporalExtent[1].getTime()\n  const indices = []\n  layerTemporalExtents.forEach((temporalExtent, index) => {\n    const temporalExtentStart = temporalExtent[0]\n    const temporalExtentEnd = temporalExtent[1]\n    if (temporalExtentEnd >= currentExtentStart && temporalExtentStart <= currentExtentEnd) {\n      indices.push(index)\n    }\n  })\n  return indices\n}\n\n/**\n * loadLayerTile - loads an heatmap tile.\n *\n * @param  {string} layerId              layer id\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {string} token                the user's token\n * @param  {array} temporalExtentsIndices which of the temporal extents from  temporalExtents should be loaded\n * @param  {string} urls                 tile endpoints provided by header\n * @param  {array} temporalExtents       all of the layer's header temporal extents\n * @param  {bool} temporalExtentsLess    true = don't try to load different tiles based on current time extent\n * @param  {bool} isPBF                  true = read tile as MVT + PBF tile, rather than using Pelagos client\n * @return {Promise}                     a Promise that will be resolved when tile is loaded\n */\nfunction loadLayerTile(\n  layerId,\n  tileCoordinates,\n  token,\n  temporalExtentsIndices,\n  { url, temporalExtents, temporalExtentsLess, isPBF }\n) {\n  // console.log('loadLayerTile', layerId, tileCoordinates, temporalExtentsIndices)\n  if (url === undefined) {\n    throw new Error('URL/endpoints object is not available on this tilesets header')\n  }\n  const pelagosPromises = getTilePromises(url, token, temporalExtents, {\n    tileCoordinates,\n    temporalExtentsIndices,\n    temporalExtentsLess,\n    isPBF,\n  })\n  const allLayerPromises = Promise.all(pelagosPromises)\n\n  const layerTilePromise = new Promise((resolve) => {\n    allLayerPromises.then((rawTileData) => {\n      resolve({\n        loadedLayerId: layerId,\n        rawTileData,\n      })\n    })\n  })\n\n  return layerTilePromise\n}\n\n/**\n * parseLayerTile - parses an heatmap tile to a playback-ready format.\n *\n * @param  {Object} rawTileData          the raw tile data, loaded either from the pelagos client or as a MVT/PBF vector tile\n * @param  {array} colsByName            names of the columns present in the raw tiles that need to be included in the final playback data\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {array} prevPlaybackData      (optional) in case some time extent was already loaded for this tile, append to this data\n * @return {Object}                      playback-ready merged data\n */\nfunction parseLayerTile(rawTileData, colsByName, isPBF, tileCoordinates, prevPlaybackData) {\n  let data\n  if (isPBF === true) {\n    if (\n      rawTileData === undefined ||\n      !rawTileData.length ||\n      rawTileData[0] === undefined ||\n      !Object.keys(rawTileData[0].layers).length\n    ) {\n      return []\n    }\n    data = rawTileData[0].layers.points\n  } else {\n    const cleanVectorArrays = getCleanVectorArrays(rawTileData)\n    data = groupData(cleanVectorArrays, Object.keys(colsByName))\n    if (Object.keys(data).length === 0) {\n      return []\n    }\n  }\n  const playbackData = getTilePlaybackData(\n    data,\n    colsByName,\n    tileCoordinates,\n    isPBF,\n    prevPlaybackData\n  )\n  return playbackData\n}\n\n/**\n * getTiles - loads a bunch of heatmap tiles\n * @param  {array} layerIds                 list of layer Ids that need to be loaded for this/these tiles\n * @param  {array} referenceTiles           list of reference tiles (tile data regardless of layer) that need to be loaded\n * @param  {object} newTemporalExtentsToLoad (optional) a dict (layerId is the key) of temporal extents\n * indices that should be appended to existing data\n */\nfunction getTiles(layerIds, referenceTiles, newTemporalExtentsToLoad = undefined) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state)\n    const token = state.map.module.token\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const tilesByLayer = {}\n    layerIds.forEach((id) => {\n      tilesByLayer[id] = [...heatmapLayers[id].tiles]\n    })\n    const allPromises = []\n\n    layerIds.forEach((layerId) => {\n      const heatmapLayerHeader = heatmapLayers[layerId].header\n      const { temporalExtents, temporalExtentsLess, isPBF, colsByName } = { ...heatmapLayerHeader }\n      const url = heatmapLayerHeader.endpoints.tiles\n\n      referenceTiles.forEach((referenceTile) => {\n        // check if tile does not already exist first\n        let tile = tilesByLayer[layerId].find((t) => t.uid === referenceTile.uid)\n        if (!tile) {\n          // console.log('create tile ', referenceTile.uid)\n          tile = {\n            uid: referenceTile.uid,\n            temporalExtentsIndicesLoaded: [],\n          }\n          tilesByLayer[layerId].push(tile)\n        } else {\n          // console.log('found tile', referenceTile.uid)\n        }\n\n        const queriedTemporalExtentsIndices =\n          newTemporalExtentsToLoad === undefined\n            ? heatmapLayers[layerId].visibleTemporalExtentsIndices\n            : newTemporalExtentsToLoad[layerId]\n\n        const temporalExtentsIndicesToLoad = difference(\n          queriedTemporalExtentsIndices,\n          tile.temporalExtentsIndicesLoaded\n        )\n\n        const tilePromise = loadLayerTile(\n          layerId,\n          referenceTile.tileCoordinates,\n          token,\n          temporalExtentsIndicesToLoad,\n          {\n            url,\n            temporalExtents,\n            temporalExtentsLess,\n            isPBF,\n          }\n        )\n\n        allPromises.push(tilePromise)\n\n        tilePromise.then(({ loadedLayerId, rawTileData }) => {\n          tile.temporalExtentsIndicesLoaded = uniq(\n            tile.temporalExtentsIndicesLoaded.concat(temporalExtentsIndicesToLoad)\n          )\n          tile.data = parseLayerTile(\n            rawTileData,\n            colsByName,\n            isPBF,\n            referenceTile.tileCoordinates,\n            tile.data\n          )\n\n          dispatch({\n            type: UPDATE_HEATMAP_TILE,\n            payload: {\n              layerId: loadedLayerId,\n              tile,\n            },\n          })\n        })\n      })\n    })\n\n    Promise.all(allPromises).then(() => {\n      dispatch(completeLoader(loaderID))\n      dispatch(markTileAsLoaded(referenceTiles.map((tile) => tile.uid)))\n    })\n  }\n}\n\n/**\n * getTile - This action is emitted when a new tile is queried from panning or zooming the map\n * This will load a tile for all currently visible heatmap layers\n *\n * @param  {object} referenceTile a reference tile containing xyz coords and uid\n */\nexport function getTile(referenceTile) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_REFERENCE_TILE,\n      payload: referenceTile,\n    })\n    const visibleHeatmapLayers = getState().map.heatmap.heatmapLayers\n    const visibleHeatmapLayersIds = Object.keys(visibleHeatmapLayers).filter(\n      (id) => visibleHeatmapLayers[id].visible === true\n    )\n\n    if (visibleHeatmapLayersIds.length) {\n      dispatch(getTiles(visibleHeatmapLayersIds, [referenceTile]))\n    }\n  }\n}\n\n/**\n * releaseTiles - This action is emitted when an existing tile is removed from panning or zooming the map\n * @param  {array} uids tile ref uids to release\n */\nexport const releaseTiles = (uids) => ({\n  type: RELEASE_HEATMAP_TILES,\n  payload: uids,\n})\n\nexport const updateLoadedTiles = () => ({\n  type: UPDATE_LOADED_TILES,\n})\n\n// triggered when a layer is added or set to visible\nfunction loadAllTilesForLayer(layerId) {\n  return (dispatch, getState) => {\n    //                current layer, all reference tiles\n    const referenceTiles = getState().map.heatmap.referenceTiles\n    dispatch(getTiles([layerId], referenceTiles))\n  }\n}\n\nexport const addHeatmapLayer = (layer, loadTemporalExtent) => (dispatch) => {\n  const layerTemporalExtents = layer.header.temporalExtents\n  dispatch({\n    type: ADD_HEATMAP_LAYER,\n    payload: {\n      ...layer,\n      // initially attach which of the temporal extents indices are visible with initial outerExtent\n      visibleTemporalExtentsIndices: getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        layerTemporalExtents\n      ),\n    },\n  })\n\n  if (layer.visible === true) {\n    dispatch(loadAllTilesForLayer(layer.id))\n  }\n}\n\nexport const removeHeatmapLayer = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_HEATMAP_LAYER,\n    payload: {\n      id,\n    },\n  })\n}\n\n/**\n * updateLayerLoadTemporalExtents - when outer time extent changes, checks if more tiles needs to be loaded\n * by comparing the outer time range with the temporalExtent already loaded on each layer.\n * @param  {array} loadTemporalExtent Current app-wide extent of tiles that need to load, expressed\n * as an array of two dates\n */\nexport function updateLayerLoadTemporalExtents(loadTemporalExtent) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const indicesToAddByLayer = {}\n    Object.keys(heatmapLayers).forEach((layerId) => {\n      const heatmapLayer = heatmapLayers[layerId]\n      const temporalExtents = heatmapLayer.header.temporalExtents\n      const oldVisibleTemporalExtentsIndices = heatmapLayer.visibleTemporalExtentsIndices\n      const newVisibleTemporalExtentsIndices = getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        temporalExtents\n      )\n      const indicesAdded = difference(\n        newVisibleTemporalExtentsIndices,\n        oldVisibleTemporalExtentsIndices\n      )\n\n      if (indicesAdded.length) {\n        // add new loaded indices to heatmap layer if applicable\n        indicesToAddByLayer[layerId] = indicesAdded\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n          payload: {\n            layerId,\n            indicesAdded,\n          },\n        })\n      }\n    })\n\n    // getTiles with indices diff\n    const layerIdsWithIndicesToAdd = Object.keys(indicesToAddByLayer)\n    if (layerIdsWithIndicesToAdd.length) {\n      dispatch(\n        getTiles(layerIdsWithIndicesToAdd, state.map.heatmap.referenceTiles, indicesToAddByLayer)\n      )\n    }\n  }\n}\n\n/**\n * Returns clusters or vessels data from a tileQuery\n * @param {object} state - the application state\n * @param {string} tileQuery - the id of a heatmap layer\n * @return {object} { isEmpty, isCluster, isMouseCluster, foundVessels, layerId, tilesetId }\n */\nconst _queryHeatmap = (state, tileQuery, temporalExtentIndexes) => {\n  const layers = state.map.heatmap.heatmapLayers\n  const startIndex = temporalExtentIndexes[0]\n  const endIndex = temporalExtentIndexes[1]\n  const layersVessels = []\n\n  Object.keys(layers).forEach((layerId) => {\n    const layer = layers[layerId]\n    const allPossibleTilesByPreference = tileQuery.uids.map((uid) =>\n      layer.tiles.find((tile) => tile.uid === uid)\n    )\n    const availableTiles = allPossibleTilesByPreference.filter(\n      (tile) => tile !== undefined && tile.data !== undefined\n    )\n\n    const currentFilters = layer.filters\n    if (availableTiles.length) {\n      const bestTile = availableTiles[0]\n      layersVessels.push({\n        layer,\n        vessels: selectVesselsAt(bestTile.data, tileQuery, startIndex, endIndex, currentFilters),\n      })\n    }\n  })\n\n  const layersVesselsResults = layersVessels.filter(\n    (layerVessels) => layerVessels.vessels.length > 0\n  )\n\n  // it's a cluster because of aggregation on the server side\n  let isCluster\n  // its a cluster because or multiple vessels under mouse\n  let isMouseCluster\n  let isEmpty\n  let layerVesselsResult\n  let foundVessels\n\n  const hasEncounters =\n    layersVesselsResults.filter((layerVessel) => layerVessel.layer.subtype === ENCOUNTERS).length >\n    0\n\n  if (layersVesselsResults.length === 0) {\n    isEmpty = true\n  } else if (layersVesselsResults.length > 1 && !hasEncounters) {\n    // if there are points over multiple layers, consider this a cluster (ie don't select, zoom instead, or don't highlight)\n    // there's an exception if vessel selection contains an encounter, in which case it will take priority\n    isCluster = true\n  } else {\n    // if we have a hit with an encounters layer, use it in priority\n    // if not the layersVesselsResults should contain a single result\n    layerVesselsResult = hasEncounters\n      ? layersVesselsResults.find((layerVessel) => layerVessel.layer.subtype === ENCOUNTERS)\n      : layersVesselsResults[0]\n\n    // we can get multiple points with similar series and seriesgroup, in which case\n    // we should treat that as a successful vessel query, not a cluster\n    const vessels = layerVesselsResult.vessels\n\n    if (vessels.length === 0) {\n      isEmpty = true\n    } else {\n      // look up for any negatives seriesgroup (clusters on the server side)\n      const clusteredVessels = vessels.filter((v) => v.seriesgroup < 0)\n      if (clusteredVessels.length) {\n        isCluster = true\n      } else {\n        foundVessels = uniqBy(vessels, (v) => v.series)\n        isMouseCluster = foundVessels.length > 1\n      }\n    }\n  }\n\n  const layer = layerVesselsResult === undefined ? {} : layerVesselsResult.layer\n\n  return { isEmpty, isCluster, isMouseCluster, foundVessels, layer }\n}\n\nexport function clearHighlightedVessels() {\n  return {\n    type: HIGHLIGHT_VESSELS,\n    payload: {\n      isEmpty: true,\n      clickableCluster: false,\n    },\n  }\n}\n\nexport function highlightVesselFromHeatmap(tileQuery, temporalExtentIndexes) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const { layer, isEmpty, isCluster, isMouseCluster, foundVessels } = _queryHeatmap(\n      state,\n      tileQuery,\n      temporalExtentIndexes\n    )\n\n    if (layer.id !== undefined || state.map.heatmap.highlightedVessels.layerId !== layer.id) {\n      dispatch({\n        type: HIGHLIGHT_VESSELS,\n        payload: {\n          layer: {\n            id: layer.id,\n            tilesetId: layer.tilesetId,\n            subtype: layer.subtype,\n            header: layer.header,\n          },\n          isEmpty,\n          clickableCluster: isCluster === true || isMouseCluster === true,\n          highlightableCluster: isCluster !== true,\n          foundVessels,\n        },\n      })\n    } else {\n      dispatch(clearHighlightedVessels())\n    }\n  }\n}\n\nexport const highlightClickedVessel = (seriesgroup, layerId) => ({\n  type: HIGHLIGHT_CLICKED_VESSEL,\n  payload: {\n    seriesgroup,\n    layerId,\n  },\n})\n\nexport const clearHighlightedClickedVessel = () => ({\n  type: CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n})\n\nexport const updateHeatmapLayers = (newLayers, currentLoadTemporalExtent) => (\n  dispatch,\n  getState\n) => {\n  const prevLayersDict = getState().map.heatmap.heatmapLayers\n\n  // add and update layers\n  newLayers.forEach((newLayer) => {\n    const layerId = newLayer.id\n    const prevLayer = prevLayersDict[layerId]\n    if (prevLayer === undefined) {\n      // console.log('adding', layerId)\n      dispatch(addHeatmapLayer(newLayer, currentLoadTemporalExtent))\n    } else {\n      if (prevLayer.visible !== newLayer.visible && newLayer.visible === true) {\n        dispatch(loadAllTilesForLayer(layerId))\n      }\n      if (\n        prevLayer.visible !== newLayer.visible ||\n        prevLayer.hue !== newLayer.hue ||\n        prevLayer.opacity !== newLayer.opacity ||\n        prevLayer.filters !== newLayer.filters ||\n        prevLayer.interactive !== newLayer.interactive\n      ) {\n        // console.log('updating', layerId, ' with visibilty', newLayer.visible)\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_STYLE,\n          payload: {\n            id: newLayer.id,\n            visible: newLayer.visible,\n            hue: newLayer.hue,\n            opacity: newLayer.opacity,\n            filters: newLayer.filters,\n            interactive: newLayer.interactive,\n          },\n        })\n      }\n    }\n  })\n\n  // clean up unused layers\n  Object.keys(prevLayersDict).forEach((prevLayerId) => {\n    if (!newLayers.find((l) => l.id === prevLayerId)) {\n      dispatch(removeHeatmapLayer(prevLayerId))\n    }\n  })\n}\n","import { fitBounds, pixelsToWorld } from 'viewport-mercator-project'\nimport { updateHeatmapTilesFromViewport } from '../heatmap/heatmapTiles.actions'\nimport { onViewportChange } from '../module/module.actions'\nimport { CLUSTER_CLICK_ZOOM_INCREMENT } from '../config' // TODO MAP MODULE\n\nexport const SET_VIEWPORT = 'SET_VIEWPORT'\nexport const UPDATE_VIEWPORT = 'UPDATE_VIEWPORT'\nexport const SET_ZOOM_INCREMENT = 'SET_ZOOM_INCREMENT'\nexport const SET_MOUSE_LAT_LONG = 'SET_MOUSE_LAT_LONG'\nexport const TRANSITION_END = 'TRANSITION_END'\nexport const SET_NATIVE_VIEWPORT = 'SET_NATIVE_VIEWPORT'\n\nexport const setViewport = (viewport) => (dispatch) => {\n  dispatch({\n    type: SET_VIEWPORT,\n    payload: viewport,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const updateViewport = (viewportUpdate) => (dispatch) => {\n  dispatch({\n    type: UPDATE_VIEWPORT,\n    payload: viewportUpdate,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nconst transitionTo = (increment, latitude = null, longitude = null, zoom = null) => (dispatch) => {\n  dispatch({\n    type: SET_ZOOM_INCREMENT,\n    payload: {\n      increment,\n      latitude,\n      longitude,\n      zoom,\n    },\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const transitionToZoom = (zoom) => (dispatch) => {\n  dispatch(transitionTo(null, null, null, zoom))\n}\n\nexport const transitionEnd = () => (dispatch) => {\n  dispatch({\n    type: TRANSITION_END,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const zoomIntoVesselCenter = (latitude, longitude) => (dispatch) => {\n  dispatch(transitionTo(CLUSTER_CLICK_ZOOM_INCREMENT, latitude, longitude))\n}\n\nexport const fitToBounds = (bounds) => (dispatch, getState) => {\n  const state = getState()\n  const vp = fitBounds({\n    bounds: [[bounds.minLng, bounds.minLat], [bounds.maxLng, bounds.maxLat]],\n    width: state.map.viewport.viewport.width,\n    height: state.map.viewport.viewport.height,\n    padding: 50,\n  })\n  dispatch(transitionTo(null, vp.latitude, vp.longitude, vp.zoom))\n}\n\nexport const exportNativeViewport = (nativeViewport) => (dispatch) => {\n  const topLeftPx = [0, 0]\n  const bottomRightPx = [nativeViewport.width, nativeViewport.height]\n\n  // compute left and right offsets to deal with antimeridian issue\n  const topLeftWorld = pixelsToWorld(topLeftPx, nativeViewport.pixelUnprojectionMatrix)\n  const bottomRightWorld = pixelsToWorld(bottomRightPx, nativeViewport.pixelUnprojectionMatrix)\n  const leftWorldScaled = topLeftWorld[0] / nativeViewport.scale\n  const rightWorldScaled = bottomRightWorld[0] / nativeViewport.scale\n\n  // lat/lon corners for miniglobe\n  const northWest = nativeViewport.unproject(topLeftPx)\n  const southEast = nativeViewport.unproject(bottomRightPx)\n  const bounds = {\n    north: northWest[1],\n    south: southEast[1],\n    west: northWest[0],\n    east: southEast[0],\n  }\n\n  dispatch({\n    type: SET_NATIVE_VIEWPORT,\n    payload: {\n      leftWorldScaled,\n      rightWorldScaled,\n      bounds,\n    },\n  })\n}\n","import area from '@turf/area'\nimport { POLYGON_LAYERS_AREA } from '../constants'\nimport { clearHighlightedVessels, clearHighlightedClickedVessel } from '../heatmap/heatmap.actions'\nimport { zoomIntoVesselCenter } from './viewport.actions'\n\nexport const SET_POPUP = 'SET_POPUP'\nexport const CLEAR_POPUP = 'CLEAR_POPUP'\nexport const SET_MAP_CURSOR = 'SET_MAP_CURSOR'\nexport const UPDATE_POPUP_REPORT_STATUS = 'UPDATE_POPUP_REPORT_STATUS'\n\nconst getFeatureMetaFields = (staticLayerId, state, feature) => {\n  const source = state.style.mapStyle.toJS().sources[staticLayerId]\n  if (source.type !== 'geojson') {\n    if (source.metadata === undefined || source.metadata['gfw:popups'] === undefined) {\n      return null\n    }\n    return source.metadata['gfw:popups']\n  }\n  // when layer is of type geojson (custom layer), use all feature properties available\n  return Object.keys(feature.properties).length === 0\n    ? null\n    : Object.keys(feature.properties).map((key) => ({ id: key }))\n}\n\nconst getAreaKm2 = (glFeature) => {\n  const areakm2 = 10 ** -6 * area(glFeature.geometry)\n  const formatted = areakm2.toLocaleString('en-US', { maximumFractionDigits: 0 })\n  return formatted\n}\n\nconst getStaticLayerIdFromGlFeature = (glFeature) =>\n  (glFeature.layer.metadata !== undefined && glFeature.layer.metadata['gfw:id']) ||\n  glFeature.layer.source\n\nconst findFeature = (glFeatures) => {\n  if (glFeatures === undefined || !glFeatures.length) {\n    return undefined\n  }\n  for (let i = 0; i < glFeatures.length; i++) {\n    const glFeature = glFeatures[i]\n    const staticLayerId = getStaticLayerIdFromGlFeature(glFeature)\n    if (staticLayerId !== undefined) {\n      return {\n        feature: glFeature,\n        staticLayerId,\n      }\n    }\n  }\n  return undefined\n}\n\nexport const mapHover = (latitude, longitude, features) => (dispatch, getState) => {\n  const state = getState().map\n  const currentActivityLayersInteractionData = state.heatmap.highlightedVessels\n  const { layer, isEmpty, foundVessels } = currentActivityLayersInteractionData\n\n  let cursor = null\n  const event = {\n    type: null,\n  }\n\n  if (isEmpty === true) {\n    const feature = findFeature(features, null)\n    if (feature !== undefined) {\n      const popupFields = getFeatureMetaFields(feature.staticLayerId, state, feature.feature)\n      if (popupFields !== null) {\n        const properties = feature.feature.properties\n        const mainPopupField =\n          popupFields.find((f) => f.id && f.id.toLowerCase() === 'name') ||\n          popupFields.find((f) => f.id && f.id.toLowerCase() === 'id') ||\n          popupFields.find(\n            (f) =>\n              f.id &&\n              properties[f.id] !== null &&\n              properties[f.id] !== 'null' &&\n              properties[f.id] !== undefined\n          )\n        const mainPopupFieldId = mainPopupField.id\n        const featureTitle = properties[mainPopupFieldId]\n        event.type = 'static'\n        event.layer = {\n          id: feature.staticLayerId,\n        }\n        event.target = {\n          featureTitle,\n        }\n        cursor = 'pointer'\n      }\n    }\n  } else if (isEmpty !== true) {\n    const isCluster = foundVessels === undefined || foundVessels.length > 1\n    cursor = isCluster ? 'zoom-in' : 'pointer'\n\n    event.type = 'activity'\n    // TODO MAP MODULE sometimes layerId is undefined, likely an issue with heatmap[Tiles]\n    event.layer = layer\n    event.target = {\n      objects: foundVessels,\n      isCluster,\n    }\n  }\n\n  dispatch({\n    type: SET_MAP_CURSOR,\n    payload: cursor,\n  })\n\n  if (state.module.onHover) {\n    state.module.onHover({\n      ...event,\n      latitude,\n      longitude,\n    })\n  }\n}\n\nexport const mapClick = (latitude, longitude, features) => (dispatch, getState) => {\n  const state = getState().map\n\n  dispatch(clearHighlightedClickedVessel())\n\n  const currentActivityLayersInteractionData = state.heatmap.highlightedVessels\n\n  const { layer, isEmpty, clickableCluster, foundVessels } = currentActivityLayersInteractionData\n\n  const event = {\n    type: null,\n  }\n\n  if (isEmpty === true) {\n    const feature = findFeature(features, null)\n    if (feature !== undefined) {\n      const metaFields = getFeatureMetaFields(feature.staticLayerId, state, feature.feature)\n      let fields\n      const properties = feature.feature.properties\n      if (metaFields !== null) {\n        fields = metaFields.map((metaField) => {\n          const id = metaField.id || metaField\n          const value = id === POLYGON_LAYERS_AREA ? getAreaKm2(feature.feature) : properties[id]\n          return {\n            title: metaField.label || metaField.id,\n            isLink: metaField.isLink,\n            value,\n          }\n        })\n      }\n\n      event.type = 'static'\n      event.layer = {\n        id: feature.staticLayerId,\n      }\n      event.target = {\n        fields,\n        properties,\n      }\n    }\n  } else {\n    event.type = 'activity'\n    event.layer = layer\n    if (clickableCluster === true) {\n      dispatch(zoomIntoVesselCenter(latitude, longitude))\n      dispatch(clearHighlightedVessels())\n      event.target = {\n        isCluster: true,\n      }\n    } else {\n      event.target = foundVessels[0]\n    }\n  }\n\n  if (state.module.onClick) {\n    state.module.onClick({\n      ...event,\n      latitude,\n      longitude,\n    })\n  }\n}\n","const RGB_MAX = 255\nconst HUE_MAX = 360\nconst SV_MAX = 100\n\nexport const VESSELS_HUES_INCREMENTS_NUM = 31 // 360 / VESSELS_HUES_INCREMENTS_NUM - 1  should give a round number\nexport const VESSELS_HUES_INCREMENT = 360 / (VESSELS_HUES_INCREMENTS_NUM - 1)\n\n// Legacy: this is only here for compatibility with pre-mapbox branch workspaces\nexport const COLOR_HUES = {\n  orange: 0,\n  peach: 22,\n  yellow: 60,\n  green: 85,\n  brightGreen: 145,\n  lightBlue: 182,\n  blue: 236,\n  purple: 284,\n  pink: 312,\n}\n\n// FIXME mark explicitely as legacy. Check all usages.\nexport const getKeyByValue = (obj, value) => {\n  let result = null\n  Object.entries(obj).forEach((entry) => {\n    if (entry[1] === value) result = entry[0]\n  })\n  return result\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport const rgbToHsv = (_r, _g, _b) => {\n  const r = _r / 255\n  const g = _g / 255\n  const b = _b / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n      default:\n        h = 0\n    }\n\n    h /= 6\n  }\n\n  return [h, s, v]\n}\n\n// converts hue, saturation, luminance to an rgb object\nexport const hsvToRgb = (h_, s_, v_) => {\n  const h = ((h_ % HUE_MAX) / parseFloat(HUE_MAX)) * 6\n  const s = s_ === SV_MAX ? 1 : (s_ % SV_MAX) / parseFloat(SV_MAX)\n  const v = v_ === SV_MAX ? 1 : (v_ % SV_MAX) / parseFloat(SV_MAX)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r: Math.round(r * RGB_MAX), g: Math.round(g * RGB_MAX), b: Math.round(b * RGB_MAX) }\n}\n\n// returns an rgb string with default saturation and luminance values\nconst hueToRgbDefaults = (hue) => hsvToRgb(hue, 50, 100)\n\nexport const hueToRgbString = (hue) => {\n  const rgb = hueToRgbDefaults(hue)\n  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`\n}\n\nexport const rgbToHexString = (rgb, css) => {\n  const str = ['r', 'g', 'b']\n    .map((channelName) => {\n      const channelValue = rgb[channelName]\n      let channelStr = channelValue.toString(16)\n      if (channelValue < 16) {\n        channelStr = `0${channelStr}`\n      }\n      return channelStr\n    })\n    .join('')\n  const prefix = css === true ? '#' : '0x'\n  return `${prefix}${str}`\n}\n\nexport const hueToRgbHexString = (hue, css) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToHexString(rgb, css)\n}\n\nconst closestNumber = (numberArray, goal) =>\n  numberArray.reduce((prev, curr) => (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev))\n\nexport const hueToClosestColor = (hue) => {\n  if (hue === undefined || hue === null) return undefined\n  const colorHueValues = Object.keys(COLOR_HUES).map((key) => COLOR_HUES[key])\n  const closestHue = closestNumber(colorHueValues, hue)\n  return getKeyByValue(COLOR_HUES, closestHue)\n}\n\nexport const hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst rgbToRgbaString = (rgb, opacity) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`\n\nexport const hueToRgbaString = (hue, opacity) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hexToRgba = (hex, opacity) => {\n  const rgb = hexToRgb(hex)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hueIncrementToHue = (hueIncrement) => hueIncrement * VESSELS_HUES_INCREMENT\n\nexport const hueToHueIncrement = (hue) =>\n  Math.round((hue / 360) * (VESSELS_HUES_INCREMENTS_NUM - 1))\n\nexport const wrapHue = (hue) => hue % 360\n\nexport const hueOrColorToHexColor = (color, hue) => {\n  if (hue !== undefined) {\n    return hueToRgbHexString(hue, true)\n  }\n\n  return color\n}\n","/* global PIXI */\nimport 'pixi.js'\nimport { hueToHueIncrement, VESSELS_HUES_INCREMENTS_NUM } from '../utils/map-colors'\nimport { VESSELS_BASE_RADIUS, MAX_SPRITES_PER_LAYER } from '../config'\n\nexport default class HeatmapSubLayer {\n  constructor(baseTexture, renderingStyleIndex, hue, useNormalBlendMode = false) {\n    // this.stage = new PIXI.Container();\n    // the ParticleContainer is a faster version of the PIXI sprite container\n    this.stage = new PIXI.particles.ParticleContainer(MAX_SPRITES_PER_LAYER, {\n      scale: true,\n      alpha: true,\n      position: true,\n      uvs: true,\n    })\n    if (useNormalBlendMode === false) {\n      this.stage.blendMode = PIXI.BLEND_MODES.SCREEN\n    }\n\n    this.spritesPool = []\n\n    const initialTextureFrame = new PIXI.Rectangle(\n      0,\n      0,\n      VESSELS_BASE_RADIUS * 2,\n      VESSELS_BASE_RADIUS * 2\n    )\n    this.mainVesselTexture = new PIXI.Texture(baseTexture, initialTextureFrame)\n    this._setTextureFrame(renderingStyleIndex, hue)\n\n    this.clearSpriteProps()\n  }\n\n  clearSpriteProps() {\n    this.spritesProps = {\n      x: new Float32Array(MAX_SPRITES_PER_LAYER),\n      y: new Float32Array(MAX_SPRITES_PER_LAYER),\n      a: new Float32Array(MAX_SPRITES_PER_LAYER),\n      s: new Float32Array(MAX_SPRITES_PER_LAYER),\n    }\n    this.spritesPropsCount = 0\n  }\n\n  pushSpriteProps(x, y, a, s) {\n    this.spritesProps.x[this.spritesPropsCount] = x\n    this.spritesProps.y[this.spritesPropsCount] = y\n    this.spritesProps.a[this.spritesPropsCount] = a\n    this.spritesProps.s[this.spritesPropsCount] = s\n    this.spritesPropsCount++\n  }\n\n  setRenderingStyleIndex(renderingStyleIndex) {\n    this._setTextureFrame(renderingStyleIndex)\n  }\n\n  destroy() {\n    this.spritesPool = null\n    this.stage.destroy({ children: true })\n  }\n\n  /**\n   * Updates the main texture frame offset to show different brush styles and hues\n   * Both args are optional, if one is omitted, previous value is used\n   * @heatmapStyle bool whether to use heatmap style or solid circle style\n   * @hue number hue value between 0 and 360\n   */\n  _setTextureFrame(renderingStyleIndex = null, hue = null) {\n    const textureFrame = this.mainVesselTexture.frame.clone()\n\n    if (renderingStyleIndex !== null) {\n      // one diameter + tiny offset between 2 frames\n      textureFrame.x = VESSELS_BASE_RADIUS * 2 * renderingStyleIndex + renderingStyleIndex\n    }\n\n    if (hue !== null) {\n      let hueIncrement = hueToHueIncrement(hue)\n      if (hueIncrement === VESSELS_HUES_INCREMENTS_NUM - 1) {\n        hueIncrement = 0\n      }\n      textureFrame.y = hueIncrement * VESSELS_BASE_RADIUS * 2\n      if (hueIncrement > 0) {\n        textureFrame.y += hueIncrement\n      }\n    }\n\n    this.mainVesselTexture.frame = textureFrame\n    this.mainVesselTexture.update()\n  }\n\n  render() {\n    const numProps = this.spritesPropsCount\n    this.resizeSpritesPool()\n\n    for (let i = 0; i < numProps; i++) {\n      const sprite = this.stage.children[i]\n      const s = this.spritesProps.s[i]\n      sprite.setTransform(this.spritesProps.x[i], this.spritesProps.y[i], s, s)\n      sprite.alpha = this.spritesProps.a[i]\n    }\n\n    const numSprites = this.stage.children.length\n    for (let i = numProps; i < numSprites; i++) {\n      const sprite = this.stage.children[i]\n      sprite.x = -100\n    }\n  }\n\n  resizeSpritesPool() {\n    const numProps = this.spritesPropsCount\n    const prevNumSprites = this.stage.children.length\n    const delta = numProps - prevNumSprites\n    // console.log(prevNumSprites, '->', numProps, ' delta:', delta);\n\n    if (delta < -4999) {\n      // sprite needs to be removed. Do that progressively (max 100) to avoid UI lock\n      const toRemove = Math.min(100, -delta)\n      // console.log('removing ', toRemove);\n      for (let i = 0; i < toRemove; i++) {\n        this.stage.removeChildAt(0)\n      }\n    }\n\n    if (delta > 0) {\n      const toAdd = Math.max(5000, delta)\n      // console.log('adding ', toAdd);\n      this._addSprites(toAdd)\n    }\n  }\n\n  _addSprites(num) {\n    for (let i = 0; i < num; i++) {\n      const vessel = new PIXI.Sprite(this.mainVesselTexture)\n      vessel.anchor.x = 0.5\n      vessel.anchor.y = 0.5\n      // ParticlesContainer does not support .visible, so we just move the sprite out of the viewport\n      vessel.x = -100\n      // vessel.blendMode = PIXI.BLEND_MODES.SCREEN;\n      // vessel.filters=  [new PIXI.filters.BlurFilter(10,10)]\n      this.stage.addChild(vessel)\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport uniq from 'lodash/uniq'\nimport * as PIXI from 'pixi.js'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { BRUSH_RENDERING_STYLE, BRUSH_ZOOM_RENDERING_STYLE } from '../constants'\nimport { vesselSatisfiesFilters } from '../utils/heatmapTileData'\nimport HeatmapSubLayer from './HeatmapSubLayer'\n\n// This is a faster version of worldToPixels that omits pitch,\n// and ignores values from the matrix that are consistently = 0\nconst s = 1 / 1.5\nconst worldToPixelsSimple = (x, y, m) => {\n  const fx = s * (m[0] * x + m[4] * y + m[12])\n  const fy = s * (m[5] * y + m[13])\n  return [fx, fy]\n}\n\nclass HeatmapLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.useRadialGradientStyle !== this.props.useRadialGradientStyle) {\n      this.setBrushZoomRenderingStyle(nextProps.useRadialGradientStyle)\n    }\n  }\n\n  _build() {\n    const { layer, rootStage, useRadialGradientStyle, customRenderingStyle } = this.props\n    this.subLayers = {}\n    this.renderingStyle =\n      layer.header && layer.header.rendering ? layer.header.rendering : customRenderingStyle\n\n    this.setBrushRenderingStyle(this.renderingStyle.style)\n    this.setBrushZoomRenderingStyle(useRadialGradientStyle)\n\n    this.stage = new PIXI.Container()\n\n    rootStage.addChild(this.stage)\n  }\n\n  setBrushRenderingStyle(style = BRUSH_RENDERING_STYLE.NORMAL) {\n    if (typeof style === 'string') {\n      this.brushRenderingStyle = BRUSH_RENDERING_STYLE[style.toUpperCase()]\n    } else {\n      this.brushRenderingStyle = style\n    }\n    this._setBrushRenderingStyleIndex()\n  }\n\n  setBrushZoomRenderingStyle(useRadialGradientStyle) {\n    this.brushZoomRenderingStyle =\n      useRadialGradientStyle === true\n        ? BRUSH_ZOOM_RENDERING_STYLE.RADIAL_GRADIENT\n        : BRUSH_ZOOM_RENDERING_STYLE.CIRCLE\n    this._setBrushRenderingStyleIndex()\n  }\n\n  _setBrushRenderingStyleIndex() {\n    // only NORMAL brush styles support different zoom styles\n    const cappedZoomRenderingStyle =\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.NORMAL ? this.brushZoomRenderingStyle : 0\n    const newStyleIndex = this.brushRenderingStyle + cappedZoomRenderingStyle\n    if (newStyleIndex === this.renderingStyleIndex) {\n      return\n    }\n    this.renderingStyleIndex = newStyleIndex\n    Object.values(this.subLayers).forEach((subLayer) => {\n      subLayer.setRenderingStyleIndex(this.renderingStyleIndex)\n    })\n  }\n\n  _redraw() {\n    const { filters, baseTexture, layer } = this.props\n\n    if (\n      layer === null ||\n      layer === undefined ||\n      layer.tiles === undefined ||\n      layer.visible === false\n    ) {\n      this.stage.visible = false\n      return\n    }\n\n    this.stage.visible = true\n    this.stage.alpha = layer.opacity\n\n    const tiles = layer.tiles\n    const defaultHue = layer.hue\n    const allHuesToRender =\n      filters !== undefined && filters.length\n        ? filters\n            // pass is set to true by filterGroupActions when none of the filters fields\n            // in the filter group is supported by the layer headers\n            .filter((f) => f.pass !== true)\n            .map((f) => (f.hue === undefined ? '0' : f.hue.toString()))\n        : [defaultHue.toString()]\n    const currentlyUsedHues = Object.keys(this.subLayers)\n\n    // get all hues, old and new\n    const allHues = uniq(allHuesToRender.concat(currentlyUsedHues))\n\n    for (let i = 0; i < allHues.length; i++) {\n      const hue = allHues[i]\n      if (allHuesToRender.indexOf(hue) === -1) {\n        // not on new hues: delete sublayer\n        this._destroySubLayer(this.subLayers[hue])\n        delete this.subLayers[hue]\n        continue\n      }\n      if (currentlyUsedHues.indexOf(hue) === -1) {\n        // not on old hues: create sublayer\n        this.subLayers[hue] = this._createSublayer(baseTexture, this.renderingStyleIndex, hue)\n      }\n      this.subLayers[hue].clearSpriteProps()\n    }\n\n    if (!allHuesToRender.length) return\n    tiles.forEach((tile) => {\n      this._setSubLayersSpritePropsForTile({\n        data: tile.data,\n        numFilters: filters.length,\n        defaultHue,\n      })\n    })\n\n    allHuesToRender.forEach((hueToRender) => {\n      this.subLayers[hueToRender].render()\n    })\n  }\n\n  _setSubLayersSpritePropsForTile({ data, numFilters, defaultHue }) {\n    if (!data) {\n      return\n    }\n\n    const { startIndex, endIndex, viewport, filters, viewportLeft, viewportRight } = this.props\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let index = 0, len = frame.worldX.length; index < len; index++) {\n        let hue\n        if (filters === undefined || !filters.length) {\n          hue = defaultHue\n        }\n        for (let fi = 0; fi < numFilters; fi++) {\n          const filter = filters[fi]\n          if (vesselSatisfiesFilters(frame, index, filter.filterValues)) {\n            hue = filter.hue\n            break\n          }\n        }\n\n        // no filter passes: bail\n        if (hue === undefined) {\n          continue\n        }\n\n        // wrap worldX when point crosses the antimeridian/dateline\n        // world points go from 0 to 512. There is no way to determine if worldX is on the \"wrong\" side\n        // of the antimeridian just by looking at its value (where with lat/lon we can simply look at -/+)\n        // Therefore we compare it to the viewport's left or right boundary, depending on what is currently\n        // \"the right side\" of the antimeridian\n        let worldX = frame.worldX[index]\n        if (viewportLeft > 0 && worldX < viewportLeft) {\n          // worldX is \"behind\" viewportLeft, which means it is \"on the right\" of the antimeridian\n          worldX += 512\n        } else if (viewportLeft < 0 && worldX > viewportRight) {\n          worldX -= 512\n        }\n\n        const scaledX = worldX * viewport.scale\n        const scaledY = frame.worldY[index] * viewport.scale\n        const mtx = viewport.pixelProjectionMatrix\n\n        const [x, y] =\n          viewport.pitch === 0\n            ? worldToPixelsSimple(scaledX, scaledY, mtx)\n            : worldToPixels([scaledX, scaledY], mtx)\n\n        if (x > -10 && x < viewport.width + 10 && y > -10 && y < viewport.height + 10) {\n          this.subLayers[hue].pushSpriteProps(\n            x,\n            y,\n            frame.opacity ? frame.opacity[index] : this.renderingStyle.defaultOpacity,\n            frame.radius ? frame.radius[index] : this.renderingStyle.defaultSize\n          )\n        }\n      }\n    }\n  }\n\n  _createSublayer(baseTexture, renderingStyleIndex, hue) {\n    const subLayer = new HeatmapSubLayer(\n      baseTexture,\n      renderingStyleIndex,\n      hue,\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.BULLSEYE\n    )\n    this.stage.addChild(subLayer.stage)\n    return subLayer\n  }\n\n  _destroy() {\n    Object.values(this.subLayers).forEach(this._destroySubLayer.bind(this))\n    this.stage.destroy({ children: true })\n    const { rootStage } = this.props\n    rootStage.removeChild(this.stage)\n  }\n\n  _destroySubLayer(subLayer) {\n    this.stage.removeChild(subLayer.stage)\n    subLayer.destroy()\n  }\n\n  render() {\n    return null\n  }\n}\n\nHeatmapLayer.propTypes = {\n  layer: PropTypes.object,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  filters: PropTypes.array,\n  baseTexture: PropTypes.object,\n  useRadialGradientStyle: PropTypes.bool,\n  customRenderingStyle: PropTypes.object,\n  viewportLeft: PropTypes.number,\n  viewportRight: PropTypes.number,\n}\n\nexport default HeatmapLayer\n","/* global PIXI */\nimport 'pixi.js'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { TRACKS_DOTS_STYLE_ZOOM_THRESHOLD } from '../config'\n\nclass TracksLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  _build() {\n    const { rootStage } = this.props\n    this.stage = new PIXI.Graphics()\n    this.stage.nativeLines = true\n    rootStage.addChild(this.stage)\n  }\n\n  clear() {\n    this.stage.clear()\n  }\n\n  _redraw() {\n    const { tracks, zoom, startIndex, endIndex, highlightTemporalExtentIndexes } = this.props\n\n    this.clear()\n    if (!tracks.length) {\n      return\n    }\n\n    const overInInner =\n      highlightTemporalExtentIndexes === null\n        ? undefined\n        : [\n            Math.max(startIndex, highlightTemporalExtentIndexes[0]),\n            Math.min(endIndex, highlightTemporalExtentIndexes[1]),\n          ]\n    const overExtent = overInInner && overInInner[1] - overInInner[0] > 0 ? overInInner : undefined\n\n    let n = 0 // eslint-disable-line no-unused-vars\n\n    const drawFishingCircles = zoom > TRACKS_DOTS_STYLE_ZOOM_THRESHOLD\n    const fishingCirclesRadius = 1 + (zoom - TRACKS_DOTS_STYLE_ZOOM_THRESHOLD) * 0.5\n    const drawOverTrack = overExtent !== undefined && overExtent[0] > 0 && overExtent[1] > 0\n\n    tracks.forEach((track) => {\n      n += this._drawTrack({\n        data: track.data,\n        startIndex,\n        endIndex,\n        drawFishingCircles,\n        fishingCirclesRadius,\n        color: `0x${track.color.substr(1)}`,\n        lineThickness: 1,\n        lineOpacity: 1,\n      })\n\n      // Draw the highlight over the track when the user hovers over the Timebar\n      if (drawOverTrack === true) {\n        n += this._drawTrack({\n          data: track.data,\n          startIndex: highlightTemporalExtentIndexes[0],\n          endIndex: highlightTemporalExtentIndexes[1],\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color: '0xFFFFFF',\n          lineThickness: 2,\n          lineOpacity: 1,\n        })\n      }\n    })\n\n    // console.log(n);\n  }\n\n  /**\n   * Draws a single track (line + points)\n   *\n   * @param data track points data in 'playback form' (ie organized by days)\n   * @param extent extent, in day indices\n   * @param offset object containing info about the current situation of the map viewport, used to compute screen coords\n   * @param drawFishingCircles whether to draw fishing circles or not\n   * @param fishingCirclesRadius radius of the fishing circles\n   * @param color\n   * @param lineThickness\n   * @param lineOpacity\n   * @param worldOffset offset to use when a track crosses the dateline (ie 512 to add a second world to the right)\n   */\n  _drawTrack({\n    data,\n    startIndex,\n    endIndex,\n    drawFishingCircles,\n    fishingCirclesRadius,\n    color,\n    lineThickness,\n    lineOpacity,\n    worldOffset = 0,\n  }) {\n    const { viewport } = this.props\n\n    let n = 0\n    let prevSeries\n    let prevWorldX\n    let prevWorldY\n\n    const circlePoints = {\n      x: [],\n      y: [],\n    }\n\n    // line thickness is ignored in native mode anyways.\n    this.stage.lineStyle(lineThickness, color, lineOpacity)\n\n    let duplicateWorld = false\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let i = 0, len = frame.series.length; i < len; i++) {\n        const currentSeries = frame.series[i]\n\n        n++\n\n        const worldX = frame.worldX[i] + worldOffset\n        const worldY = frame.worldY[i]\n\n        const [x, y] = worldToPixels(\n          [worldX * viewport.scale, worldY * viewport.scale],\n          viewport.pixelProjectionMatrix\n        )\n\n        if (prevSeries !== currentSeries) {\n          this.stage.moveTo(x, y)\n        }\n\n        // more than a ½ world of distance between two points = crossing the dateline\n        if (prevWorldX && Math.abs(worldX - prevWorldX) > 256) {\n          // worldOffset === 0 -> this is the first time drawTrack is called\n          if (worldOffset === 0) {\n            // set a flag to call drawTrack again at the end of the loop\n            duplicateWorld = true\n          }\n\n          // get Y coordinate where track intersects with dateline\n          const atDatelineWorldY = prevWorldY + (worldY - prevWorldY) / 2\n\n          // whether tracks crosses dateline from west to east\n          const isWestToEast = worldX - prevWorldX < 0\n\n          const worldXEnd = worldOffset + (512 - 0.000001)\n          const worldXStart = worldOffset\n\n          // get X coordinate ending at dateline\n          const atDatelineEndWorldX = isWestToEast ? worldXEnd : worldXStart\n\n          // get X coordinate starting at dateline\n          const atDatelineStartWorldX = isWestToEast ? worldXStart : worldXEnd\n\n          const [x1, y1] = worldToPixels(\n            [atDatelineEndWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.lineTo(x1, y1)\n          const [x2, y2] = worldToPixels(\n            [atDatelineStartWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.moveTo(x2, y2)\n        }\n\n        this.stage.lineTo(x, y)\n\n        if (drawFishingCircles && frame.hasFishing[i] === true) {\n          circlePoints.x.push(x)\n          circlePoints.y.push(y)\n        }\n\n        prevWorldX = worldX\n        prevWorldY = worldY\n        prevSeries = currentSeries\n      }\n    }\n\n    if (drawFishingCircles) {\n      this.stage.lineStyle(0)\n      this.stage.beginFill(color, 1)\n      for (let i = 0, circlesLength = circlePoints.x.length; i < circlesLength; i++) {\n        this.stage.drawCircle(circlePoints.x[i], circlePoints.y[i], fishingCirclesRadius)\n      }\n      this.stage.endFill()\n    }\n\n    if (duplicateWorld === true) {\n      ;[-512, 512].forEach((offset) => {\n        this._drawTrack({\n          worldOffset: offset,\n          data,\n          startIndex,\n          endIndex,\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color,\n          lineThickness,\n          lineOpacity,\n        })\n      })\n    }\n    return n\n  }\n\n  render() {\n    return null\n  }\n}\n\nTracksLayer.propTypes = {\n  zoom: PropTypes.number,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  tracks: PropTypes.array,\n}\n\nexport default TracksLayer\n","import React from 'react'\nimport * as PIXI from 'pixi.js'\nimport PropTypes from 'prop-types'\nimport { BaseControl } from 'react-map-gl'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport {\n  hsvToRgb,\n  hueToRgbString,\n  hueIncrementToHue,\n  wrapHue,\n  VESSELS_HUES_INCREMENTS_NUM,\n} from '../utils/map-colors'\nimport {\n  VESSELS_BASE_RADIUS,\n  VESSELS_HEATMAP_BLUR_FACTOR,\n  ACTIVITY_HIGHLIGHT_HUE,\n  VESSELS_HEATMAP_DIMMING_ALPHA,\n  VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD,\n  VESSEL_CLICK_TOLERANCE_PX,\n} from '../config'\nimport HeatmapLayer from '../heatmap/HeatmapLayer'\nimport TracksLayer from '../tracks/TracksLayer'\n\nconst shouldUseRadialGradientStyle = (zoom) => zoom < VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD\n\n// builds a texture spritesheet containing\n// - the heatmap style (radial gradient)\n// - the circle style that is used at higher zoom levels\n// - the 'bullseye' style used for encounters\n// as well as a number of hues for each in a 2D grid.\n// Then, only the texture frame (mesh UVs) is modified depending on the zoom level,\n// in order not to have to recreate sprites\nconst getVesselTexture = (radius, blurFactor) => {\n  const tplCanvas = document.createElement('canvas')\n  const tplCtx = tplCanvas.getContext('2d')\n  const diameter = radius * 2\n  const NUM_STYLES = 3\n  tplCanvas.width = diameter * NUM_STYLES + (NUM_STYLES - 1) // + (NUM_STYLES - 1): tiny offset between 2 frames\n  tplCanvas.height = diameter * VESSELS_HUES_INCREMENTS_NUM + VESSELS_HUES_INCREMENTS_NUM\n\n  for (let hueIncrement = 0; hueIncrement < VESSELS_HUES_INCREMENTS_NUM; hueIncrement++) {\n    const y = diameter * hueIncrement + hueIncrement\n    const yCenter = y + radius\n\n    // heatmap style\n    let x = radius\n    const gradient = tplCtx.createRadialGradient(\n      x,\n      yCenter,\n      radius * blurFactor,\n      x,\n      yCenter,\n      radius\n    )\n    const hue = hueIncrementToHue(hueIncrement)\n    const rgbString = hueToRgbString(hue)\n    gradient.addColorStop(0, rgbString)\n\n    const rgbOuter = hsvToRgb(wrapHue(hue + 30), 80, 100)\n    gradient.addColorStop(1, `rgba(${rgbOuter.r}, ${rgbOuter.g}, ${rgbOuter.b}, 0)`)\n\n    tplCtx.fillStyle = gradient\n    tplCtx.fillRect(0, y, diameter, diameter)\n\n    // circle style\n    x += diameter + 1 // tiny offset between 2 frames\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n\n    // bullseye style\n    x += diameter + 1\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.4, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.95, 0, 2 * Math.PI, false)\n    tplCtx.lineWidth = 1\n    tplCtx.strokeStyle = rgbString\n    tplCtx.stroke()\n  }\n\n  return tplCanvas\n}\n\nclass ActivityLayers extends BaseControl {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.props.exportNativeViewport(this._context.viewport)\n\n    if (\n      nextProps.viewport.width !== this.props.viewport.width ||\n      nextProps.viewport.height !== this.props.viewport.height\n    ) {\n      this._updateViewportSize(nextProps.viewport.width, nextProps.viewport.height)\n    }\n  }\n\n  _build() {\n    const { width, height } = this.props.viewport\n\n    this.pixi = new PIXI.Application({\n      width,\n      height,\n      transparent: true,\n      antialias: true,\n    })\n\n    this.renderer = this.pixi.renderer\n    this.canvas = this.pixi.view\n    this.canvas.style.position = 'absolute'\n\n    this.container.appendChild(this.canvas)\n\n    this.stage = this.pixi.stage\n\n    const baseTextureCanvas = getVesselTexture(VESSELS_BASE_RADIUS, VESSELS_HEATMAP_BLUR_FACTOR)\n    this.baseTexture = PIXI.Texture.fromCanvas(baseTextureCanvas)\n\n    this.heatmapStage = new PIXI.Container()\n    this.stage.addChild(this.heatmapStage)\n\n    this.pixi.ticker.add(this._onTick)\n  }\n\n  _updateViewportSize(viewportWidth, viewportHeight) {\n    this.renderer.resize(viewportWidth, viewportHeight)\n  }\n\n  toggleHeatmapDimming(dim) {\n    if (this.heatmapStage === undefined) {\n      return\n    }\n    if (dim === true) {\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = dim === true ? VESSELS_HEATMAP_DIMMING_ALPHA : 1\n  }\n\n  onTouchStart = (event) => {\n    if (!event.touches.length) {\n      return\n    }\n    this.queryCoords(event.touches[0].clientX, event.touches[0].clientY)\n  }\n\n  onMouseMove = (event) => {\n    this.queryCoords(event.clientX, event.clientY)\n  }\n\n  queryCoords(x, y) {\n    // bail if all heatmap layers are set to non-interactive\n    if (this.props.heatmapLayers.every((l) => l.interactive !== true)) {\n      return\n    }\n\n    const { viewport } = this._context\n    const [longitude, latitude] = viewport.unproject([x, y])\n\n    let wrappedLongitude = longitude\n    if (wrappedLongitude > 180) {\n      wrappedLongitude -= 360\n    } else if (wrappedLongitude < -180) {\n      wrappedLongitude += 360\n    }\n\n    const [worldX, worldY] = lngLatToWorld([wrappedLongitude, latitude], 1)\n\n    const toleranceRadiusInWorldUnits = VESSEL_CLICK_TOLERANCE_PX / viewport.scale\n\n    this.props.queryHeatmapVessels(\n      {\n        longitude: wrappedLongitude,\n        latitude,\n        worldX,\n        worldY,\n        toleranceRadiusInWorldUnits,\n      },\n      this.props.temporalExtentIndexes\n    )\n  }\n\n  _onTick = () => {\n    if (this.heatmapFadingIn === true && this.heatmapStage.alpha < 1) {\n      this._heatmapFadeinStep()\n    }\n  }\n\n  _startHeatmapFadein() {\n    this.heatmapFadingIn = true\n    this.heatmapFadeinStartTimestamp = undefined\n  }\n\n  _heatmapFadeinStep() {\n    if (this.heatmapFadeinStartTimestamp === undefined) {\n      this.heatmapFadeinStartTimestamp = Date.now()\n    }\n    const timeElapsed = (Date.now() - this.heatmapFadeinStartTimestamp) / 1000\n    let alpha = this.heatmapStage.alpha + (1 - this.heatmapStage.alpha) * timeElapsed\n    if (alpha >= 1) {\n      alpha = 1\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = alpha\n  }\n\n  // FIXME move to container?\n  _getHighlightData(highlightedVessels, highlightedClickedVessel, heatmapLayers) {\n    const hue = ACTIVITY_HIGHLIGHT_HUE\n    let highlightLayerData = {\n      id: '__HIGHLIGHT__',\n      visible: true,\n      opacity: 1,\n      hue: ACTIVITY_HIGHLIGHT_HUE,\n    }\n    let highlightFilters = []\n\n    if (\n      highlightedVessels !== undefined &&\n      highlightedVessels.layer !== undefined &&\n      highlightedVessels.foundVessels !== undefined &&\n      highlightedVessels.isEmpty !== true\n    ) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedVessels.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = highlightedVessels.foundVessels.map((vessel) => ({\n        hue,\n        filterValues: {\n          series: [vessel.series],\n        },\n      }))\n    } else if (highlightedClickedVessel !== null) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedClickedVessel.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = [\n        {\n          hue,\n          filterValues: {\n            series: [highlightedClickedVessel.seriesgroup],\n          },\n        },\n      ]\n    }\n    return {\n      highlightLayerData,\n      highlightFilters,\n    }\n  }\n  _render() {\n    const {\n      zoom,\n      heatmapLayers,\n      temporalExtentIndexes,\n      highlightTemporalExtentIndexes,\n      highlightedVessels,\n      highlightedClickedVessel,\n      tracks,\n      leftWorldScaled,\n      rightWorldScaled,\n    } = this.props\n    const { viewport } = this._context\n\n    const startIndex = temporalExtentIndexes[0]\n    const endIndex = temporalExtentIndexes[1]\n    const useRadialGradientStyle = shouldUseRadialGradientStyle(zoom)\n\n    if (highlightedVessels.isEmpty !== true) {\n      this.toggleHeatmapDimming(true)\n    }\n    if (highlightedVessels.isEmpty === true && tracks.length === 0) {\n      this._startHeatmapFadein()\n    }\n    if (this.renderer) {\n      const err = this.renderer.gl.getError()\n      if (err !== 0) console.log(err)\n    }\n\n    const { highlightLayerData, highlightFilters } = this._getHighlightData(\n      highlightedVessels,\n      highlightedClickedVessel,\n      heatmapLayers\n    )\n\n    return (\n      <div\n        ref={(ref) => {\n          this.container = ref\n        }}\n        style={{ position: 'absolute' }}\n        onMouseMove={this.onMouseMove}\n        onTouchStart={this.onTouchStart}\n      >\n        {heatmapLayers.map((layer) => (\n          <HeatmapLayer\n            key={layer.id}\n            layer={layer}\n            filters={layer.filters || []}\n            viewport={viewport}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            baseTexture={this.baseTexture}\n            rootStage={this.heatmapStage}\n            useRadialGradientStyle={useRadialGradientStyle}\n            customRenderingStyle={{}}\n            viewportLeft={leftWorldScaled}\n            viewportRight={rightWorldScaled}\n          />\n        ))}\n        {this.stage !== undefined && (\n          <HeatmapLayer\n            key=\"highlighted\"\n            layer={highlightLayerData}\n            filters={highlightFilters}\n            viewport={viewport}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            baseTexture={this.baseTexture}\n            rootStage={this.heatmapStage}\n            useRadialGradientStyle={useRadialGradientStyle}\n            customRenderingStyle={{ defaultOpacity: 1, defaultSize: 1 }}\n            viewportLeft={leftWorldScaled}\n            viewportRight={rightWorldScaled}\n          />\n        )}\n        {this.stage !== undefined && (\n          <TracksLayer\n            tracks={tracks}\n            viewport={viewport}\n            zoom={zoom}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            highlightTemporalExtentIndexes={highlightTemporalExtentIndexes}\n            rootStage={this.stage}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nActivityLayers.propTypes = {\n  zoom: PropTypes.number,\n  heatmapLayers: PropTypes.array,\n  temporalExtentIndexes: PropTypes.array,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  highlightedVessels: PropTypes.object,\n  highlightedClickedVessel: PropTypes.object,\n  tracks: PropTypes.array,\n  queryHeatmapVessels: PropTypes.func,\n  exportNativeViewport: PropTypes.func,\n  leftWorldScaled: PropTypes.number,\n  rightWorldScaled: PropTypes.number,\n}\n\nActivityLayers.contextTypes = {\n  viewport: PropTypes.object,\n}\n\nexport default ActivityLayers\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport convert from '@globalfishingwatch/map-convert'\nimport { exportNativeViewport } from '../glmap/viewport.actions'\nimport ActivityLayers from './ActivityLayers'\nimport { queryHeatmapVessels } from '../heatmap/heatmapTiles.actions'\nimport { MIN_FRAME_LENGTH_MS } from '../config'\n\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\n\nconst getHeatmapLayersAsArray = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    const a = Object.keys(heatmapLayers).map((id) => ({\n      ...heatmapLayers[id],\n    }))\n    // console.log(a)\n    return a\n  }\n)\n\nconst getTracks = (state) => state.map.tracks.data\n\nconst getTracksWithData = createSelector(\n  [getTracks],\n  (tracks) => {\n    const tracksWithData = tracks\n      .filter((t) => t.type !== 'geojson')\n      .filter((t) => t.data !== undefined)\n    return tracksWithData\n  }\n)\n\nconst getTemporalExtent = (state) => state.map.module.temporalExtent\nconst getHighlightTemporalExtent = (state) => state.map.module.highlightTemporalExtent\n\nconst getTemporalExtentIndexes = createSelector(\n  [getTemporalExtent],\n  (temporalExtent) => {\n    const startTimestamp = temporalExtent[0].getTime()\n    const endTimestamp = Math.max(\n      temporalExtent[1].getTime(),\n      temporalExtent[0].getTime() + MIN_FRAME_LENGTH_MS\n    )\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst getHighlightTemporalExtentIndexes = createSelector(\n  [getHighlightTemporalExtent],\n  (highlightTemporalExtent) => {\n    if (highlightTemporalExtent === undefined || highlightTemporalExtent === null) {\n      return null\n    }\n    const startTimestamp = highlightTemporalExtent[0].getTime()\n    const endTimestamp = highlightTemporalExtent[1].getTime()\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst mapStateToProps = (state) => ({\n  highlightedVessels: state.map.heatmap.highlightedVessels,\n  highlightedClickedVessel: state.map.heatmap.highlightedClickedVessel,\n  viewport: state.map.viewport.viewport,\n  zoom: state.map.viewport.viewport.zoom,\n  heatmapLayers: getHeatmapLayersAsArray(state),\n  tracks: getTracksWithData(state),\n  leftWorldScaled: state.map.viewport.leftWorldScaled,\n  rightWorldScaled: state.map.viewport.rightWorldScaled,\n  temporalExtentIndexes: getTemporalExtentIndexes(state),\n  highlightTemporalExtentIndexes: getHighlightTemporalExtentIndexes(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  queryHeatmapVessels: (coords, temporalExtentIndexes) => {\n    dispatch(queryHeatmapVessels(coords, temporalExtentIndexes))\n  },\n  exportNativeViewport: (viewport) => {\n    dispatch(exportNativeViewport(viewport))\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActivityLayers)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport MapGL, { Popup } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport ActivityLayers from '../activity/ActivityLayers.container.js'\nimport styles from './map.css'\n\nconst PopupWrapper = (props) => {\n  const { latitude, longitude, children, closeButton, onClose } = props\n  return (\n    <Popup\n      latitude={latitude}\n      longitude={longitude}\n      closeButton={closeButton}\n      onClose={onClose}\n      anchor=\"bottom\"\n      offsetTop={-10}\n      tipSize={4}\n      closeOnClick={false}\n    >\n      {children}\n    </Popup>\n  )\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: true,\n    }\n  }\n  componentDidMount() {\n    window.addEventListener('resize', this._resize)\n    this._resize()\n\n    // useful with FOUC\n    window.setTimeout(() => this._resize(), 1)\n\n    // there is a problem with the container width computation (only with \"fat scrollbar\" browser/os configs),\n    // seems like the panels with scrollbars are taken into account or smth\n    window.setTimeout(() => this._resize(), 10000)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resize)\n  }\n\n  _resize = () => {\n    if (this._mapContainerRef === undefined) {\n      console.warn('Cant set viewport on a map that hasnt finished intanciating yet')\n      return\n    }\n    const mapContainerStyle = window.getComputedStyle(this._mapContainerRef)\n    const width = parseInt(mapContainerStyle.width, 10)\n    const height = parseInt(mapContainerStyle.height, 10) + 1\n\n    if (width !== this.props.viewport.width || height !== this.props.viewport.height) {\n      this.props.setViewport({\n        ...this.props.viewport,\n        width,\n        height,\n      })\n    }\n  }\n\n  onViewportChange = (viewport) => {\n    this.props.setViewport(viewport)\n  }\n\n  onHover = (event) => {\n    this.props.mapHover(event.lngLat[1], event.lngLat[0], event.features)\n  }\n\n  onClick = (event) => {\n    this.props.mapClick(event.lngLat[1], event.lngLat[0], event.features)\n  }\n\n  render() {\n    const {\n      viewport,\n      maxZoom,\n      minZoom,\n      transitionEnd,\n      mapStyle,\n      onClosePopup,\n      clickPopup,\n      hoverPopup,\n      cursor,\n      interactiveLayerIds,\n    } = this.props\n\n    return (\n      <div\n        id=\"map\"\n        className={styles.map}\n        ref={(ref) => {\n          this._mapContainerRef = ref\n        }}\n        onMouseLeave={() => {\n          this.setState({ mouseOver: false })\n        }}\n        onMouseEnter={() => {\n          this.setState({ mouseOver: true })\n        }}\n      >\n        <MapGL\n          onTransitionEnd={transitionEnd}\n          onHover={this.onHover}\n          onClick={this.onClick}\n          getCursor={({ isDragging }) => {\n            if (cursor === null) {\n              return isDragging ? 'grabbing' : 'grab'\n            }\n            return cursor\n          }}\n          mapStyle={mapStyle}\n          {...viewport}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          onViewportChange={this.onViewportChange}\n          interactiveLayerIds={interactiveLayerIds}\n        >\n          <ActivityLayers loadTemporalExtent={this.props.loadTemporalExtent} />\n          {clickPopup !== undefined && clickPopup !== null && (\n            <PopupWrapper\n              latitude={clickPopup.latitude}\n              longitude={clickPopup.longitude}\n              closeButton\n              onClose={onClosePopup}\n            >\n              {clickPopup.content}\n            </PopupWrapper>\n          )}\n          {this.state.mouseOver === true && hoverPopup !== undefined && hoverPopup !== null && (\n            <PopupWrapper\n              latitude={hoverPopup.latitude}\n              longitude={hoverPopup.longitude}\n              closeButton={false}\n            >\n              {hoverPopup.content}\n            </PopupWrapper>\n          )}\n        </MapGL>\n        <div className={styles.googleLogo} />\n      </div>\n    )\n  }\n}\n\nMap.propTypes = {\n  viewport: PropTypes.object,\n  mapStyle: PropTypes.object,\n  clickPopup: PropTypes.object,\n  hoverPopup: PropTypes.object,\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  setViewport: PropTypes.func,\n  mapHover: PropTypes.func,\n  mapClick: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  transitionEnd: PropTypes.func,\n  cursor: PropTypes.string,\n  interactiveLayerIds: PropTypes.arrayOf(PropTypes.string),\n}\n\nexport default Map\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { mergeDeep, fromJS } from 'immutable'\nimport { closePopup } from '../module/module.actions.js'\nimport { getTracksStyles } from '../tracks/tracks.selectors.js'\nimport { mapHover, mapClick } from './interaction.actions.js'\nimport { setViewport, transitionEnd } from './viewport.actions.js'\nimport Map from './Map'\n\nconst getStaticLayers = (state) => state.map.style.staticLayers\n\nconst getInteractiveLayerIds = createSelector(\n  [getStaticLayers],\n  // Note: here we assume that layer IDs provided with module match the GL layers that should\n  // be interactive or not, ie typically the fill layer if a label layer is present\n  (staticLayers) =>\n    staticLayers.filter((l) => l.interactive === true && l.visible === true).map((l) => l.id)\n)\n\nconst getMapStyles = (state) => state.map.style.mapStyle\nconst getMapStyle = createSelector(\n  [getMapStyles, getTracksStyles],\n  (mapStyles, trackStyles) => {\n    if (!trackStyles) return mapStyles\n\n    return mergeDeep(mapStyles, fromJS(trackStyles))\n  }\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  viewport: state.map.viewport.viewport,\n  maxZoom: state.map.viewport.maxZoom,\n  minZoom: state.map.viewport.minZoom,\n  cursor: state.map.interaction.cursor,\n  mapStyle: getMapStyle(state),\n  interactiveLayerIds: getInteractiveLayerIds(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setViewport: (viewport) => {\n    dispatch(setViewport(viewport))\n  },\n  mapHover: (lat, long, features) => {\n    dispatch(mapHover(lat, long, features))\n  },\n  mapClick: (lat, long, features) => {\n    dispatch(mapClick(lat, long, features))\n  },\n  transitionEnd: () => {\n    dispatch(transitionEnd())\n  },\n  onClosePopup: () => {\n    dispatch(closePopup())\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map)\n","// This utility looks at GeoJSON features and returns the predominant geometry type\n\nconst TYPES = [\n  { gl: 'line', geoJSON: ['LineString', 'MultiLineString'] },\n  { gl: 'fill', geoJSON: ['Polygon', 'MultiPolygon'] },\n  { gl: 'circle', geoJSON: ['Point', 'MultiPoint'] },\n]\n\nexport default (geoJSON) => {\n  // collect all geoJSON geom types\n  const allGeoJSONTypes = geoJSON.features.map((feature) => {\n    const geom = feature.geometry\n    if (geom === undefined) {\n      return null\n    }\n    return geom.type\n  })\n\n  // collect number of geometries by GL geom types\n  const numByGLType = TYPES.map((type) => {\n    let num = 0\n    allGeoJSONTypes.forEach((geoJSONType) => {\n      if (type.geoJSON.indexOf(geoJSONType) > -1) {\n        num++\n      }\n    })\n    return { gl: type.gl, num }\n  })\n\n  // get feature types with the higher count\n  let glType = 'fill'\n  let glTypeMax = 0\n  numByGLType.forEach((t) => {\n    if (t.num > glTypeMax) {\n      glType = t.gl\n      glTypeMax = t.num\n    }\n  })\n\n  return glType\n}\n","import { fromJS } from 'immutable'\nimport { hexToRgb } from '../utils/map-colors'\nimport { STATIC_LAYERS_CARTO_ENDPOINT, STATIC_LAYERS_CARTO_TILES_ENDPOINT } from '../config'\nimport { CUSTOM_LAYERS_SUBTYPES, GL_TRANSPARENT } from '../constants'\nimport GL_STYLE from './gl-styles/style.json'\nimport getMainGeomType from '../utils/getMainGeomType'\n\nexport const INIT_MAP_STYLE = 'INIT_MAP_STYLE'\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE'\nexport const MARK_CARTO_LAYERS_AS_INSTANCIATED = 'MARK_CARTO_LAYERS_AS_INSTANCIATED'\nexport const SET_STATIC_LAYERS = 'SET_STATIC_LAYERS'\nexport const SET_BASEMAP_LAYERS = 'SET_BASEMAP_LAYERS'\n\nexport const initStyle = ({ glyphsPath }) => ({\n  type: INIT_MAP_STYLE,\n  payload: {\n    glyphsPath,\n  },\n})\n\nconst setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n})\n\nexport const applyTemporalExtent = (temporalExtent) => (dispatch, getState) => {\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n\n  const start = Math.round(temporalExtent[0].getTime() / 1000)\n  const end = Math.round(temporalExtent[1].getTime() / 1000)\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    if (glLayer.metadata === undefined || glLayer.metadata['gfw:temporal'] !== true) {\n      continue\n    }\n\n    // if layer is temporal, a filter must always be preset on the style.json object\n    // because each layer can have a different time field to be filtered\n    const currentFilter = style.getIn(['layers', i, 'filter']).toJS()\n    if (currentFilter === null) {\n      throw new Error('filter must be preset on style.json for temporal layer: ', glLayer.id)\n    }\n    currentFilter[1][2] = start\n    currentFilter[2][2] = end\n    style = style.setIn(['layers', i, 'filter'], fromJS(currentFilter))\n  }\n  dispatch(setMapStyle(style))\n}\n\nconst applyLayerFilters = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  const isTemporal =\n    currentGlLayer.metadata !== undefined && currentGlLayer.metadata['gfw:temporal'] === true\n\n  if (refLayer.filters === undefined) {\n    if (isTemporal === true) {\n      // only keep temporal part and clean up custom filters\n      // if layer is temporal, extract the time filter part first\n      const currentFilter = currentGlLayer.filter.slice(0, 3)\n      return style.setIn(['layers', glLayerIndex, 'filter'], fromJS(currentFilter))\n    } else if (currentGlLayer.filter !== undefined) {\n      return style.deleteIn(['layers', glLayerIndex, 'filter'])\n    }\n    return style\n  }\n\n  // if layer is temporal, extract the time filter part first\n  const currentFilter = isTemporal ? currentGlLayer.filter.slice(0, 3) : ['all']\n  const newFilter = currentFilter.concat(refLayer.filters)\n  return style.setIn(['layers', glLayerIndex, 'filter'], fromJS(newFilter))\n}\n\nconst applyLayerExpressions = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  let newStyle = style\n  const currentStyle = style.toJS()\n  const glType = currentGlLayer.type\n  const defaultStyles = currentStyle.metadata['gfw:styles']\n  const metadata = currentGlLayer.metadata\n  ;['selected', 'highlighted'].forEach((styleType) => {\n    // get selectedFeatures or highlightedFeatures\n    const features = refLayer[`${styleType}Features`]\n    const hasFeatures = features !== null && features !== undefined && features.values.length > 0\n    const applyStyleToAllFeatures = refLayer[styleType]\n\n    const defaultStyle = defaultStyles[styleType][glType] || {}\n    const layerStyle =\n      (metadata && metadata['gfw:styles'] && metadata['gfw:styles'][styleType]) || {}\n    const allPaintProperties = { ...defaultStyle, ...layerStyle }\n    if (Object.keys(allPaintProperties).length) {\n      const layerColorRgb = hexToRgb(refLayer.color)\n      const layerColorRgbFragment = `${layerColorRgb.r},${layerColorRgb.g},${layerColorRgb.b}`\n      // go through each applicable gl paint property\n      Object.keys(allPaintProperties).forEach((glPaintProperty) => {\n        const selectedValue = allPaintProperties[glPaintProperty][0]\n        const fallbackValue = allPaintProperties[glPaintProperty][1]\n        const paintOrLayout = glPaintProperty === 'icon-size' ? 'layout' : 'paint'\n        let glPaintFinalValue\n        if (\n          hasFeatures === false &&\n          applyStyleToAllFeatures !== true &&\n          applyStyleToAllFeatures !== false\n        ) {\n          // style reset when no features filter is declared and neither is applyAll\n          const originalLayerStyle = GL_STYLE.layers.find((l) => l.id === currentGlLayer.id)\n          glPaintFinalValue = originalLayerStyle[paintOrLayout][glPaintProperty]\n        } else if (applyStyleToAllFeatures === true || applyStyleToAllFeatures === false) {\n          glPaintFinalValue = applyStyleToAllFeatures === true ? selectedValue : fallbackValue\n        } else {\n          glPaintFinalValue = [\n            'match',\n            ['get', features.field],\n            features.values,\n            typeof selectedValue !== 'string'\n              ? selectedValue\n              : selectedValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbFragment),\n            typeof fallbackValue !== 'string'\n              ? fallbackValue\n              : fallbackValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbFragment),\n          ]\n        }\n\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, paintOrLayout, glPaintProperty],\n          glPaintFinalValue\n        )\n      })\n    }\n  })\n  return newStyle\n}\n\nconst toggleLayerVisibility = (style, refLayer, glLayerIndex) => {\n  const visibility = refLayer.visible === true ? 'visible' : 'none'\n  return style.setIn(['layers', glLayerIndex, 'layout', 'visibility'], visibility)\n}\n\nconst updateGLLayer = (style, glLayerId, refLayer) => {\n  const currentStyle = style.toJS()\n  const currentStyleLayers = currentStyle.layers\n  let newStyle = style\n\n  const glLayerIndex = currentStyleLayers.findIndex((l) => l.id === glLayerId)\n  const glLayer = currentStyleLayers.find((l) => l.id === glLayerId)\n\n  // visibility\n  newStyle = toggleLayerVisibility(newStyle, refLayer, glLayerIndex)\n\n  if (refLayer.isBasemap === true) {\n    return newStyle\n  }\n\n  const initialGLLayer = GL_STYLE.layers.find((l) => l.id === glLayerId)\n  const refLayerOpacity = refLayer.opacity === undefined ? 1 : refLayer.opacity\n\n  // color/opacity\n  switch (glLayer.type) {\n    case 'fill': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-outline-color'], refLayer.color)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-color'], GL_TRANSPARENT)\n      break\n    }\n    case 'line': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'line-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'line-color'], refLayer.color)\n      break\n    }\n    case 'symbol': {\n      if (glLayer.metadata && glLayer.metadata['gfw:isLabel'] === true) {\n        const parentLayerIsVisible =\n          newStyle.getIn(['layers', glLayerIndex, 'layout', 'visibility']) === 'visible'\n        const labelsVisibility =\n          parentLayerIsVisible && refLayer.showLabels === true ? 'visible' : 'none'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'layout', 'visibility'],\n          labelsVisibility\n        )\n        if (refLayer.showLabels !== true) {\n          break\n        }\n      }\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'text-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'text-color'], refLayer.color)\n      break\n    }\n    // Event layers and custom layers with point geom types\n    case 'circle': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-color'], refLayer.color)\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-radius'],\n          initialGLLayer.paint['circle-radius']\n        )\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-stroke-color'],\n          initialGLLayer.paint['circle-stroke-color'] || '#000'\n        )\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-stroke-width'],\n          initialGLLayer.paint['circle-stroke-width'] || 1\n        )\n      break\n    }\n    case 'raster': {\n      newStyle = newStyle.setIn(\n        ['layers', glLayerIndex, 'paint', 'raster-opacity'],\n        refLayerOpacity\n      )\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  newStyle = applyLayerFilters(newStyle, refLayer, glLayer, glLayerIndex)\n  newStyle = applyLayerExpressions(newStyle, refLayer, glLayer, glLayerIndex)\n\n  return newStyle\n}\n\nconst addCustomGLLayer = (subtype, layerId, url, data) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n  const currentStyle = style.toJS()\n\n  if (currentStyle.sources[layerId] === undefined) {\n    const source = { type: subtype }\n    if (subtype === CUSTOM_LAYERS_SUBTYPES.geojson) {\n      source.data = data\n    } else if (subtype === CUSTOM_LAYERS_SUBTYPES.raster) {\n      source.tiles = [url]\n      source.tileSize = 256\n    }\n    style = style.setIn(['sources', layerId], fromJS(source))\n  }\n\n  if (currentStyle.layers.find((glLayer) => glLayer.id === layerId) === undefined) {\n    const glType = subtype === CUSTOM_LAYERS_SUBTYPES.geojson ? getMainGeomType(data) : subtype\n    const glLayer = fromJS({\n      id: layerId,\n      source: layerId,\n      type: glType,\n      layout: {},\n      paint: {},\n    })\n    const layerIndex =\n      subtype === CUSTOM_LAYERS_SUBTYPES.raster\n        ? // if raster, put at index of last raster layer except labels\n          currentStyle.layers.length -\n          1 -\n          currentStyle.layers\n            .filter((l) => l.id !== 'labels')\n            .reverse()\n            .findIndex((l) => l.type === 'raster')\n        : currentStyle.layers.length - 1\n    style = style.set('layers', style.get('layers').splice(layerIndex, 0, glLayer))\n  }\n\n  dispatch(setMapStyle(style))\n}\n\nconst addWorkspaceGLLayers = (workspaceGLLayers) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n\n  workspaceGLLayers.forEach((workspaceGLLayer) => {\n    const id = workspaceGLLayer.id\n    const gl = workspaceGLLayer.gl\n    const finalSource = fromJS(gl.source)\n    style = style.setIn(['sources', id], finalSource)\n\n    const layers = []\n    gl.layers.forEach((srcGlLayer) => {\n      const glLayer = {\n        ...srcGlLayer,\n        source: id,\n        'source-layer': id,\n      }\n      layers.push(glLayer)\n    })\n\n    const finalLayers = fromJS(layers)\n    style = style.set('layers', style.get('layers').concat(finalLayers))\n  })\n\n  dispatch(setMapStyle(style))\n\n  // TODO MAP MODULE\n  // dispatch(updateMapStyle());\n}\n\nconst getCartoLayerInstanciatePromise = ({ sourceId, sourceCartoSQL }) => {\n  const mapConfig = { layers: [{ id: sourceId, options: { sql: sourceCartoSQL } }] }\n  const mapConfigURL = encodeURIComponent(JSON.stringify(mapConfig))\n  const cartoAnonymousMapUrl = STATIC_LAYERS_CARTO_ENDPOINT.replace('$MAPCONFIG', mapConfigURL)\n\n  return new Promise((resolve) => {\n    fetch(cartoAnonymousMapUrl)\n      .then((res) => {\n        if (res.status >= 400) {\n          console.warn(`loading of layer failed ${sourceId}`)\n          Promise.reject()\n          return null\n        }\n        return res.json()\n      })\n      .then((data) => {\n        resolve({\n          layergroupid: data.layergroupid,\n          sourceId,\n        })\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  })\n}\n\nconst instanciateCartoLayers = (layers) => (dispatch, getState) => {\n  dispatch({\n    type: MARK_CARTO_LAYERS_AS_INSTANCIATED,\n    payload: layers.map((layer) => layer.sourceId),\n  })\n  const cartoLayersPromises = layers.map((layer) => getCartoLayerInstanciatePromise(layer))\n  const cartoLayersPromisesPromise = Promise.all(cartoLayersPromises.map((p) => p.catch((e) => e)))\n  cartoLayersPromisesPromise\n    .then((instanciatedCartoLayers) => {\n      let style = getState().map.style.mapStyle\n      const currentStyle = style.toJS()\n      instanciatedCartoLayers.forEach((cartoLayer) => {\n        const tilesURL = STATIC_LAYERS_CARTO_TILES_ENDPOINT.replace(\n          '$LAYERGROUPID',\n          cartoLayer.layergroupid\n        )\n\n        // replace gl source with a new source that use tiles provided by Carto anonymous maps API\n        const newSourceId = `${cartoLayer.sourceId}-instanciated`\n        style = style.setIn(\n          ['sources', newSourceId],\n          fromJS({\n            type: 'vector',\n            tiles: [tilesURL],\n          })\n        )\n\n        // change source in all layers that are using it (genrally polygon + labels)\n        currentStyle.layers.forEach((glLayer, glLayerIndex) => {\n          if (glLayer.source === cartoLayer.sourceId) {\n            style = style.setIn(['layers', glLayerIndex, 'source'], newSourceId)\n            style = style.setIn(['layers', glLayerIndex, 'metadata', 'gfw:id'], cartoLayer.sourceId)\n            const refLayer = layers.find((l) => l.refLayer.id === cartoLayer.sourceId).refLayer\n            style = updateGLLayer(style, glLayer.id, refLayer)\n          }\n        })\n      })\n\n      dispatch(setMapStyle(style))\n    })\n    .catch((err) => {\n      console.warn(err)\n    })\n}\n\nexport const commitStyleUpdates = (staticLayers, basemapLayers) => (dispatch, getState) => {\n  // Store a copy of static and basemap layers. This is not used directly by\n  // the Map component which only needs a prepared style object\n  dispatch({\n    type: SET_STATIC_LAYERS,\n    payload: staticLayers,\n  })\n  dispatch({\n    type: SET_BASEMAP_LAYERS,\n    payload: basemapLayers,\n  })\n\n  const layers = [...staticLayers, ...basemapLayers.map((bl) => ({ ...bl, isBasemap: true }))]\n\n  const currentGLSources = getState().map.style.mapStyle.toJS().sources\n\n  // collect layers declared in workspace but not in original gl style\n  const workspaceGLLayers = layers.filter(\n    (layer) => layer.gl !== undefined && currentGLSources[layer.id] === undefined\n  )\n  if (workspaceGLLayers.length) {\n    dispatch(addWorkspaceGLLayers(workspaceGLLayers))\n  }\n\n  // instanciate custom layers if needed\n  const customLayers = layers.filter(\n    (layer) => layer.isCustom === true && currentGLSources[layer.id] === undefined\n  )\n  if (customLayers.length) {\n    customLayers.forEach((layer) => {\n      dispatch(addCustomGLLayer(layer.subtype, layer.id, layer.url, layer.data))\n    })\n  }\n\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n  const glSources = currentStyle.sources\n\n  const cartoLayersToInstanciate = []\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    const sourceId = glLayer.source\n    const glSource = glSources[sourceId]\n    const layerId = (glLayer.metadata !== undefined && glLayer.metadata['gfw:id']) || sourceId\n\n    const refLayer = layers.find((l) => l.id === layerId)\n\n    if (refLayer === undefined) {\n      if (glLayer.type !== 'background') {\n        // console.warn('gl layer does not exists in workspace', glLayer);\n      }\n      continue\n    }\n\n    // check if layer is served from Carto, which means we need to instanciate it first\n    // TODO BUG: check if layer is not instanciatING too\n    const sourceCartoSQL = glSource.metadata !== undefined && glSource.metadata['gfw:carto-sql']\n    if (sourceCartoSQL !== false && sourceCartoSQL !== undefined) {\n      // only if layer is visible and has not been instanciated yet\n      const cartoLayerInstanciated = state.cartoLayersInstanciated.indexOf(sourceId) > -1\n      if (\n        refLayer.visible === true &&\n        !cartoLayerInstanciated &&\n        !cartoLayersToInstanciate.find((l) => l.sourceId === sourceId)\n      ) {\n        cartoLayersToInstanciate.push({ sourceId, sourceCartoSQL, refLayer })\n      }\n      continue\n    }\n\n    style = updateGLLayer(style, glLayer.id, refLayer)\n  }\n\n  if (cartoLayersToInstanciate.length) {\n    dispatch(instanciateCartoLayers(cartoLayersToInstanciate))\n  }\n\n  dispatch(setMapStyle(style))\n}\n","import tbbox from '@turf/bbox'\nimport { targetMapVessel } from '../map'\n\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  addTracksPointsRenderingData,\n  getTracksPlaybackData,\n} from '../utils/heatmapTileData'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_TRACK = 'ADD_TRACK'\nexport const UPDATE_TRACK = 'UPDATE_TRACK'\nexport const REMOVE_TRACK = 'REMOVE_TRACK'\n\nconst getTrackDataParsed = (geojson) => {\n  const time = { start: Infinity, end: 0 }\n  if (geojson && geojson.features) {\n    geojson.features.forEach((feature) => {\n      const hasTimes =\n        feature.properties.coordinateProperties.times &&\n        feature.properties.coordinateProperties.times.length > 0\n      if (hasTimes) {\n        feature.properties.coordinateProperties.times.forEach((datetime) => {\n          if (datetime < time.start) {\n            time.start = datetime\n          } else if (datetime > time.end) {\n            time.end = datetime\n          }\n        })\n      }\n    })\n  }\n  const bounds = tbbox(geojson)\n  const geoBounds = {\n    minLat: bounds[3],\n    minLng: bounds[0],\n    maxLat: bounds[1],\n    maxLng: bounds[2],\n  }\n  return {\n    geojson,\n    geoBounds,\n    timelineBounds: [time.start, time.end],\n  }\n}\n\n// Deprecated tracks format parsing\nconst getOldTrackBoundsFormat = (data, addOffset = false) => {\n  const time = {\n    start: Infinity,\n    end: 0,\n  }\n  const geo = {\n    minLat: Infinity,\n    maxLat: -Infinity,\n    minLng: Infinity,\n    maxLng: -Infinity,\n  }\n  for (let i = 0, length = data.datetime.length; i < length; i++) {\n    const datetime = data.datetime[i]\n    if (datetime < time.start) {\n      time.start = datetime\n    } else if (datetime > time.end) {\n      time.end = datetime\n    }\n\n    const lat = data.latitude[i]\n    if (lat < geo.minLat) {\n      geo.minLat = lat\n    } else if (lat > geo.maxLat) {\n      geo.maxLat = lat\n    }\n\n    let lng = data.longitude[i]\n    if (addOffset === true) {\n      if (lng < 0) {\n        lng += 360\n      }\n    }\n    if (lng < geo.minLng) {\n      geo.minLng = lng\n    } else if (lng > geo.maxLng) {\n      geo.maxLng = lng\n    }\n  }\n\n  // track crosses the antimeridian\n  if (geo.maxLng - geo.minLng > 350 && addOffset === false) {\n    return getOldTrackBoundsFormat(data, true)\n  }\n\n  return {\n    time: [time.start, time.end],\n    geo,\n  }\n}\n\nfunction loadTrack({ id, url, type, fitBoundsOnLoad, layerTemporalExtents, color }) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state)\n    if (state.map.tracks.data.find((t) => t.id === id)) {\n      return\n    }\n\n    dispatch({\n      type: ADD_TRACK,\n      payload: {\n        id,\n        url,\n        type,\n        color,\n        fitBoundsOnLoad,\n      },\n    })\n    if (type !== 'geojson') {\n      // Deprecated tracks format logic to be deleted some day\n      const token = state.map.module.token\n      const promises = getTilePromises(url, token, layerTemporalExtents, { seriesgroup: id })\n\n      Promise.all(promises.map((p) => p.catch((e) => e))).then((rawTileData) => {\n        const cleanData = getCleanVectorArrays(rawTileData)\n\n        if (!cleanData.length) {\n          return\n        }\n        const rawTrackData = groupData(cleanData, [\n          'latitude',\n          'longitude',\n          'datetime',\n          'series',\n          'weight',\n          'sigma',\n        ])\n\n        const vectorArray = addTracksPointsRenderingData(rawTrackData)\n        const bounds = getOldTrackBoundsFormat(rawTrackData)\n\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id,\n            data: getTracksPlaybackData(vectorArray),\n            geoBounds: bounds.geo,\n            timelineBounds: bounds.time,\n          },\n        })\n        dispatch(completeLoader(loaderID))\n      })\n    } else {\n      fetch(url)\n        .then((res) => {\n          if (res.status >= 400) throw new Error(res.statusText)\n          return res.json()\n        })\n        .then((data) => {\n          const { geojson, geoBounds, timelineBounds } = getTrackDataParsed(data)\n          dispatch({\n            type: UPDATE_TRACK,\n            payload: {\n              id,\n              data: geojson,\n              geoBounds,\n              timelineBounds,\n            },\n          })\n          if (fitBoundsOnLoad) {\n            targetMapVessel(id)\n          }\n        })\n        .catch((err) => console.warn(err))\n        .finally(() => dispatch(completeLoader(loaderID)))\n    }\n  }\n}\n\nconst removeTrack = (trackId) => ({\n  type: REMOVE_TRACK,\n  payload: {\n    trackId,\n  },\n})\n\nexport const updateTracks = (newTracks = []) => (dispatch, getState) => {\n  const prevTracks = getState().map.tracks.data\n  // add and update layers\n  if (newTracks) {\n    newTracks.forEach((newTrack) => {\n      const trackId = newTrack.id\n      const prevTrack = prevTracks.find((t) => t.id === trackId)\n      if (prevTrack === undefined) {\n        dispatch(loadTrack(newTrack))\n      } else if (prevTrack.color !== newTrack.color) {\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id: newTrack.id,\n            color: newTrack.color,\n          },\n        })\n      }\n    })\n  }\n\n  // clean up unused tracks\n  prevTracks.forEach((prevTrack) => {\n    if (!newTracks || !newTracks.find((t) => t.id === prevTrack.id)) {\n      dispatch(removeTrack(prevTrack.id))\n    }\n  })\n}\n","import PropTypes from 'prop-types'\n\nconst withReducerPropTypes = (name, propTypesSchema) => (reducer) => {\n  if (process.env.NODE_ENV === 'development') {\n    return (state, action) => {\n      const result = reducer(state, action)\n      PropTypes.checkPropTypes(propTypesSchema, result, 'reducer', name)\n\n      return result\n    }\n  }\n  return reducer\n}\n\nexport default withReducerPropTypes\n","import PropTypes from 'prop-types'\nimport withReducerTypes from '../utils/withReducerTypes'\nimport {\n  INIT_MODULE,\n  SET_TEMPORAL_EXTENT,\n  SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  START_LOADER,\n  COMPLETE_LOADER,\n} from './module.actions'\n\nconst initialState = {\n  loaders: null,\n  token: undefined,\n  temporalExtent: [new Date(1970), new Date()],\n  highlightTemporalExtent: null,\n  onViewportChange: undefined,\n  onHover: undefined,\n  onClick: undefined,\n  onLoadStart: undefined,\n  onLoadComplete: undefined,\n  onClosePopup: undefined,\n  onAttributionsChange: undefined,\n}\n\nconst moduleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_MODULE: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    case SET_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        temporalExtent: action.payload,\n      }\n    }\n\n    case SET_HIGHLIGHT_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        highlightTemporalExtent: action.payload,\n      }\n    }\n\n    case START_LOADER: {\n      const loaders = state.loaders !== null ? [...state.loaders] : []\n      loaders.push(action.payload)\n      return { ...state, loaders }\n    }\n\n    case COMPLETE_LOADER: {\n      const loaders = [...state.loaders]\n      const loaderIndex = loaders.findIndex((l) => l === action.payload)\n      loaders.splice(loaderIndex, 1)\n      return { ...state, loaders }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst moduleTypes = {\n  loaders: PropTypes.arrayOf(PropTypes.number),\n  token: PropTypes.string,\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  onViewportChange: PropTypes.func,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n}\n\nexport default withReducerTypes('module', moduleTypes)(moduleReducer)\n","import PropTypes from 'prop-types'\nimport { trackTypes } from '../proptypes/tracks'\nimport withReducerTypes from '../utils/withReducerTypes'\n\nimport { ADD_TRACK, UPDATE_TRACK, REMOVE_TRACK } from './tracks.actions'\n\nconst initialState = {\n  data: [],\n}\n\nconst tracksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TRACK: {\n      const data = [...state.data, action.payload]\n      return { ...state, data }\n    }\n\n    case UPDATE_TRACK: {\n      const trackData = action.payload\n      const data = state.data.map((track) => {\n        if (track.id !== trackData.id) return track\n        return {\n          ...track,\n          ...trackData,\n        }\n      })\n      return { ...state, data }\n    }\n\n    case REMOVE_TRACK: {\n      const removedTrackId = action.payload.trackId\n      const data = state.data.filter((track) => track.id !== removedTrackId)\n      return { ...state, data }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst tracksTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      ...trackTypes,\n      data: PropTypes.object,\n      timelineBounds: PropTypes.array,\n      geoBounds: PropTypes.exact({\n        minLat: PropTypes.number,\n        minLng: PropTypes.number,\n        maxLat: PropTypes.number,\n        maxLng: PropTypes.number,\n      }),\n    })\n  ),\n}\n\nexport default withReducerTypes('tracks', tracksTypes)(tracksReducer)\n","import uniq from 'lodash/uniq'\nimport {\n  INIT_HEATMAP_LAYERS,\n  UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n  ADD_HEATMAP_LAYER,\n  UPDATE_HEATMAP_LAYER_STYLE,\n  REMOVE_HEATMAP_LAYER,\n  ADD_REFERENCE_TILE,\n  UPDATE_HEATMAP_TILE,\n  RELEASE_HEATMAP_TILES,\n  HIGHLIGHT_VESSELS,\n  UPDATE_LOADED_TILES,\n  HIGHLIGHT_CLICKED_VESSEL,\n  CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n} from './heatmap.actions'\n\nconst initialState = {\n  // a dict of heatmap layers (key is layer id)\n  // each containing data, url, tiles, visibleTemporalExtentsIndices\n  heatmapLayers: {},\n  // store a list of tiles currently visible in the map\n  // those are necessary when adding a new layer to know which tiles need to be loaded\n  referenceTiles: [],\n  highlightedVessels: { isEmpty: true },\n  highlightedClickedVessel: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_HEATMAP_LAYERS: {\n      return Object.assign({}, state, { heatmapLayers: action.payload })\n    }\n\n    case UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES: {\n      const heatmapLayers = state.heatmapLayers\n      let indices = heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices\n      indices = uniq(indices.concat(action.payload.indicesAdded))\n      heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices = indices\n      return Object.assign({}, state, heatmapLayers)\n    }\n\n    case ADD_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers, {\n        [action.payload.id]: {\n          tiles: [],\n          ...action.payload,\n        },\n      })\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case UPDATE_HEATMAP_LAYER_STYLE: {\n      const newLayer = action.payload\n      const layer = { ...state.heatmapLayers[newLayer.id], ...newLayer }\n      const heatmapLayers = { ...state.heatmapLayers, [newLayer.id]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case REMOVE_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers)\n      delete heatmapLayers[action.payload.layerId]\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case ADD_REFERENCE_TILE: {\n      return Object.assign({}, state, { referenceTiles: [...state.referenceTiles, action.payload] })\n    }\n\n    case UPDATE_HEATMAP_TILE: {\n      const layerId = action.payload.layerId\n      const newTile = action.payload.tile\n      const layer = { ...state.heatmapLayers[layerId] }\n      let layerTiles = [...layer.tiles]\n      const tileIndex = layerTiles.findIndex((t) => t.uid === newTile.uid)\n      if (tileIndex === -1) {\n        layerTiles.push(newTile)\n      } else {\n        layerTiles = [layerTiles.slice(0, tileIndex), newTile, layerTiles.slice(tileIndex + 1)]\n      }\n      layer.tiles = layerTiles\n      const heatmapLayers = { ...state.heatmapLayers, [layerId]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case RELEASE_HEATMAP_TILES: {\n      const uids = action.payload\n\n      // remove tiles\n      const layerIds = Object.keys(state.heatmapLayers)\n      const heatmapLayers = { ...state.heatmapLayers }\n      layerIds.forEach((layerId) => {\n        const prevLayer = { ...heatmapLayers[layerId] }\n        uids.forEach((tileUid) => {\n          const releasedTileIndex = prevLayer.tiles.findIndex((tile) => tile.uid === tileUid)\n          if (releasedTileIndex > -1) {\n            // console.log('releasing', layerId, tileUid);\n            prevLayer.tiles.splice(releasedTileIndex, 1)\n          }\n        })\n      })\n\n      // remove reference tiles\n      let referenceTiles = [...state.referenceTiles]\n      uids.forEach((tileUid) => {\n        const releasedRefTileIndex = referenceTiles.findIndex((tile) => tile.uid === tileUid)\n        if (releasedRefTileIndex > -1) {\n          referenceTiles = [\n            ...referenceTiles.slice(0, releasedRefTileIndex),\n            ...referenceTiles.slice(releasedRefTileIndex + 1),\n          ]\n        }\n      })\n\n      return { ...state, heatmapLayers, referenceTiles }\n    }\n\n    case UPDATE_LOADED_TILES: {\n      const newHeatmapLayers = { ...state.heatmapLayers }\n      return { ...state, heatmapLayers: newHeatmapLayers }\n    }\n\n    case HIGHLIGHT_VESSELS: {\n      return Object.assign({}, state, { highlightedVessels: action.payload })\n    }\n\n    case HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: action.payload }\n    }\n\n    case CLEAR_HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import uniq from 'lodash/uniq'\nimport {\n  SET_CURRENTLY_VISIBLE_TILES,\n  SET_CURRENTLY_LOADED_TILES,\n  SET_CURRENTLY_SWAPPED_TILE_UIDS,\n  MARK_TILES_UIDS_AS_LOADED,\n  RELEASE_MARKED_TILES_UIDS,\n} from './heatmapTiles.actions'\n\nconst initialState = {\n  currentVisibleTiles: [],\n  currentLoadedTiles: [],\n  currentToLoadTileUids: [],\n  currentToReleaseTileUids: [],\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENTLY_VISIBLE_TILES: {\n      const currentVisibleTiles = [].concat(action.payload)\n      return { ...state, currentVisibleTiles }\n    }\n\n    case SET_CURRENTLY_LOADED_TILES: {\n      const currentLoadedTiles = [].concat(action.payload)\n      return { ...state, currentLoadedTiles }\n    }\n\n    case SET_CURRENTLY_SWAPPED_TILE_UIDS: {\n      const currentToLoadTileUids = uniq(\n        state.currentToLoadTileUids.concat(action.payload.tilesToLoadUids)\n      )\n      const currentToReleaseTileUids = uniq(\n        state.currentToReleaseTileUids.concat(action.payload.tilesToReleaseUids)\n      )\n      // clean to load tiles of tiles that needs to be released\n      const newToLoadTilesUids = currentToLoadTileUids.filter(\n        (tileUid) => currentToReleaseTileUids.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newToLoadTilesUids, currentToReleaseTileUids }\n    }\n\n    case MARK_TILES_UIDS_AS_LOADED: {\n      const currentToLoadTileUids = state.currentToLoadTileUids\n      const tileUidsMarkedAsLoaded = action.payload\n      const newCurrentToLoadTileUids = currentToLoadTileUids.filter(\n        (tileUid) => tileUidsMarkedAsLoaded.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newCurrentToLoadTileUids }\n    }\n\n    case RELEASE_MARKED_TILES_UIDS: {\n      return { ...state, currentToReleaseTileUids: [] }\n    }\n\n    default:\n      return state\n  }\n}\n","import { FlyToInterpolator } from 'react-map-gl'\nimport { easeCubic } from 'd3-ease'\nimport { MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL } from '../config'\nimport { TRANSITION_TYPE } from '../constants'\nimport {\n  SET_VIEWPORT,\n  UPDATE_VIEWPORT,\n  SET_ZOOM_INCREMENT,\n  SET_MOUSE_LAT_LONG,\n  TRANSITION_END,\n  SET_NATIVE_VIEWPORT,\n} from './viewport.actions'\n\nconst DEFAULT_TRANSITION = {\n  transitionDuration: 500,\n  transitionInterpolator: new FlyToInterpolator(),\n  transitionEasing: easeCubic,\n}\n\nconst initialState = {\n  viewport: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    width: 1000,\n    height: 800,\n  },\n  maxZoom: MAX_ZOOM_LEVEL,\n  minZoom: MIN_ZOOM_LEVEL,\n  prevZoom: 3,\n  currentTransition: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIEWPORT: {\n      return {\n        ...state,\n        viewport: action.payload,\n        canZoomIn: action.payload.zoom < state.maxZoom,\n        canZoomOut: action.payload.zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n      }\n    }\n\n    case UPDATE_VIEWPORT: {\n      const viewport = { ...state.viewport, ...action.payload }\n      return {\n        ...state,\n        viewport,\n        prevZoom: viewport.zoom,\n      }\n    }\n\n    case SET_ZOOM_INCREMENT: {\n      const currentZoom = state.viewport.zoom\n      const zoom = Math.min(\n        state.maxZoom,\n        action.payload.zoom || currentZoom + action.payload.increment\n      )\n      const viewport = {\n        ...state.viewport,\n        ...DEFAULT_TRANSITION,\n        zoom,\n        latitude:\n          action.payload.latitude === null ? state.viewport.latitude : action.payload.latitude,\n        longitude:\n          action.payload.longitude === null ? state.viewport.longitude : action.payload.longitude,\n      }\n      return {\n        ...state,\n        viewport,\n        canZoomIn: zoom < state.maxZoom,\n        canZoomOut: zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n        currentTransition: TRANSITION_TYPE.ZOOM,\n      }\n    }\n\n    case SET_MOUSE_LAT_LONG: {\n      return { ...state, mouseLatLong: action.payload }\n    }\n\n    case TRANSITION_END: {\n      return { ...state, currentTransition: null }\n    }\n\n    case SET_NATIVE_VIEWPORT: {\n      return { ...state, ...action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n","import { fromJS } from 'immutable'\nimport uniq from 'lodash/uniq'\nimport GL_STYLE from './gl-styles/style.json'\nimport {\n  SET_MAP_STYLE,\n  MARK_CARTO_LAYERS_AS_INSTANCIATED,\n  INIT_MAP_STYLE,\n  SET_STATIC_LAYERS,\n  SET_BASEMAP_LAYERS,\n} from './style.actions'\n\nconst attributions = uniq(\n  Object.keys(GL_STYLE.sources)\n    .map((sourceKey) => GL_STYLE.sources[sourceKey].attribution)\n    .filter((source) => source !== undefined)\n)\n\nconst setStyleDefaults = (style) => {\n  style.layers.forEach((layer) => {\n    if (layer.layout === undefined) {\n      layer.layout = {}\n    }\n    if (layer.paint === undefined) {\n      layer.paint = {}\n    }\n    // initialize time filter for time-filterable layers\n    if (layer.metadata && layer.metadata['gfw:temporal'] === true) {\n      layer.filter = ['all', ['>', 'timestamp', 0], ['<', 'timestamp', 999999999999]]\n    }\n    // set all layers to not visible except layers explicitely marked as visible (default basemap)\n    if (layer.layout.visibility !== 'visible') {\n      layer.layout.visibility = 'none'\n    }\n  })\n  return style\n}\n\nconst initialState = {\n  mapStyle: fromJS(setStyleDefaults(GL_STYLE)),\n  cartoLayersInstanciated: [],\n  staticLayers: [],\n  basemapLayers: [],\n  attributions,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_MAP_STYLE: {\n      const newMapStyle = state.mapStyle.setIn(['glyphs'], action.payload.glyphsPath)\n      return { ...state, mapStyle: newMapStyle }\n    }\n    case SET_MAP_STYLE: {\n      return { ...state, mapStyle: action.payload }\n    }\n    case SET_STATIC_LAYERS: {\n      return { ...state, staticLayers: action.payload }\n    }\n    case SET_BASEMAP_LAYERS: {\n      return { ...state, basemapLayers: action.payload }\n    }\n    case MARK_CARTO_LAYERS_AS_INSTANCIATED: {\n      const cartoLayersInstanciated = [...state.cartoLayersInstanciated, ...action.payload]\n      return { ...state, cartoLayersInstanciated }\n    }\n    default:\n      return state\n  }\n}\n","// TODO MAP MODULE remove whole reducer\nimport { SET_MAP_CURSOR } from './interaction.actions'\n\nconst initialState = {\n  cursor: 'progress',\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_MAP_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { compose, createStore, combineReducers, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport throttle from 'lodash/throttle'\nimport { trackTypes } from './proptypes/tracks'\nimport { heatmapLayerTypes, basemapLayerTypes, staticLayerTypes } from './proptypes/layers'\nimport { viewportTypes, popupTypes } from './proptypes/shared'\n\nimport Map from './glmap/Map.container'\nimport { initModule, setTemporalExtent, setHighlightTemporalExtent } from './module/module.actions'\nimport { fitToBounds, updateViewport, transitionToZoom } from './glmap/viewport.actions'\nimport { initStyle, commitStyleUpdates, applyTemporalExtent } from './glmap/style.actions'\nimport { updateTracks } from './tracks/tracks.actions'\nimport { updateHeatmapLayers, updateLayerLoadTemporalExtents } from './heatmap/heatmap.actions'\nimport GL_STYLE from './glmap/gl-styles/style.json'\n\nimport ModuleReducer from './module/module.reducer'\nimport TracksReducer from './tracks/tracks.reducer'\nimport HeatmapReducer from './heatmap/heatmap.reducer'\nimport HeatmapTilesReducer from './heatmap/heatmapTiles.reducer'\nimport ViewportReducer from './glmap/viewport.reducer'\nimport StyleReducer from './glmap/style.reducer'\nimport InteractionReducer from './glmap/interaction.reducer'\n\nconst mapReducer = combineReducers({\n  module: ModuleReducer,\n  tracks: TracksReducer,\n  heatmap: HeatmapReducer,\n  heatmapTiles: HeatmapTilesReducer,\n  style: StyleReducer,\n  viewport: ViewportReducer,\n  interaction: InteractionReducer,\n})\n\nlet composeEnhancers = compose\n\nif (process.env.MAP_REDUX_REMOTE_DEBUG && process.env.NODE_ENV === 'development') {\n  const composeWithDevTools = require('remote-redux-devtools').composeWithDevTools\n  composeEnhancers = composeWithDevTools({\n    name: 'Map module',\n    realtime: true,\n    hostname: 'localhost',\n    port: 8000,\n    maxAge: 30,\n    stateSanitizer: (state) => ({ ...state, map: { ...state.map, heatmap: 'NOT_SERIALIZED' } }),\n  })\n}\n\nconst store = createStore(\n  combineReducers({\n    map: mapReducer,\n  }),\n  {},\n  composeEnhancers(applyMiddleware(thunk))\n)\n\nconst throttleApplyTemporalExtent = throttle((temporalExtent) => {\n  store.dispatch(applyTemporalExtent(temporalExtent))\n  store.dispatch(setTemporalExtent(temporalExtent))\n}, 16)\n\nconst updateViewportFromIncomingProps = (incomingViewport) => {\n  store.dispatch(\n    updateViewport({\n      latitude: incomingViewport.center[0],\n      longitude: incomingViewport.center[1],\n      zoom: incomingViewport.zoom,\n    })\n  )\n}\n\nclass MapModule extends React.Component {\n  state = {\n    initialized: false,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    })\n  }\n\n  componentDidMount() {\n    // First trigger synchronous actions that should happen before any map render\n    // At the end of this, set a flag to allow map rendering\n\n    if (this.props.viewport !== undefined) {\n      updateViewportFromIncomingProps(this.props.viewport)\n    }\n\n    // TODO\n    if (this.props.glyphsPath !== undefined) {\n      store.dispatch(\n        initStyle({\n          glyphsPath: this.props.glyphsPath,\n          // TODO apply URL updates here\n        })\n      )\n    }\n\n    if (this.props.onAttributionsChange !== undefined) {\n      this.props.onAttributionsChange(store.getState().map.style.attributions)\n    }\n\n    if (store && store.getState().map.module.token === undefined) {\n      store.dispatch(\n        initModule({\n          token: this.props.token,\n          onViewportChange: this.props.onViewportChange,\n          onHover: this.props.onHover,\n          onClick: this.props.onClick,\n          onLoadStart: this.props.onLoadStart,\n          onLoadComplete: this.props.onLoadComplete,\n          onClosePopup: this.props.onClosePopup,\n          onAttributionsChange: this.props.onAttributionsChange,\n        })\n      )\n    }\n\n    if (\n      (this.props.basemapLayers !== undefined && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== undefined && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    if (this.props.tracks !== undefined) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // Now trigger async actions\n\n    if (this.props.temporalExtent !== undefined && this.props.temporalExtent.length) {\n      throttleApplyTemporalExtent(this.props.temporalExtent)\n    }\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({\n      initialized: true,\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    // tracks\n    if (this.props.tracks !== prevProps.tracks) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== prevProps.heatmapLayers) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n\n    // basemap / static layers\n    if (\n      (this.props.basemapLayers !== undefined && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== undefined && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    // loadTemporalExtent\n    if (this.props.loadTemporalExtent !== undefined && this.props.loadTemporalExtent.length) {\n      if (\n        prevProps.loadTemporalExtent === undefined ||\n        !prevProps.loadTemporalExtent.length ||\n        this.props.loadTemporalExtent[0].getTime() !== prevProps.loadTemporalExtent[0].getTime() ||\n        this.props.loadTemporalExtent[1].getTime() !== prevProps.loadTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(updateLayerLoadTemporalExtents(this.props.loadTemporalExtent))\n      }\n    }\n    // temporalExtent\n    if (this.props.temporalExtent !== undefined && this.props.temporalExtent.length) {\n      if (\n        prevProps.temporalExtent === undefined ||\n        !prevProps.temporalExtent.length ||\n        this.props.temporalExtent[0].getTime() !== prevProps.temporalExtent[0].getTime() ||\n        this.props.temporalExtent[1].getTime() !== prevProps.temporalExtent[1].getTime()\n      ) {\n        throttleApplyTemporalExtent(this.props.temporalExtent)\n      }\n    }\n\n    // highlightTemporalExtent\n    if (\n      this.props.highlightTemporalExtent !== undefined &&\n      this.props.highlightTemporalExtent.length\n    ) {\n      if (\n        prevProps.highlightTemporalExtent === undefined ||\n        !prevProps.highlightTemporalExtent.length ||\n        this.props.highlightTemporalExtent[0].getTime() !==\n          prevProps.highlightTemporalExtent[0].getTime() ||\n        this.props.highlightTemporalExtent[1].getTime() !==\n          prevProps.highlightTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    }\n\n    // viewport - since viewport will be updated internally to the module,\n    // we have to compare incoming props to existing viewport in store, ie:\n    // update viewport from incoming props ONLY if zoom or center is different\n    // from the internally stored one\n    // TODO FFS incoming lat lon should be an object, not an array\n    const currentViewport = store.getState().map.viewport.viewport\n    //                                        stop propagating updates from outside when zooming in\n    if (\n      this.props.viewport !== undefined &&\n      store.getState().map.viewport.currentTransition === null\n    ) {\n      if (\n        currentViewport.latitude !== this.props.viewport.center[0] ||\n        currentViewport.longitude !== this.props.viewport.center[1] ||\n        currentViewport.zoom !== this.props.viewport.zoom\n      ) {\n        // if zoom delta is precisely === 1, zoom with a transition\n        if (Math.abs(currentViewport.zoom - this.props.viewport.zoom) === 1) {\n          store.dispatch(transitionToZoom(this.props.viewport.zoom))\n        } else {\n          updateViewportFromIncomingProps(this.props.viewport)\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state.error !== undefined) {\n      console.log(this.state.error)\n      return (\n        <div>\n          <h2>Map component crashed!</h2>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n          <div>Component Stack Error Details:</div>\n          <p className=\"red\">{this.state.errorInfo.componentStack}</p>\n        </div>\n      )\n    }\n    // won't render anything before actions in componentDidMount have been triggered\n    return this.state.initialized !== true ? null : (\n      <Provider store={store}>\n        <Map {...this.props} />\n      </Provider>\n    )\n  }\n}\n\nMapModule.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.shape(viewportTypes),\n  tracks: PropTypes.arrayOf(PropTypes.exact(trackTypes)),\n  heatmapLayers: PropTypes.arrayOf(PropTypes.shape(heatmapLayerTypes)),\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  highlightTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  loadTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  basemapLayers: PropTypes.arrayOf(PropTypes.shape(basemapLayerTypes)),\n  staticLayers: PropTypes.arrayOf(PropTypes.shape(staticLayerTypes)),\n  // customLayers\n  hoverPopup: PropTypes.shape(popupTypes),\n  clickPopup: PropTypes.shape(popupTypes),\n  glyphsPath: PropTypes.string,\n  onViewportChange: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n  onClosePopup: PropTypes.func,\n}\n\nexport default MapModule\n\nexport const targetMapVessel = (id) => {\n  const track = store.getState().map.tracks.data.find((t) => t.id === id.toString())\n  store.dispatch(fitToBounds(track.geoBounds))\n\n  return track.timelineBounds\n}\n\n// TODO MAP MODULE make it a function\nexport const AVAILABLE_BASEMAPS = GL_STYLE.metadata['gfw:basemap-layers']\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Map from './index.js'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"map\"}}>{`Map`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"description\"}}>{`Description`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This component displays and load fishing activity and fishing-related layers on a map, used in various GFW projects:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/map-client/blob/9c5179358d4870c0fd4c2c0742917e72e6025c59/app/src/map/components/MapWrapper.jsx#L5\"}}>{`Map client`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/vessel-profiles/blob/aa0e17395f6a4947bb3fdf3106cb9d0a744ba64f/src/profile/components/MapWrapper.js#L3\"}}>{`Vessel profiles`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/data-portal/blob/96b1e24efcff58ade672a67229da0610d9d241ab/src/map/MapWrapper.jsx#L2\"}}>{`Data portal`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"available-properties\"}}>{`Available properties`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO: fix crash on PropsTable docz component`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map viewport={{ center: [0.026, 123.61], zoom: 5 }} />'} __scope={{props: this ? this.props : props,Map}}>\n  <Map viewport={{ center: [0.026, 123.61], zoom: 5, }} />\n</Playground>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}