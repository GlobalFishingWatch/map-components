{"version":3,"sources":["webpack:///./src/map/glmap/map.css","webpack:///./src/map/lib/Pack.js","webpack:///./src/map/lib/pelagosClient.js","webpack:///./src/map/proptypes/tracks.js","webpack:///./src/map/proptypes/layers.js","webpack:///./src/map/proptypes/shared.js","webpack:///./src/map/config.js","webpack:///./src/map/module/module.actions.js","webpack:///./src/map/module/module.selectors.js","webpack:///./src/map/tracks/tracks.selectors.js","webpack:///./src/map/constants.js","webpack:///./src/map/utils/getPBFTile.js","webpack:///./src/map/utils/heatmapTileData.js","webpack:///./src/map/utils/buildEndpoint.js","webpack:///./src/map/heatmap/heatmapTiles.actions.js","webpack:///./src/map/heatmap/heatmap.actions.js","webpack:///./src/map/glmap/viewport.actions.js","webpack:///./src/map/glmap/interaction.actions.js","webpack:///./src/map/utils/map-colors.js","webpack:///./src/map/heatmap/HeatmapSubLayer.js","webpack:///./src/map/heatmap/HeatmapLayer.js","webpack:///./src/map/tracks/TracksLayer.js","webpack:///./src/map/activity/ActivityLayers.js","webpack:///./src/map/activity/ActivityLayers.container.js","webpack:///./src/map/glmap/Map.js","webpack:///./src/map/glmap/Map.container.js","webpack:///./src/map/utils/getMainGeomType.js","webpack:///./src/map/glmap/style.actions.js","webpack:///./src/map/tracks/tracks.actions.js","webpack:///./src/map/utils/withReducerTypes.js","webpack:///./src/map/module/module.reducer.js","webpack:///./src/map/tracks/tracks.reducer.js","webpack:///./src/map/heatmap/heatmap.reducer.js","webpack:///./src/map/heatmap/heatmapTiles.reducer.js","webpack:///./src/map/glmap/viewport.reducer.js","webpack:///./src/map/glmap/style.reducer.js","webpack:///./src/map/glmap/interaction.reducer.js","webpack:///./src/map/map.js","webpack:///./src/map/map.mdx"],"names":["module","exports","map","googleLogo","byname","Uint8","size","Uint8Array","BYTES_PER_ELEMENT","array","getter","setter","Int8","Int8Array","Uint16","Uint16Array","Int16","Int16Array","Uint32","Uint32Array","Int32","Int32Array","Float32","Float32Array","Float64","Float64Array","writeStringToArrayBuffer","str","start","end","buf","bufstart","undefined","length","i","charCodeAt","arrayBufferToString","String","fromCharCode","apply","Pack","typemap","byarray","pack","typespec","value","littleendian","ArrayBuffer","DataView","stringToArrayBuffer","res","Uint8ClampedArray","buffer","name","spec","PelagosClient","_classCallCheck","this","MAGIC_COOKIE","url","token","Promise","resolve","reject","request","XMLHttpRequest","open","setRequestHeader","concat","responseType","onload","handleData","bind","onerror","send","self","error","readyState","success","status","isFileUri","response","byteLength","dataView","headerLen","cookie","slice","getInt32","offset","headerIsLoaded","header","JSON","parse","rowLen","colsByName","colidx","cols","col","idx","type","multiplier","min","max","orientation","errorLoading","toString","allLoaded","result","rowidx","row","val","colValues","eval","trackTypes","id","PropTypes","string","isRequired","data","object","color","oneOf","layerTemporalExtents","arrayOf","number","fitBoundsOnLoad","bool","shape","hue","filterValues","endpoints","isPBF","temporalExtents","temporalExtentsLess","field","values","node","VESSELS_BASE_RADIUS","MAX_SPRITES_PER_LAYER","startLoader","dispatch","state","loaderId","Date","getTime","payload","onLoadStart","completeLoader","getState","loaders","Object","assign","onLoadComplete","setHighlightTemporalExtent","highlightTemporalExtent","getTemporalExtent","temporalExtent","getHighlightTemporalExtent","getGeojsonTracks","createSelector","tracks","filter","t","getGeojsonTracksReady","mergeStyles","style1","style2","sources","_objectSpread","layers","_toConsumableArray","filterGeojsonByTimerange","geojson","_ref","features","featuresFiltered","reduce","filteredFeatures","feature","properties","coordinateProperties","times","filtered","geometry","coordinates","filteredCoordinates","coordinate","index","timeCoordinate","push","filteredFeature","getFullTracksStyles","hasTemporalExtent","hasTracks","timerange","acc","track","source","style","_defineProperty","paint","line-width","line-color","circle-radius","circle-color","getHighlightedTrackStyles","getTracksStyles","trackStyles","highlightedTrackStyles","TRANSITION_TYPE","BRUSH_RENDERING_STYLE","NORMAL","BULLSEYE","BRUSH_ZOOM_RENDERING_STYLE","CUSTOM_LAYERS_SUBTYPES","getPBFTile","tileUrl","fetch","headers","Authorization","then","ok","Error","blob","reader","FileReader","addEventListener","pbf","Pbf","vectorTile","VectorTile","readAsArrayBuffer","catch","e","console","warn","getTemporalTileURLs","urlTemplate","params","urls","forEach","extent","urlParams","seriesgroup","startTimeISO","toISOString","endTimeISO","tileCoordinates","x","y","z","zoom","templateSettings","interpolate","template","urlTemplateCompiled","buildEndpoint","temporalExtentsIndices","indexOf","getTilePromises","tilesetUrl","promises","urlIndex","obtainTile","getCleanVectorArrays","rawTileData","vectorArray","groupData","cleanVectorArrays","columns","currentArray","totalVectorArraysLength","sumBy","a","longitude","filteredColumns","column","key","cumulatedOffsets","appendValues","set","getTilePlaybackData","prevPlaybackData","tilePlaybackData","zoomFactorRadius","convert","getZoomFactorRadius","zoomFactorRadiusRenderingMode","getZoomFactorRadiusRenderingMode","zoomFactorOpacity","getZoomFactorOpacity","columnsArr","keys","c","storedColumns","sigma","weight","hidden","pull","uniq","_loop","point","geom","toGeoJSON","latitude","timeIndex","getOffsetedTimeAtPrecision","datetime","_lngLatToWorld2","_slicedToArray","lngLatToWorld","worldX","worldY","radius","sigmaToRadius","opacity","weightToOpacity","series","frame","addTracksPointsRenderingData","hasFishing","_lngLatToWorld4","getTracksPlaybackData","playbackData","vesselSatisfiesFilters","every","selectVesselsAt","tileData","tileQuery","startIndex","endIndex","currentFilters","vessels","toleranceRadiusInWorldUnits","_loop2","f","_loop3","wx","wy","filters","pass","some","vesselSatisfiesAllFilters","vessel","getTilecoverLimits","viewportZoom","Math","ceil","tilesAvailable","min_zoom","max_zoom","flushToReleaseTiles","heatmapTiles","currentToLoadTileUids","currentTilesToReleaseUids","currentToReleaseTileUids","releaseTiles","markTileAsLoaded","tileUids","flushTileState","forceLoadingAllVisibleTiles","arguments","currentVisibleTiles","tilesToLoad","tilesToReleaseUids","currentLoadedTiles","visibleTile","find","uid","loadedTile","tilesToLoadUids","tile","referenceTile","ADD_REFERENCE_TILE","visibleHeatmapLayers","heatmap","heatmapLayers","visibleHeatmapLayersIds","visible","getTiles","updateLoadedTiles","debouncedFlushState","debounce","updateHeatmapTilesFromViewport","mapViewport","viewport","currentTransition","boundsViewport","PerspectiveMercatorViewport","bounds","unproject","width","height","wn","es","w","s","n","boundsPolygonsCoordinates","limits","w1","e2","viewportTilesCoords","tilecover","tiles","viewportTilesIndexes","indexes","visibleTiles","coords","prevZoom","queryHeatmapVessels","temporalExtentIndexes","uids","_queryHeatmap2","_queryHeatmap","layer","isEmpty","isCluster","isMouseCluster","foundVessels","highlightedVessels","layerId","HIGHLIGHT_VESSELS","tilesetId","subtype","clickableCluster","highlightableCluster","clearHighlightedVessels","highlightVesselFromHeatmap","heatmapTiles_actions_objectSpread","UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES","UPDATE_HEATMAP_TILE","getTemporalExtentsVisibleIndices","loadTemporalExtent","currentExtentStart","currentExtentEnd","indices","temporalExtentStart","layerIds","referenceTiles","newTemporalExtentsToLoad","loaderID","tilesByLayer","heatmap_actions_toConsumableArray","allPromises","heatmapLayerHeader","_heatmapLayerHeader","heatmap_actions_objectSpread","temporalExtentsIndicesLoaded","queriedTemporalExtentsIndices","visibleTemporalExtentsIndices","temporalExtentsIndicesToLoad","difference","tilePromise","pelagosPromises","allLayerPromises","all","loadedLayerId","loadLayerTile","_ref2","points","parseLayerTile","loadAllTilesForLayer","layersVessels","availableTiles","bestTile","layerVesselsResult","layersVesselsResults","layerVessels","hasEncounters","layerVessel","v","uniqBy","updateHeatmapLayers","newLayers","currentLoadTemporalExtent","prevLayersDict","newLayer","prevLayer","interactive","prevLayerId","l","transitionTo","increment","callback","onViewportChange","center","canZoomIn","canZoomOut","mouseLatLong","getFeatureMetaFields","staticLayerId","mapStyle","toJS","metadata","getStaticLayerIdFromGlFeature","glFeature","findFeature","glFeatures","mapClick","cluster","currentActivityLayersInteractionData","event","fields","metaFields","metaField","pow","area","toLocaleString","maximumFractionDigits","title","label","isLink","target","zoomIntoVesselCenter","onClick","interaction_actions_objectSpread","hsvToRgb","h_","s_","v_","h","parseFloat","floor","p","q","mod","r","g","b","round","hueToRgbDefaults","hueToRgbString","rgb","hexToRgb","hex","exec","parseInt","hueIncrementToHue","hueIncrement","wrapHue","HeatmapSubLayer","baseTexture","renderingStyleIndex","useNormalBlendMode","stage","PIXI","particles","ParticleContainer","scale","alpha","position","uvs","blendMode","BLEND_MODES","SCREEN","spritesPool","initialTextureFrame","Rectangle","mainVesselTexture","Texture","_setTextureFrame","clearSpriteProps","spritesProps","spritesPropsCount","destroy","children","textureFrame","clone","hueToHueIncrement","VESSELS_HUES_INCREMENTS_NUM","update","numProps","resizeSpritesPool","sprite","setTransform","numSprites","delta","toRemove","removeChildAt","toAdd","_addSprites","num","Sprite","anchor","addChild","worldToPixelsSimple","m","HeatmapLayer","React","Component","_build","_destroy","_redraw","nextProps","useRadialGradientStyle","props","setBrushZoomRenderingStyle","_this$props","rootStage","customRenderingStyle","subLayers","renderingStyle","rendering","setBrushRenderingStyle","brushRenderingStyle","toUpperCase","_setBrushRenderingStyleIndex","brushZoomRenderingStyle","_this","cappedZoomRenderingStyle","newStyleIndex","subLayer","setRenderingStyleIndex","_this2","_this$props2","defaultHue","allHuesToRender","currentlyUsedHues","allHues","_createSublayer","_destroySubLayer","_setSubLayersSpritePropsForTile","numFilters","hueToRender","render","_this$props3","viewportLeft","viewportRight","len","fi","scaledX","scaledY","mtx","pixelProjectionMatrix","_ref3","HeatmapLayer_slicedToArray","pitch","worldToPixels","pushSpriteProps","defaultOpacity","defaultSize","removeChild","TracksLayer","Graphics","nativeLines","clear","highlightTemporalExtentIndexes","overInInner","overExtent","drawFishingCircles","fishingCirclesRadius","drawOverTrack","_drawTrack","substr","lineThickness","lineOpacity","prevSeries","prevWorldX","prevWorldY","_ref$worldOffset","worldOffset","circlePoints","lineStyle","duplicateWorld","currentSeries","_worldToPixels2","TracksLayer_slicedToArray","moveTo","abs","atDatelineWorldY","isWestToEast","worldXEnd","atDatelineEndWorldX","atDatelineStartWorldX","_worldToPixels4","x1","y1","lineTo","_worldToPixels6","x2","y2","beginFill","circlesLength","drawCircle","endFill","ActivityLayers","touches","queryCoords","clientX","clientY","heatmapFadingIn","heatmapStage","_heatmapFadeinStep","BaseControl","exportNativeViewport","_context","_updateViewportSize","_this$props$viewport","pixi","transparent","antialias","renderer","canvas","view","container","appendChild","baseTextureCanvas","blurFactor","tplCanvas","document","createElement","tplCtx","getContext","diameter","yCenter","gradient","createRadialGradient","rgbString","addColorStop","rgbOuter","fillStyle","fillRect","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","getVesselTexture","fromCanvas","ticker","add","_onTick","viewportWidth","viewportHeight","resize","dim","_viewport$unproject2","ActivityLayers_slicedToArray","wrappedLongitude","heatmapFadeinStartTimestamp","now","timeElapsed","highlightedClickedVessel","highlightLayerData","highlightFilters","ActivityLayers_objectSpread","leftWorldScaled","rightWorldScaled","shouldUseRadialGradientStyle","toggleHeatmapDimming","_startHeatmapFadein","err","gl","getError","log","_this$_getHighlightDa","_getHighlightData","react_default","ref","onMouseMove","onTouchStart","heatmap_HeatmapLayer","tracks_TracksLayer","propTypes","func","contextTypes","getHeatmapLayersAsArray","ActivityLayers_container_objectSpread","getTracksWithData","getTemporalExtentIndexes","startTimestamp","endTimestamp","getHighlightTemporalExtentIndexes","connect","ownProps","nativeViewport","topLeftPx","bottomRightPx","topLeftWorld","pixelsToWorld","pixelUnprojectionMatrix","bottomRightWorld","northWest","southEast","north","south","west","east","PopupWrapper","closeButton","onClose","esm","offsetTop","tipSize","closeOnClick","Map","Map_classCallCheck","Map_getPrototypeOf","call","Map_defineProperty","Map_assertThisInitialized","_mapContainerRef","mapContainerStyle","window","getComputedStyle","setViewport","Map_objectSpread","mapHover","glMap","clusterId","cluster_id","sourceId","glSource","getSource","getClusterExpansionZoom","err1","getClusterLeaves","err2","lngLat","onMapInteraction","mouseOver","_resize","setTimeout","removeEventListener","_this3","maxZoom","minZoom","transitionEnd","onClosePopup","clickPopup","hoverPopup","cursor","interactiveLayerIds","className","styles","onMouseLeave","setState","onMouseEnter","getMap","onTransitionEnd","onHover","getCursor","isDragging","ActivityLayers_container","Map_PopupWrapper","content","getInteractiveLayerIds","staticLayers","getMapStyle","mapStyles","trackLayersIndex","lastIndexOf","finalMapStyles","mergeIn","mapStylesLayers","get","trackLayer","insert","fromJS","interaction","lat","long","popupFields","mainPopupFieldId","toLowerCase","featureTitle","objects","TYPES","geoJSON","setMapStyle","updateGLLayer","glLayerId","refLayer","currentStyleLayers","newStyle","glLayerIndex","findIndex","glLayer","visibility","setIn","toggleLayerVisibility","isBasemap","initialGLLayer","GL_STYLE","refLayerOpacity","labelsVisibility","getIn","showLabels","currentGlLayer","currentStyle","glType","defaultStyles","styleType","hasFeatures","applyStyleToAllFeatures","allPaintProperties","style_actions_objectSpread","glPaintProperty","glPaintFinalValue","selectedValue","fallbackValue","paintOrLayout","includes","layerColorRgbString","layerColorRgb","replace","applyLayerExpressions","addCustomGLLayer","tileSize","allGeoJSONTypes","numByGLType","geoJSONType","glTypeMax","getMainGeomType","layout","layerIndex","reverse","splice","instanciateCartoLayers","cartoLayersPromises","sourceCartoSQL","mapConfig","options","sql","mapConfigURL","encodeURIComponent","stringify","cartoAnonymousMapUrl","json","layergroupid","instanciatedCartoLayers","cartoLayer","tilesURL","newSourceId","commitStyleUpdates","basemapLayers","style_actions_toConsumableArray","bl","currentGLSources","workspaceGLLayers","workspaceGLLayer","finalSource","srcGlLayer","source-layer","finalLayers","addWorkspaceGLLayers","customLayers","isCustom","glLayers","glSources","cartoLayersToInstanciate","cartoLayerInstanciated","cartoLayersInstanciated","ADD_TRACK","UPDATE_TRACK","getTrackDataParsed","time","Infinity","timelineBounds","getTrackBounds","tbbox","minLat","minLng","maxLat","maxLng","getOldTrackBoundsFormat","addOffset","geo","lng","updateTracks","newTracks","prevTracks","newTrack","trackId","prevTrack","trackHasData","trackHasUrl","geoBounds","cleanData","rawTrackData","statusText","_getTrackDataParsed","targetMapVessel","finally","withReducerPropTypes","propTypesSchema","reducer","initialState","onAttributionsChange","withReducerTypes","instanceOf","action","module_reducer_objectSpread","module_reducer_toConsumableArray","loaderIndex","exact","tracks_reducer_objectSpread","tracks_reducer_toConsumableArray","trackData","removedTrackId","DEFAULT_TRANSITION","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","bearing","attributions","sourceKey","attribution","mapReducer","combineReducers","ModuleReducer","TracksReducer","indicesAdded","heatmap_reducer_defineProperty","heatmap_reducer_objectSpread","heatmap_reducer_toConsumableArray","newTile","layerTiles","tileIndex","tileUid","releasedTileIndex","releasedRefTileIndex","newHeatmapLayers","heatmapTiles_reducer_objectSpread","tileUidsMarkedAsLoaded","newMapStyle","glyphsPath","style_reducer_objectSpread","style_reducer_toConsumableArray","viewport_reducer_objectSpread","currentZoom","interaction_reducer_objectSpread","composeEnhancers","compose","process","MAP_REDUX_REMOTE_DEBUG","REACT_APP_MAP_REDUX_REMOTE_DEBUG","store","createStore","applyMiddleware","thunk","throttleApplyTemporalExtent","throttle","currentFilter","applyTemporalExtent","setTemporalExtent","updateViewportFromIncomingProps","incomingViewport","viewportUpdate","MapModule","initialized","errorInfo","prevProps","indicesToAddByLayer","heatmapLayer","oldVisibleTemporalExtentsIndices","newVisibleTemporalExtentsIndices","layerIdsWithIndicesToAdd","currentViewport","componentStack","react_redux_es","Map_container","defaultProps","vp","fitBounds","padding","MDXContent","map_map_classCallCheck","map_map_possibleConstructorReturn","map_map_getPrototypeOf","components","_objectWithoutProperties","dist","parentName","href","index_m","__codesandbox","__position","__code","__scope","map_map"],"mappings":"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","file":"static/js/src-map-map.35730868.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__2QkEc\",\"googleLogo\":\"map_googleLogo__1hHOD\"};","var byname = {\n  Uint8: {\n    size: Uint8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Int8: {\n    size: Int8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Uint16: {\n    size: Uint16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint16',\n    setter: 'setUint16',\n  },\n  Int16: {\n    size: Int16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt16',\n    setter: 'setInt16',\n  },\n  Uint32: {\n    size: Uint32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint32',\n    setter: 'setUint32',\n  },\n  Int32: {\n    size: Int32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt32',\n    setter: 'setInt32',\n  },\n  Float32: {\n    size: Float32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getFloat32',\n    setter: 'setFloat32',\n  },\n  Float64: {\n    size: Float64Array.BYTES_PER_ELEMENT,\n    array: 'Float64Array',\n    getter: 'getFloat64',\n    setter: 'setFloat64',\n  },\n}\n\nvar writeStringToArrayBuffer = function(str, start, end, buf, bufstart) {\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  if (bufstart == undefined) {\n    bufstart = start\n  }\n  for (var i = start; i < end; i++) {\n    buf[i - start + bufstart] = str.charCodeAt(i) & 0xff\n  }\n}\n\nvar stringToArrayBuffer = function(str, start, end) {\n  var self = this\n\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  var res = new Uint8ClampedArray(end - start)\n  writeStringToArrayBuffer(str, start, end, res, 0)\n  return res.buffer\n}\n\nvar arrayBufferToString = function(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf))\n}\n\nvar pack = function(typespec, value, littleendian) {\n  var array = new ArrayBuffer(typespec.size)\n  new DataView(array)[typespec.setter](0, value, littleendian)\n  return arrayBufferToString(array)\n}\n\nvar Pack = {\n  typemap: {\n    byname: byname,\n    byarray: {},\n  },\n  pack: pack,\n  arrayBufferToString: arrayBufferToString,\n  stringToArrayBuffer: stringToArrayBuffer,\n  writeStringToArrayBuffer: writeStringToArrayBuffer,\n}\nfor (var name in Pack.typemap.byname) {\n  var spec = Pack.typemap.byname[name]\n  spec.name = name\n  Pack.typemap.byarray[spec.array] = spec\n}\n\nexport default Pack\n","import Pack from './Pack'\n\nclass PelagosClient {\n  constructor() {\n    this.MAGIC_COOKIE = 'tmtx'\n  }\n\n  obtainTile(url, token) {\n    return new Promise(\n      function(resolve, reject) {\n        this.request = null\n        if (typeof XMLHttpRequest != 'undefined') {\n          this.request = new XMLHttpRequest()\n        } else {\n          throw 'XMLHttpRequest is disabled'\n        }\n        this.resolve = resolve\n        this.reject = reject\n        this.request.open('GET', url, true)\n        if (token) {\n          this.request.setRequestHeader('Authorization', `Bearer ${token}`)\n        }\n        this.request.responseType = 'arraybuffer'\n        this.request.onload = this.handleData.bind(this)\n        this.request.onerror = this.handleData.bind(this)\n        this.request.send(null)\n      }.bind(this)\n    )\n  }\n\n  handleData() {\n    var self = this\n    if (!this.request) {\n      return\n    }\n    if (this.error) {\n      return true\n    }\n\n    if (this.request.readyState == 4) {\n      /* HTTP reports success with a 200 status. The file protocol\n       reports success with zero. HTTP returns zero as a status\n       code for forbidden cross domain requests.\n       https://developer.mozilla.org/En/Using_XMLHttpRequest */\n      var success = this.request.status == 200 || (this.isFileUri && this.request.status == 0)\n      if (!success) {\n        this.resolve(null)\n        return\n      }\n    }\n\n    if (!this.request.response) {\n      return\n    }\n    var length = this.request.response.byteLength\n    var response = this.request.response\n    var dataView = new DataView(response)\n\n    if (length < 4 + 4) {\n      return\n    }\n    if (self.headerLen == null) {\n      var cookie = Pack.arrayBufferToString(response.slice(0, 4))\n      if (cookie != this.MAGIC_COOKIE) {\n        this.reject(\n          'Could not load ' +\n            this.url +\n            ' due to incorrect file format. Cookie: [' +\n            this.cookie +\n            ']'\n        )\n        return\n      }\n\n      self.headerLen = dataView.getInt32(4, true)\n\n      self.offset = 4 + 4\n    }\n    if (length < self.offset + self.headerLen) {\n      return\n    }\n    if (!self.headerIsLoaded) {\n      self.header = JSON.parse(\n        Pack.arrayBufferToString(response.slice(self.offset, self.offset + self.headerLen))\n      )\n      self.rowLen = 0\n      self.header.colsByName = {}\n      for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n        var col = self.header.cols[colidx]\n        col.idx = colidx\n        self.header.colsByName[col.name] = col\n        col.typespec = Pack.typemap.byname[col.type]\n\n        if (col.multiplier != undefined && col.min != undefined) {\n          col.min = col.min * col.multiplier\n        }\n        if (col.offset != undefined && col.min != undefined) {\n          col.min = col.min + col.offset\n        }\n        if (col.multiplier != undefined && col.max != undefined) {\n          col.max = col.max * col.multiplier\n        }\n        if (col.offset != undefined && col.max != undefined) {\n          col.max = col.max + col.offset\n        }\n\n        self.rowLen += col.typespec.size\n      }\n      self.offset += self.headerLen\n\n      // Add the padding to nearest 4-byte-boundary\n      self.offset += (4 - (self.headerLen % 4)) % 4\n\n      self.headerIsLoaded = true\n      if (self.header.orientation != 'rowwise' && self.header.orientation != 'columnwise') {\n        self.errorLoading({\n          orientation: self.header.orientation,\n          toString: function() {\n            return (\n              'Could not load ' +\n              this.url +\n              ' due to unsupported file orientation. Orientation: ' +\n              this.orientation +\n              '. Supported orientations: rowwise, columnwise.'\n            )\n          },\n        })\n        return true\n      }\n\n      // Empty tile, stop parsing.\n      if (!self.rowLen) {\n        self.allLoaded()\n        return true\n      }\n    }\n    if (self.header.orientation == 'rowwise') {\n      var result = {}\n      for (; self.offset + self.rowLen <= length; self.rowidx++) {\n        var row = {}\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n          var val = dataView[col.typespec.getter](self.offset, true)\n          row[col.name] = val\n          self.offset += col.typespec.size\n        }\n        // self.rowLoaded(row);\n\n        result[col.name] = row\n      }\n      if (self.rowidx == self.header.length) {\n        // self.allLoaded();\n        this.resolve(result)\n      } else {\n        // self.batchLoaded();\n      }\n    } else if (self.header.orientation == 'columnwise') {\n      var colValues = null\n      var result = {}\n      if (length >= self.offset + self.header.length * self.rowLen) {\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n\n          colValues = new (eval(col.typespec.array))(\n            response.slice(self.offset, self.offset + col.typespec.size * self.header.length)\n          )\n          self.offset += self.header.length * col.typespec.size\n\n          result[col.name] = colValues\n        }\n\n        // self.allLoaded();\n        this.resolve(result)\n        return true\n      }\n    }\n  }\n}\n\nexport default PelagosClient\n","import PropTypes from 'prop-types'\n\nexport const trackTypes = {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  data: PropTypes.object,\n  color: PropTypes.string,\n  type: PropTypes.oneOf(['geojson', undefined]),\n  layerTemporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  fitBoundsOnLoad: PropTypes.bool,\n}\n","import PropTypes from 'prop-types'\n\nexport const heatmapLayerTypes = {\n  id: PropTypes.string.isRequired,\n  tilesetId: PropTypes.string,\n  subtype: PropTypes.string,\n  visible: PropTypes.bool,\n  hue: PropTypes.number,\n  opacity: PropTypes.number,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      // hue overrides layer hue if set\n      hue: PropTypes.number,\n      // filterValues is a dictionary in which each key is a filterable field,\n      // and values is an array of all possible values (OR filter)\n      // ie: filterValues: { category: [5, 6] }\n      filterValues: PropTypes.object,\n    })\n  ),\n  header: PropTypes.shape({\n    endpoints: PropTypes.object,\n    isPBF: PropTypes.bool,\n    colsByName: PropTypes.object,\n    temporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    temporalExtentsLess: PropTypes.bool,\n  }).isRequired,\n  interactive: PropTypes.bool,\n}\n\nexport const basemapLayerTypes = {\n  id: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nexport const staticLayerTypes = {\n  id: PropTypes.string.isRequired,\n  // TODO MAP MODULE Is that needed and if so why\n  visible: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  highlighted: PropTypes.bool,\n  higlightedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  opacity: PropTypes.number,\n  color: PropTypes.string,\n  showLabels: PropTypes.bool,\n  interactive: PropTypes.bool,\n  filters: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  isCustom: PropTypes.bool,\n  subtype: PropTypes.oneOf([undefined, 'geojson', 'raster']),\n  url: PropTypes.string,\n  data: PropTypes.object,\n  gl: PropTypes.object,\n}\n","import PropTypes from 'prop-types'\n\nexport const popupTypes = {\n  content: PropTypes.node,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n}\n\nexport const viewportTypes = {\n  zoom: PropTypes.number,\n  center: PropTypes.arrayOf(PropTypes.number),\n}\n","// Application settings\nexport const TIMELINE_STEP = 24 * 60 * 60 * 1000 // 1 day\nexport const MIN_FRAME_LENGTH_MS = TIMELINE_STEP // 1 day\n\n// vessels rendering\n// from this zoom level and above, render using circle style instead of heatmap\nexport const VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD = 6\n// the base radius, it can only be scaled down by the radius factor calculated on the dataset\nexport const VESSELS_BASE_RADIUS = 8\n// in heatmap style, defines how 'blurry' a point will look. Higher = less blur\nexport const VESSELS_HEATMAP_BLUR_FACTOR = 0.15\n\nexport const ACTIVITY_HIGHLIGHT_HUE = 312\n\nexport const VESSELS_HEATMAP_DIMMING_ALPHA = 0.5\n\nexport const TRACKS_DOTS_STYLE_ZOOM_THRESHOLD = 2\n\nexport const MAX_SPRITES_PER_LAYER = 200000\n\n// interaction\n// radius of vessels lookup in pixels,\n// ie how large the clicked region should be for including vessels\nexport const VESSEL_CLICK_TOLERANCE_PX = 10\n\nexport const CLUSTER_CLICK_ZOOM_INCREMENT = 1\n\nexport const MIN_ZOOM_LEVEL = 1\n// user can zoom up to this z level, but it doesn't guarantee availability of tiles\nexport const MAX_ZOOM_LEVEL = 14\n\n// data\n// Limit tile loading for activity layers up to this z level.\n// Beyond, layer is still displayed but with coarse data from the lower zoom level\nexport const ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING = 10\n\n// Sets what should be the discrete zoom level to load tiles, from a non-discrete\n// viewport zoom values. For instance, a values of 0.5 will load z 3 with a viewport\n// z of 2 (ceiling of 2 + 0.5)\n// this has a direct impact on the number of points displayed on the map, thus on the\n// performance of the app.\nexport const TILES_LOAD_ZOOM_OFFSET = 0.5\n\nexport const STATIC_LAYERS_CARTO_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map?config=$MAPCONFIG'\nexport const STATIC_LAYERS_CARTO_TILES_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map/$LAYERGROUPID/{z}/{x}/{y}.mvt'\n\nexport const TRACKS_LAYER_IN_FRONT_OF_GROUP = 'static'\n","export const INIT_MODULE = 'INIT_MODULE'\nexport const SET_TEMPORAL_EXTENT = 'SET_TEMPORAL_EXTENT'\nexport const SET_HIGHLIGHT_TEMPORAL_EXTENT = 'SET_HIGHLIGHT_TEMPORAL_EXTENT'\nexport const START_LOADER = 'START_LOADER'\nexport const COMPLETE_LOADER = 'COMPLETE_LOADER'\n\nexport const initModule = (props) => (dispatch) => {\n  dispatch({\n    type: INIT_MODULE,\n    payload: props,\n  })\n}\n\nexport const startLoader = (dispatch, state) => {\n  const loaderId = new Date().getTime()\n  dispatch({\n    type: START_LOADER,\n    payload: loaderId,\n  })\n  if (state.map.module.onLoadStart !== undefined) {\n    state.map.module.onLoadStart()\n  }\n  return loaderId\n}\n\nexport const completeLoader = (loaderId) => (dispatch, getState) => {\n  const state = getState()\n  const loaders = Object.assign({}, state.map.module.loaders)\n  dispatch({\n    type: COMPLETE_LOADER,\n    payload: loaderId,\n  })\n  if (!loaders.length && state.map.module.onLoadComplete !== undefined) {\n    state.map.module.onLoadComplete()\n  }\n}\n\nexport const onViewportChange = () => (dispatch, getState) => {\n  const state = getState()\n  const callback = state.map.module.onViewportChange\n\n  if (callback === undefined) {\n    return\n  }\n  const viewport = state.map.viewport\n\n  if (viewport.bounds === undefined) {\n    return\n  }\n\n  callback({\n    zoom: viewport.viewport.zoom,\n    center: [viewport.viewport.latitude, viewport.viewport.longitude],\n    bounds: viewport.bounds,\n    canZoomIn: viewport.canZoomIn,\n    canZoomOut: viewport.canZoomOut,\n    mouseLatLong: viewport.mouseLatLong,\n  })\n}\n\nexport const setTemporalExtent = (temporalExtent) => ({\n  type: SET_TEMPORAL_EXTENT,\n  payload: temporalExtent,\n})\n\nexport const setHighlightTemporalExtent = (highlightTemporalExtent) => ({\n  type: SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  payload: highlightTemporalExtent,\n})\n\nexport const closePopup = () => (dispatch, getState) => {\n  const state = getState()\n  if (state.map.module.onClosePopup !== undefined) {\n    state.map.module.onClosePopup()\n  }\n}\n","export const getTemporalExtent = (state) => state.map.module.temporalExtent\n\nexport const getHighlightTemporalExtent = (state) => state.map.module.highlightTemporalExtent\n","import { createSelector } from 'reselect'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\n\nexport const getTracksData = (state) => state.map.tracks.data\nexport const getGeojsonTracks = createSelector(\n  getTracksData,\n  (tracks) => tracks.filter((t) => t.type === 'geojson')\n)\nexport const getGeojsonTracksReady = createSelector(\n  getGeojsonTracks,\n  (tracks) => tracks.filter((t) => t.data !== undefined)\n)\n\nconst mergeStyles = (style1, style2) => ({\n  sources: { ...style1.sources, ...style2.sources },\n  layers: [...style1.layers, ...style2.layers],\n})\n\nconst filterGeojsonByTimerange = (geojson, { start, end }) => {\n  if (!geojson || !geojson.features) return null\n  const featuresFiltered = geojson.features.reduce((filteredFeatures, feature) => {\n    const hasTimes =\n      feature.properties.coordinateProperties.times &&\n      feature.properties.coordinateProperties.times.length > 0\n    if (hasTimes) {\n      const filtered = feature.geometry.coordinates.reduce(\n        (filteredCoordinates, coordinate, index) => {\n          const timeCoordinate = feature.properties.coordinateProperties.times[index]\n          const isInTimeline = timeCoordinate >= start && timeCoordinate <= end\n          if (isInTimeline) {\n            filteredCoordinates.coordinates.push(coordinate)\n            filteredCoordinates.times.push(timeCoordinate)\n          }\n          return filteredCoordinates\n        },\n        { coordinates: [], times: [] }\n      )\n      if (!filtered.coordinates.length) return filteredFeatures\n\n      const filteredFeature = {\n        ...feature,\n        geometry: {\n          ...feature.geometry,\n          coordinates: filtered.coordinates,\n        },\n        properties: {\n          ...feature.properties,\n          coordinateProperties: {\n            times: filtered.times,\n          },\n        },\n      }\n      filteredFeatures.push(filteredFeature)\n    }\n    return filteredFeatures\n  }, [])\n  const geojsonFiltered = {\n    ...geojson,\n    features: featuresFiltered,\n  }\n  return geojsonFiltered\n}\n\nconst getFullTracksStyles = createSelector(\n  [getTemporalExtent, getGeojsonTracksReady],\n  (temporalExtent, tracks) => {\n    const hasTemporalExtent = temporalExtent && temporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: temporalExtent[0].getTime(),\n      end: temporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}Track`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}Lines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': track.color,\n              },\n            },\n            {\n              id: `${track.id}Points`,\n              source,\n              type: 'circle',\n              filter: ['match', ['geometry-type'], ['', 'Point'], true, false],\n              paint: {\n                'circle-radius': 4,\n                'circle-color': track.color,\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nconst getHighlightedTrackStyles = createSelector(\n  [getHighlightTemporalExtent, getGeojsonTracksReady],\n  (highlightTemporalExtent, tracks) => {\n    const hasTemporalExtent = highlightTemporalExtent && highlightTemporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: highlightTemporalExtent[0].getTime(),\n      end: highlightTemporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}HighlightedTrack`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}HighlightedLines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': '#fff',\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nexport const getTracksStyles = createSelector(\n  [getFullTracksStyles, getHighlightedTrackStyles],\n  (trackStyles, highlightedTrackStyles) => {\n    if (!highlightedTrackStyles) return trackStyles\n    return mergeStyles(trackStyles, highlightedTrackStyles)\n  }\n)\n","export const GL_TRANSPARENT = 'rgba(0,0,0,0)'\n\nexport const TRANSITION_TYPE = {\n  ZOOM: 'ZOOM',\n}\n\nexport const ENCOUNTERS = 'Encounters'\n\nexport const BRUSH_RENDERING_STYLE = {\n  NORMAL: 0,\n  BULLSEYE: 2,\n}\n\nexport const BRUSH_ZOOM_RENDERING_STYLE = {\n  RADIAL_GRADIENT: 0,\n  CIRCLE: 1,\n}\n\nexport const POLYGON_LAYERS_AREA = 'POLYGON_LAYERS_AREA'\n\nexport const CUSTOM_LAYERS_SUBTYPES = {\n  geojson: 'geojson',\n  raster: 'raster',\n}\n","import Pbf from 'pbf'\nimport { VectorTile } from '@mapbox/vector-tile'\n\nexport default (tileUrl, token) => {\n  const vectorTilePromise = fetch(tileUrl, {\n    headers: token\n      ? {\n          Authorization: `Bearer ${token}`,\n        }\n      : {},\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`could not load tile ${tileUrl}`)\n      }\n      return response.blob().then((blob) => {\n        const reader = new FileReader()\n        return new Promise((resolve) => {\n          reader.addEventListener('loadend', () => {\n            // reader.result contains the contents of blob as a typed array\n            // blob.type === 'application/x-protobuf'\n            const pbf = new Pbf(reader.result)\n            const vectorTile = new VectorTile(pbf)\n            return resolve(vectorTile)\n          })\n          reader.readAsArrayBuffer(blob)\n        })\n      })\n    })\n    .catch((e) => {\n      console.warn(e)\n    })\n  return vectorTilePromise\n}\n","import pull from 'lodash/pull'\nimport uniq from 'lodash/uniq'\nimport sumBy from 'lodash/sumBy'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport convert from '@globalfishingwatch/map-convert'\nimport buildEndpoint from './buildEndpoint'\nimport PelagosClient from '../lib/pelagosClient'\n\nimport getPBFTile from './getPBFTile'\n\n/**\n * Generates the URLs to load vessel track data for a tile\n *\n * @param {string} tilesetUrl       the tileset base URL\n * @param {array} temporalExtents   all tileset temporal extents\n * @param {object} params           - seriesgroup: a seriesgroup id, used for tracks loading\n *                                  - tileCoordinates: this tiles tile coordinates (zoom, x, y). Will default to 0,0,0\n *                                  - temporalExtentsIndices: restrict to these temporalExtents indices\n * @returns {Array}                 an array of URLs for this tile\n */\nconst getTemporalTileURLs = (urlTemplate, temporalExtents, params) => {\n  const urls = []\n\n  ;(temporalExtents || [null]).forEach((extent, index) => {\n    const urlParams = {\n      id: params.seriesgroup,\n    }\n    if (extent !== null && params.temporalExtentsLess !== true) {\n      urlParams.startTimeISO = new Date(extent[0]).toISOString()\n      urlParams.endTimeISO = new Date(extent[1]).toISOString()\n    }\n    if (params.tileCoordinates) {\n      urlParams.x = params.tileCoordinates.x\n      urlParams.y = params.tileCoordinates.y\n      urlParams.z = params.tileCoordinates.zoom\n    }\n\n    const url = buildEndpoint(urlTemplate, urlParams)\n\n    if (\n      params.temporalExtentsLess === true ||\n      !params.temporalExtentsIndices ||\n      params.temporalExtentsIndices.indexOf(index) > -1\n    ) {\n      urls.push(url)\n    }\n  })\n  return urls\n}\n\n/**\n * See getTemporalTileURLs.\n */\nexport const getTilePromises = (tilesetUrl, token, temporalExtents, params) => {\n  const promises = []\n  const urls = getTemporalTileURLs(tilesetUrl, temporalExtents, params)\n  for (let urlIndex = 0, length = urls.length; urlIndex < length; urlIndex++) {\n    if (params.isPBF === true) {\n      promises.push(getPBFTile(urls[urlIndex], token))\n    } else {\n      promises.push(new PelagosClient().obtainTile(urls[urlIndex], token))\n    }\n  }\n\n  return promises\n}\n\nexport const getCleanVectorArrays = (rawTileData) =>\n  rawTileData.filter((vectorArray) => vectorArray !== null)\n\n/**\n * As data will come in multiple arrays (1 per API query/year basically), they need to be merged here\n *\n * @param cleanVectorArrays an array of objects containing a Float32Array for each vessel param (lat, lon, weight...)\n * @param columns the keys to pick on the vectorArrays (lat, lon, weight, etc)\n * @returns an object containing a Float32Array for each API_RETURNED_KEY (lat, lon, weight, etc)\n */\nexport const groupData = (cleanVectorArrays, columns) => {\n  const data = {}\n\n  const totalVectorArraysLength = sumBy(cleanVectorArrays, (a) => a.longitude.length)\n\n  const filteredColumns = columns.filter((column) => {\n    if (cleanVectorArrays[0] && cleanVectorArrays[0][column] === undefined) {\n      console.warn(`column ${column} is present in layerHeader.colsByName but not in tile data`)\n      return false\n    }\n    return true\n  })\n\n  filteredColumns.forEach((key) => {\n    data[key] = new Float32Array(totalVectorArraysLength)\n  })\n\n  let currentArray\n  let cumulatedOffsets = 0\n\n  const appendValues = (key) => {\n    data[key].set(currentArray[key], cumulatedOffsets)\n  }\n\n  for (let index = 0, length = cleanVectorArrays.length; index < length; index++) {\n    currentArray = cleanVectorArrays[index]\n    filteredColumns.forEach(appendValues)\n    cumulatedOffsets += currentArray.longitude.length\n  }\n  return data\n}\n\n/**\n * Converts Vector Array data to Playback format and stores it locally.\n * The data structure is an array indexed by a time unit, ie a set of points every day\n * This preprocessing step allows playback to play smoothly as the necessary conversions and data structure set up\n * is done once (after tile has been loaded)\n *\n * @param data the source data before indexing by day, an object containing\n *  - a vector (Float32Array) for each header's column in the case of Pelagos tiles\n *  - an array of points int the case of PBF tiles\n * @param colsByName the columns present on the dataset, determined by tileset headers\n * @param tileCoordinates x, y, z\n * @param isPBF bool whether data is a PBF vector tile (true) or a Pelagos tile (false)\n * @param prevPlaybackData an optional previously loaded tilePlaybackData array (when adding time range)\n */\nexport const getTilePlaybackData = (data, colsByName, tileCoordinates, isPBF, prevPlaybackData) => {\n  const tilePlaybackData = prevPlaybackData === undefined ? [] : prevPlaybackData\n\n  const zoom = tileCoordinates.zoom\n  const zoomFactorRadius = convert.getZoomFactorRadius(zoom)\n  const zoomFactorRadiusRenderingMode = convert.getZoomFactorRadiusRenderingMode(zoom)\n  const zoomFactorOpacity = convert.getZoomFactorOpacity(zoom)\n\n  // store all available columns as object keys\n  const columns = {}\n  const columnsArr = Object.keys(colsByName)\n  columnsArr.forEach((c) => {\n    columns[c] = true\n  })\n\n  // columns specified by layer header columns\n  let storedColumns = [].concat(columnsArr)\n  if (columns.sigma === true) storedColumns.push('radius')\n  if (columns.weight === true) storedColumns.push('opacity')\n  if (columns.longitude === true) {\n    storedColumns.push('worldX')\n    storedColumns.push('worldY')\n  }\n  if (columns.id === true) {\n    storedColumns.push('series')\n  }\n\n  // omit values that will be transformed before being stored to playback data (ie lat -> worldY)\n  // only if hidden: true flag is set on header\n  ;['latitude', 'longitude', 'datetime'].forEach((col) => {\n    if (colsByName[col] === undefined || colsByName[col].hidden === true) {\n      pull(storedColumns, col)\n    }\n  })\n  // always pull sigma and weight\n  pull(storedColumns, 'sigma', 'weight')\n  storedColumns = uniq(storedColumns)\n\n  const numPoints = isPBF === true ? data.length : data.latitude.length\n\n  for (let index = 0, length = numPoints; index < length; index++) {\n    let point\n    if (isPBF === true) {\n      const feature = data.feature(index)\n      point = feature.properties\n      // WARNING: toGeoJSON is expensive. Avoid using raw coordinates in PBF tiles, pregenerate world coords\n      // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n      const geom = feature.toGeoJSON(tileCoordinates.x, tileCoordinates.y, zoom).geometry\n        .coordinates\n      point.longitude = geom[0]\n      point.latitude = geom[1]\n    } else {\n      point = {}\n      columnsArr.forEach((c) => {\n        point[c] = data[c][index]\n      })\n    }\n\n    const timeIndex = columns.timeIndex\n      ? point.timeIndex\n      : convert.getOffsetedTimeAtPrecision(point.datetime)\n\n    // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n    const [worldX, worldY] = lngLatToWorld([point.longitude, point.latitude], 1)\n    point.worldX = worldX\n    point.worldY = worldY\n\n    if (columns.sigma) {\n      point.radius = convert.sigmaToRadius(\n        point.sigma,\n        zoomFactorRadiusRenderingMode,\n        zoomFactorRadius\n      )\n    }\n    if (columns.weight) {\n      point.opacity = convert.weightToOpacity(point.weight, zoomFactorOpacity)\n    }\n    if (columns.id) {\n      point.series = point.id\n    }\n\n    if (!tilePlaybackData[timeIndex]) {\n      const frame = {}\n      storedColumns.forEach((column) => {\n        frame[column] = [point[column]]\n      })\n      tilePlaybackData[timeIndex] = frame\n      continue\n    }\n    const frame = tilePlaybackData[timeIndex]\n    storedColumns.forEach((column) => {\n      frame[column].push(point[column])\n    })\n  }\n  return tilePlaybackData\n}\n\nexport const addTracksPointsRenderingData = (data) => {\n  data.hasFishing = []\n  data.worldX = []\n  data.worldY = []\n\n  for (let index = 0, length = data.weight.length; index < length; index++) {\n    const [worldX, worldY] = lngLatToWorld([data.longitude[index], data.latitude[index]], 1)\n    data.worldX[index] = worldX\n    data.worldY[index] = worldY\n    data.hasFishing[index] = data.weight[index] > 0\n  }\n  return data\n}\n\n/**\n * A simplified version of getTilePlaybackData for tracks\n * Converts Vector Array data to Playback format (organized by days) and stores it locally\n * @param vectorArray the source data before indexing by day\n */\nexport const getTracksPlaybackData = (vectorArray) => {\n  const playbackData = []\n\n  for (let index = 0, length = vectorArray.series.length; index < length; index++) {\n    const datetime = vectorArray.datetime[index]\n    const timeIndex = convert.getOffsetedTimeAtPrecision(datetime)\n\n    if (!playbackData[timeIndex]) {\n      const frame = {\n        worldX: [vectorArray.worldX[index]],\n        worldY: [vectorArray.worldY[index]],\n        series: [vectorArray.series[index]],\n        hasFishing: [vectorArray.hasFishing[index]],\n      }\n      playbackData[timeIndex] = frame\n      continue\n    }\n    const frame = playbackData[timeIndex]\n    frame.worldX.push(vectorArray.worldX[index])\n    frame.worldY.push(vectorArray.worldY[index])\n    frame.series.push(vectorArray.series[index])\n    frame.hasFishing.push(vectorArray.hasFishing[index])\n  }\n  return playbackData\n}\n\nexport const vesselSatisfiesFilters = (frame, index, filterValues) => {\n  const satisfiesFilters = Object.keys(filterValues).every((field) => {\n    if (frame[field] === undefined) {\n      // this field is not available on this layer. This can happen in an edge case described\n      // here: https://github.com/GlobalFishingWatch/map-client/issues/661#issuecomment-334496469\n      return false\n    }\n    return filterValues[field].indexOf(frame[field][index]) > -1\n  })\n  return satisfiesFilters\n}\n\nconst vesselSatisfiesAllFilters = (frame, index, filters) => {\n  const satisfiesAllFilters = filters\n    .filter((f) => f.pass !== true)\n    .some((filter) => vesselSatisfiesFilters(frame, index, filter.filterValues))\n  return satisfiesAllFilters\n}\n\nexport const selectVesselsAt = (tileData, tileQuery, startIndex, endIndex, currentFilters) => {\n  const vessels = []\n\n  const { worldX, worldY, toleranceRadiusInWorldUnits } = tileQuery\n\n  for (let f = startIndex; f < endIndex; f++) {\n    const frame = tileData[f]\n    if (frame === undefined) continue\n    for (let i = 0; i < frame.worldX.length; i++) {\n      const wx = frame.worldX[i]\n      const wy = frame.worldY[i]\n\n      if (\n        (!currentFilters.length || vesselSatisfiesAllFilters(frame, i, currentFilters)) &&\n        wx >= worldX - toleranceRadiusInWorldUnits &&\n        wx <= worldX + toleranceRadiusInWorldUnits &&\n        wy >= worldY - toleranceRadiusInWorldUnits &&\n        wy <= worldY + toleranceRadiusInWorldUnits\n      ) {\n        const vessel = {}\n\n        Object.keys(frame).forEach((key) => {\n          vessel[key] = frame[key][i]\n        })\n        vessels.push(vessel)\n      }\n    }\n  }\n  return vessels\n}\n\n/*\nexport const getHistogram = (tiles, propName = 'weight') => {\n  let data = tiles\n    .filter(tile => tile.ready)\n    .map(tile => tile.data\n      .map(frame => frame[propName]));\n  data = flattenDeep(data);\n  if (data.length) {\n    const bins = d3.histogram().thresholds(d3.thresholdScott)(data);\n    const x = d3.scaleLinear().domain([0, d3.max(bins, d => d.length)]).range([0, 50]);\n    console.table(bins.filter(bin => bin.length).map((bin) => {\n      const binMin = d3.min(bin).toLocaleString({ maximumFractionDigits: 2 });\n      const binMax = d3.max(bin).toLocaleString({ maximumFractionDigits: 2 });\n      return {\n        range: [binMin, binMax].join('﹣'),\n        bars: Array(Math.round(x(bin.length))).join('█'),\n        num: bin.length\n      };\n    }));\n  }\n};\n*/\n","import template from 'lodash/template'\nimport templateSettings from 'lodash/templateSettings'\n\nexport default (urlTemplate, urlParams) => {\n  templateSettings.interpolate = /{{([\\s\\S]+?)}}/g\n  const urlTemplateCompiled = template(urlTemplate)\n  return urlTemplateCompiled(urlParams)\n}\n","import tilecover from '@mapbox/tile-cover/index'\nimport debounce from 'lodash/debounce'\nimport { PerspectiveMercatorViewport } from 'viewport-mercator-project'\nimport { ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING, TILES_LOAD_ZOOM_OFFSET } from '../config'\nimport {\n  getTile,\n  releaseTiles,\n  highlightVesselFromHeatmap,\n  updateLoadedTiles,\n} from './heatmap.actions'\n\nexport const SET_CURRENTLY_VISIBLE_TILES = 'SET_CURRENTLY_VISIBLE_TILES'\nexport const SET_CURRENTLY_LOADED_TILES = 'SET_CURRENTLY_LOADED_TILES'\nexport const SET_CURRENTLY_SWAPPED_TILE_UIDS = 'SET_CURRENTLY_SWAPPED_TILE_UIDS'\nexport const MARK_TILES_UIDS_AS_LOADED = 'MARK_TILES_UIDS_AS_LOADED'\nexport const RELEASE_MARKED_TILES_UIDS = 'RELEASE_MARKED_TILES_UIDS'\n\n// restrict tilecover to a single zoom level\n// could be customized to load less or more detailed tiles\nconst getTilecoverLimits = (viewportZoom) => {\n  let zoom = Math.ceil(viewportZoom + TILES_LOAD_ZOOM_OFFSET)\n  let tilesAvailable = true\n  if (zoom > ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING) {\n    zoom = ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING\n    tilesAvailable = false\n  }\n  return {\n    min_zoom: zoom,\n    max_zoom: zoom,\n    tilesAvailable,\n  }\n}\n\nconst flushToReleaseTiles = () => (dispatch, getState) => {\n  const state = getState()\n  const currentToLoadTileUids = state.map.heatmapTiles.currentToLoadTileUids\n  // console.log('Tiles left to load: ', currentToLoadTileUids);\n\n  // Tiles are released only when all to-load tiles have finished loading\n  // this is to ensure smooth visual transitions between zoom levels\n  if (!currentToLoadTileUids.length) {\n    const currentTilesToReleaseUids = state.map.heatmapTiles.currentToReleaseTileUids\n    // console.log('no more tiles to load, releasing ', currentTilesToReleaseUids);\n    dispatch(releaseTiles(currentTilesToReleaseUids))\n    dispatch({\n      type: RELEASE_MARKED_TILES_UIDS,\n    })\n  }\n}\n\nexport const markTileAsLoaded = (tileUids) => (dispatch) => {\n  dispatch({\n    type: MARK_TILES_UIDS_AS_LOADED,\n    payload: tileUids,\n  })\n  // console.log(tileUids, 'have finished loading');\n  dispatch(flushToReleaseTiles())\n}\n\nconst flushTileState = (forceLoadingAllVisibleTiles = false) => (dispatch, getState) => {\n  const state = getState()\n  const currentVisibleTiles = state.map.heatmapTiles.currentVisibleTiles\n  let tilesToLoad = []\n  const tilesToReleaseUids = []\n\n  if (forceLoadingAllVisibleTiles === true) {\n    tilesToLoad = currentVisibleTiles\n  } else {\n    const currentLoadedTiles = state.map.heatmapTiles.currentLoadedTiles\n\n    currentVisibleTiles.forEach((visibleTile) => {\n      if (currentLoadedTiles.find((t) => t.uid === visibleTile.uid) === undefined) {\n        tilesToLoad.push(visibleTile)\n      }\n    })\n\n    currentLoadedTiles.forEach((loadedTile) => {\n      if (currentVisibleTiles.find((t) => t.uid === loadedTile.uid) === undefined) {\n        tilesToReleaseUids.push(loadedTile.uid)\n      }\n    })\n  }\n\n  const tilesToLoadUids = tilesToLoad.map((t) => t.uid)\n  // console.log('force loading:', forceLoadingAllVisibleTiles)\n  // console.log('visible', currentVisibleTiles.map(t => t.uid))\n  // console.log('load', tilesToLoadUids)\n  // console.log('release', tilesToReleaseUids)\n  // console.log('----')\n\n  tilesToLoad.forEach((tile) => {\n    dispatch(getTile(tile))\n  })\n  dispatch({\n    type: SET_CURRENTLY_LOADED_TILES,\n    payload: currentVisibleTiles,\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_SWAPPED_TILE_UIDS,\n    payload: {\n      tilesToLoadUids,\n      tilesToReleaseUids,\n    },\n  })\n\n  dispatch(updateLoadedTiles())\n  dispatch(flushToReleaseTiles())\n}\n\nconst _debouncedFlushState = (dispatch) => {\n  dispatch(flushTileState())\n}\nconst debouncedFlushState = debounce(_debouncedFlushState, 500)\n\nexport const updateHeatmapTilesFromViewport = (forceLoadingAllVisibleTiles = false) => (\n  dispatch,\n  getState\n) => {\n  // if in transition, skip loading/releasing\n  // else\n  //   collect all tiles in viewport\n  //   save them to reducer: currentVisibleTiles\n  // if not zooming: flush immediately\n  //   if forceLoadingAllVisiblelTiles\n  //     get tiles from currentVisibleTiles\n  //   else\n  //     get tiles from currentVisibleTiles\n  //     make delta with currentLoadedTiles\n  //     get tiles from delta+\n  //     release tiles from delta-\n  //   save to reducer: currentVisibleTiles -> currentLoadedTiles\n  // if zooming: debounced flush to avoid \"tile spam\"\n  const mapViewport = getState().map.viewport\n  const viewport = mapViewport.viewport\n\n  // do not allow any tile update during transitions (currently only zoom)\n  // wait for the end of the transition to look at viewport and load matching tiles\n  if (mapViewport.currentTransition !== null) {\n    return\n  }\n\n  // instanciate a viewport instance to get lat/lon from screen top left/ bottom right bounds\n  const boundsViewport = new PerspectiveMercatorViewport(viewport)\n  const bounds = [\n    boundsViewport.unproject([0, 0]),\n    boundsViewport.unproject([viewport.width, viewport.height]),\n  ]\n\n  const [wn, es] = bounds\n  const [w, s, e, n] = [wn[0], es[1], es[0], wn[1]]\n  const boundsPolygonsCoordinates = []\n\n  const limits = getTilecoverLimits(viewport.zoom)\n  if (limits.tilesAvailable === false && forceLoadingAllVisibleTiles !== true) {\n    return\n  }\n\n  if (e > 180 || w < -180) {\n    // deal with the antimeridian situation by splitting the bounds polygon into two polygons\n    const w1 = e > 180 ? w : w + 360\n    const e1 = 180 - 0.001\n    const w2 = -180\n    const e2 = e > 180 ? e - 360 : e\n    boundsPolygonsCoordinates.push([[[w1, n], [e1, n], [e1, s], [w1, s], [w1, n]]])\n    boundsPolygonsCoordinates.push([[[w2, n], [e2, n], [e2, s], [w2, s], [w2, n]]])\n  } else {\n    boundsPolygonsCoordinates.push([[[w, n], [e, n], [e, s], [w, s], [w, n]]])\n  }\n\n  const geom = {\n    type: 'MultiPolygon',\n    coordinates: boundsPolygonsCoordinates,\n  }\n\n  // using tilecover, get xyz tile coords as well as quadkey indexes (named uid through the app)\n  const viewportTilesCoords = tilecover.tiles(geom, limits)\n  const viewportTilesIndexes = tilecover.indexes(geom, limits)\n  const visibleTiles = []\n\n  viewportTilesCoords.forEach((coords, i) => {\n    const uid = viewportTilesIndexes[i]\n    const zoom = coords[2]\n    if (zoom >= 2) {\n      visibleTiles.push({\n        tileCoordinates: {\n          x: coords[0],\n          y: coords[1],\n          zoom: coords[2],\n        },\n        uid,\n      })\n    }\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_VISIBLE_TILES,\n    payload: visibleTiles,\n  })\n\n  const isMouseWheelZooming = mapViewport.prevZoom !== viewport.zoom\n\n  if (isMouseWheelZooming === false) {\n    dispatch(flushTileState(forceLoadingAllVisibleTiles))\n  } else {\n    debouncedFlushState(dispatch)\n  }\n}\n\nexport const queryHeatmapVessels = (coords, temporalExtentIndexes) => (dispatch, getState) => {\n  // use tilecover to get what tile quadkey/uid \"belongs\" to the point\n  const geom = {\n    type: 'Point',\n    coordinates: [coords.longitude, coords.latitude],\n  }\n  const zoom = getState().map.viewport.viewport.zoom\n\n  // get quadkey for tile at current zoom level, but also neighbouring zoom levels,\n  // in case current zoom level tiles has not been loaded yet\n  const uids = [zoom, zoom - 1, zoom + 1]\n    .map((z) => getTilecoverLimits(z))\n    .map((limits) => tilecover.indexes(geom, limits))\n    .map((indexes) => indexes[0])\n\n  const query = {\n    ...coords,\n    uids,\n  }\n\n  // console.log(query);\n  dispatch(highlightVesselFromHeatmap(query, temporalExtentIndexes))\n}\n","import difference from 'lodash/difference'\nimport uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  getTilePlaybackData,\n  selectVesselsAt,\n} from '../utils/heatmapTileData'\nimport { ENCOUNTERS } from '../constants'\nimport { markTileAsLoaded } from './heatmapTiles.actions'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_HEATMAP_LAYER = 'ADD_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_STYLE = 'UPDATE_HEATMAP_LAYER_STYLE'\nexport const ADD_REFERENCE_TILE = 'ADD_REFERENCE_TILE'\nexport const HIGHLIGHT_VESSELS = 'HIGHLIGHT_VESSELS'\nexport const INIT_HEATMAP_LAYERS = 'INIT_HEATMAP_LAYERS'\nexport const REMOVE_HEATMAP_LAYER = 'REMOVE_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES =\n  'UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES'\nexport const UPDATE_HEATMAP_TILE = 'UPDATE_HEATMAP_TILE'\nexport const RELEASE_HEATMAP_TILES = 'RELEASE_HEATMAP_TILES'\nexport const UPDATE_LOADED_TILES = 'UPDATE_LOADED_TILES'\nexport const HIGHLIGHT_CLICKED_VESSEL = 'HIGHLIGHT_CLICKED_VESSEL'\nexport const CLEAR_HIGHLIGHT_CLICKED_VESSEL = 'CLEAR_HIGHLIGHT_CLICKED_VESSEL'\n\n/**\n * getTemporalExtentsVisibleIndices - Compares timebar outer extent with temporal extents present on the layer header\n * @param  {array} loadTemporalExtent Current timebar outer extent\n * @param  {array} layerTemporalExtents Temporal extent present on the layer's header (an array of extent arrays)\n * @return {array}                    Indices of the layer's temporal extents that should be visible\n */\nfunction getTemporalExtentsVisibleIndices(loadTemporalExtent, layerTemporalExtents) {\n  const currentExtentStart = loadTemporalExtent[0].getTime()\n  const currentExtentEnd = loadTemporalExtent[1].getTime()\n  const indices = []\n  layerTemporalExtents.forEach((temporalExtent, index) => {\n    const temporalExtentStart = temporalExtent[0]\n    const temporalExtentEnd = temporalExtent[1]\n    if (temporalExtentEnd >= currentExtentStart && temporalExtentStart <= currentExtentEnd) {\n      indices.push(index)\n    }\n  })\n  return indices\n}\n\n/**\n * loadLayerTile - loads an heatmap tile.\n *\n * @param  {string} layerId              layer id\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {string} token                the user's token\n * @param  {array} temporalExtentsIndices which of the temporal extents from  temporalExtents should be loaded\n * @param  {string} urls                 tile endpoints provided by header\n * @param  {array} temporalExtents       all of the layer's header temporal extents\n * @param  {bool} temporalExtentsLess    true = don't try to load different tiles based on current time extent\n * @param  {bool} isPBF                  true = read tile as MVT + PBF tile, rather than using Pelagos client\n * @return {Promise}                     a Promise that will be resolved when tile is loaded\n */\nfunction loadLayerTile(\n  layerId,\n  tileCoordinates,\n  token,\n  temporalExtentsIndices,\n  { url, temporalExtents, temporalExtentsLess, isPBF }\n) {\n  // console.log('loadLayerTile', layerId, tileCoordinates, temporalExtentsIndices)\n  if (url === undefined) {\n    throw new Error('URL/endpoints object is not available on this tilesets header')\n  }\n  const pelagosPromises = getTilePromises(url, token, temporalExtents, {\n    tileCoordinates,\n    temporalExtentsIndices,\n    temporalExtentsLess,\n    isPBF,\n  })\n  const allLayerPromises = Promise.all(pelagosPromises)\n\n  const layerTilePromise = new Promise((resolve) => {\n    allLayerPromises.then((rawTileData) => {\n      resolve({\n        loadedLayerId: layerId,\n        rawTileData,\n      })\n    })\n  })\n\n  return layerTilePromise\n}\n\n/**\n * parseLayerTile - parses an heatmap tile to a playback-ready format.\n *\n * @param  {Object} rawTileData          the raw tile data, loaded either from the pelagos client or as a MVT/PBF vector tile\n * @param  {array} colsByName            names of the columns present in the raw tiles that need to be included in the final playback data\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {array} prevPlaybackData      (optional) in case some time extent was already loaded for this tile, append to this data\n * @return {Object}                      playback-ready merged data\n */\nfunction parseLayerTile(rawTileData, colsByName, isPBF, tileCoordinates, prevPlaybackData) {\n  let data\n  if (isPBF === true) {\n    if (\n      rawTileData === undefined ||\n      !rawTileData.length ||\n      rawTileData[0] === undefined ||\n      !Object.keys(rawTileData[0].layers).length\n    ) {\n      return []\n    }\n    data = rawTileData[0].layers.points\n  } else {\n    const cleanVectorArrays = getCleanVectorArrays(rawTileData)\n    data = groupData(cleanVectorArrays, Object.keys(colsByName))\n    if (Object.keys(data).length === 0) {\n      return []\n    }\n  }\n  const playbackData = getTilePlaybackData(\n    data,\n    colsByName,\n    tileCoordinates,\n    isPBF,\n    prevPlaybackData\n  )\n  return playbackData\n}\n\n/**\n * getTiles - loads a bunch of heatmap tiles\n * @param  {array} layerIds                 list of layer Ids that need to be loaded for this/these tiles\n * @param  {array} referenceTiles           list of reference tiles (tile data regardless of layer) that need to be loaded\n * @param  {object} newTemporalExtentsToLoad (optional) a dict (layerId is the key) of temporal extents\n * indices that should be appended to existing data\n */\nfunction getTiles(layerIds, referenceTiles, newTemporalExtentsToLoad = undefined) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state)\n    const token = state.map.module.token\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const tilesByLayer = {}\n    layerIds.forEach((id) => {\n      tilesByLayer[id] = [...heatmapLayers[id].tiles]\n    })\n    const allPromises = []\n\n    layerIds.forEach((layerId) => {\n      const heatmapLayerHeader = heatmapLayers[layerId].header\n      const { temporalExtents, temporalExtentsLess, isPBF, colsByName } = { ...heatmapLayerHeader }\n      const url = heatmapLayerHeader.endpoints.tiles\n\n      referenceTiles.forEach((referenceTile) => {\n        // check if tile does not already exist first\n        let tile = tilesByLayer[layerId].find((t) => t.uid === referenceTile.uid)\n        if (!tile) {\n          // console.log('create tile ', referenceTile.uid)\n          tile = {\n            uid: referenceTile.uid,\n            temporalExtentsIndicesLoaded: [],\n          }\n          tilesByLayer[layerId].push(tile)\n        } else {\n          // console.log('found tile', referenceTile.uid)\n        }\n\n        const queriedTemporalExtentsIndices =\n          newTemporalExtentsToLoad === undefined\n            ? heatmapLayers[layerId].visibleTemporalExtentsIndices\n            : newTemporalExtentsToLoad[layerId]\n\n        const temporalExtentsIndicesToLoad = difference(\n          queriedTemporalExtentsIndices,\n          tile.temporalExtentsIndicesLoaded\n        )\n\n        const tilePromise = loadLayerTile(\n          layerId,\n          referenceTile.tileCoordinates,\n          token,\n          temporalExtentsIndicesToLoad,\n          {\n            url,\n            temporalExtents,\n            temporalExtentsLess,\n            isPBF,\n          }\n        )\n\n        allPromises.push(tilePromise)\n\n        tilePromise.then(({ loadedLayerId, rawTileData }) => {\n          tile.temporalExtentsIndicesLoaded = uniq(\n            tile.temporalExtentsIndicesLoaded.concat(temporalExtentsIndicesToLoad)\n          )\n          tile.data = parseLayerTile(\n            rawTileData,\n            colsByName,\n            isPBF,\n            referenceTile.tileCoordinates,\n            tile.data\n          )\n\n          dispatch({\n            type: UPDATE_HEATMAP_TILE,\n            payload: {\n              layerId: loadedLayerId,\n              tile,\n            },\n          })\n        })\n      })\n    })\n\n    Promise.all(allPromises).then(() => {\n      dispatch(completeLoader(loaderID))\n      dispatch(markTileAsLoaded(referenceTiles.map((tile) => tile.uid)))\n    })\n  }\n}\n\n/**\n * getTile - This action is emitted when a new tile is queried from panning or zooming the map\n * This will load a tile for all currently visible heatmap layers\n *\n * @param  {object} referenceTile a reference tile containing xyz coords and uid\n */\nexport function getTile(referenceTile) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_REFERENCE_TILE,\n      payload: referenceTile,\n    })\n    const visibleHeatmapLayers = getState().map.heatmap.heatmapLayers\n    const visibleHeatmapLayersIds = Object.keys(visibleHeatmapLayers).filter(\n      (id) => visibleHeatmapLayers[id].visible === true\n    )\n\n    if (visibleHeatmapLayersIds.length) {\n      dispatch(getTiles(visibleHeatmapLayersIds, [referenceTile]))\n    }\n  }\n}\n\n/**\n * releaseTiles - This action is emitted when an existing tile is removed from panning or zooming the map\n * @param  {array} uids tile ref uids to release\n */\nexport const releaseTiles = (uids) => ({\n  type: RELEASE_HEATMAP_TILES,\n  payload: uids,\n})\n\nexport const updateLoadedTiles = () => ({\n  type: UPDATE_LOADED_TILES,\n})\n\n// triggered when a layer is added or set to visible\nfunction loadAllTilesForLayer(layerId) {\n  return (dispatch, getState) => {\n    //                current layer, all reference tiles\n    const referenceTiles = getState().map.heatmap.referenceTiles\n    dispatch(getTiles([layerId], referenceTiles))\n  }\n}\n\nexport const addHeatmapLayer = (layer, loadTemporalExtent) => (dispatch) => {\n  const layerTemporalExtents = layer.header.temporalExtents\n  dispatch({\n    type: ADD_HEATMAP_LAYER,\n    payload: {\n      ...layer,\n      // initially attach which of the temporal extents indices are visible with initial outerExtent\n      visibleTemporalExtentsIndices: getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        layerTemporalExtents\n      ),\n    },\n  })\n\n  if (layer.visible === true) {\n    dispatch(loadAllTilesForLayer(layer.id))\n  }\n}\n\nexport const removeHeatmapLayer = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_HEATMAP_LAYER,\n    payload: {\n      id,\n    },\n  })\n}\n\n/**\n * updateLayerLoadTemporalExtents - when outer time extent changes, checks if more tiles needs to be loaded\n * by comparing the outer time range with the temporalExtent already loaded on each layer.\n * @param  {array} loadTemporalExtent Current app-wide extent of tiles that need to load, expressed\n * as an array of two dates\n */\nexport function updateLayerLoadTemporalExtents(loadTemporalExtent) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const indicesToAddByLayer = {}\n    Object.keys(heatmapLayers).forEach((layerId) => {\n      const heatmapLayer = heatmapLayers[layerId]\n      const temporalExtents = heatmapLayer.header.temporalExtents\n      const oldVisibleTemporalExtentsIndices = heatmapLayer.visibleTemporalExtentsIndices\n      const newVisibleTemporalExtentsIndices = getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        temporalExtents\n      )\n      const indicesAdded = difference(\n        newVisibleTemporalExtentsIndices,\n        oldVisibleTemporalExtentsIndices\n      )\n\n      if (indicesAdded.length) {\n        // add new loaded indices to heatmap layer if applicable\n        indicesToAddByLayer[layerId] = indicesAdded\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n          payload: {\n            layerId,\n            indicesAdded,\n          },\n        })\n      }\n    })\n\n    // getTiles with indices diff\n    const layerIdsWithIndicesToAdd = Object.keys(indicesToAddByLayer)\n    if (layerIdsWithIndicesToAdd.length) {\n      dispatch(\n        getTiles(layerIdsWithIndicesToAdd, state.map.heatmap.referenceTiles, indicesToAddByLayer)\n      )\n    }\n  }\n}\n\n/**\n * Returns clusters or vessels data from a tileQuery\n * @param {object} state - the application state\n * @param {string} tileQuery - the id of a heatmap layer\n * @return {object} { isEmpty, isCluster, isMouseCluster, foundVessels, layerId, tilesetId }\n */\nconst _queryHeatmap = (state, tileQuery, temporalExtentIndexes) => {\n  const layers = state.map.heatmap.heatmapLayers\n  const startIndex = temporalExtentIndexes[0]\n  const endIndex = temporalExtentIndexes[1]\n  const layersVessels = []\n\n  Object.keys(layers).forEach((layerId) => {\n    const layer = layers[layerId]\n    const allPossibleTilesByPreference = tileQuery.uids.map((uid) =>\n      layer.tiles.find((tile) => tile.uid === uid)\n    )\n    const availableTiles = allPossibleTilesByPreference.filter(\n      (tile) => tile !== undefined && tile.data !== undefined\n    )\n\n    const currentFilters = layer.filters\n    if (availableTiles.length) {\n      const bestTile = availableTiles[0]\n      layersVessels.push({\n        layer,\n        vessels: selectVesselsAt(bestTile.data, tileQuery, startIndex, endIndex, currentFilters),\n      })\n    }\n  })\n\n  const layersVesselsResults = layersVessels.filter(\n    (layerVessels) => layerVessels.vessels.length > 0\n  )\n\n  // it's a cluster because of aggregation on the server side\n  let isCluster\n  // its a cluster because or multiple vessels under mouse\n  let isMouseCluster\n  let isEmpty\n  let layerVesselsResult\n  let foundVessels\n\n  const hasEncounters =\n    layersVesselsResults.filter((layerVessel) => layerVessel.layer.subtype === ENCOUNTERS).length >\n    0\n\n  if (layersVesselsResults.length === 0) {\n    isEmpty = true\n  } else if (layersVesselsResults.length > 1 && !hasEncounters) {\n    // if there are points over multiple layers, consider this a cluster (ie don't select, zoom instead, or don't highlight)\n    // there's an exception if vessel selection contains an encounter, in which case it will take priority\n    isCluster = true\n  } else {\n    // if we have a hit with an encounters layer, use it in priority\n    // if not the layersVesselsResults should contain a single result\n    layerVesselsResult = hasEncounters\n      ? layersVesselsResults.find((layerVessel) => layerVessel.layer.subtype === ENCOUNTERS)\n      : layersVesselsResults[0]\n\n    // we can get multiple points with similar series and seriesgroup, in which case\n    // we should treat that as a successful vessel query, not a cluster\n    const vessels = layerVesselsResult.vessels\n\n    if (vessels.length === 0) {\n      isEmpty = true\n    } else {\n      // look up for any negatives seriesgroup (clusters on the server side)\n      const clusteredVessels = vessels.filter((v) => v.seriesgroup < 0)\n      if (clusteredVessels.length) {\n        isCluster = true\n      } else {\n        foundVessels = uniqBy(vessels, (v) => v.series)\n        isMouseCluster = foundVessels.length > 1\n      }\n    }\n  }\n\n  const layer = layerVesselsResult === undefined ? {} : layerVesselsResult.layer\n\n  return { isEmpty, isCluster, isMouseCluster, foundVessels, layer }\n}\n\nexport function clearHighlightedVessels() {\n  return {\n    type: HIGHLIGHT_VESSELS,\n    payload: {\n      isEmpty: true,\n      clickableCluster: false,\n    },\n  }\n}\n\nexport function highlightVesselFromHeatmap(tileQuery, temporalExtentIndexes) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const { layer, isEmpty, isCluster, isMouseCluster, foundVessels } = _queryHeatmap(\n      state,\n      tileQuery,\n      temporalExtentIndexes\n    )\n\n    if (layer.id !== undefined || state.map.heatmap.highlightedVessels.layerId !== layer.id) {\n      dispatch({\n        type: HIGHLIGHT_VESSELS,\n        payload: {\n          layer: {\n            id: layer.id,\n            tilesetId: layer.tilesetId,\n            subtype: layer.subtype,\n            header: layer.header,\n          },\n          isEmpty,\n          clickableCluster: isCluster === true || isMouseCluster === true,\n          highlightableCluster: isCluster !== true,\n          foundVessels,\n        },\n      })\n    } else {\n      dispatch(clearHighlightedVessels())\n    }\n  }\n}\n\nexport const highlightClickedVessel = (seriesgroup, layerId) => ({\n  type: HIGHLIGHT_CLICKED_VESSEL,\n  payload: {\n    seriesgroup,\n    layerId,\n  },\n})\n\nexport const clearHighlightedClickedVessel = () => ({\n  type: CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n})\n\nexport const updateHeatmapLayers = (newLayers, currentLoadTemporalExtent) => (\n  dispatch,\n  getState\n) => {\n  const prevLayersDict = getState().map.heatmap.heatmapLayers\n\n  // add and update layers\n  newLayers.forEach((newLayer) => {\n    const layerId = newLayer.id\n    const prevLayer = prevLayersDict[layerId]\n    if (prevLayer === undefined) {\n      // console.log('adding', layerId)\n      dispatch(addHeatmapLayer(newLayer, currentLoadTemporalExtent))\n    } else {\n      if (prevLayer.visible !== newLayer.visible && newLayer.visible === true) {\n        dispatch(loadAllTilesForLayer(layerId))\n      }\n      if (\n        prevLayer.visible !== newLayer.visible ||\n        prevLayer.hue !== newLayer.hue ||\n        prevLayer.opacity !== newLayer.opacity ||\n        prevLayer.filters !== newLayer.filters ||\n        prevLayer.interactive !== newLayer.interactive\n      ) {\n        // console.log('updating', layerId, ' with visibilty', newLayer.visible)\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_STYLE,\n          payload: {\n            id: newLayer.id,\n            visible: newLayer.visible,\n            hue: newLayer.hue,\n            opacity: newLayer.opacity,\n            filters: newLayer.filters,\n            interactive: newLayer.interactive,\n          },\n        })\n      }\n    }\n  })\n\n  // clean up unused layers\n  Object.keys(prevLayersDict).forEach((prevLayerId) => {\n    if (!newLayers.find((l) => l.id === prevLayerId)) {\n      dispatch(removeHeatmapLayer(prevLayerId))\n    }\n  })\n}\n","import { fitBounds, pixelsToWorld } from 'viewport-mercator-project'\nimport { updateHeatmapTilesFromViewport } from '../heatmap/heatmapTiles.actions'\nimport { onViewportChange } from '../module/module.actions'\nimport { CLUSTER_CLICK_ZOOM_INCREMENT } from '../config' // TODO MAP MODULE\n\nexport const SET_VIEWPORT = 'SET_VIEWPORT'\nexport const UPDATE_VIEWPORT = 'UPDATE_VIEWPORT'\nexport const SET_ZOOM_INCREMENT = 'SET_ZOOM_INCREMENT'\nexport const SET_MOUSE_LAT_LONG = 'SET_MOUSE_LAT_LONG'\nexport const TRANSITION_END = 'TRANSITION_END'\nexport const SET_NATIVE_VIEWPORT = 'SET_NATIVE_VIEWPORT'\n\nexport const setViewport = (viewport) => (dispatch) => {\n  dispatch({\n    type: SET_VIEWPORT,\n    payload: viewport,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const updateViewport = (viewportUpdate) => (dispatch) => {\n  dispatch({\n    type: UPDATE_VIEWPORT,\n    payload: viewportUpdate,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nconst transitionTo = (increment, latitude = null, longitude = null, zoom = null) => (dispatch) => {\n  dispatch({\n    type: SET_ZOOM_INCREMENT,\n    payload: {\n      increment,\n      latitude,\n      longitude,\n      zoom,\n    },\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const transitionToZoom = (zoom) => (dispatch) => {\n  dispatch(transitionTo(null, null, null, zoom))\n}\n\nexport const transitionEnd = () => (dispatch) => {\n  dispatch({\n    type: TRANSITION_END,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const zoomIntoVesselCenter = (latitude, longitude) => (dispatch) => {\n  dispatch(transitionTo(CLUSTER_CLICK_ZOOM_INCREMENT, latitude, longitude))\n}\n\nexport const fitToBounds = (bounds) => (dispatch, getState) => {\n  const state = getState()\n  const vp = fitBounds({\n    bounds: [[bounds.minLng, bounds.minLat], [bounds.maxLng, bounds.maxLat]],\n    width: state.map.viewport.viewport.width,\n    height: state.map.viewport.viewport.height,\n    padding: 50,\n  })\n  dispatch(transitionTo(null, vp.latitude, vp.longitude, vp.zoom))\n}\n\nexport const exportNativeViewport = (nativeViewport) => (dispatch) => {\n  const topLeftPx = [0, 0]\n  const bottomRightPx = [nativeViewport.width, nativeViewport.height]\n\n  // compute left and right offsets to deal with antimeridian issue\n  const topLeftWorld = pixelsToWorld(topLeftPx, nativeViewport.pixelUnprojectionMatrix)\n  const bottomRightWorld = pixelsToWorld(bottomRightPx, nativeViewport.pixelUnprojectionMatrix)\n  const leftWorldScaled = topLeftWorld[0] / nativeViewport.scale\n  const rightWorldScaled = bottomRightWorld[0] / nativeViewport.scale\n\n  // lat/lon corners for miniglobe\n  const northWest = nativeViewport.unproject(topLeftPx)\n  const southEast = nativeViewport.unproject(bottomRightPx)\n  const bounds = {\n    north: northWest[1],\n    south: southEast[1],\n    west: northWest[0],\n    east: southEast[0],\n  }\n\n  dispatch({\n    type: SET_NATIVE_VIEWPORT,\n    payload: {\n      leftWorldScaled,\n      rightWorldScaled,\n      bounds,\n    },\n  })\n}\n","import area from '@turf/area'\nimport { POLYGON_LAYERS_AREA } from '../constants'\nimport { clearHighlightedVessels, clearHighlightedClickedVessel } from '../heatmap/heatmap.actions'\nimport { zoomIntoVesselCenter } from './viewport.actions'\n\nexport const SET_POPUP = 'SET_POPUP'\nexport const CLEAR_POPUP = 'CLEAR_POPUP'\nexport const SET_MAP_CURSOR = 'SET_MAP_CURSOR'\nexport const UPDATE_POPUP_REPORT_STATUS = 'UPDATE_POPUP_REPORT_STATUS'\n\nconst getFeatureMetaFields = (staticLayerId, state, feature) => {\n  const source = state.style.mapStyle.toJS().sources[staticLayerId]\n  if (source === undefined) {\n    console.warn('Couldnt find source when looking for fields of layer', staticLayerId)\n  }\n  if (source.type !== 'geojson') {\n    if (source.metadata === undefined || source.metadata['gfw:popups'] === undefined) {\n      return null\n    }\n    return source.metadata['gfw:popups']\n  }\n  // when layer is of type geojson (custom layer), use all feature properties available\n  return Object.keys(feature.properties).length === 0\n    ? null\n    : Object.keys(feature.properties).map((key) => ({ id: key }))\n}\n\nconst getAreaKm2 = (glFeature) => {\n  const areakm2 = 10 ** -6 * area(glFeature.geometry)\n  const formatted = areakm2.toLocaleString('en-US', { maximumFractionDigits: 0 })\n  return formatted\n}\n\nconst getStaticLayerIdFromGlFeature = (glFeature) =>\n  (glFeature.layer.metadata !== undefined && glFeature.layer.metadata['gfw:id']) ||\n  glFeature.layer.source\n\nconst findFeature = (glFeatures) => {\n  if (glFeatures === undefined || !glFeatures.length) {\n    return undefined\n  }\n  for (let i = 0; i < glFeatures.length; i++) {\n    const glFeature = glFeatures[i]\n    const staticLayerId = getStaticLayerIdFromGlFeature(glFeature)\n    if (staticLayerId !== undefined) {\n      return {\n        feature: glFeature,\n        staticLayerId,\n      }\n    }\n  }\n  return undefined\n}\n\nexport const mapHover = (latitude, longitude, features, cluster) => (dispatch, getState) => {\n  const state = getState().map\n  const currentActivityLayersInteractionData = state.heatmap.highlightedVessels\n  const { layer, isEmpty, foundVessels } = currentActivityLayersInteractionData\n\n  let cursor = null\n  const event = {\n    type: null,\n  }\n\n  if (isEmpty === true) {\n    const feature = findFeature(features, null)\n    if (feature !== undefined) {\n      const popupFields = getFeatureMetaFields(feature.staticLayerId, state, feature.feature)\n      if (popupFields !== null) {\n        const properties = feature.feature.properties\n        const mainPopupField =\n          popupFields.find((f) => f.id && f.id.toLowerCase() === 'name') ||\n          popupFields.find((f) => f.id && f.id.toLowerCase() === 'id') ||\n          popupFields.find(\n            (f) =>\n              f.id &&\n              properties[f.id] !== null &&\n              properties[f.id] !== 'null' &&\n              properties[f.id] !== undefined\n          )\n        const mainPopupFieldId = mainPopupField.id\n        const featureTitle = properties[mainPopupFieldId]\n        event.type = 'static'\n        event.cluster = cluster\n        event.layer = {\n          id: feature.staticLayerId,\n        }\n        event.target = {\n          featureTitle,\n          properties,\n        }\n        cursor = 'pointer'\n      }\n    }\n  } else if (isEmpty !== true) {\n    const isCluster = foundVessels === undefined || foundVessels.length > 1\n    cursor = isCluster ? 'zoom-in' : 'pointer'\n\n    event.type = 'activity'\n    // TODO MAP MODULE sometimes layerId is undefined, likely an issue with heatmap[Tiles]\n    event.layer = layer\n    event.target = {\n      objects: foundVessels,\n      isCluster,\n    }\n  }\n\n  if (cursor !== state.interaction.cursor) {\n    dispatch({\n      type: SET_MAP_CURSOR,\n      payload: cursor,\n    })\n  }\n\n  if (state.module.onHover) {\n    state.module.onHover({\n      ...event,\n      latitude,\n      longitude,\n    })\n  }\n}\n\nexport const mapClick = (latitude, longitude, features, cluster) => (dispatch, getState) => {\n  const state = getState().map\n\n  dispatch(clearHighlightedClickedVessel())\n\n  const currentActivityLayersInteractionData = state.heatmap.highlightedVessels\n\n  const { layer, isEmpty, clickableCluster, foundVessels } = currentActivityLayersInteractionData\n\n  const event = {\n    type: null,\n  }\n\n  if (isEmpty === true) {\n    const feature = findFeature(features, null)\n    if (feature !== undefined) {\n      const metaFields = getFeatureMetaFields(feature.staticLayerId, state, feature.feature)\n      let fields\n      const properties = feature.feature.properties\n\n      if (metaFields !== null) {\n        fields = metaFields.map((metaField) => {\n          const id = metaField.id || metaField\n          const value = id === POLYGON_LAYERS_AREA ? getAreaKm2(feature.feature) : properties[id]\n          return {\n            title: metaField.label || metaField.id,\n            isLink: metaField.isLink,\n            value,\n          }\n        })\n      }\n\n      event.type = 'static'\n      event.cluster = cluster\n      event.layer = {\n        id: feature.staticLayerId,\n      }\n      event.target = {\n        fields,\n        properties,\n      }\n    }\n  } else {\n    event.type = 'activity'\n    event.layer = layer\n    if (clickableCluster === true) {\n      dispatch(zoomIntoVesselCenter(latitude, longitude))\n      dispatch(clearHighlightedVessels())\n      event.target = {\n        isCluster: true,\n      }\n    } else {\n      event.target = foundVessels[0]\n    }\n  }\n\n  if (state.module.onClick) {\n    state.module.onClick({\n      ...event,\n      latitude,\n      longitude,\n    })\n  }\n}\n","const RGB_MAX = 255\nconst HUE_MAX = 360\nconst SV_MAX = 100\n\nexport const VESSELS_HUES_INCREMENTS_NUM = 31 // 360 / VESSELS_HUES_INCREMENTS_NUM - 1  should give a round number\nexport const VESSELS_HUES_INCREMENT = 360 / (VESSELS_HUES_INCREMENTS_NUM - 1)\n\n// Legacy: this is only here for compatibility with pre-mapbox branch workspaces\nexport const COLOR_HUES = {\n  orange: 0,\n  peach: 22,\n  yellow: 60,\n  green: 85,\n  brightGreen: 145,\n  lightBlue: 182,\n  blue: 236,\n  purple: 284,\n  pink: 312,\n}\n\n// FIXME mark explicitely as legacy. Check all usages.\nexport const getKeyByValue = (obj, value) => {\n  let result = null\n  Object.entries(obj).forEach((entry) => {\n    if (entry[1] === value) result = entry[0]\n  })\n  return result\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport const rgbToHsv = (_r, _g, _b) => {\n  const r = _r / 255\n  const g = _g / 255\n  const b = _b / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n      default:\n        h = 0\n    }\n\n    h /= 6\n  }\n\n  return [h, s, v]\n}\n\n// converts hue, saturation, luminance to an rgb object\nexport const hsvToRgb = (h_, s_, v_) => {\n  const h = ((h_ % HUE_MAX) / parseFloat(HUE_MAX)) * 6\n  const s = s_ === SV_MAX ? 1 : (s_ % SV_MAX) / parseFloat(SV_MAX)\n  const v = v_ === SV_MAX ? 1 : (v_ % SV_MAX) / parseFloat(SV_MAX)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r: Math.round(r * RGB_MAX), g: Math.round(g * RGB_MAX), b: Math.round(b * RGB_MAX) }\n}\n\n// returns an rgb string with default saturation and luminance values\nconst hueToRgbDefaults = (hue) => hsvToRgb(hue, 50, 100)\n\nexport const hueToRgbString = (hue) => {\n  const rgb = hueToRgbDefaults(hue)\n  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`\n}\n\nexport const rgbToHexString = (rgb, css) => {\n  const str = ['r', 'g', 'b']\n    .map((channelName) => {\n      const channelValue = rgb[channelName]\n      let channelStr = channelValue.toString(16)\n      if (channelValue < 16) {\n        channelStr = `0${channelStr}`\n      }\n      return channelStr\n    })\n    .join('')\n  const prefix = css === true ? '#' : '0x'\n  return `${prefix}${str}`\n}\n\nexport const hueToRgbHexString = (hue, css) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToHexString(rgb, css)\n}\n\nconst closestNumber = (numberArray, goal) =>\n  numberArray.reduce((prev, curr) => (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev))\n\nexport const hueToClosestColor = (hue) => {\n  if (hue === undefined || hue === null) return undefined\n  const colorHueValues = Object.keys(COLOR_HUES).map((key) => COLOR_HUES[key])\n  const closestHue = closestNumber(colorHueValues, hue)\n  return getKeyByValue(COLOR_HUES, closestHue)\n}\n\nexport const hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst rgbToRgbaString = (rgb, opacity) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`\n\nexport const hueToRgbaString = (hue, opacity) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hexToRgba = (hex, opacity) => {\n  const rgb = hexToRgb(hex)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hueIncrementToHue = (hueIncrement) => hueIncrement * VESSELS_HUES_INCREMENT\n\nexport const hueToHueIncrement = (hue) =>\n  Math.round((hue / 360) * (VESSELS_HUES_INCREMENTS_NUM - 1))\n\nexport const wrapHue = (hue) => hue % 360\n\nexport const hueOrColorToHexColor = (color, hue) => {\n  if (hue !== undefined) {\n    return hueToRgbHexString(hue, true)\n  }\n\n  return color\n}\n","/* global PIXI */\nimport 'pixi.js'\nimport { hueToHueIncrement, VESSELS_HUES_INCREMENTS_NUM } from '../utils/map-colors'\nimport { VESSELS_BASE_RADIUS, MAX_SPRITES_PER_LAYER } from '../config'\n\nexport default class HeatmapSubLayer {\n  constructor(baseTexture, renderingStyleIndex, hue, useNormalBlendMode = false) {\n    // this.stage = new PIXI.Container();\n    // the ParticleContainer is a faster version of the PIXI sprite container\n    this.stage = new PIXI.particles.ParticleContainer(MAX_SPRITES_PER_LAYER, {\n      scale: true,\n      alpha: true,\n      position: true,\n      uvs: true,\n    })\n    if (useNormalBlendMode === false) {\n      this.stage.blendMode = PIXI.BLEND_MODES.SCREEN\n    }\n\n    this.spritesPool = []\n\n    const initialTextureFrame = new PIXI.Rectangle(\n      0,\n      0,\n      VESSELS_BASE_RADIUS * 2,\n      VESSELS_BASE_RADIUS * 2\n    )\n    this.mainVesselTexture = new PIXI.Texture(baseTexture, initialTextureFrame)\n    this._setTextureFrame(renderingStyleIndex, hue)\n\n    this.clearSpriteProps()\n  }\n\n  clearSpriteProps() {\n    this.spritesProps = {\n      x: new Float32Array(MAX_SPRITES_PER_LAYER),\n      y: new Float32Array(MAX_SPRITES_PER_LAYER),\n      a: new Float32Array(MAX_SPRITES_PER_LAYER),\n      s: new Float32Array(MAX_SPRITES_PER_LAYER),\n    }\n    this.spritesPropsCount = 0\n  }\n\n  pushSpriteProps(x, y, a, s) {\n    this.spritesProps.x[this.spritesPropsCount] = x\n    this.spritesProps.y[this.spritesPropsCount] = y\n    this.spritesProps.a[this.spritesPropsCount] = a\n    this.spritesProps.s[this.spritesPropsCount] = s\n    this.spritesPropsCount++\n  }\n\n  setRenderingStyleIndex(renderingStyleIndex) {\n    this._setTextureFrame(renderingStyleIndex)\n  }\n\n  destroy() {\n    this.spritesPool = null\n    this.stage.destroy({ children: true })\n  }\n\n  /**\n   * Updates the main texture frame offset to show different brush styles and hues\n   * Both args are optional, if one is omitted, previous value is used\n   * @heatmapStyle bool whether to use heatmap style or solid circle style\n   * @hue number hue value between 0 and 360\n   */\n  _setTextureFrame(renderingStyleIndex = null, hue = null) {\n    const textureFrame = this.mainVesselTexture.frame.clone()\n\n    if (renderingStyleIndex !== null) {\n      // one diameter + tiny offset between 2 frames\n      textureFrame.x = VESSELS_BASE_RADIUS * 2 * renderingStyleIndex + renderingStyleIndex\n    }\n\n    if (hue !== null) {\n      let hueIncrement = hueToHueIncrement(hue)\n      if (hueIncrement === VESSELS_HUES_INCREMENTS_NUM - 1) {\n        hueIncrement = 0\n      }\n      textureFrame.y = hueIncrement * VESSELS_BASE_RADIUS * 2\n      if (hueIncrement > 0) {\n        textureFrame.y += hueIncrement\n      }\n    }\n\n    this.mainVesselTexture.frame = textureFrame\n    this.mainVesselTexture.update()\n  }\n\n  render() {\n    const numProps = this.spritesPropsCount\n    this.resizeSpritesPool()\n\n    for (let i = 0; i < numProps; i++) {\n      const sprite = this.stage.children[i]\n      const s = this.spritesProps.s[i]\n      sprite.setTransform(this.spritesProps.x[i], this.spritesProps.y[i], s, s)\n      sprite.alpha = this.spritesProps.a[i]\n    }\n\n    const numSprites = this.stage.children.length\n    for (let i = numProps; i < numSprites; i++) {\n      const sprite = this.stage.children[i]\n      sprite.x = -100\n    }\n  }\n\n  resizeSpritesPool() {\n    const numProps = this.spritesPropsCount\n    const prevNumSprites = this.stage.children.length\n    const delta = numProps - prevNumSprites\n    // console.log(prevNumSprites, '->', numProps, ' delta:', delta);\n\n    if (delta < -4999) {\n      // sprite needs to be removed. Do that progressively (max 100) to avoid UI lock\n      const toRemove = Math.min(100, -delta)\n      // console.log('removing ', toRemove);\n      for (let i = 0; i < toRemove; i++) {\n        this.stage.removeChildAt(0)\n      }\n    }\n\n    if (delta > 0) {\n      const toAdd = Math.max(5000, delta)\n      // console.log('adding ', toAdd);\n      this._addSprites(toAdd)\n    }\n  }\n\n  _addSprites(num) {\n    for (let i = 0; i < num; i++) {\n      const vessel = new PIXI.Sprite(this.mainVesselTexture)\n      vessel.anchor.x = 0.5\n      vessel.anchor.y = 0.5\n      // ParticlesContainer does not support .visible, so we just move the sprite out of the viewport\n      vessel.x = -100\n      // vessel.blendMode = PIXI.BLEND_MODES.SCREEN;\n      // vessel.filters=  [new PIXI.filters.BlurFilter(10,10)]\n      this.stage.addChild(vessel)\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport uniq from 'lodash/uniq'\nimport * as PIXI from 'pixi.js'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { BRUSH_RENDERING_STYLE, BRUSH_ZOOM_RENDERING_STYLE } from '../constants'\nimport { vesselSatisfiesFilters } from '../utils/heatmapTileData'\nimport HeatmapSubLayer from './HeatmapSubLayer'\n\n// This is a faster version of worldToPixels that omits pitch,\n// and ignores values from the matrix that are consistently = 0\nconst s = 1 / 1.5\nconst worldToPixelsSimple = (x, y, m) => {\n  const fx = s * (m[0] * x + m[4] * y + m[12])\n  const fy = s * (m[5] * y + m[13])\n  return [fx, fy]\n}\n\nclass HeatmapLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.useRadialGradientStyle !== this.props.useRadialGradientStyle) {\n      this.setBrushZoomRenderingStyle(nextProps.useRadialGradientStyle)\n    }\n  }\n\n  _build() {\n    const { layer, rootStage, useRadialGradientStyle, customRenderingStyle } = this.props\n    this.subLayers = {}\n    this.renderingStyle =\n      layer.header && layer.header.rendering ? layer.header.rendering : customRenderingStyle\n\n    this.setBrushRenderingStyle(this.renderingStyle.style)\n    this.setBrushZoomRenderingStyle(useRadialGradientStyle)\n\n    this.stage = new PIXI.Container()\n\n    rootStage.addChild(this.stage)\n  }\n\n  setBrushRenderingStyle(style = BRUSH_RENDERING_STYLE.NORMAL) {\n    if (typeof style === 'string') {\n      this.brushRenderingStyle = BRUSH_RENDERING_STYLE[style.toUpperCase()]\n    } else {\n      this.brushRenderingStyle = style\n    }\n    this._setBrushRenderingStyleIndex()\n  }\n\n  setBrushZoomRenderingStyle(useRadialGradientStyle) {\n    this.brushZoomRenderingStyle =\n      useRadialGradientStyle === true\n        ? BRUSH_ZOOM_RENDERING_STYLE.RADIAL_GRADIENT\n        : BRUSH_ZOOM_RENDERING_STYLE.CIRCLE\n    this._setBrushRenderingStyleIndex()\n  }\n\n  _setBrushRenderingStyleIndex() {\n    // only NORMAL brush styles support different zoom styles\n    const cappedZoomRenderingStyle =\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.NORMAL ? this.brushZoomRenderingStyle : 0\n    const newStyleIndex = this.brushRenderingStyle + cappedZoomRenderingStyle\n    if (newStyleIndex === this.renderingStyleIndex) {\n      return\n    }\n    this.renderingStyleIndex = newStyleIndex\n    Object.values(this.subLayers).forEach((subLayer) => {\n      subLayer.setRenderingStyleIndex(this.renderingStyleIndex)\n    })\n  }\n\n  _redraw() {\n    const { filters, baseTexture, layer } = this.props\n\n    if (\n      layer === null ||\n      layer === undefined ||\n      layer.tiles === undefined ||\n      layer.visible === false\n    ) {\n      this.stage.visible = false\n      return\n    }\n\n    this.stage.visible = true\n    this.stage.alpha = layer.opacity\n\n    const tiles = layer.tiles\n    const defaultHue = layer.hue\n    const allHuesToRender =\n      filters !== undefined && filters.length\n        ? filters\n            // pass is set to true by filterGroupActions when none of the filters fields\n            // in the filter group is supported by the layer headers\n            .filter((f) => f.pass !== true)\n            .map((f) => (f.hue === undefined ? '0' : f.hue.toString()))\n        : [defaultHue.toString()]\n    const currentlyUsedHues = Object.keys(this.subLayers)\n\n    // get all hues, old and new\n    const allHues = uniq(allHuesToRender.concat(currentlyUsedHues))\n\n    for (let i = 0; i < allHues.length; i++) {\n      const hue = allHues[i]\n      if (allHuesToRender.indexOf(hue) === -1) {\n        // not on new hues: delete sublayer\n        this._destroySubLayer(this.subLayers[hue])\n        delete this.subLayers[hue]\n        continue\n      }\n      if (currentlyUsedHues.indexOf(hue) === -1) {\n        // not on old hues: create sublayer\n        this.subLayers[hue] = this._createSublayer(baseTexture, this.renderingStyleIndex, hue)\n      }\n      this.subLayers[hue].clearSpriteProps()\n    }\n\n    if (!allHuesToRender.length) return\n    tiles.forEach((tile) => {\n      this._setSubLayersSpritePropsForTile({\n        data: tile.data,\n        numFilters: filters.length,\n        defaultHue,\n      })\n    })\n\n    allHuesToRender.forEach((hueToRender) => {\n      this.subLayers[hueToRender].render()\n    })\n  }\n\n  _setSubLayersSpritePropsForTile({ data, numFilters, defaultHue }) {\n    if (!data) {\n      return\n    }\n\n    const { startIndex, endIndex, viewport, filters, viewportLeft, viewportRight } = this.props\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let index = 0, len = frame.worldX.length; index < len; index++) {\n        let hue\n        if (filters === undefined || !filters.length) {\n          hue = defaultHue\n        }\n        for (let fi = 0; fi < numFilters; fi++) {\n          const filter = filters[fi]\n          if (vesselSatisfiesFilters(frame, index, filter.filterValues)) {\n            hue = filter.hue\n            break\n          }\n        }\n\n        // no filter passes: bail\n        if (hue === undefined) {\n          continue\n        }\n\n        // wrap worldX when point crosses the antimeridian/dateline\n        // world points go from 0 to 512. There is no way to determine if worldX is on the \"wrong\" side\n        // of the antimeridian just by looking at its value (where with lat/lon we can simply look at -/+)\n        // Therefore we compare it to the viewport's left or right boundary, depending on what is currently\n        // \"the right side\" of the antimeridian\n        let worldX = frame.worldX[index]\n        if (viewportLeft > 0 && worldX < viewportLeft) {\n          // worldX is \"behind\" viewportLeft, which means it is \"on the right\" of the antimeridian\n          worldX += 512\n        } else if (viewportLeft < 0 && worldX > viewportRight) {\n          worldX -= 512\n        }\n\n        const scaledX = worldX * viewport.scale\n        const scaledY = frame.worldY[index] * viewport.scale\n        const mtx = viewport.pixelProjectionMatrix\n\n        const [x, y] =\n          viewport.pitch === 0\n            ? worldToPixelsSimple(scaledX, scaledY, mtx)\n            : worldToPixels([scaledX, scaledY], mtx)\n\n        if (x > -10 && x < viewport.width + 10 && y > -10 && y < viewport.height + 10) {\n          this.subLayers[hue].pushSpriteProps(\n            x,\n            y,\n            frame.opacity ? frame.opacity[index] : this.renderingStyle.defaultOpacity,\n            frame.radius ? frame.radius[index] : this.renderingStyle.defaultSize\n          )\n        }\n      }\n    }\n  }\n\n  _createSublayer(baseTexture, renderingStyleIndex, hue) {\n    const subLayer = new HeatmapSubLayer(\n      baseTexture,\n      renderingStyleIndex,\n      hue,\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.BULLSEYE\n    )\n    this.stage.addChild(subLayer.stage)\n    return subLayer\n  }\n\n  _destroy() {\n    Object.values(this.subLayers).forEach(this._destroySubLayer.bind(this))\n    this.stage.destroy({ children: true })\n    const { rootStage } = this.props\n    rootStage.removeChild(this.stage)\n  }\n\n  _destroySubLayer(subLayer) {\n    this.stage.removeChild(subLayer.stage)\n    subLayer.destroy()\n  }\n\n  render() {\n    return null\n  }\n}\n\nHeatmapLayer.propTypes = {\n  layer: PropTypes.object,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  filters: PropTypes.array,\n  baseTexture: PropTypes.object,\n  useRadialGradientStyle: PropTypes.bool,\n  customRenderingStyle: PropTypes.object,\n  viewportLeft: PropTypes.number,\n  viewportRight: PropTypes.number,\n}\n\nexport default HeatmapLayer\n","/* global PIXI */\nimport 'pixi.js'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { TRACKS_DOTS_STYLE_ZOOM_THRESHOLD } from '../config'\n\nclass TracksLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  _build() {\n    const { rootStage } = this.props\n    this.stage = new PIXI.Graphics()\n    this.stage.nativeLines = true\n    rootStage.addChild(this.stage)\n  }\n\n  clear() {\n    this.stage.clear()\n  }\n\n  _redraw() {\n    const { tracks, zoom, startIndex, endIndex, highlightTemporalExtentIndexes } = this.props\n\n    this.clear()\n    if (!tracks.length) {\n      return\n    }\n\n    const overInInner =\n      highlightTemporalExtentIndexes === null\n        ? undefined\n        : [\n            Math.max(startIndex, highlightTemporalExtentIndexes[0]),\n            Math.min(endIndex, highlightTemporalExtentIndexes[1]),\n          ]\n    const overExtent = overInInner && overInInner[1] - overInInner[0] > 0 ? overInInner : undefined\n\n    let n = 0 // eslint-disable-line no-unused-vars\n\n    const drawFishingCircles = zoom > TRACKS_DOTS_STYLE_ZOOM_THRESHOLD\n    const fishingCirclesRadius = 1 + (zoom - TRACKS_DOTS_STYLE_ZOOM_THRESHOLD) * 0.5\n    const drawOverTrack = overExtent !== undefined && overExtent[0] > 0 && overExtent[1] > 0\n\n    tracks.forEach((track) => {\n      n += this._drawTrack({\n        data: track.data,\n        startIndex,\n        endIndex,\n        drawFishingCircles,\n        fishingCirclesRadius,\n        color: `0x${track.color.substr(1)}`,\n        lineThickness: 1,\n        lineOpacity: 1,\n      })\n\n      // Draw the highlight over the track when the user hovers over the Timebar\n      if (drawOverTrack === true) {\n        n += this._drawTrack({\n          data: track.data,\n          startIndex: highlightTemporalExtentIndexes[0],\n          endIndex: highlightTemporalExtentIndexes[1],\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color: '0xFFFFFF',\n          lineThickness: 2,\n          lineOpacity: 1,\n        })\n      }\n    })\n\n    // console.log(n);\n  }\n\n  /**\n   * Draws a single track (line + points)\n   *\n   * @param data track points data in 'playback form' (ie organized by days)\n   * @param extent extent, in day indices\n   * @param offset object containing info about the current situation of the map viewport, used to compute screen coords\n   * @param drawFishingCircles whether to draw fishing circles or not\n   * @param fishingCirclesRadius radius of the fishing circles\n   * @param color\n   * @param lineThickness\n   * @param lineOpacity\n   * @param worldOffset offset to use when a track crosses the dateline (ie 512 to add a second world to the right)\n   */\n  _drawTrack({\n    data,\n    startIndex,\n    endIndex,\n    drawFishingCircles,\n    fishingCirclesRadius,\n    color,\n    lineThickness,\n    lineOpacity,\n    worldOffset = 0,\n  }) {\n    const { viewport } = this.props\n\n    let n = 0\n    let prevSeries\n    let prevWorldX\n    let prevWorldY\n\n    const circlePoints = {\n      x: [],\n      y: [],\n    }\n\n    // line thickness is ignored in native mode anyways.\n    this.stage.lineStyle(lineThickness, color, lineOpacity)\n\n    let duplicateWorld = false\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let i = 0, len = frame.series.length; i < len; i++) {\n        const currentSeries = frame.series[i]\n\n        n++\n\n        const worldX = frame.worldX[i] + worldOffset\n        const worldY = frame.worldY[i]\n\n        const [x, y] = worldToPixels(\n          [worldX * viewport.scale, worldY * viewport.scale],\n          viewport.pixelProjectionMatrix\n        )\n\n        if (prevSeries !== currentSeries) {\n          this.stage.moveTo(x, y)\n        }\n\n        // more than a ½ world of distance between two points = crossing the dateline\n        if (prevWorldX && Math.abs(worldX - prevWorldX) > 256) {\n          // worldOffset === 0 -> this is the first time drawTrack is called\n          if (worldOffset === 0) {\n            // set a flag to call drawTrack again at the end of the loop\n            duplicateWorld = true\n          }\n\n          // get Y coordinate where track intersects with dateline\n          const atDatelineWorldY = prevWorldY + (worldY - prevWorldY) / 2\n\n          // whether tracks crosses dateline from west to east\n          const isWestToEast = worldX - prevWorldX < 0\n\n          const worldXEnd = worldOffset + (512 - 0.000001)\n          const worldXStart = worldOffset\n\n          // get X coordinate ending at dateline\n          const atDatelineEndWorldX = isWestToEast ? worldXEnd : worldXStart\n\n          // get X coordinate starting at dateline\n          const atDatelineStartWorldX = isWestToEast ? worldXStart : worldXEnd\n\n          const [x1, y1] = worldToPixels(\n            [atDatelineEndWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.lineTo(x1, y1)\n          const [x2, y2] = worldToPixels(\n            [atDatelineStartWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.moveTo(x2, y2)\n        }\n\n        this.stage.lineTo(x, y)\n\n        if (drawFishingCircles && frame.hasFishing[i] === true) {\n          circlePoints.x.push(x)\n          circlePoints.y.push(y)\n        }\n\n        prevWorldX = worldX\n        prevWorldY = worldY\n        prevSeries = currentSeries\n      }\n    }\n\n    if (drawFishingCircles) {\n      this.stage.lineStyle(0)\n      this.stage.beginFill(color, 1)\n      for (let i = 0, circlesLength = circlePoints.x.length; i < circlesLength; i++) {\n        this.stage.drawCircle(circlePoints.x[i], circlePoints.y[i], fishingCirclesRadius)\n      }\n      this.stage.endFill()\n    }\n\n    if (duplicateWorld === true) {\n      ;[-512, 512].forEach((offset) => {\n        this._drawTrack({\n          worldOffset: offset,\n          data,\n          startIndex,\n          endIndex,\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color,\n          lineThickness,\n          lineOpacity,\n        })\n      })\n    }\n    return n\n  }\n\n  render() {\n    return null\n  }\n}\n\nTracksLayer.propTypes = {\n  zoom: PropTypes.number,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  tracks: PropTypes.array,\n}\n\nexport default TracksLayer\n","import React from 'react'\nimport * as PIXI from 'pixi.js'\nimport PropTypes from 'prop-types'\nimport { BaseControl } from 'react-map-gl'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport {\n  hsvToRgb,\n  hueToRgbString,\n  hueIncrementToHue,\n  wrapHue,\n  VESSELS_HUES_INCREMENTS_NUM,\n} from '../utils/map-colors'\nimport {\n  VESSELS_BASE_RADIUS,\n  VESSELS_HEATMAP_BLUR_FACTOR,\n  ACTIVITY_HIGHLIGHT_HUE,\n  VESSELS_HEATMAP_DIMMING_ALPHA,\n  VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD,\n  VESSEL_CLICK_TOLERANCE_PX,\n} from '../config'\nimport HeatmapLayer from '../heatmap/HeatmapLayer'\nimport TracksLayer from '../tracks/TracksLayer'\n\nconst shouldUseRadialGradientStyle = (zoom) => zoom < VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD\n\n// builds a texture spritesheet containing\n// - the heatmap style (radial gradient)\n// - the circle style that is used at higher zoom levels\n// - the 'bullseye' style used for encounters\n// as well as a number of hues for each in a 2D grid.\n// Then, only the texture frame (mesh UVs) is modified depending on the zoom level,\n// in order not to have to recreate sprites\nconst getVesselTexture = (radius, blurFactor) => {\n  const tplCanvas = document.createElement('canvas')\n  const tplCtx = tplCanvas.getContext('2d')\n  const diameter = radius * 2\n  const NUM_STYLES = 3\n  tplCanvas.width = diameter * NUM_STYLES + (NUM_STYLES - 1) // + (NUM_STYLES - 1): tiny offset between 2 frames\n  tplCanvas.height = diameter * VESSELS_HUES_INCREMENTS_NUM + VESSELS_HUES_INCREMENTS_NUM\n\n  for (let hueIncrement = 0; hueIncrement < VESSELS_HUES_INCREMENTS_NUM; hueIncrement++) {\n    const y = diameter * hueIncrement + hueIncrement\n    const yCenter = y + radius\n\n    // heatmap style\n    let x = radius\n    const gradient = tplCtx.createRadialGradient(\n      x,\n      yCenter,\n      radius * blurFactor,\n      x,\n      yCenter,\n      radius\n    )\n    const hue = hueIncrementToHue(hueIncrement)\n    const rgbString = hueToRgbString(hue)\n    gradient.addColorStop(0, rgbString)\n\n    const rgbOuter = hsvToRgb(wrapHue(hue + 30), 80, 100)\n    gradient.addColorStop(1, `rgba(${rgbOuter.r}, ${rgbOuter.g}, ${rgbOuter.b}, 0)`)\n\n    tplCtx.fillStyle = gradient\n    tplCtx.fillRect(0, y, diameter, diameter)\n\n    // circle style\n    x += diameter + 1 // tiny offset between 2 frames\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n\n    // bullseye style\n    x += diameter + 1\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.4, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.95, 0, 2 * Math.PI, false)\n    tplCtx.lineWidth = 1\n    tplCtx.strokeStyle = rgbString\n    tplCtx.stroke()\n  }\n\n  return tplCanvas\n}\n\nclass ActivityLayers extends BaseControl {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.props.exportNativeViewport(this._context.viewport)\n\n    if (\n      nextProps.viewport.width !== this.props.viewport.width ||\n      nextProps.viewport.height !== this.props.viewport.height\n    ) {\n      this._updateViewportSize(nextProps.viewport.width, nextProps.viewport.height)\n    }\n  }\n\n  _build() {\n    const { width, height } = this.props.viewport\n\n    this.pixi = new PIXI.Application({\n      width,\n      height,\n      transparent: true,\n      antialias: true,\n    })\n\n    this.renderer = this.pixi.renderer\n    this.canvas = this.pixi.view\n    this.canvas.style.position = 'absolute'\n\n    this.container.appendChild(this.canvas)\n\n    this.stage = this.pixi.stage\n\n    const baseTextureCanvas = getVesselTexture(VESSELS_BASE_RADIUS, VESSELS_HEATMAP_BLUR_FACTOR)\n    this.baseTexture = PIXI.Texture.fromCanvas(baseTextureCanvas)\n\n    this.heatmapStage = new PIXI.Container()\n    this.stage.addChild(this.heatmapStage)\n\n    this.pixi.ticker.add(this._onTick)\n  }\n\n  _updateViewportSize(viewportWidth, viewportHeight) {\n    this.renderer.resize(viewportWidth, viewportHeight)\n  }\n\n  toggleHeatmapDimming(dim) {\n    if (this.heatmapStage === undefined) {\n      return\n    }\n    if (dim === true) {\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = dim === true ? VESSELS_HEATMAP_DIMMING_ALPHA : 1\n  }\n\n  onTouchStart = (event) => {\n    if (!event.touches.length) {\n      return\n    }\n    this.queryCoords(event.touches[0].clientX, event.touches[0].clientY)\n  }\n\n  onMouseMove = (event) => {\n    this.queryCoords(event.clientX, event.clientY)\n  }\n\n  queryCoords(x, y) {\n    // bail if all heatmap layers are set to non-interactive\n    if (this.props.heatmapLayers.every((l) => l.interactive !== true)) {\n      return\n    }\n\n    const { viewport } = this._context\n    const [longitude, latitude] = viewport.unproject([x, y])\n\n    let wrappedLongitude = longitude\n    if (wrappedLongitude > 180) {\n      wrappedLongitude -= 360\n    } else if (wrappedLongitude < -180) {\n      wrappedLongitude += 360\n    }\n\n    const [worldX, worldY] = lngLatToWorld([wrappedLongitude, latitude], 1)\n\n    const toleranceRadiusInWorldUnits = VESSEL_CLICK_TOLERANCE_PX / viewport.scale\n\n    this.props.queryHeatmapVessels(\n      {\n        longitude: wrappedLongitude,\n        latitude,\n        worldX,\n        worldY,\n        toleranceRadiusInWorldUnits,\n      },\n      this.props.temporalExtentIndexes\n    )\n  }\n\n  _onTick = () => {\n    if (this.heatmapFadingIn === true && this.heatmapStage.alpha < 1) {\n      this._heatmapFadeinStep()\n    }\n  }\n\n  _startHeatmapFadein() {\n    this.heatmapFadingIn = true\n    this.heatmapFadeinStartTimestamp = undefined\n  }\n\n  _heatmapFadeinStep() {\n    if (this.heatmapFadeinStartTimestamp === undefined) {\n      this.heatmapFadeinStartTimestamp = Date.now()\n    }\n    const timeElapsed = (Date.now() - this.heatmapFadeinStartTimestamp) / 1000\n    let alpha = this.heatmapStage.alpha + (1 - this.heatmapStage.alpha) * timeElapsed\n    if (alpha >= 1) {\n      alpha = 1\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = alpha\n  }\n\n  // FIXME move to container?\n  _getHighlightData(highlightedVessels, highlightedClickedVessel, heatmapLayers) {\n    const hue = ACTIVITY_HIGHLIGHT_HUE\n    let highlightLayerData = {\n      id: '__HIGHLIGHT__',\n      visible: true,\n      opacity: 1,\n      hue: ACTIVITY_HIGHLIGHT_HUE,\n    }\n    let highlightFilters = []\n\n    if (\n      highlightedVessels !== undefined &&\n      highlightedVessels.layer !== undefined &&\n      highlightedVessels.foundVessels !== undefined &&\n      highlightedVessels.isEmpty !== true\n    ) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedVessels.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = highlightedVessels.foundVessels.map((vessel) => ({\n        hue,\n        filterValues: {\n          series: [vessel.series],\n        },\n      }))\n    } else if (highlightedClickedVessel !== null) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedClickedVessel.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = [\n        {\n          hue,\n          filterValues: {\n            series: [highlightedClickedVessel.seriesgroup],\n          },\n        },\n      ]\n    }\n    return {\n      highlightLayerData,\n      highlightFilters,\n    }\n  }\n  _render() {\n    const {\n      zoom,\n      heatmapLayers,\n      temporalExtentIndexes,\n      highlightTemporalExtentIndexes,\n      highlightedVessels,\n      highlightedClickedVessel,\n      tracks,\n      leftWorldScaled,\n      rightWorldScaled,\n    } = this.props\n    const { viewport } = this._context\n\n    const startIndex = temporalExtentIndexes[0]\n    const endIndex = temporalExtentIndexes[1]\n    const useRadialGradientStyle = shouldUseRadialGradientStyle(zoom)\n\n    if (highlightedVessels.isEmpty !== true) {\n      this.toggleHeatmapDimming(true)\n    }\n    if (highlightedVessels.isEmpty === true && tracks.length === 0) {\n      this._startHeatmapFadein()\n    }\n    if (this.renderer) {\n      const err = this.renderer.gl.getError()\n      if (err !== 0) console.log(err)\n    }\n\n    const { highlightLayerData, highlightFilters } = this._getHighlightData(\n      highlightedVessels,\n      highlightedClickedVessel,\n      heatmapLayers\n    )\n\n    return (\n      <div\n        ref={(ref) => {\n          this.container = ref\n        }}\n        style={{ position: 'absolute' }}\n        onMouseMove={this.onMouseMove}\n        onTouchStart={this.onTouchStart}\n      >\n        {heatmapLayers.map((layer) => (\n          <HeatmapLayer\n            key={layer.id}\n            layer={layer}\n            filters={layer.filters || []}\n            viewport={viewport}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            baseTexture={this.baseTexture}\n            rootStage={this.heatmapStage}\n            useRadialGradientStyle={useRadialGradientStyle}\n            customRenderingStyle={{}}\n            viewportLeft={leftWorldScaled}\n            viewportRight={rightWorldScaled}\n          />\n        ))}\n        {this.stage !== undefined && (\n          <HeatmapLayer\n            key=\"highlighted\"\n            layer={highlightLayerData}\n            filters={highlightFilters}\n            viewport={viewport}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            baseTexture={this.baseTexture}\n            rootStage={this.heatmapStage}\n            useRadialGradientStyle={useRadialGradientStyle}\n            customRenderingStyle={{ defaultOpacity: 1, defaultSize: 1 }}\n            viewportLeft={leftWorldScaled}\n            viewportRight={rightWorldScaled}\n          />\n        )}\n        {this.stage !== undefined && (\n          <TracksLayer\n            tracks={tracks}\n            viewport={viewport}\n            zoom={zoom}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            highlightTemporalExtentIndexes={highlightTemporalExtentIndexes}\n            rootStage={this.stage}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nActivityLayers.propTypes = {\n  zoom: PropTypes.number,\n  heatmapLayers: PropTypes.array,\n  temporalExtentIndexes: PropTypes.array,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  highlightedVessels: PropTypes.object,\n  highlightedClickedVessel: PropTypes.object,\n  tracks: PropTypes.array,\n  queryHeatmapVessels: PropTypes.func,\n  exportNativeViewport: PropTypes.func,\n  leftWorldScaled: PropTypes.number,\n  rightWorldScaled: PropTypes.number,\n}\n\nActivityLayers.contextTypes = {\n  viewport: PropTypes.object,\n}\n\nexport default ActivityLayers\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport convert from '@globalfishingwatch/map-convert'\nimport { exportNativeViewport } from '../glmap/viewport.actions'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\nimport ActivityLayers from './ActivityLayers'\nimport { queryHeatmapVessels } from '../heatmap/heatmapTiles.actions'\nimport { MIN_FRAME_LENGTH_MS } from '../config'\n\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\n\nconst getHeatmapLayersAsArray = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    const a = Object.keys(heatmapLayers).map((id) => ({\n      ...heatmapLayers[id],\n    }))\n    // console.log(a)\n    return a\n  }\n)\n\nconst getTracks = (state) => state.map.tracks.data\n\nconst getTracksWithData = createSelector(\n  [getTracks],\n  (tracks) => {\n    const tracksWithData = tracks\n      .filter((t) => t.type !== 'geojson')\n      .filter((t) => t.data !== undefined)\n    return tracksWithData\n  }\n)\n\nconst getTemporalExtentIndexes = createSelector(\n  [getTemporalExtent],\n  (temporalExtent) => {\n    const startTimestamp = temporalExtent[0].getTime()\n    const endTimestamp = Math.max(\n      temporalExtent[1].getTime(),\n      temporalExtent[0].getTime() + MIN_FRAME_LENGTH_MS\n    )\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst getHighlightTemporalExtentIndexes = createSelector(\n  [getHighlightTemporalExtent],\n  (highlightTemporalExtent) => {\n    if (\n      highlightTemporalExtent === undefined ||\n      highlightTemporalExtent === null ||\n      !highlightTemporalExtent.length\n    ) {\n      return null\n    }\n    const startTimestamp = highlightTemporalExtent[0].getTime()\n    const endTimestamp = highlightTemporalExtent[1].getTime()\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst mapStateToProps = (state) => ({\n  highlightedVessels: state.map.heatmap.highlightedVessels,\n  highlightedClickedVessel: state.map.heatmap.highlightedClickedVessel,\n  viewport: state.map.viewport.viewport,\n  zoom: state.map.viewport.viewport.zoom,\n  heatmapLayers: getHeatmapLayersAsArray(state),\n  tracks: getTracksWithData(state),\n  leftWorldScaled: state.map.viewport.leftWorldScaled,\n  rightWorldScaled: state.map.viewport.rightWorldScaled,\n  temporalExtentIndexes: getTemporalExtentIndexes(state),\n  highlightTemporalExtentIndexes: getHighlightTemporalExtentIndexes(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  queryHeatmapVessels: (coords, temporalExtentIndexes) => {\n    dispatch(queryHeatmapVessels(coords, temporalExtentIndexes))\n  },\n  exportNativeViewport: (viewport) => {\n    dispatch(exportNativeViewport(viewport))\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActivityLayers)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport MapGL, { Popup } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport ActivityLayers from '../activity/ActivityLayers.container.js'\nimport styles from './map.css'\n\nconst PopupWrapper = (props) => {\n  const { latitude, longitude, children, closeButton, onClose } = props\n  return (\n    <Popup\n      latitude={latitude}\n      longitude={longitude}\n      closeButton={closeButton}\n      onClose={onClose}\n      anchor=\"bottom\"\n      offsetTop={-10}\n      tipSize={4}\n      closeOnClick={false}\n    >\n      {children}\n    </Popup>\n  )\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: true,\n    }\n    this._mapContainerRef = null\n  }\n  componentDidMount() {\n    window.addEventListener('resize', this._resize)\n    this._resize()\n\n    // useful with FOUC\n    window.setTimeout(() => this._resize(), 1)\n\n    // there is a problem with the container width computation (only with \"fat scrollbar\" browser/os configs),\n    // seems like the panels with scrollbars are taken into account or smth\n    window.setTimeout(() => this._resize(), 10000)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resize)\n  }\n\n  _resize = () => {\n    if (this._mapContainerRef === null) {\n      console.warn('Cant set viewport on a map that hasnt finished intanciating yet')\n      return\n    }\n    const mapContainerStyle = window.getComputedStyle(this._mapContainerRef)\n    const width = parseInt(mapContainerStyle.width, 10)\n    const height = parseInt(mapContainerStyle.height, 10) + 1\n\n    if (width !== this.props.viewport.width || height !== this.props.viewport.height) {\n      this.props.setViewport({\n        ...this.props.viewport,\n        width,\n        height,\n      })\n    }\n  }\n\n  onViewportChange = (viewport) => {\n    this.props.setViewport(viewport)\n  }\n\n  onMapInteraction = (event, type) => {\n    // console.log(type, event, event.features)\n    const callback = type === 'hover' ? this.props.mapHover : this.props.mapClick\n    if (this.glMap !== undefined && event.features !== undefined && event.features.length) {\n      const feature = event.features[0]\n      if (feature.properties.cluster === true) {\n        const clusterId = feature.properties.cluster_id\n        const sourceId = feature.source\n        const glSource = this.glMap.getSource(sourceId)\n        glSource.getClusterExpansionZoom(clusterId, (err1, zoom) => {\n          glSource.getClusterLeaves(clusterId, 99, 0, (err2, children) => {\n            if (err1 || err2) {\n              return\n            }\n            callback(event.lngLat[1], event.lngLat[0], event.features, {\n              zoom,\n              children,\n            })\n          })\n        })\n        return\n      }\n    }\n    callback(event.lngLat[1], event.lngLat[0], event.features)\n  }\n\n  onHover = (event) => {\n    this.onMapInteraction(event, 'hover')\n  }\n\n  onClick = (event) => {\n    this.onMapInteraction(event, 'click')\n  }\n\n  render() {\n    const {\n      viewport,\n      maxZoom,\n      minZoom,\n      transitionEnd,\n      mapStyle,\n      onClosePopup,\n      clickPopup,\n      hoverPopup,\n      cursor,\n      interactiveLayerIds,\n    } = this.props\n    return (\n      <div\n        id=\"map\"\n        className={styles.map}\n        ref={(ref) => {\n          this._mapContainerRef = ref\n        }}\n        onMouseLeave={() => {\n          this.setState({ mouseOver: false })\n        }}\n        onMouseEnter={() => {\n          this.setState({ mouseOver: true })\n        }}\n      >\n        <MapGL\n          ref={(ref) => {\n            if (ref !== null) {\n              this.glMap = ref.getMap()\n            }\n          }}\n          onTransitionEnd={transitionEnd}\n          onHover={this.onHover}\n          onClick={this.onClick}\n          getCursor={({ isDragging }) => {\n            if (cursor === null) {\n              return isDragging ? 'grabbing' : 'grab'\n            }\n            return cursor\n          }}\n          mapStyle={mapStyle}\n          {...viewport}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          onViewportChange={this.onViewportChange}\n          interactiveLayerIds={interactiveLayerIds}\n        >\n          <ActivityLayers loadTemporalExtent={this.props.loadTemporalExtent} />\n          {clickPopup !== undefined && clickPopup !== null && (\n            <PopupWrapper\n              latitude={clickPopup.latitude}\n              longitude={clickPopup.longitude}\n              closeButton\n              onClose={onClosePopup}\n            >\n              {clickPopup.content}\n            </PopupWrapper>\n          )}\n          {this.state.mouseOver === true && hoverPopup !== undefined && hoverPopup !== null && (\n            <PopupWrapper\n              latitude={hoverPopup.latitude}\n              longitude={hoverPopup.longitude}\n              closeButton={false}\n            >\n              {hoverPopup.content}\n            </PopupWrapper>\n          )}\n        </MapGL>\n        <div className={styles.googleLogo} />\n      </div>\n    )\n  }\n}\n\nMap.propTypes = {\n  viewport: PropTypes.object,\n  mapStyle: PropTypes.object,\n  clickPopup: PropTypes.object,\n  hoverPopup: PropTypes.object,\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  setViewport: PropTypes.func,\n  mapHover: PropTypes.func,\n  mapClick: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  transitionEnd: PropTypes.func,\n  cursor: PropTypes.string,\n  interactiveLayerIds: PropTypes.arrayOf(PropTypes.string),\n}\n\nexport default Map\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { fromJS } from 'immutable'\nimport { TRACKS_LAYER_IN_FRONT_OF_GROUP } from '../config'\nimport { closePopup } from '../module/module.actions.js'\nimport { getTracksStyles } from '../tracks/tracks.selectors.js'\nimport { mapHover, mapClick } from './interaction.actions.js'\nimport { setViewport, transitionEnd } from './viewport.actions.js'\nimport Map from './Map'\n\nconst getStaticLayers = (state) => state.map.style.staticLayers\n\nconst getInteractiveLayerIds = createSelector(\n  [getStaticLayers],\n  // Note: here we assume that layer IDs provided with module match the GL layers that should\n  // be interactive or not, ie typically the fill layer if a label layer is present\n  (staticLayers) =>\n    staticLayers.filter((l) => l.interactive === true && l.visible === true).map((l) => l.id)\n)\n\nconst getMapStyles = (state) => state.map.style.mapStyle\nconst getMapStyle = createSelector(\n  [getMapStyles, getTracksStyles],\n  (mapStyles, trackStyles) => {\n    if (!trackStyles) return mapStyles\n\n    const currentLayerGroups = mapStyles\n      .toJS()\n      .layers.filter((l) => l.metadata !== undefined)\n      .map((l) => l.metadata['mapbox:group'])\n    const trackLayersIndex = currentLayerGroups.lastIndexOf(TRACKS_LAYER_IN_FRONT_OF_GROUP) + 1\n\n    let finalMapStyles = mapStyles.mergeIn(['sources'], trackStyles.sources)\n    let mapStylesLayers = mapStyles.get('layers')\n    trackStyles.layers.forEach((trackLayer, i) => {\n      mapStylesLayers = mapStylesLayers.insert(trackLayersIndex + i, fromJS(trackLayer))\n    })\n    finalMapStyles = finalMapStyles.set('layers', mapStylesLayers)\n\n    return finalMapStyles\n  }\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  viewport: state.map.viewport.viewport,\n  maxZoom: state.map.viewport.maxZoom,\n  minZoom: state.map.viewport.minZoom,\n  cursor: state.map.interaction.cursor,\n  mapStyle: getMapStyle(state),\n  interactiveLayerIds: getInteractiveLayerIds(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setViewport: (viewport) => {\n    dispatch(setViewport(viewport))\n  },\n  mapHover: (lat, long, features, cluster) => {\n    dispatch(mapHover(lat, long, features, cluster))\n  },\n  mapClick: (lat, long, features, cluster) => {\n    dispatch(mapClick(lat, long, features, cluster))\n  },\n  transitionEnd: () => {\n    dispatch(transitionEnd())\n  },\n  onClosePopup: () => {\n    dispatch(closePopup())\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map)\n","// This utility looks at GeoJSON features and returns the predominant geometry type\n\nconst TYPES = [\n  { gl: 'line', geoJSON: ['LineString', 'MultiLineString'] },\n  { gl: 'fill', geoJSON: ['Polygon', 'MultiPolygon'] },\n  { gl: 'circle', geoJSON: ['Point', 'MultiPoint'] },\n]\n\nexport default (geoJSON) => {\n  // collect all geoJSON geom types\n  const allGeoJSONTypes = geoJSON.features.map((feature) => {\n    const geom = feature.geometry\n    if (geom === undefined) {\n      return null\n    }\n    return geom.type\n  })\n\n  // collect number of geometries by GL geom types\n  const numByGLType = TYPES.map((type) => {\n    let num = 0\n    allGeoJSONTypes.forEach((geoJSONType) => {\n      if (type.geoJSON.indexOf(geoJSONType) > -1) {\n        num++\n      }\n    })\n    return { gl: type.gl, num }\n  })\n\n  // get feature types with the higher count\n  let glType = 'fill'\n  let glTypeMax = 0\n  numByGLType.forEach((t) => {\n    if (t.num > glTypeMax) {\n      glType = t.gl\n      glTypeMax = t.num\n    }\n  })\n\n  return glType\n}\n","import { fromJS } from 'immutable'\nimport { hexToRgb } from '../utils/map-colors'\nimport { STATIC_LAYERS_CARTO_ENDPOINT, STATIC_LAYERS_CARTO_TILES_ENDPOINT } from '../config'\nimport { CUSTOM_LAYERS_SUBTYPES, GL_TRANSPARENT } from '../constants'\nimport GL_STYLE from './gl-styles/style.json'\nimport getMainGeomType from '../utils/getMainGeomType'\n\nexport const INIT_MAP_STYLE = 'INIT_MAP_STYLE'\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE'\nexport const MARK_CARTO_LAYERS_AS_INSTANCIATED = 'MARK_CARTO_LAYERS_AS_INSTANCIATED'\nexport const SET_STATIC_LAYERS = 'SET_STATIC_LAYERS'\nexport const SET_BASEMAP_LAYERS = 'SET_BASEMAP_LAYERS'\n\nexport const initStyle = ({ glyphsPath }) => ({\n  type: INIT_MAP_STYLE,\n  payload: {\n    glyphsPath,\n  },\n})\n\nconst setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n})\n\nexport const applyTemporalExtent = (temporalExtent) => (dispatch, getState) => {\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n\n  const start = Math.round(temporalExtent[0].getTime() / 1000)\n  const end = Math.round(temporalExtent[1].getTime() / 1000)\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    if (glLayer.metadata === undefined || glLayer.metadata['gfw:temporal'] !== true) {\n      continue\n    }\n\n    // if layer is temporal, a filter must always be preset on the style.json object\n    // because each layer can have a different time field to be filtered\n    const currentFilter = style.getIn(['layers', i, 'filter']).toJS()\n    if (currentFilter === null) {\n      throw new Error('filter must be preset on style.json for temporal layer: ', glLayer.id)\n    }\n    currentFilter[1][2] = start\n    currentFilter[2][2] = end\n    style = style.setIn(['layers', i, 'filter'], fromJS(currentFilter))\n  }\n  dispatch(setMapStyle(style))\n}\n\nconst applyLayerExpressions = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  let newStyle = style\n  const currentStyle = style.toJS()\n  const glType = currentGlLayer.type\n  const defaultStyles = currentStyle.metadata['gfw:styles']\n  const metadata = currentGlLayer.metadata\n  ;['selected', 'highlighted'].forEach((styleType) => {\n    // get selectedFeatures or highlightedFeatures\n    const features = refLayer[`${styleType}Features`]\n    const hasFeatures = features !== null && features !== undefined && features.values.length > 0\n    const applyStyleToAllFeatures = refLayer[styleType]\n\n    const defaultStyle = defaultStyles[styleType][glType] || {}\n    const layerStyle =\n      (metadata && metadata['gfw:styles'] && metadata['gfw:styles'][styleType]) || {}\n    const allPaintProperties = { ...defaultStyle, ...layerStyle }\n    if (Object.keys(allPaintProperties).length) {\n      // go through each applicable gl paint property\n      Object.keys(allPaintProperties).forEach((glPaintProperty) => {\n        const selectedValue = allPaintProperties[glPaintProperty][0]\n        const fallbackValue = allPaintProperties[glPaintProperty][1]\n        const paintOrLayout = ['icon-size', 'icon-image'].includes(glPaintProperty)\n          ? 'layout'\n          : 'paint'\n        let glPaintFinalValue\n        if (\n          hasFeatures === false &&\n          applyStyleToAllFeatures !== true &&\n          applyStyleToAllFeatures !== false\n        ) {\n          // style reset when no features filter is declared and neither is applyAll\n          const originalLayerStyle = GL_STYLE.layers.find((l) => l.id === currentGlLayer.id)\n          glPaintFinalValue = originalLayerStyle[paintOrLayout][glPaintProperty]\n        } else if (applyStyleToAllFeatures === true || applyStyleToAllFeatures === false) {\n          glPaintFinalValue = applyStyleToAllFeatures === true ? selectedValue : fallbackValue\n        } else {\n          let layerColorRgbString = ''\n          if (refLayer.color !== null && refLayer.color !== undefined) {\n            const layerColorRgb = hexToRgb(refLayer.color)\n            layerColorRgbString = `${layerColorRgb.r},${layerColorRgb.g},${layerColorRgb.b}`\n          }\n          glPaintFinalValue = [\n            'match',\n            ['get', features.field],\n            features.values,\n            typeof selectedValue !== 'string'\n              ? selectedValue\n              : selectedValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n            typeof fallbackValue !== 'string'\n              ? fallbackValue\n              : fallbackValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n          ]\n        }\n\n        if (glPaintFinalValue !== undefined) {\n          newStyle = newStyle.setIn(\n            ['layers', glLayerIndex, paintOrLayout, glPaintProperty],\n            glPaintFinalValue\n          )\n        }\n      })\n    }\n  })\n  return newStyle\n}\n\nconst toggleLayerVisibility = (style, refLayer, glLayerIndex) => {\n  const visibility = refLayer.visible === true ? 'visible' : 'none'\n  return style.setIn(['layers', glLayerIndex, 'layout', 'visibility'], visibility)\n}\n\nconst updateGLLayer = (style, glLayerId, refLayer) => {\n  const currentStyle = style.toJS()\n  const currentStyleLayers = currentStyle.layers\n  let newStyle = style\n\n  const glLayerIndex = currentStyleLayers.findIndex((l) => l.id === glLayerId)\n  const glLayer = currentStyleLayers.find((l) => l.id === glLayerId)\n\n  // visibility\n  newStyle = toggleLayerVisibility(newStyle, refLayer, glLayerIndex)\n\n  if (refLayer.isBasemap === true) {\n    return newStyle\n  }\n\n  const initialGLLayer = GL_STYLE.layers.find((l) => l.id === glLayerId)\n  const refLayerOpacity = refLayer.opacity === undefined ? 1 : refLayer.opacity\n\n  // color/opacity\n  switch (glLayer.type) {\n    case 'fill': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-outline-color'], refLayer.color)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-color'], GL_TRANSPARENT)\n      break\n    }\n    case 'line': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'line-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'line-color'], refLayer.color)\n      break\n    }\n    case 'symbol': {\n      if (glLayer.metadata && glLayer.metadata['gfw:isLabel'] === true) {\n        const parentLayerIsVisible =\n          newStyle.getIn(['layers', glLayerIndex, 'layout', 'visibility']) === 'visible'\n        const labelsVisibility =\n          parentLayerIsVisible && refLayer.showLabels === true ? 'visible' : 'none'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'layout', 'visibility'],\n          labelsVisibility\n        )\n        if (refLayer.showLabels !== true) {\n          break\n        }\n      }\n      newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-color'], refLayer.color)\n      }\n      break\n    }\n    // Event layers and custom layers with point geom types\n    case 'circle': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-opacity'], refLayerOpacity)\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-radius'],\n          initialGLLayer.paint['circle-radius']\n        )\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-stroke-color'],\n          initialGLLayer.paint['circle-stroke-color'] || '#000'\n        )\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-stroke-width'],\n          initialGLLayer.paint['circle-stroke-width'] || 1\n        )\n\n      if (refLayer.color !== undefined) {\n        newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'circle-color'], refLayer.color)\n      }\n      break\n    }\n    case 'raster': {\n      newStyle = newStyle.setIn(\n        ['layers', glLayerIndex, 'paint', 'raster-opacity'],\n        refLayerOpacity\n      )\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  newStyle = applyLayerExpressions(newStyle, refLayer, glLayer, glLayerIndex)\n\n  return newStyle\n}\n\nconst addCustomGLLayer = (subtype, layerId, url, data) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n  const currentStyle = style.toJS()\n\n  // add source if it doesn't exist yet\n  if (currentStyle.sources[layerId] === undefined) {\n    const source = { type: subtype }\n    if (subtype === CUSTOM_LAYERS_SUBTYPES.geojson) {\n      source.data = data\n    } else if (subtype === CUSTOM_LAYERS_SUBTYPES.raster) {\n      source.tiles = [url]\n      source.tileSize = 256\n    }\n    style = style.setIn(['sources', layerId], fromJS(source))\n  }\n\n  if (currentStyle.layers.find((glLayer) => glLayer.id === layerId) === undefined) {\n    const glType = subtype === CUSTOM_LAYERS_SUBTYPES.geojson ? getMainGeomType(data) : subtype\n    const glLayer = fromJS({\n      id: layerId,\n      source: layerId,\n      type: glType,\n      layout: {},\n      paint: {},\n    })\n    const layerIndex =\n      subtype === CUSTOM_LAYERS_SUBTYPES.raster\n        ? // if raster, put at index of last raster layer except labels\n          currentStyle.layers.length -\n          1 -\n          currentStyle.layers\n            .filter((l) => l.id !== 'labels')\n            .reverse()\n            .findIndex((l) => l.type === 'raster')\n        : currentStyle.layers.length - 1\n    style = style.set('layers', style.get('layers').splice(layerIndex, 0, glLayer))\n  }\n\n  dispatch(setMapStyle(style))\n}\n\nconst addWorkspaceGLLayers = (workspaceGLLayers) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n\n  workspaceGLLayers.forEach((workspaceGLLayer) => {\n    const id = workspaceGLLayer.id\n    const gl = workspaceGLLayer.gl\n    const finalSource = fromJS(gl.source)\n    style = style.setIn(['sources', id], finalSource)\n\n    const layers = []\n    gl.layers.forEach((srcGlLayer) => {\n      const glLayer = {\n        ...srcGlLayer,\n        source: id,\n        'source-layer': id,\n      }\n      layers.push(glLayer)\n    })\n\n    const finalLayers = fromJS(layers)\n    style = style.set('layers', style.get('layers').concat(finalLayers))\n  })\n\n  dispatch(setMapStyle(style))\n\n  // TODO MAP MODULE\n  // dispatch(updateMapStyle());\n}\n\nconst getCartoLayerInstanciatePromise = ({ sourceId, sourceCartoSQL }) => {\n  const mapConfig = { layers: [{ id: sourceId, options: { sql: sourceCartoSQL } }] }\n  const mapConfigURL = encodeURIComponent(JSON.stringify(mapConfig))\n  const cartoAnonymousMapUrl = STATIC_LAYERS_CARTO_ENDPOINT.replace('$MAPCONFIG', mapConfigURL)\n\n  return new Promise((resolve) => {\n    fetch(cartoAnonymousMapUrl)\n      .then((res) => {\n        if (res.status >= 400) {\n          console.warn(`loading of layer failed ${sourceId}`)\n          Promise.reject()\n          return null\n        }\n        return res.json()\n      })\n      .then((data) => {\n        resolve({\n          layergroupid: data.layergroupid,\n          sourceId,\n        })\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  })\n}\n\nconst instanciateCartoLayers = (layers) => (dispatch, getState) => {\n  dispatch({\n    type: MARK_CARTO_LAYERS_AS_INSTANCIATED,\n    payload: layers.map((layer) => layer.sourceId),\n  })\n  const cartoLayersPromises = layers.map((layer) => getCartoLayerInstanciatePromise(layer))\n  const cartoLayersPromisesPromise = Promise.all(cartoLayersPromises.map((p) => p.catch((e) => e)))\n  cartoLayersPromisesPromise\n    .then((instanciatedCartoLayers) => {\n      let style = getState().map.style.mapStyle\n      const currentStyle = style.toJS()\n      instanciatedCartoLayers.forEach((cartoLayer) => {\n        const tilesURL = STATIC_LAYERS_CARTO_TILES_ENDPOINT.replace(\n          '$LAYERGROUPID',\n          cartoLayer.layergroupid\n        )\n\n        // replace gl source with a new source that use tiles provided by Carto anonymous maps API\n        const newSourceId = `${cartoLayer.sourceId}-instanciated`\n        style = style.setIn(\n          ['sources', newSourceId],\n          fromJS({\n            type: 'vector',\n            tiles: [tilesURL],\n          })\n        )\n\n        // change source in all layers that are using it (genrally polygon + labels)\n        currentStyle.layers.forEach((glLayer, glLayerIndex) => {\n          if (glLayer.source === cartoLayer.sourceId) {\n            style = style.setIn(['layers', glLayerIndex, 'source'], newSourceId)\n            style = style.setIn(['layers', glLayerIndex, 'metadata', 'gfw:id'], cartoLayer.sourceId)\n            const refLayer = layers.find((l) => l.refLayer.id === cartoLayer.sourceId).refLayer\n            style = updateGLLayer(style, glLayer.id, refLayer)\n          }\n        })\n      })\n\n      dispatch(setMapStyle(style))\n    })\n    .catch((err) => {\n      console.warn(err)\n    })\n}\n\nexport const commitStyleUpdates = (staticLayers, basemapLayers) => (dispatch, getState) => {\n  // Store a copy of static and basemap layers. This is not used directly by\n  // the Map component which only needs a prepared style object\n  dispatch({\n    type: SET_STATIC_LAYERS,\n    payload: staticLayers,\n  })\n  dispatch({\n    type: SET_BASEMAP_LAYERS,\n    payload: basemapLayers,\n  })\n\n  const layers = [...staticLayers, ...basemapLayers.map((bl) => ({ ...bl, isBasemap: true }))]\n\n  const currentGLSources = getState().map.style.mapStyle.toJS().sources\n\n  // collect layers declared in workspace but not in original gl style\n  const workspaceGLLayers = layers.filter(\n    (layer) => layer.gl !== undefined && currentGLSources[layer.id] === undefined\n  )\n  if (workspaceGLLayers.length) {\n    dispatch(addWorkspaceGLLayers(workspaceGLLayers))\n  }\n\n  // instanciate custom layers if needed\n  const customLayers = layers.filter(\n    (layer) => layer.isCustom === true && currentGLSources[layer.id] === undefined\n  )\n  if (customLayers.length) {\n    customLayers.forEach((layer) => {\n      dispatch(addCustomGLLayer(layer.subtype, layer.id, layer.url, layer.data))\n    })\n  }\n\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n  const glSources = currentStyle.sources\n\n  const cartoLayersToInstanciate = []\n\n  // update source when needed\n  staticLayers.forEach((refLayer) => {\n    const sourceId = refLayer.id\n    if (refLayer.data !== undefined && currentGLSources[sourceId] !== undefined) {\n      style = style.setIn(['sources', sourceId, 'data'], fromJS(refLayer.data))\n    }\n  })\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    const sourceId = glLayer.source\n    const glSource = glSources[sourceId]\n    const layerId = (glLayer.metadata !== undefined && glLayer.metadata['gfw:id']) || sourceId\n\n    const refLayer = layers.find((l) => l.id === layerId)\n\n    if (refLayer === undefined) {\n      if (glLayer.type !== 'background') {\n        // console.warn('gl layer does not exists in workspace', glLayer);\n      }\n      continue\n    }\n\n    // check if layer is served from Carto, which means we need to instanciate it first\n    // TODO BUG: check if layer is not instanciatING too\n    const sourceCartoSQL = glSource.metadata !== undefined && glSource.metadata['gfw:carto-sql']\n    if (sourceCartoSQL !== false && sourceCartoSQL !== undefined) {\n      // only if layer is visible and has not been instanciated yet\n      const cartoLayerInstanciated = state.cartoLayersInstanciated.indexOf(sourceId) > -1\n      if (\n        refLayer.visible === true &&\n        !cartoLayerInstanciated &&\n        !cartoLayersToInstanciate.find((l) => l.sourceId === sourceId)\n      ) {\n        cartoLayersToInstanciate.push({ sourceId, sourceCartoSQL, refLayer })\n      }\n      continue\n    }\n\n    style = updateGLLayer(style, glLayer.id, refLayer)\n  }\n\n  if (cartoLayersToInstanciate.length) {\n    dispatch(instanciateCartoLayers(cartoLayersToInstanciate))\n  }\n\n  dispatch(setMapStyle(style))\n}\n","import tbbox from '@turf/bbox'\nimport { targetMapVessel } from '../map'\n\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  addTracksPointsRenderingData,\n  getTracksPlaybackData,\n} from '../utils/heatmapTileData'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_TRACK = 'ADD_TRACK'\nexport const UPDATE_TRACK = 'UPDATE_TRACK'\nexport const REMOVE_TRACK = 'REMOVE_TRACK'\n\nconst getTrackDataParsed = (geojson) => {\n  const time = { start: Infinity, end: 0 }\n  if (geojson && geojson.features) {\n    geojson.features.forEach((feature) => {\n      const hasTimes =\n        feature.properties.coordinateProperties.times &&\n        feature.properties.coordinateProperties.times.length > 0\n      if (hasTimes) {\n        feature.properties.coordinateProperties.times.forEach((datetime) => {\n          if (datetime < time.start) {\n            time.start = datetime\n          } else if (datetime > time.end) {\n            time.end = datetime\n          }\n        })\n      }\n    })\n  }\n  return {\n    geojson,\n    timelineBounds: [time.start, time.end],\n  }\n}\n\nconst getTrackBounds = (geojson) => {\n  const bounds = tbbox(geojson)\n  return {\n    minLat: bounds[3],\n    minLng: bounds[0],\n    maxLat: bounds[1],\n    maxLng: bounds[2],\n  }\n}\n\n// Deprecated tracks format parsing\nconst getOldTrackBoundsFormat = (data, addOffset = false) => {\n  const time = {\n    start: Infinity,\n    end: 0,\n  }\n  const geo = {\n    minLat: Infinity,\n    maxLat: -Infinity,\n    minLng: Infinity,\n    maxLng: -Infinity,\n  }\n  for (let i = 0, length = data.datetime.length; i < length; i++) {\n    const datetime = data.datetime[i]\n    if (datetime < time.start) {\n      time.start = datetime\n    } else if (datetime > time.end) {\n      time.end = datetime\n    }\n\n    const lat = data.latitude[i]\n    if (lat < geo.minLat) {\n      geo.minLat = lat\n    } else if (lat > geo.maxLat) {\n      geo.maxLat = lat\n    }\n\n    let lng = data.longitude[i]\n    if (addOffset === true) {\n      if (lng < 0) {\n        lng += 360\n      }\n    }\n    if (lng < geo.minLng) {\n      geo.minLng = lng\n    } else if (lng > geo.maxLng) {\n      geo.maxLng = lng\n    }\n  }\n\n  // track crosses the antimeridian\n  if (geo.maxLng - geo.minLng > 350 && addOffset === false) {\n    return getOldTrackBoundsFormat(data, true)\n  }\n\n  return {\n    time: [time.start, time.end],\n    geo,\n  }\n}\n\nfunction loadTrack(track) {\n  return (dispatch, getState) => {\n    const { id, url, type, fitBoundsOnLoad, layerTemporalExtents, color, data } = track\n    const state = getState()\n    if (state.map.tracks.data.find((t) => t.id === id)) {\n      return\n    }\n\n    const payload = {\n      id,\n      url,\n      type,\n      color,\n      fitBoundsOnLoad,\n    }\n    const trackHasData = track.data !== undefined && track.data !== null\n    const trackHasUrl = url !== undefined && url !== null && url !== ''\n    if (trackHasData) {\n      payload.data = data\n      payload.geoBounds = getTrackBounds(data)\n    }\n    dispatch({ type: ADD_TRACK, payload })\n\n    if (trackHasData || !trackHasUrl) {\n      return\n    }\n\n    const loaderID = startLoader(dispatch, state)\n    if (type !== 'geojson') {\n      // Deprecated tracks format logic to be deleted some day\n      const token = state.map.module.token\n      const promises = getTilePromises(url, token, layerTemporalExtents, { seriesgroup: id })\n\n      Promise.all(promises.map((p) => p.catch((e) => e))).then((rawTileData) => {\n        const cleanData = getCleanVectorArrays(rawTileData)\n\n        if (!cleanData.length) {\n          return\n        }\n        const rawTrackData = groupData(cleanData, [\n          'latitude',\n          'longitude',\n          'datetime',\n          'series',\n          'weight',\n          'sigma',\n        ])\n\n        const vectorArray = addTracksPointsRenderingData(rawTrackData)\n        const bounds = getOldTrackBoundsFormat(rawTrackData)\n\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id,\n            data: getTracksPlaybackData(vectorArray),\n            geoBounds: bounds.geo,\n            timelineBounds: bounds.time,\n          },\n        })\n        dispatch(completeLoader(loaderID))\n      })\n    } else {\n      fetch(url)\n        .then((res) => {\n          if (res.status >= 400) throw new Error(res.statusText)\n          return res.json()\n        })\n        .then((data) => {\n          const { geojson, timelineBounds } = getTrackDataParsed(data)\n          const geoBounds = getTrackBounds(data)\n          dispatch({\n            type: UPDATE_TRACK,\n            payload: {\n              id,\n              data: geojson,\n              geoBounds,\n              timelineBounds,\n            },\n          })\n          if (fitBoundsOnLoad) {\n            targetMapVessel(id)\n          }\n        })\n        .catch((err) => console.warn(err))\n        .finally(() => dispatch(completeLoader(loaderID)))\n    }\n  }\n}\n\nconst removeTrack = (trackId) => ({\n  type: REMOVE_TRACK,\n  payload: {\n    trackId,\n  },\n})\n\nexport const updateTracks = (newTracks = []) => (dispatch, getState) => {\n  const prevTracks = getState().map.tracks.data\n  // add and update layers\n  if (newTracks) {\n    newTracks.forEach((newTrack) => {\n      const trackId = newTrack.id\n      const prevTrack = prevTracks.find((t) => t.id === trackId)\n      if (prevTrack === undefined) {\n        dispatch(loadTrack(newTrack))\n      } else if (prevTrack.color !== newTrack.color) {\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id: newTrack.id,\n            color: newTrack.color,\n          },\n        })\n      }\n    })\n  }\n\n  // clean up unused tracks\n  prevTracks.forEach((prevTrack) => {\n    if (!newTracks || !newTracks.find((t) => t.id === prevTrack.id)) {\n      dispatch(removeTrack(prevTrack.id))\n    }\n  })\n}\n","import PropTypes from 'prop-types'\n\nconst withReducerPropTypes = (name, propTypesSchema) => (reducer) => {\n  if (process.env.NODE_ENV === 'development') {\n    return (state, action) => {\n      const result = reducer(state, action)\n      PropTypes.checkPropTypes(propTypesSchema, result, 'reducer', name)\n\n      return result\n    }\n  }\n  return reducer\n}\n\nexport default withReducerPropTypes\n","import PropTypes from 'prop-types'\nimport withReducerTypes from '../utils/withReducerTypes'\nimport {\n  INIT_MODULE,\n  SET_TEMPORAL_EXTENT,\n  SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  START_LOADER,\n  COMPLETE_LOADER,\n} from './module.actions'\n\nconst initialState = {\n  loaders: null,\n  token: undefined,\n  temporalExtent: [new Date(1970), new Date()],\n  highlightTemporalExtent: null,\n  onViewportChange: undefined,\n  onHover: undefined,\n  onClick: undefined,\n  onLoadStart: undefined,\n  onLoadComplete: undefined,\n  onClosePopup: undefined,\n  onAttributionsChange: undefined,\n}\n\nconst moduleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_MODULE: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    case SET_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        temporalExtent: action.payload,\n      }\n    }\n\n    case SET_HIGHLIGHT_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        highlightTemporalExtent: action.payload,\n      }\n    }\n\n    case START_LOADER: {\n      const loaders = state.loaders !== null ? [...state.loaders] : []\n      loaders.push(action.payload)\n      return { ...state, loaders }\n    }\n\n    case COMPLETE_LOADER: {\n      const loaders = [...state.loaders]\n      const loaderIndex = loaders.findIndex((l) => l === action.payload)\n      loaders.splice(loaderIndex, 1)\n      return { ...state, loaders }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst moduleTypes = {\n  loaders: PropTypes.arrayOf(PropTypes.number),\n  token: PropTypes.string,\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  onViewportChange: PropTypes.func,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n}\n\nexport default withReducerTypes('module', moduleTypes)(moduleReducer)\n","import PropTypes from 'prop-types'\nimport { trackTypes } from '../proptypes/tracks'\nimport withReducerTypes from '../utils/withReducerTypes'\n\nimport { ADD_TRACK, UPDATE_TRACK, REMOVE_TRACK } from './tracks.actions'\n\nconst initialState = {\n  data: [],\n}\n\nconst tracksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TRACK: {\n      const data = [...state.data, action.payload]\n      return { ...state, data }\n    }\n\n    case UPDATE_TRACK: {\n      const trackData = action.payload\n      const data = state.data.map((track) => {\n        if (track.id !== trackData.id) return track\n        return {\n          ...track,\n          ...trackData,\n        }\n      })\n      return { ...state, data }\n    }\n\n    case REMOVE_TRACK: {\n      const removedTrackId = action.payload.trackId\n      const data = state.data.filter((track) => track.id !== removedTrackId)\n      return { ...state, data }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst tracksTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      ...trackTypes,\n      data: PropTypes.object,\n      timelineBounds: PropTypes.array,\n      geoBounds: PropTypes.exact({\n        minLat: PropTypes.number,\n        minLng: PropTypes.number,\n        maxLat: PropTypes.number,\n        maxLng: PropTypes.number,\n      }),\n    })\n  ),\n}\n\nexport default withReducerTypes('tracks', tracksTypes)(tracksReducer)\n","import uniq from 'lodash/uniq'\nimport {\n  INIT_HEATMAP_LAYERS,\n  UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n  ADD_HEATMAP_LAYER,\n  UPDATE_HEATMAP_LAYER_STYLE,\n  REMOVE_HEATMAP_LAYER,\n  ADD_REFERENCE_TILE,\n  UPDATE_HEATMAP_TILE,\n  RELEASE_HEATMAP_TILES,\n  HIGHLIGHT_VESSELS,\n  UPDATE_LOADED_TILES,\n  HIGHLIGHT_CLICKED_VESSEL,\n  CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n} from './heatmap.actions'\n\nconst initialState = {\n  // a dict of heatmap layers (key is layer id)\n  // each containing data, url, tiles, visibleTemporalExtentsIndices\n  heatmapLayers: {},\n  // store a list of tiles currently visible in the map\n  // those are necessary when adding a new layer to know which tiles need to be loaded\n  referenceTiles: [],\n  highlightedVessels: { isEmpty: true },\n  highlightedClickedVessel: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_HEATMAP_LAYERS: {\n      return Object.assign({}, state, { heatmapLayers: action.payload })\n    }\n\n    case UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES: {\n      const heatmapLayers = state.heatmapLayers\n      let indices = heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices\n      indices = uniq(indices.concat(action.payload.indicesAdded))\n      heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices = indices\n      return Object.assign({}, state, heatmapLayers)\n    }\n\n    case ADD_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers, {\n        [action.payload.id]: {\n          tiles: [],\n          ...action.payload,\n        },\n      })\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case UPDATE_HEATMAP_LAYER_STYLE: {\n      const newLayer = action.payload\n      const layer = { ...state.heatmapLayers[newLayer.id], ...newLayer }\n      const heatmapLayers = { ...state.heatmapLayers, [newLayer.id]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case REMOVE_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers)\n      delete heatmapLayers[action.payload.layerId]\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case ADD_REFERENCE_TILE: {\n      return Object.assign({}, state, { referenceTiles: [...state.referenceTiles, action.payload] })\n    }\n\n    case UPDATE_HEATMAP_TILE: {\n      const layerId = action.payload.layerId\n      const newTile = action.payload.tile\n      const layer = { ...state.heatmapLayers[layerId] }\n      let layerTiles = [...layer.tiles]\n      const tileIndex = layerTiles.findIndex((t) => t.uid === newTile.uid)\n      if (tileIndex === -1) {\n        layerTiles.push(newTile)\n      } else {\n        layerTiles = [layerTiles.slice(0, tileIndex), newTile, layerTiles.slice(tileIndex + 1)]\n      }\n      layer.tiles = layerTiles\n      const heatmapLayers = { ...state.heatmapLayers, [layerId]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case RELEASE_HEATMAP_TILES: {\n      const uids = action.payload\n\n      // remove tiles\n      const layerIds = Object.keys(state.heatmapLayers)\n      const heatmapLayers = { ...state.heatmapLayers }\n      layerIds.forEach((layerId) => {\n        const prevLayer = { ...heatmapLayers[layerId] }\n        uids.forEach((tileUid) => {\n          const releasedTileIndex = prevLayer.tiles.findIndex((tile) => tile.uid === tileUid)\n          if (releasedTileIndex > -1) {\n            // console.log('releasing', layerId, tileUid);\n            prevLayer.tiles.splice(releasedTileIndex, 1)\n          }\n        })\n      })\n\n      // remove reference tiles\n      let referenceTiles = [...state.referenceTiles]\n      uids.forEach((tileUid) => {\n        const releasedRefTileIndex = referenceTiles.findIndex((tile) => tile.uid === tileUid)\n        if (releasedRefTileIndex > -1) {\n          referenceTiles = [\n            ...referenceTiles.slice(0, releasedRefTileIndex),\n            ...referenceTiles.slice(releasedRefTileIndex + 1),\n          ]\n        }\n      })\n\n      return { ...state, heatmapLayers, referenceTiles }\n    }\n\n    case UPDATE_LOADED_TILES: {\n      const newHeatmapLayers = { ...state.heatmapLayers }\n      return { ...state, heatmapLayers: newHeatmapLayers }\n    }\n\n    case HIGHLIGHT_VESSELS: {\n      return Object.assign({}, state, { highlightedVessels: action.payload })\n    }\n\n    case HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: action.payload }\n    }\n\n    case CLEAR_HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import uniq from 'lodash/uniq'\nimport {\n  SET_CURRENTLY_VISIBLE_TILES,\n  SET_CURRENTLY_LOADED_TILES,\n  SET_CURRENTLY_SWAPPED_TILE_UIDS,\n  MARK_TILES_UIDS_AS_LOADED,\n  RELEASE_MARKED_TILES_UIDS,\n} from './heatmapTiles.actions'\n\nconst initialState = {\n  currentVisibleTiles: [],\n  currentLoadedTiles: [],\n  currentToLoadTileUids: [],\n  currentToReleaseTileUids: [],\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENTLY_VISIBLE_TILES: {\n      const currentVisibleTiles = [].concat(action.payload)\n      return { ...state, currentVisibleTiles }\n    }\n\n    case SET_CURRENTLY_LOADED_TILES: {\n      const currentLoadedTiles = [].concat(action.payload)\n      return { ...state, currentLoadedTiles }\n    }\n\n    case SET_CURRENTLY_SWAPPED_TILE_UIDS: {\n      const currentToLoadTileUids = uniq(\n        state.currentToLoadTileUids.concat(action.payload.tilesToLoadUids)\n      )\n      const currentToReleaseTileUids = uniq(\n        state.currentToReleaseTileUids.concat(action.payload.tilesToReleaseUids)\n      )\n      // clean to load tiles of tiles that needs to be released\n      const newToLoadTilesUids = currentToLoadTileUids.filter(\n        (tileUid) => currentToReleaseTileUids.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newToLoadTilesUids, currentToReleaseTileUids }\n    }\n\n    case MARK_TILES_UIDS_AS_LOADED: {\n      const currentToLoadTileUids = state.currentToLoadTileUids\n      const tileUidsMarkedAsLoaded = action.payload\n      const newCurrentToLoadTileUids = currentToLoadTileUids.filter(\n        (tileUid) => tileUidsMarkedAsLoaded.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newCurrentToLoadTileUids }\n    }\n\n    case RELEASE_MARKED_TILES_UIDS: {\n      return { ...state, currentToReleaseTileUids: [] }\n    }\n\n    default:\n      return state\n  }\n}\n","import { FlyToInterpolator } from 'react-map-gl'\nimport { easeCubic } from 'd3-ease'\nimport { MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL } from '../config'\nimport { TRANSITION_TYPE } from '../constants'\nimport {\n  SET_VIEWPORT,\n  UPDATE_VIEWPORT,\n  SET_ZOOM_INCREMENT,\n  SET_MOUSE_LAT_LONG,\n  TRANSITION_END,\n  SET_NATIVE_VIEWPORT,\n} from './viewport.actions'\n\nconst DEFAULT_TRANSITION = {\n  transitionDuration: 500,\n  transitionInterpolator: new FlyToInterpolator(),\n  transitionEasing: easeCubic,\n}\n\nconst initialState = {\n  viewport: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    width: 1000,\n    height: 800,\n  },\n  maxZoom: MAX_ZOOM_LEVEL,\n  minZoom: MIN_ZOOM_LEVEL,\n  prevZoom: 3,\n  currentTransition: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIEWPORT: {\n      return {\n        ...state,\n        viewport: action.payload,\n        canZoomIn: action.payload.zoom < state.maxZoom,\n        canZoomOut: action.payload.zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n      }\n    }\n\n    case UPDATE_VIEWPORT: {\n      const viewport = { ...state.viewport, ...action.payload }\n      return {\n        ...state,\n        viewport,\n        prevZoom: viewport.zoom,\n      }\n    }\n\n    case SET_ZOOM_INCREMENT: {\n      const currentZoom = state.viewport.zoom\n      const zoom = Math.min(\n        state.maxZoom,\n        action.payload.zoom || currentZoom + action.payload.increment\n      )\n      const viewport = {\n        ...state.viewport,\n        ...DEFAULT_TRANSITION,\n        zoom,\n        latitude:\n          action.payload.latitude === null ? state.viewport.latitude : action.payload.latitude,\n        longitude:\n          action.payload.longitude === null ? state.viewport.longitude : action.payload.longitude,\n      }\n      return {\n        ...state,\n        viewport,\n        canZoomIn: zoom < state.maxZoom,\n        canZoomOut: zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n        currentTransition: TRANSITION_TYPE.ZOOM,\n      }\n    }\n\n    case SET_MOUSE_LAT_LONG: {\n      return { ...state, mouseLatLong: action.payload }\n    }\n\n    case TRANSITION_END: {\n      return { ...state, currentTransition: null }\n    }\n\n    case SET_NATIVE_VIEWPORT: {\n      return { ...state, ...action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n","import { fromJS } from 'immutable'\nimport uniq from 'lodash/uniq'\nimport GL_STYLE from './gl-styles/style.json'\nimport {\n  SET_MAP_STYLE,\n  MARK_CARTO_LAYERS_AS_INSTANCIATED,\n  INIT_MAP_STYLE,\n  SET_STATIC_LAYERS,\n  SET_BASEMAP_LAYERS,\n} from './style.actions'\n\nconst attributions = uniq(\n  Object.keys(GL_STYLE.sources)\n    .map((sourceKey) => GL_STYLE.sources[sourceKey].attribution)\n    .filter((source) => source !== undefined)\n)\n\nconst setStyleDefaults = (style) => {\n  style.layers.forEach((layer) => {\n    if (layer.layout === undefined) {\n      layer.layout = {}\n    }\n    if (layer.paint === undefined) {\n      layer.paint = {}\n    }\n    // initialize time filter for time-filterable layers\n    if (layer.metadata && layer.metadata['gfw:temporal'] === true) {\n      // is this field always called 'timestamp'\n      layer.filter = ['all', ['>', 'timestamp', 0], ['<', 'timestamp', 999999999999]]\n    }\n    // set all layers to not visible except layers explicitely marked as visible (default basemap)\n    if (layer.layout.visibility !== 'visible') {\n      layer.layout.visibility = 'none'\n    }\n  })\n  return style\n}\n\nconst initialState = {\n  mapStyle: fromJS(setStyleDefaults(GL_STYLE)),\n  cartoLayersInstanciated: [],\n  staticLayers: [],\n  basemapLayers: [],\n  attributions,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_MAP_STYLE: {\n      const newMapStyle = state.mapStyle.setIn(['glyphs'], action.payload.glyphsPath)\n      return { ...state, mapStyle: newMapStyle }\n    }\n    case SET_MAP_STYLE: {\n      return { ...state, mapStyle: action.payload }\n    }\n    case SET_STATIC_LAYERS: {\n      return { ...state, staticLayers: action.payload }\n    }\n    case SET_BASEMAP_LAYERS: {\n      return { ...state, basemapLayers: action.payload }\n    }\n    case MARK_CARTO_LAYERS_AS_INSTANCIATED: {\n      const cartoLayersInstanciated = [...state.cartoLayersInstanciated, ...action.payload]\n      return { ...state, cartoLayersInstanciated }\n    }\n    default:\n      return state\n  }\n}\n","// TODO MAP MODULE remove whole reducer\nimport { SET_MAP_CURSOR } from './interaction.actions'\n\nconst initialState = {\n  cursor: 'progress',\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_MAP_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { compose, createStore, combineReducers, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport throttle from 'lodash/throttle'\nimport { trackTypes } from './proptypes/tracks'\nimport { heatmapLayerTypes, basemapLayerTypes, staticLayerTypes } from './proptypes/layers'\nimport { viewportTypes, popupTypes } from './proptypes/shared'\n\nimport Map from './glmap/Map.container'\nimport { initModule, setTemporalExtent, setHighlightTemporalExtent } from './module/module.actions'\nimport { fitToBounds, updateViewport, transitionToZoom } from './glmap/viewport.actions'\nimport { initStyle, commitStyleUpdates, applyTemporalExtent } from './glmap/style.actions'\nimport { updateTracks } from './tracks/tracks.actions'\nimport { updateHeatmapLayers, updateLayerLoadTemporalExtents } from './heatmap/heatmap.actions'\nimport GL_STYLE from './glmap/gl-styles/style.json'\n\nimport ModuleReducer from './module/module.reducer'\nimport TracksReducer from './tracks/tracks.reducer'\nimport HeatmapReducer from './heatmap/heatmap.reducer'\nimport HeatmapTilesReducer from './heatmap/heatmapTiles.reducer'\nimport ViewportReducer from './glmap/viewport.reducer'\nimport StyleReducer from './glmap/style.reducer'\nimport InteractionReducer from './glmap/interaction.reducer'\n\nconst mapReducer = combineReducers({\n  module: ModuleReducer,\n  tracks: TracksReducer,\n  heatmap: HeatmapReducer,\n  heatmapTiles: HeatmapTilesReducer,\n  style: StyleReducer,\n  viewport: ViewportReducer,\n  interaction: InteractionReducer,\n})\n\nlet composeEnhancers = compose\n\nif (\n  (process.env.MAP_REDUX_REMOTE_DEBUG || process.env.REACT_APP_MAP_REDUX_REMOTE_DEBUG) &&\n  process.env.NODE_ENV === 'development'\n) {\n  const composeWithDevTools = require('remote-redux-devtools').composeWithDevTools\n  composeEnhancers = composeWithDevTools({\n    name: 'Map module',\n    realtime: true,\n    hostname: 'localhost',\n    port: 8000,\n    maxAge: 30,\n    stateSanitizer: (state) => ({ ...state, map: { ...state.map, heatmap: 'NOT_SERIALIZED' } }),\n  })\n}\n\nconst store = createStore(\n  combineReducers({\n    map: mapReducer,\n  }),\n  {},\n  composeEnhancers(applyMiddleware(thunk))\n)\n\nconst throttleApplyTemporalExtent = throttle((temporalExtent) => {\n  store.dispatch(applyTemporalExtent(temporalExtent))\n  store.dispatch(setTemporalExtent(temporalExtent))\n}, 16)\n\nconst updateViewportFromIncomingProps = (incomingViewport) => {\n  store.dispatch(\n    updateViewport({\n      latitude: incomingViewport.center[0],\n      longitude: incomingViewport.center[1],\n      zoom: incomingViewport.zoom,\n    })\n  )\n}\n\nclass MapModule extends React.Component {\n  state = {\n    initialized: false,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    })\n  }\n\n  componentDidMount() {\n    // First trigger synchronous actions that should happen before any map render\n    // At the end of this, set a flag to allow map rendering\n\n    if (this.props.viewport !== undefined) {\n      updateViewportFromIncomingProps(this.props.viewport)\n    }\n\n    // TODO\n    if (this.props.glyphsPath !== undefined) {\n      store.dispatch(\n        initStyle({\n          glyphsPath: this.props.glyphsPath,\n          // TODO apply URL updates here\n        })\n      )\n    }\n\n    if (this.props.onAttributionsChange !== undefined) {\n      this.props.onAttributionsChange(store.getState().map.style.attributions)\n    }\n\n    if (store && store.getState().map.module.token === undefined) {\n      store.dispatch(\n        initModule({\n          token: this.props.token,\n          onViewportChange: this.props.onViewportChange,\n          onHover: this.props.onHover,\n          onClick: this.props.onClick,\n          onLoadStart: this.props.onLoadStart,\n          onLoadComplete: this.props.onLoadComplete,\n          onClosePopup: this.props.onClosePopup,\n          onAttributionsChange: this.props.onAttributionsChange,\n        })\n      )\n    }\n\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n    }\n\n    if (\n      (this.props.basemapLayers !== undefined && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== undefined && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    if (this.props.tracks !== null) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // Now trigger async actions\n\n    if (this.props.temporalExtent !== undefined && this.props.temporalExtent.length) {\n      throttleApplyTemporalExtent(this.props.temporalExtent)\n    }\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({\n      initialized: true,\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    // tracks\n    if (this.props.tracks !== prevProps.tracks) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== prevProps.heatmapLayers) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n\n    // basemap / static layers\n    if (\n      (this.props.basemapLayers !== undefined && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== undefined && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    // loadTemporalExtent\n    if (this.props.loadTemporalExtent !== undefined && this.props.loadTemporalExtent.length) {\n      if (\n        prevProps.loadTemporalExtent === undefined ||\n        !prevProps.loadTemporalExtent.length ||\n        this.props.loadTemporalExtent[0].getTime() !== prevProps.loadTemporalExtent[0].getTime() ||\n        this.props.loadTemporalExtent[1].getTime() !== prevProps.loadTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(updateLayerLoadTemporalExtents(this.props.loadTemporalExtent))\n      }\n    }\n    // temporalExtent\n    if (this.props.temporalExtent !== undefined && this.props.temporalExtent.length) {\n      if (\n        prevProps.temporalExtent === undefined ||\n        !prevProps.temporalExtent.length ||\n        this.props.temporalExtent[0].getTime() !== prevProps.temporalExtent[0].getTime() ||\n        this.props.temporalExtent[1].getTime() !== prevProps.temporalExtent[1].getTime()\n      ) {\n        throttleApplyTemporalExtent(this.props.temporalExtent)\n      }\n    }\n\n    // highlightTemporalExtent\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      if (\n        prevProps.highlightTemporalExtent === null ||\n        !prevProps.highlightTemporalExtent.length ||\n        this.props.highlightTemporalExtent[0].getTime() !==\n          prevProps.highlightTemporalExtent[0].getTime() ||\n        this.props.highlightTemporalExtent[1].getTime() !==\n          prevProps.highlightTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    } else {\n      if (this.props.highlightTemporalExtent !== prevProps.highlightTemporalExtent) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    }\n\n    // viewport - since viewport will be updated internally to the module,\n    // we have to compare incoming props to existing viewport in store, ie:\n    // update viewport from incoming props ONLY if zoom or center is different\n    // from the internally stored one\n    // TODO FFS incoming lat lon should be an object, not an array\n    const currentViewport = store.getState().map.viewport.viewport\n    //                                        stop propagating updates from outside when zooming in\n    if (\n      this.props.viewport !== undefined &&\n      store.getState().map.viewport.currentTransition === null\n    ) {\n      if (\n        currentViewport.latitude !== this.props.viewport.center[0] ||\n        currentViewport.longitude !== this.props.viewport.center[1] ||\n        currentViewport.zoom !== this.props.viewport.zoom\n      ) {\n        // if zoom delta is precisely === 1, zoom with a transition\n        if (Math.abs(currentViewport.zoom - this.props.viewport.zoom) === 1) {\n          store.dispatch(transitionToZoom(this.props.viewport.zoom))\n        } else {\n          updateViewportFromIncomingProps(this.props.viewport)\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state.error !== undefined) {\n      console.log(this.state.error)\n      return (\n        <div>\n          <h2>Map component crashed!</h2>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n          <div>Component Stack Error Details:</div>\n          <p className=\"red\">{this.state.errorInfo.componentStack}</p>\n        </div>\n      )\n    }\n    // won't render anything before actions in componentDidMount have been triggered\n    return this.state.initialized !== true ? null : (\n      <Provider store={store}>\n        <Map {...this.props} />\n      </Provider>\n    )\n  }\n}\n\nMapModule.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.shape(viewportTypes),\n  tracks: PropTypes.arrayOf(PropTypes.exact(trackTypes)),\n  heatmapLayers: PropTypes.arrayOf(PropTypes.shape(heatmapLayerTypes)),\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  highlightTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  loadTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  basemapLayers: PropTypes.arrayOf(PropTypes.shape(basemapLayerTypes)),\n  staticLayers: PropTypes.arrayOf(PropTypes.shape(staticLayerTypes)),\n  // customLayers\n  hoverPopup: PropTypes.shape(popupTypes),\n  clickPopup: PropTypes.shape(popupTypes),\n  glyphsPath: PropTypes.string,\n  onViewportChange: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n  onClosePopup: PropTypes.func,\n}\n\nMapModule.defaultProps = {\n  highlightTemporalExtent: null,\n  tracks: null,\n}\n\nexport default MapModule\n\nexport const targetMapVessel = (id) => {\n  const track = store.getState().map.tracks.data.find((t) => t.id === id.toString())\n  store.dispatch(fitToBounds(track.geoBounds))\n\n  return track.timelineBounds\n}\n\n// TODO MAP MODULE make it a function\nexport const AVAILABLE_BASEMAPS = GL_STYLE.metadata['gfw:basemap-layers']\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Map from './index.js'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"map\"}}>{`Map`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"description\"}}>{`Description`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This component displays and load fishing activity and fishing-related layers on a map, used in various GFW projects:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/map-client/blob/9c5179358d4870c0fd4c2c0742917e72e6025c59/app/src/map/components/MapWrapper.jsx#L5\"}}>{`Map client`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/vessel-profiles/blob/aa0e17395f6a4947bb3fdf3106cb9d0a744ba64f/src/profile/components/MapWrapper.js#L3\"}}>{`Vessel profiles`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/data-portal/blob/96b1e24efcff58ade672a67229da0610d9d241ab/src/map/MapWrapper.jsx#L2\"}}>{`Data portal`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"available-properties\"}}>{`Available properties`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO: fix crash on PropsTable docz component`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map viewport={{ center: [0.026, 123.61], zoom: 5 }} />'} __scope={{props: this ? this.props : props,Map}}>\n  <Map viewport={{ center: [0.026, 123.61], zoom: 5, }} />\n</Playground>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}