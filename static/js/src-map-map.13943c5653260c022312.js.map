{"version":3,"sources":["/Users/joseangel/Workspace/map-components/src/map/glmap/map.css","/Users/joseangel/Workspace/map-components/src/map/lib/Pack.js","/Users/joseangel/Workspace/map-components/src/map/lib/pelagosClient.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/tracks.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/layers.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/shared.js","/Users/joseangel/Workspace/map-components/src/map/config.js","/Users/joseangel/Workspace/map-components/src/map/module/module.actions.js","/Users/joseangel/Workspace/map-components/src/map/module/module.selectors.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.selectors.js","/Users/joseangel/Workspace/map-components/src/map/constants.js","/Users/joseangel/Workspace/map-components/src/map/utils/buildEndpoint.js","/Users/joseangel/Workspace/map-components/src/map/utils/heatmapTileData.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmapTiles.actions.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmap.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/viewport.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/interaction.actions.js","/Users/joseangel/Workspace/map-components/src/map/utils/map-colors.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/HeatmapSubLayer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/HeatmapLayer.js","/Users/joseangel/Workspace/map-components/src/map/tracks/TracksLayer.js","/Users/joseangel/Workspace/map-components/src/map/activity/ActivityLayers.js","/Users/joseangel/Workspace/map-components/src/map/activity/ActivityLayers.container.js","/Users/joseangel/Workspace/map-components/src/map/glmap/Map.js","/Users/joseangel/Workspace/map-components/src/map/glmap/Map.container.js","/Users/joseangel/Workspace/map-components/src/map/glmap/style.reducer.js","/Users/joseangel/Workspace/map-components/src/map/utils/getMainGeomType.js","/Users/joseangel/Workspace/map-components/src/map/glmap/style.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/viewport.reducer.js","/Users/joseangel/Workspace/map-components/src/map/store/index.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.actions.js","/Users/joseangel/Workspace/map-components/src/map/utils/withReducerTypes.js","/Users/joseangel/Workspace/map-components/src/map/module/module.reducer.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.reducer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmap.reducer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmapTiles.reducer.js","/Users/joseangel/Workspace/map-components/src/map/glmap/interaction.reducer.js","/Users/joseangel/Workspace/map-components/src/map/store/reducers.js","/Users/joseangel/Workspace/map-components/src/map/map.js","/Users/joseangel/Workspace/map-components/src/map/basemaps/index.js","/Users/joseangel/Workspace/map-components/src/map/map.mdx"],"names":["module","exports","byname","Uint8","size","Uint8Array","BYTES_PER_ELEMENT","array","getter","setter","Int8","Int8Array","Uint16","Uint16Array","Int16","Int16Array","Uint32","Uint32Array","Int32","Int32Array","Float32","Float32Array","Float64","Float64Array","writeStringToArrayBuffer","str","start","end","buf","bufstart","undefined","length","i","charCodeAt","arrayBufferToString","String","fromCharCode","apply","Pack","typemap","byarray","pack","typespec","value","littleendian","ArrayBuffer","DataView","stringToArrayBuffer","res","Uint8ClampedArray","buffer","name","spec","PelagosClient","this","MAGIC_COOKIE","url","token","Promise","resolve","reject","request","XMLHttpRequest","open","setRequestHeader","responseType","onload","handleData","bind","onerror","send","self","error","readyState","success","status","isFileUri","response","byteLength","dataView","headerLen","cookie","slice","getInt32","offset","headerIsLoaded","header","JSON","parse","rowLen","colsByName","colidx","cols","col","idx","type","multiplier","min","max","orientation","errorLoading","toString","allLoaded","result","rowidx","row","val","colValues","eval","trackTypes","id","PropTypes","string","isRequired","data","object","color","oneOf","layerTemporalExtents","arrayOf","number","fitBoundsOnLoad","bool","heatmapLayerTypes","tilesetId","subtype","visible","hue","opacity","filters","shape","filterValues","endpoints","temporalExtents","temporalExtentsLess","interactive","basemapLayerTypes","staticLayerTypes","selected","selectedFeatures","field","values","highlighted","higlightedFeatures","showLabels","isCustom","gl","popupTypes","content","node","latitude","longitude","viewportTypes","zoom","center","VESSELS_BASE_RADIUS","MAX_SPRITES_PER_LAYER","STATIC_LAYERS_CARTO_ENDPOINT","STATIC_LAYERS_CARTO_TILES_ENDPOINT","TILES_URL_NEEDING_AUTHENTICATION","initModule","props","dispatch","payload","startLoader","state","loaderId","timestamp","Date","getTime","map","onLoadStart","completeLoader","getState","loaders","onLoadComplete","onViewportChange","interactionState","callback","viewport","bounds","canZoomIn","canZoomOut","mouseLatLong","setTemporalExtent","temporalExtent","setHighlightTemporalExtent","highlightTemporalExtent","closePopup","onClosePopup","setCursor","cursor","getTemporalExtent","getHighlightTemporalExtent","getTracksData","tracks","getGeojsonTracks","createSelector","filter","t","getGeojsonTracksReady","mergeStyles","style1","style2","sources","layers","filterGeojsonByTimerange","geojson","features","featuresFiltered","reduce","filteredFeatures","feature","properties","coordinateProperties","times","filtered","geometry","coordinates","filteredCoordinates","coordinate","index","timeCoordinate","push","filteredFeature","getFullTracksStyles","hasTemporalExtent","hasTracks","timerange","acc","track","source","style","paint","getHighlightedTrackStyles","getTracksStyles","trackStyles","highlightedTrackStyles","TRANSITION_TYPE","ZOOM","BRUSH_RENDERING_STYLE","NORMAL","BULLSEYE","BRUSH_ZOOM_RENDERING_STYLE","RADIAL_GRADIENT","CIRCLE","CUSTOM_LAYERS_SUBTYPES","raster","urlTemplate","urlParams","templateSettings","interpolate","template","urlTemplateCompiled","getTemporalTileURLs","params","urls","forEach","extent","startTimeISO","toISOString","endTimeISO","tileCoordinates","x","y","z","buildEndpoint","temporalExtentsIndices","indexOf","getTilePromises","tilesetUrl","promises","urlIndex","obtainTile","getCleanVectorArrays","rawTileData","vectorArray","groupData","cleanVectorArrays","columns","currentArray","totalVectorArraysLength","sumBy","a","filteredColumns","column","console","warn","key","cumulatedOffsets","appendValues","set","getTilePlaybackData","prevPlaybackData","tilePlaybackData","zoomFactorRadius","convert","getZoomFactorRadius","zoomFactorRadiusRenderingMode","getZoomFactorRadiusRenderingMode","zoomFactorOpacity","getZoomFactorOpacity","columnsArr","Object","keys","c","storedColumns","concat","sigma","weight","hidden","pull","uniq","numPoints","newFrames","timeIndexes","point","timeIndex","getOffsetedTimeAtPrecision","datetime","lngLatToWorld","worldX","worldY","radius","sigmaToRadius","weightToOpacity","series","frame","addTracksPointsRenderingData","hasFishing","getTracksPlaybackData","playbackData","vesselSatisfiesFilters","every","selectVesselsAt","tileData","tileQuery","startIndex","endIndex","currentFilters","vessels","toleranceRadiusInWorldUnits","f","wx","wy","pass","some","vesselSatisfiesAllFilters","vessel","getTilecoverLimits","viewportZoom","Math","ceil","tilesAvailable","min_zoom","max_zoom","flushToReleaseTiles","heatmapTiles","currentToLoadTileUids","currentTilesToReleaseUids","currentToReleaseTileUids","releaseTiles","markTileAsLoaded","tileUids","flushTileState","forceLoadingAllVisibleTiles","currentVisibleTiles","tilesToLoad","tilesToReleaseUids","currentLoadedTiles","visibleTile","find","uid","loadedTile","tilesToLoadUids","tile","getTile","updateLoadedTiles","debouncedFlushState","debounce","updateHeatmapTilesFromViewport","mapViewport","width","height","currentTransition","boundsViewport","PerspectiveMercatorViewport","unproject","wn","es","w","s","e","n","boundsPolygonsCoordinates","limits","w1","e2","geom","viewportTilesCoords","tilecover","tiles","viewportTilesIndexes","indexes","visibleTiles","coords","prevZoom","queryHeatmapVessels","temporalExtentIndexes","uids","highlightVesselFromHeatmap","ADD_REFERENCE_TILE","HIGHLIGHT_VESSELS","UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES","UPDATE_HEATMAP_TILE","getTemporalExtentsVisibleIndices","loadTemporalExtent","currentExtentStart","currentExtentEnd","indices","temporalExtentStart","getTiles","layerIds","referenceTiles","newTemporalExtentsToLoad","loaderID","join","heatmapLayers","heatmap","tilesByLayer","allPromises","layerId","heatmapLayerHeader","referenceTile","temporalExtentsIndicesLoaded","queriedTemporalExtentsIndices","visibleTemporalExtentsIndices","temporalExtentsIndicesToLoad","difference","tilePromise","Error","pelagosPromises","allLayerPromises","all","then","loadedLayerId","loadLayerTile","parseLayerTile","visibleHeatmapLayers","visibleHeatmapLayersIds","loadAllTilesForLayer","addHeatmapLayer","layer","removeHeatmapLayer","updateLayerLoadTemporalExtents","indicesToAddByLayer","heatmapLayer","oldVisibleTemporalExtentsIndices","newVisibleTemporalExtentsIndices","indicesAdded","indicesRemoved","layerIdsWithIndicesToAdd","_queryHeatmap","layersVessels","availableTiles","bestTile","isCluster","isMouseCluster","isEmpty","layerVesselsResult","foundVessels","layersVesselsResults","layerVessels","v","uniqBy","clearHighlightedVessels","clickableCluster","highlightedVessels","layerPayload","highlightableCluster","highlightClickedVessel","clearHighlightedClickedVessel","updateHeatmapLayers","newLayers","currentLoadTemporalExtent","prevLayersDict","newLayer","prevLayer","prevLayerId","l","setBounds","setViewport","updateViewport","viewportUpdate","transitionTo","increment","transitionToZoom","transitionEnd","zoomIntoVesselCenter","fitToBounds","vp","fitBounds","minLng","minLat","maxLng","maxLat","padding","exportNativeViewport","nativeViewport","topLeftPx","bottomRightPx","topLeftWorld","pixelsToWorld","pixelUnprojectionMatrix","bottomRightWorld","leftWorldScaled","scale","rightWorldScaled","northWest","southEast","north","south","west","east","getAreaKm2","glFeature","area","toLocaleString","maximumFractionDigits","getFeature","fields","fieldsDefinition","metadata","fieldsKeys","k","fd","fieldKey","def","label","title","isLink","isMain","mainField","getFields","mapInteraction","interactionType","glFeatures","glGetSource","legacyHeatmapFeature","currentStyle","mapStyle","toJS","event","currentLegacyHeatmapData","count","group","clusterPromises","getStaticLayerIdFromGlFeature","cluster","clusterPromise","clusterId","cluster_id","glSource","getClusterExpansionZoom","err1","getClusterLeaves","err2","children","childrenFeatures","child","getCluster","autoClusterZoom","clusterBehavior","clusterZoom","onClick","onHover","COLOR_HUES","orange","peach","yellow","green","brightGreen","lightBlue","blue","purple","pink","getKeyByValue","obj","entries","entry","rgbToHsv","_r","_g","_b","h","r","g","b","d","hsvToRgb","h_","s_","v_","parseFloat","floor","p","q","mod","round","hueToRgbDefaults","hueToRgbString","rgb","rgbToHexString","css","channelName","channelValue","channelStr","hueToRgbHexString","hueToClosestColor","goal","colorHueValues","closestHue","prev","curr","abs","hexToRgb","hex","exec","parseInt","rgbToRgbaString","hueToRgbaString","hexToRgba","hueIncrementToHue","hueIncrement","hueToHueIncrement","wrapHue","hueOrColorToHexColor","HeatmapSubLayer","baseTexture","renderingStyleIndex","useNormalBlendMode","stage","PIXI","particles","ParticleContainer","alpha","position","uvs","blendMode","BLEND_MODES","SCREEN","spritesPool","initialTextureFrame","Rectangle","mainVesselTexture","Texture","_setTextureFrame","clearSpriteProps","spritesProps","spritesPropsCount","destroy","textureFrame","clone","VESSELS_HUES_INCREMENTS_NUM","update","numProps","resizeSpritesPool","sprite","setTransform","numSprites","delta","toRemove","removeChildAt","toAdd","_addSprites","num","Sprite","anchor","addChild","worldToPixelsSimple","m","HeatmapLayer","_build","_destroy","_redraw","nextProps","useRadialGradientStyle","setBrushZoomRenderingStyle","rootStage","customRenderingStyle","subLayers","renderingStyle","rendering","setBrushRenderingStyle","brushRenderingStyle","toUpperCase","_setBrushRenderingStyleIndex","brushZoomRenderingStyle","cappedZoomRenderingStyle","newStyleIndex","subLayer","setRenderingStyleIndex","defaultHue","allHuesToRender","currentlyUsedHues","allHues","_createSublayer","_destroySubLayer","_setSubLayersSpritePropsForTile","numFilters","hueToRender","render","viewportLeft","viewportRight","len","fi","scaledX","scaledY","mtx","pixelProjectionMatrix","pitch","worldToPixels","pushSpriteProps","defaultOpacity","defaultSize","removeChild","React","Component","TracksLayer","Graphics","nativeLines","clear","highlightTemporalExtentIndexes","overInInner","overExtent","drawFishingCircles","fishingCirclesRadius","drawOverTrack","_drawTrack","substr","lineThickness","lineOpacity","prevSeries","prevWorldX","prevWorldY","worldOffset","circlePoints","lineStyle","duplicateWorld","currentSeries","moveTo","atDatelineWorldY","isWestToEast","worldXEnd","atDatelineEndWorldX","atDatelineStartWorldX","x1","y1","lineTo","x2","y2","beginFill","circlesLength","drawCircle","endFill","ActivityLayers","pixiReady","onTouchStart","touches","queryCoords","clientX","clientY","onMouseMove","_onTick","heatmapFadingIn","heatmapStage","_heatmapFadeinStep","setState","_context","_updateViewportSize","pixi","transparent","antialias","renderer","canvas","view","container","appendChild","baseTextureCanvas","blurFactor","tplCanvas","document","createElement","tplCtx","getContext","diameter","yCenter","gradient","createRadialGradient","rgbString","addColorStop","rgbOuter","fillStyle","fillRect","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","getVesselTexture","fromCanvas","ticker","add","viewportWidth","viewportHeight","resize","dim","wrappedLongitude","heatmapFadeinStartTimestamp","now","timeElapsed","highlightedClickedVessel","highlightLayerData","highlightFilters","shouldUseRadialGradientStyle","toggleHeatmapDimming","_startHeatmapFadein","getError","err","log","_getHighlightData","ref","BaseControl","propTypes","func","contextTypes","getHeatmapLayersAsArray","getTracksWithData","getTemporalExtentIndexes","startTimestamp","endTimestamp","getHighlightTemporalExtentIndexes","connect","ownProps","PopupWrapper","closeButton","onClose","offsetTop","tipSize","closeOnClick","defaultProps","Map","loadObserver","window","ResizeObserver","default","_containerResizeObserver","handleResizeObserver","observe","_mapContainerRef","contentRect","propsViewport","bearing","onMapInteraction","lngLat","getRef","glMap","getMap","getSource","getCursor","isDragging","transformRequest","resourceType","match","headers","Authorization","mouseOver","getBounds","_ne","_sw","lat","lng","disconnect","maxZoom","minZoom","clickPopup","hoverPopup","hasHeatmapLayers","markers","interactiveLayerIds","className","styles","onMouseLeave","onMouseEnter","onTransitionEnd","clickRadius","marker","googleLogo","getInteractiveLayerIds","staticLayers","glLayer","glLayerId","getMapStyle","mapStyles","trackLayersIndex","lastIndexOf","finalMapStyles","mergeIn","mapStylesLayers","get","trackLayer","insert","fromJS","interaction","internalCursor","moduleCursor","long","attributions","GL_STYLE","sourceKey","attribution","setLayerStyleDefaults","layout","temporalField","visibility","initialState","cartoLayersInstanciated","basemapLayers","TYPES","geoJSON","INIT_MAP_STYLE","SET_MAP_STYLE","MARK_CARTO_LAYERS_AS_INSTANCIATED","SET_STATIC_LAYERS","SET_BASEMAP_LAYERS","setDefaultVectorTiles","currentSource","refLayerUrl","refLayerUrls","initStyle","glyphsPath","setMapStyle","setStyleTemporalExtent","applyToThrottled","glLayers","currentFilter","getIn","isLegacy","setIn","applyTemporalExtentThrottled","throttle","applyTemporalExtent","updateGLLayer","refLayer","currentStyleLayers","newStyle","glLayerIndex","findIndex","toggleLayerVisibility","isBasemap","refLayerOpacity","labelsVisibility","colorPaintProperty","currentGlLayer","glType","defaultStyles","styleType","refLayerStyle","hasFeatures","applyStyleToAllFeatures","allPaintProperties","glPaintProperty","glPaintFinalValue","selectedValue","fallbackValue","paintOrLayout","includes","originalLayerStyle","layerColorRgbString","layerColorRgb","replace","applyLayerExpressions","addCustomGLLayer","tileSize","allGeoJSONTypes","numByGLType","geoJSONType","glTypeMax","getMainGeomType","layerIndex","reverse","splice","instanciateCartoLayers","sourceId","cartoLayersPromises","sourceCartoSQL","mapConfig","options","sql","mapConfigURL","encodeURIComponent","stringify","cartoAnonymousMapUrl","fetch","json","layergroupid","catch","instanciatedCartoLayers","cartoLayer","tilesURL","newSourceId","deleteIn","commitStyleUpdates","bl","currentGLSources","workspaceGLLayers","workspaceGLLayer","finalSource","existingLayerIds","layerToAdd","layerToAddId","sourceLayer","existingLayers","newLayerGroup","newLayerIndex","findLastIndex","updateWorkspaceGLLayers","customLayers","glSources","cartoLayersToInstanciate","newSource","cartoLayerInstanciated","DEFAULT_TRANSITION","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","targetMapVessel","fitToBoundsAction","geoBounds","timelineBounds","setTimeout","TRANSITION_DURATION","ADD_TRACK","UPDATE_TRACK","getTrackDataParsed","time","Infinity","getTrackBounds","tbbox","getOldTrackBoundsFormat","addOffset","geo","loadTrack","trackHasData","trackHasUrl","cleanData","rawTrackData","statusText","finally","removeTrack","trackId","updateTracks","newTracks","prevTracks","newTrack","prevTrack","withReducerPropTypes","propTypesSchema","reducer","onAttributionsChange","withReducerTypes","instanceOf","action","loaderIndex","exact","trackData","removedTrackId","mapReducer","combineReducers","ModuleReducer","TracksReducer","assign","newTile","layerTiles","tileIndex","tileUid","releasedTileIndex","releasedRefTileIndex","newHeatmapLayers","newToLoadTilesUids","tileUidsMarkedAsLoaded","newCurrentToLoadTileUids","newMapStyle","currentZoom","mapReducers","replaceReducer","throttleApplyTemporalExtent","updateViewportFromIncomingProps","incomingViewport","MapModule","initialized","errorInfo","prevProps","currentViewport","componentStack","AVAILABLE_BASEMAPS","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","Props","__codesandbox","isMDXComponent"],"mappings":"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","file":"static/js/src-map-map.102eba5d.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__1TLha\",\"googleLogo\":\"map_googleLogo__3lQ1y\"};","/* eslint-disable */\nvar byname = {\n  Uint8: {\n    size: Uint8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Int8: {\n    size: Int8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Uint16: {\n    size: Uint16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint16',\n    setter: 'setUint16',\n  },\n  Int16: {\n    size: Int16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt16',\n    setter: 'setInt16',\n  },\n  Uint32: {\n    size: Uint32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint32',\n    setter: 'setUint32',\n  },\n  Int32: {\n    size: Int32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt32',\n    setter: 'setInt32',\n  },\n  Float32: {\n    size: Float32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getFloat32',\n    setter: 'setFloat32',\n  },\n  Float64: {\n    size: Float64Array.BYTES_PER_ELEMENT,\n    array: 'Float64Array',\n    getter: 'getFloat64',\n    setter: 'setFloat64',\n  },\n}\n\nvar writeStringToArrayBuffer = function(str, start, end, buf, bufstart) {\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  if (bufstart == undefined) {\n    bufstart = start\n  }\n  for (var i = start; i < end; i++) {\n    buf[i - start + bufstart] = str.charCodeAt(i) & 0xff\n  }\n}\n\nvar stringToArrayBuffer = function(str, start, end) {\n  var self = this\n\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  var res = new Uint8ClampedArray(end - start)\n  writeStringToArrayBuffer(str, start, end, res, 0)\n  return res.buffer\n}\n\nvar arrayBufferToString = function(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf))\n}\n\nvar pack = function(typespec, value, littleendian) {\n  var array = new ArrayBuffer(typespec.size)\n  new DataView(array)[typespec.setter](0, value, littleendian)\n  return arrayBufferToString(array)\n}\n\nvar Pack = {\n  typemap: {\n    byname: byname,\n    byarray: {},\n  },\n  pack: pack,\n  arrayBufferToString: arrayBufferToString,\n  stringToArrayBuffer: stringToArrayBuffer,\n  writeStringToArrayBuffer: writeStringToArrayBuffer,\n}\nfor (var name in Pack.typemap.byname) {\n  var spec = Pack.typemap.byname[name]\n  spec.name = name\n  Pack.typemap.byarray[spec.array] = spec\n}\n\nexport default Pack\n","/* eslint-disable */\n\nimport Pack from './Pack'\n\nclass PelagosClient {\n  constructor() {\n    this.MAGIC_COOKIE = 'tmtx'\n  }\n\n  obtainTile(url, token) {\n    return new Promise(\n      function(resolve, reject) {\n        this.request = null\n        if (typeof XMLHttpRequest != 'undefined') {\n          this.request = new XMLHttpRequest()\n        } else {\n          throw 'XMLHttpRequest is disabled'\n        }\n        this.resolve = resolve\n        this.reject = reject\n        this.request.open('GET', url, true)\n        if (token) {\n          this.request.setRequestHeader('Authorization', `Bearer ${token}`)\n        }\n        this.request.responseType = 'arraybuffer'\n        this.request.onload = this.handleData.bind(this)\n        this.request.onerror = this.handleData.bind(this)\n        this.request.send(null)\n      }.bind(this)\n    )\n  }\n\n  handleData() {\n    var self = this\n    if (!this.request) {\n      return\n    }\n    if (this.error) {\n      return true\n    }\n\n    if (this.request.readyState == 4) {\n      /* HTTP reports success with a 200 status. The file protocol\n       reports success with zero. HTTP returns zero as a status\n       code for forbidden cross domain requests.\n       https://developer.mozilla.org/En/Using_XMLHttpRequest */\n      var success = this.request.status == 200 || (this.isFileUri && this.request.status == 0)\n      if (!success) {\n        this.resolve(null)\n        return\n      }\n    }\n\n    if (!this.request.response) {\n      return\n    }\n    var length = this.request.response.byteLength\n    var response = this.request.response\n    var dataView = new DataView(response)\n\n    if (length < 4 + 4) {\n      return\n    }\n    if (self.headerLen == null) {\n      var cookie = Pack.arrayBufferToString(response.slice(0, 4))\n      if (cookie != this.MAGIC_COOKIE) {\n        this.reject(\n          'Could not load ' +\n            this.url +\n            ' due to incorrect file format. Cookie: [' +\n            this.cookie +\n            ']'\n        )\n        return\n      }\n\n      self.headerLen = dataView.getInt32(4, true)\n\n      self.offset = 4 + 4\n    }\n    if (length < self.offset + self.headerLen) {\n      return\n    }\n    if (!self.headerIsLoaded) {\n      self.header = JSON.parse(\n        Pack.arrayBufferToString(response.slice(self.offset, self.offset + self.headerLen))\n      )\n      self.rowLen = 0\n      self.header.colsByName = {}\n      for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n        var col = self.header.cols[colidx]\n        col.idx = colidx\n        self.header.colsByName[col.name] = col\n        col.typespec = Pack.typemap.byname[col.type]\n\n        if (col.multiplier != undefined && col.min != undefined) {\n          col.min = col.min * col.multiplier\n        }\n        if (col.offset != undefined && col.min != undefined) {\n          col.min = col.min + col.offset\n        }\n        if (col.multiplier != undefined && col.max != undefined) {\n          col.max = col.max * col.multiplier\n        }\n        if (col.offset != undefined && col.max != undefined) {\n          col.max = col.max + col.offset\n        }\n\n        self.rowLen += col.typespec.size\n      }\n      self.offset += self.headerLen\n\n      // Add the padding to nearest 4-byte-boundary\n      self.offset += (4 - (self.headerLen % 4)) % 4\n\n      self.headerIsLoaded = true\n      if (self.header.orientation != 'rowwise' && self.header.orientation != 'columnwise') {\n        self.errorLoading({\n          orientation: self.header.orientation,\n          toString: function() {\n            return (\n              'Could not load ' +\n              this.url +\n              ' due to unsupported file orientation. Orientation: ' +\n              this.orientation +\n              '. Supported orientations: rowwise, columnwise.'\n            )\n          },\n        })\n        return true\n      }\n\n      // Empty tile, stop parsing.\n      if (!self.rowLen) {\n        self.allLoaded()\n        return true\n      }\n    }\n    if (self.header.orientation == 'rowwise') {\n      var result = {}\n      for (; self.offset + self.rowLen <= length; self.rowidx++) {\n        var row = {}\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n          var val = dataView[col.typespec.getter](self.offset, true)\n          row[col.name] = val\n          self.offset += col.typespec.size\n        }\n        // self.rowLoaded(row);\n\n        result[col.name] = row\n      }\n      if (self.rowidx == self.header.length) {\n        // self.allLoaded();\n        this.resolve(result)\n      } else {\n        // self.batchLoaded();\n      }\n    } else if (self.header.orientation == 'columnwise') {\n      var colValues = null\n      var result = {}\n      if (length >= self.offset + self.header.length * self.rowLen) {\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n\n          colValues = new (eval(col.typespec.array))(\n            response.slice(self.offset, self.offset + col.typespec.size * self.header.length)\n          )\n          self.offset += self.header.length * col.typespec.size\n\n          result[col.name] = colValues\n        }\n\n        // self.allLoaded();\n        this.resolve(result)\n        return true\n      }\n    }\n  }\n}\n\nexport default PelagosClient\n","import PropTypes from 'prop-types'\n\nexport const trackTypes = {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  data: PropTypes.object,\n  color: PropTypes.string,\n  type: PropTypes.oneOf(['geojson', 'pelagos', undefined]),\n  layerTemporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  fitBoundsOnLoad: PropTypes.bool,\n}\n","import PropTypes from 'prop-types'\n\nexport const heatmapLayerTypes = {\n  id: PropTypes.string.isRequired,\n  tilesetId: PropTypes.string,\n  subtype: PropTypes.string,\n  visible: PropTypes.bool,\n  hue: PropTypes.number,\n  opacity: PropTypes.number,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      // hue overrides layer hue if set\n      hue: PropTypes.number,\n      // filterValues is a dictionary in which each key is a filterable field,\n      // and values is an array of all possible values (OR filter)\n      // ie: filterValues: { category: [5, 6] }\n      filterValues: PropTypes.object,\n    })\n  ),\n  header: PropTypes.shape({\n    endpoints: PropTypes.object,\n    colsByName: PropTypes.object,\n    temporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    temporalExtentsLess: PropTypes.bool,\n  }).isRequired,\n  interactive: PropTypes.bool,\n}\n\nexport const basemapLayerTypes = {\n  id: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nexport const staticLayerTypes = {\n  id: PropTypes.string.isRequired,\n  // TODO MAP MODULE Is that needed and if so why\n  visible: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  highlighted: PropTypes.bool,\n  higlightedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  opacity: PropTypes.number,\n  color: PropTypes.string,\n  showLabels: PropTypes.bool,\n  interactive: PropTypes.bool,\n  filters: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  isCustom: PropTypes.bool,\n  subtype: PropTypes.oneOf([undefined, 'geojson', 'raster']),\n  url: PropTypes.string,\n  data: PropTypes.object,\n  gl: PropTypes.object,\n}\n","import PropTypes from 'prop-types'\n\nexport const popupTypes = {\n  content: PropTypes.node,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n}\n\nexport const viewportTypes = {\n  zoom: PropTypes.number,\n  center: PropTypes.arrayOf(PropTypes.number),\n}\n","// Application settings\nexport const TIMELINE_STEP = 24 * 60 * 60 * 1000 // 1 day\nexport const MIN_FRAME_LENGTH_MS = TIMELINE_STEP // 1 day\n\n// vessels rendering\n// from this zoom level and above, render using circle style instead of heatmap\nexport const VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD = 6\n// the base radius, it can only be scaled down by the radius factor calculated on the dataset\nexport const VESSELS_BASE_RADIUS = 8\n// in heatmap style, defines how 'blurry' a point will look. Higher = less blur\nexport const VESSELS_HEATMAP_BLUR_FACTOR = 0.15\n\nexport const ACTIVITY_HIGHLIGHT_HUE = 312\n\nexport const VESSELS_HEATMAP_DIMMING_ALPHA = 0.5\n\nexport const TRACKS_DOTS_STYLE_ZOOM_THRESHOLD = 2\n\nexport const MAX_SPRITES_PER_LAYER = 200000\n\n// interaction\n// radius of vessels lookup in pixels,\n// ie how large the clicked region should be for including vessels\nexport const VESSEL_CLICK_TOLERANCE_PX = 10\n\nexport const CLUSTER_CLICK_ZOOM_INCREMENT = 1\n\nexport const MIN_ZOOM_LEVEL = 1\n// user can zoom up to this z level, but it doesn't guarantee availability of tiles\nexport const MAX_ZOOM_LEVEL = 14\n\n// data\n// Limit tile loading for activity layers up to this z level.\n// Beyond, layer is still displayed but with coarse data from the lower zoom level\nexport const ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING = 10\n\n// Sets what should be the discrete zoom level to load tiles, from a non-discrete\n// viewport zoom values. For instance, a values of 0.5 will load z 3 with a viewport\n// z of 2 (ceiling of 2 + 0.5)\n// this has a direct impact on the number of points displayed on the map, thus on the\n// performance of the app.\nexport const TILES_LOAD_ZOOM_OFFSET = 0.5\n\nexport const STATIC_LAYERS_CARTO_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map?config=$MAPCONFIG'\nexport const STATIC_LAYERS_CARTO_TILES_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map/$LAYERGROUPID/{z}/{x}/{y}.mvt'\n\nexport const TRACKS_LAYER_IN_FRONT_OF_GROUP = 'temporal'\n\nexport const TILES_URL_NEEDING_AUTHENTICATION = 'dot-world-fishing'\n","export const INIT_MODULE = 'INIT_MODULE'\nexport const SET_TEMPORAL_EXTENT = 'SET_TEMPORAL_EXTENT'\nexport const SET_HIGHLIGHT_TEMPORAL_EXTENT = 'SET_HIGHLIGHT_TEMPORAL_EXTENT'\nexport const START_LOADER = 'START_LOADER'\nexport const COMPLETE_LOADER = 'COMPLETE_LOADER'\nexport const SET_MODULE_CURSOR = 'SET_MODULE_CURSOR'\n\nexport const initModule = (props) => (dispatch) => {\n  dispatch({\n    type: INIT_MODULE,\n    payload: props,\n  })\n}\n\nexport const startLoader = (dispatch, state, loaderId) => {\n  const timestamp = new Date().getTime()\n  const generatedLoaderId = loaderId !== undefined ? `${loaderId}_${timestamp}` : timestamp\n  dispatch({\n    type: START_LOADER,\n    payload: generatedLoaderId,\n  })\n  if (state.map.module.onLoadStart !== undefined) {\n    state.map.module.onLoadStart()\n  }\n  return loaderId\n}\n\nexport const completeLoader = (loaderId) => (dispatch, getState) => {\n  dispatch({\n    type: COMPLETE_LOADER,\n    payload: loaderId,\n  })\n  const state = getState()\n  const loaders = state.map.module.loaders\n  if (!loaders.length && state.map.module.onLoadComplete !== undefined) {\n    state.map.module.onLoadComplete()\n  }\n}\n\nexport const onViewportChange = (interactionState) => (dispatch, getState) => {\n  const state = getState()\n  const callback = state.map.module.onViewportChange\n\n  if (callback === undefined) {\n    return\n  }\n  const viewport = state.map.viewport\n\n  callback({\n    interactionState,\n    zoom: viewport.viewport.zoom,\n    center: [viewport.viewport.latitude, viewport.viewport.longitude],\n    bounds: viewport.bounds,\n    canZoomIn: viewport.canZoomIn,\n    canZoomOut: viewport.canZoomOut,\n    mouseLatLong: viewport.mouseLatLong,\n  })\n}\n\nexport const setTemporalExtent = (temporalExtent) => ({\n  type: SET_TEMPORAL_EXTENT,\n  payload: temporalExtent,\n})\n\nexport const setHighlightTemporalExtent = (highlightTemporalExtent) => ({\n  type: SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  payload: highlightTemporalExtent,\n})\n\nexport const closePopup = () => (dispatch, getState) => {\n  const state = getState()\n  if (state.map.module.onClosePopup !== undefined) {\n    state.map.module.onClosePopup()\n  }\n}\n\nexport const setCursor = (cursor) => ({\n  type: SET_MODULE_CURSOR,\n  payload: cursor,\n})\n","export const getTemporalExtent = (state) => state.map.module.temporalExtent\n\nexport const getHighlightTemporalExtent = (state) => state.map.module.highlightTemporalExtent\n","import { createSelector } from 'reselect'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\n\nexport const getTracksData = (state) => state.map.tracks.data\nexport const getGeojsonTracks = createSelector(\n  getTracksData,\n  (tracks) => tracks.filter((t) => t.type === 'geojson')\n)\nexport const getGeojsonTracksReady = createSelector(\n  getGeojsonTracks,\n  (tracks) => tracks.filter((t) => t.data !== undefined)\n)\n\nconst mergeStyles = (style1, style2) => ({\n  sources: { ...style1.sources, ...style2.sources },\n  layers: [...style1.layers, ...style2.layers],\n})\n\nconst filterGeojsonByTimerange = (geojson, { start, end }) => {\n  if (!geojson || !geojson.features) return null\n  const featuresFiltered = geojson.features.reduce((filteredFeatures, feature) => {\n    const hasTimes =\n      feature.properties &&\n      feature.properties.coordinateProperties &&\n      feature.properties.coordinateProperties.times &&\n      feature.properties.coordinateProperties.times.length > 0\n    if (hasTimes) {\n      const filtered = feature.geometry.coordinates.reduce(\n        (filteredCoordinates, coordinate, index) => {\n          const timeCoordinate = feature.properties.coordinateProperties.times[index]\n          const isInTimeline = timeCoordinate >= start && timeCoordinate <= end\n          if (isInTimeline) {\n            filteredCoordinates.coordinates.push(coordinate)\n            filteredCoordinates.times.push(timeCoordinate)\n          }\n          return filteredCoordinates\n        },\n        { coordinates: [], times: [] }\n      )\n      if (!filtered.coordinates.length) return filteredFeatures\n\n      const filteredFeature = {\n        ...feature,\n        geometry: {\n          ...feature.geometry,\n          coordinates: filtered.coordinates,\n        },\n        properties: {\n          ...feature.properties,\n          coordinateProperties: {\n            times: filtered.times,\n          },\n        },\n      }\n      filteredFeatures.push(filteredFeature)\n    }\n    return filteredFeatures\n  }, [])\n  const geojsonFiltered = {\n    ...geojson,\n    features: featuresFiltered,\n  }\n  return geojsonFiltered\n}\n\nconst getFullTracksStyles = createSelector(\n  [getTemporalExtent, getGeojsonTracksReady],\n  (temporalExtent, tracks) => {\n    const hasTemporalExtent = temporalExtent && temporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: temporalExtent[0].getTime(),\n      end: temporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}Track`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}Lines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': track.color,\n              },\n            },\n            {\n              id: `${track.id}Points`,\n              source,\n              type: 'circle',\n              filter: ['match', ['geometry-type'], ['', 'Point'], true, false],\n              paint: {\n                'circle-radius': 4,\n                'circle-color': track.color,\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nconst getHighlightedTrackStyles = createSelector(\n  [getHighlightTemporalExtent, getGeojsonTracksReady],\n  (highlightTemporalExtent, tracks) => {\n    const hasTemporalExtent = highlightTemporalExtent && highlightTemporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: highlightTemporalExtent[0].getTime(),\n      end: highlightTemporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}HighlightedTrack`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}HighlightedLines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': '#fff',\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nexport const getTracksStyles = createSelector(\n  [getFullTracksStyles, getHighlightedTrackStyles],\n  (trackStyles, highlightedTrackStyles) => {\n    if (!highlightedTrackStyles) return trackStyles\n    return mergeStyles(trackStyles, highlightedTrackStyles)\n  }\n)\n","export const GL_TRANSPARENT = 'rgba(0,0,0,0)'\n\nexport const TRANSITION_TYPE = {\n  ZOOM: 'ZOOM',\n}\n\nexport const ENCOUNTERS = 'Encounters'\n\nexport const BRUSH_RENDERING_STYLE = {\n  NORMAL: 0,\n  BULLSEYE: 2,\n}\n\nexport const BRUSH_ZOOM_RENDERING_STYLE = {\n  RADIAL_GRADIENT: 0,\n  CIRCLE: 1,\n}\n\nexport const POLYGON_LAYERS_AREA = 'POLYGON_LAYERS_AREA'\n\nexport const CUSTOM_LAYERS_SUBTYPES = {\n  geojson: 'geojson',\n  raster: 'raster',\n}\n","import template from 'lodash/template'\nimport templateSettings from 'lodash/templateSettings'\n\nexport default (urlTemplate, urlParams) => {\n  templateSettings.interpolate = /{{([\\s\\S]+?)}}/g\n  const urlTemplateCompiled = template(urlTemplate)\n  return urlTemplateCompiled(urlParams)\n}\n","import pull from 'lodash/pull'\nimport uniq from 'lodash/uniq'\nimport sumBy from 'lodash/sumBy'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport convert from '@globalfishingwatch/map-convert'\nimport buildEndpoint from './buildEndpoint'\nimport PelagosClient from '../lib/pelagosClient'\n\n/**\n * Generates the URLs to load vessel track data for a tile\n *\n * @param {string} tilesetUrl       the tileset base URL\n * @param {array} temporalExtents   all tileset temporal extents\n * @param {object} params           - tileCoordinates: this tiles tile coordinates (zoom, x, y). Will default to 0,0,0\n *                                  - temporalExtentsIndices: restrict to these temporalExtents indices\n * @returns {Array}                 an array of URLs for this tile\n */\nconst getTemporalTileURLs = (urlTemplate, temporalExtents, params = {}) => {\n  const urls = []\n\n  ;(temporalExtents || [null]).forEach((extent, index) => {\n    const urlParams = {}\n    if (extent !== null && params.temporalExtentsLess !== true) {\n      urlParams.startTimeISO = new Date(extent[0]).toISOString()\n      urlParams.endTimeISO = new Date(extent[1]).toISOString()\n    }\n    if (params.tileCoordinates) {\n      urlParams.x = params.tileCoordinates.x\n      urlParams.y = params.tileCoordinates.y\n      urlParams.z = params.tileCoordinates.zoom\n    }\n\n    const url = buildEndpoint(urlTemplate, urlParams)\n\n    if (\n      params.temporalExtentsLess === true ||\n      !params.temporalExtentsIndices ||\n      params.temporalExtentsIndices.indexOf(index) > -1\n    ) {\n      urls.push(url)\n    }\n  })\n  return urls\n}\n\n/**\n * See getTemporalTileURLs.\n */\nexport const getTilePromises = (tilesetUrl, token, temporalExtents, params = {}) => {\n  const promises = []\n  const urls = getTemporalTileURLs(tilesetUrl, temporalExtents, params)\n  for (let urlIndex = 0, length = urls.length; urlIndex < length; urlIndex++) {\n    promises.push(new PelagosClient().obtainTile(urls[urlIndex], token))\n  }\n\n  return promises\n}\n\nexport const getCleanVectorArrays = (rawTileData) =>\n  rawTileData.filter((vectorArray) => vectorArray !== null)\n\n/**\n * As data will come in multiple arrays (1 per API query/year basically), they need to be merged here\n *\n * @param cleanVectorArrays an array of objects containing a Float32Array for each vessel param (lat, lon, weight...)\n * @param columns the keys to pick on the vectorArrays (lat, lon, weight, etc)\n * @returns an object containing a Float32Array for each API_RETURNED_KEY (lat, lon, weight, etc)\n */\nexport const groupData = (cleanVectorArrays, columns) => {\n  const data = {}\n\n  const totalVectorArraysLength = sumBy(cleanVectorArrays, (a) => a.longitude.length)\n\n  const filteredColumns = columns.filter((column) => {\n    if (cleanVectorArrays[0] && cleanVectorArrays[0][column] === undefined) {\n      console.warn(`column ${column} is present in layerHeader.colsByName but not in tile data`)\n      return false\n    }\n    return true\n  })\n\n  filteredColumns.forEach((key) => {\n    data[key] = new Float32Array(totalVectorArraysLength)\n  })\n\n  let currentArray\n  let cumulatedOffsets = 0\n\n  const appendValues = (key) => {\n    data[key].set(currentArray[key], cumulatedOffsets)\n  }\n\n  for (let index = 0, length = cleanVectorArrays.length; index < length; index++) {\n    currentArray = cleanVectorArrays[index]\n    filteredColumns.forEach(appendValues)\n    cumulatedOffsets += currentArray.longitude.length\n  }\n  return data\n}\n\n/**\n * Converts Vector Array data to Playback format and stores it locally.\n * The data structure is an array indexed by a time unit, ie a set of points every day\n * This preprocessing step allows playback to play smoothly as the necessary conversions and data structure set up\n * is done once (after tile has been loaded)\n *\n * @param data the source data before indexing by day, an object containing\n *  - a vector (Float32Array) for each header's column in the case of Pelagos tiles\n *  - an array of points int the case of PBF tiles\n * @param colsByName the columns present on the dataset, determined by tileset headers\n * @param tileCoordinates x, y, z\n * @param prevPlaybackData an optional previously loaded tilePlaybackData array (when adding time range)\n */\nexport const getTilePlaybackData = (data, colsByName, tileCoordinates, prevPlaybackData) => {\n  const tilePlaybackData = prevPlaybackData === undefined ? [] : prevPlaybackData\n\n  const zoom = tileCoordinates.zoom\n  const zoomFactorRadius = convert.getZoomFactorRadius(zoom)\n  const zoomFactorRadiusRenderingMode = convert.getZoomFactorRadiusRenderingMode(zoom)\n  const zoomFactorOpacity = convert.getZoomFactorOpacity(zoom)\n\n  // store all available columns as object keys\n  const columns = {}\n  const columnsArr = Object.keys(colsByName)\n  columnsArr.forEach((c) => {\n    columns[c] = true\n  })\n\n  // columns specified by layer header columns\n  let storedColumns = [].concat(columnsArr)\n  if (columns.sigma === true) storedColumns.push('radius')\n  if (columns.weight === true) storedColumns.push('opacity')\n  if (columns.longitude === true) {\n    storedColumns.push('worldX')\n    storedColumns.push('worldY')\n  }\n  if (columns.id === true) {\n    storedColumns.push('series')\n  }\n\n  // omit values that will be transformed before being stored to playback data (ie lat -> worldY)\n  // only if hidden: true flag is set on header\n  ;['latitude', 'longitude', 'datetime'].forEach((col) => {\n    if (colsByName[col] === undefined || colsByName[col].hidden === true) {\n      pull(storedColumns, col)\n    }\n  })\n  // always pull sigma and weight\n  pull(storedColumns, 'sigma', 'weight')\n  storedColumns = uniq(storedColumns)\n\n  const numPoints = data.latitude.length\n\n  const newFrames = {}\n  const timeIndexes = []\n  for (let index = 0, length = numPoints; index < length; index++) {\n    let point = {}\n    columnsArr.forEach((c) => {\n      point[c] = data[c][index]\n    })\n\n    const timeIndex = columns.timeIndex\n      ? point.timeIndex\n      : convert.getOffsetedTimeAtPrecision(point.datetime)\n\n    // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n    const [worldX, worldY] = lngLatToWorld([point.longitude, point.latitude], 1)\n    point.worldX = worldX\n    point.worldY = worldY\n\n    if (columns.sigma) {\n      point.radius = convert.sigmaToRadius(\n        point.sigma,\n        zoomFactorRadiusRenderingMode,\n        zoomFactorRadius\n      )\n    }\n    if (columns.weight) {\n      point.opacity = convert.weightToOpacity(point.weight, zoomFactorOpacity)\n    }\n    if (columns.id) {\n      point.series = point.id\n    }\n\n    if (!newFrames[timeIndex]) {\n      timeIndexes.push(timeIndex)\n      const frame = {}\n      storedColumns.forEach((column) => {\n        frame[column] = [point[column]]\n      })\n      newFrames[timeIndex] = frame\n      continue\n    }\n    const frame = newFrames[timeIndex]\n    storedColumns.forEach((column) => {\n      frame[column].push(point[column])\n    })\n  }\n\n  // finally, copy new frames to the overall tilePlaybackData object\n  // frames previously existing here will be overwritten\n  timeIndexes.forEach((timeIndex) => {\n    tilePlaybackData[timeIndex] = newFrames[timeIndex]\n  })\n  return tilePlaybackData\n}\n\nexport const addTracksPointsRenderingData = (data) => {\n  data.hasFishing = []\n  data.worldX = []\n  data.worldY = []\n\n  for (let index = 0, length = data.weight.length; index < length; index++) {\n    const [worldX, worldY] = lngLatToWorld([data.longitude[index], data.latitude[index]], 1)\n    data.worldX[index] = worldX\n    data.worldY[index] = worldY\n    data.hasFishing[index] = data.weight[index] > 0\n  }\n  return data\n}\n\n/**\n * A simplified version of getTilePlaybackData for tracks\n * Converts Vector Array data to Playback format (organized by days) and stores it locally\n * @param vectorArray the source data before indexing by day\n */\nexport const getTracksPlaybackData = (vectorArray) => {\n  const playbackData = []\n\n  for (let index = 0, length = vectorArray.series.length; index < length; index++) {\n    const datetime = vectorArray.datetime[index]\n    const timeIndex = convert.getOffsetedTimeAtPrecision(datetime)\n\n    if (!playbackData[timeIndex]) {\n      const frame = {\n        worldX: [vectorArray.worldX[index]],\n        worldY: [vectorArray.worldY[index]],\n        series: [vectorArray.series[index]],\n        hasFishing: [vectorArray.hasFishing[index]],\n      }\n      playbackData[timeIndex] = frame\n      continue\n    }\n    const frame = playbackData[timeIndex]\n    frame.worldX.push(vectorArray.worldX[index])\n    frame.worldY.push(vectorArray.worldY[index])\n    frame.series.push(vectorArray.series[index])\n    frame.hasFishing.push(vectorArray.hasFishing[index])\n  }\n  return playbackData\n}\n\nexport const vesselSatisfiesFilters = (frame, index, filterValues) => {\n  const satisfiesFilters = Object.keys(filterValues).every((field) => {\n    if (frame[field] === undefined) {\n      // this field is not available on this layer. This can happen in an edge case described\n      // here: https://github.com/GlobalFishingWatch/map-client/issues/661#issuecomment-334496469\n      return false\n    }\n    return filterValues[field].indexOf(frame[field][index]) > -1\n  })\n  return satisfiesFilters\n}\n\nconst vesselSatisfiesAllFilters = (frame, index, filters) => {\n  const satisfiesAllFilters = filters\n    .filter((f) => f.pass !== true)\n    .some((filter) => vesselSatisfiesFilters(frame, index, filter.filterValues))\n  return satisfiesAllFilters\n}\n\nexport const selectVesselsAt = (tileData, tileQuery, startIndex, endIndex, currentFilters) => {\n  const vessels = []\n\n  const { worldX, worldY, toleranceRadiusInWorldUnits } = tileQuery\n\n  for (let f = startIndex; f < endIndex; f++) {\n    const frame = tileData[f]\n    if (frame === undefined) continue\n    for (let i = 0; i < frame.worldX.length; i++) {\n      const wx = frame.worldX[i]\n      const wy = frame.worldY[i]\n\n      if (\n        (!currentFilters.length || vesselSatisfiesAllFilters(frame, i, currentFilters)) &&\n        wx >= worldX - toleranceRadiusInWorldUnits &&\n        wx <= worldX + toleranceRadiusInWorldUnits &&\n        wy >= worldY - toleranceRadiusInWorldUnits &&\n        wy <= worldY + toleranceRadiusInWorldUnits\n      ) {\n        const vessel = {}\n\n        Object.keys(frame).forEach((key) => {\n          vessel[key] = frame[key][i]\n        })\n        vessel.timeIndex = f\n        vessels.push(vessel)\n      }\n    }\n  }\n  return vessels\n}\n\n/*\nexport const getHistogram = (tiles, propName = 'weight') => {\n  let data = tiles\n    .filter(tile => tile.ready)\n    .map(tile => tile.data\n      .map(frame => frame[propName]));\n  data = flattenDeep(data);\n  if (data.length) {\n    const bins = d3.histogram().thresholds(d3.thresholdScott)(data);\n    const x = d3.scaleLinear().domain([0, d3.max(bins, d => d.length)]).range([0, 50]);\n    console.table(bins.filter(bin => bin.length).map((bin) => {\n      const binMin = d3.min(bin).toLocaleString({ maximumFractionDigits: 2 });\n      const binMax = d3.max(bin).toLocaleString({ maximumFractionDigits: 2 });\n      return {\n        range: [binMin, binMax].join('﹣'),\n        bars: Array(Math.round(x(bin.length))).join('█'),\n        num: bin.length\n      };\n    }));\n  }\n};\n*/\n","import tilecover from '@mapbox/tile-cover/index'\nimport debounce from 'lodash/debounce'\nimport { PerspectiveMercatorViewport } from 'viewport-mercator-project'\nimport { ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING, TILES_LOAD_ZOOM_OFFSET } from '../config'\nimport {\n  getTile,\n  releaseTiles,\n  highlightVesselFromHeatmap,\n  updateLoadedTiles,\n} from './heatmap.actions'\n\nexport const SET_CURRENTLY_VISIBLE_TILES = 'SET_CURRENTLY_VISIBLE_TILES'\nexport const SET_CURRENTLY_LOADED_TILES = 'SET_CURRENTLY_LOADED_TILES'\nexport const SET_CURRENTLY_SWAPPED_TILE_UIDS = 'SET_CURRENTLY_SWAPPED_TILE_UIDS'\nexport const MARK_TILES_UIDS_AS_LOADED = 'MARK_TILES_UIDS_AS_LOADED'\nexport const RELEASE_MARKED_TILES_UIDS = 'RELEASE_MARKED_TILES_UIDS'\n\n// restrict tilecover to a single zoom level\n// could be customized to load less or more detailed tiles\nconst getTilecoverLimits = (viewportZoom) => {\n  let zoom = Math.ceil(viewportZoom + TILES_LOAD_ZOOM_OFFSET)\n  let tilesAvailable = true\n  if (zoom > ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING) {\n    zoom = ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING\n    tilesAvailable = false\n  }\n  return {\n    min_zoom: zoom,\n    max_zoom: zoom,\n    tilesAvailable,\n  }\n}\n\nconst flushToReleaseTiles = () => (dispatch, getState) => {\n  const state = getState()\n  const currentToLoadTileUids = state.map.heatmapTiles.currentToLoadTileUids\n  // console.log('Tiles left to load: ', currentToLoadTileUids);\n\n  // Tiles are released only when all to-load tiles have finished loading\n  // this is to ensure smooth visual transitions between zoom levels\n  if (!currentToLoadTileUids.length) {\n    const currentTilesToReleaseUids = state.map.heatmapTiles.currentToReleaseTileUids\n    // console.log('no more tiles to load, releasing ', currentTilesToReleaseUids);\n    dispatch(releaseTiles(currentTilesToReleaseUids))\n    dispatch({\n      type: RELEASE_MARKED_TILES_UIDS,\n    })\n  }\n}\n\nexport const markTileAsLoaded = (tileUids) => (dispatch) => {\n  dispatch({\n    type: MARK_TILES_UIDS_AS_LOADED,\n    payload: tileUids,\n  })\n  // console.log(tileUids, 'have finished loading');\n  dispatch(flushToReleaseTiles())\n}\n\nconst flushTileState = (forceLoadingAllVisibleTiles = false) => (dispatch, getState) => {\n  const state = getState()\n  const currentVisibleTiles = state.map.heatmapTiles.currentVisibleTiles\n  let tilesToLoad = []\n  const tilesToReleaseUids = []\n\n  if (forceLoadingAllVisibleTiles === true) {\n    tilesToLoad = currentVisibleTiles\n  } else {\n    const currentLoadedTiles = state.map.heatmapTiles.currentLoadedTiles\n\n    currentVisibleTiles.forEach((visibleTile) => {\n      if (currentLoadedTiles.find((t) => t.uid === visibleTile.uid) === undefined) {\n        tilesToLoad.push(visibleTile)\n      }\n    })\n\n    currentLoadedTiles.forEach((loadedTile) => {\n      if (currentVisibleTiles.find((t) => t.uid === loadedTile.uid) === undefined) {\n        tilesToReleaseUids.push(loadedTile.uid)\n      }\n    })\n  }\n\n  const tilesToLoadUids = tilesToLoad.map((t) => t.uid)\n  // console.log('force loading:', forceLoadingAllVisibleTiles)\n  // console.log('visible', currentVisibleTiles.map(t => t.uid))\n  // console.log('load', tilesToLoadUids)\n  // console.log('release', tilesToReleaseUids)\n  // console.log('----')\n\n  tilesToLoad.forEach((tile) => {\n    dispatch(getTile(tile))\n  })\n  dispatch({\n    type: SET_CURRENTLY_LOADED_TILES,\n    payload: currentVisibleTiles,\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_SWAPPED_TILE_UIDS,\n    payload: {\n      tilesToLoadUids,\n      tilesToReleaseUids,\n    },\n  })\n\n  dispatch(updateLoadedTiles())\n  dispatch(flushToReleaseTiles())\n}\n\nconst _debouncedFlushState = (dispatch) => {\n  dispatch(flushTileState())\n}\nconst debouncedFlushState = debounce(_debouncedFlushState, 500)\n\nexport const updateHeatmapTilesFromViewport = (forceLoadingAllVisibleTiles = false) => (\n  dispatch,\n  getState\n) => {\n  // if in transition, skip loading/releasing\n  // else\n  //   collect all tiles in viewport\n  //   save them to reducer: currentVisibleTiles\n  // if not zooming: flush immediately\n  //   if forceLoadingAllVisiblelTiles\n  //     get tiles from currentVisibleTiles\n  //   else\n  //     get tiles from currentVisibleTiles\n  //     make delta with currentLoadedTiles\n  //     get tiles from delta+\n  //     release tiles from delta-\n  //   save to reducer: currentVisibleTiles -> currentLoadedTiles\n  // if zooming: debounced flush to avoid \"tile spam\"\n  const mapViewport = getState().map.viewport\n  const viewport = mapViewport.viewport\n\n  // do not allow any tile update during transitions (currently only zoom)\n  // wait for the end of the transition to look at viewport and load matching tiles\n  if (!viewport.width || !viewport.height || mapViewport.currentTransition !== null) {\n    return\n  }\n\n  // instanciate a viewport instance to get lat/lon from screen top left/ bottom right bounds\n  const boundsViewport = new PerspectiveMercatorViewport(viewport)\n  const bounds = [\n    boundsViewport.unproject([0, 0]),\n    boundsViewport.unproject([viewport.width, viewport.height]),\n  ]\n\n  const [wn, es] = bounds\n  const [w, s, e, n] = [wn[0], es[1], es[0], wn[1]]\n  const boundsPolygonsCoordinates = []\n\n  const limits = getTilecoverLimits(viewport.zoom)\n  if (limits.tilesAvailable === false && forceLoadingAllVisibleTiles !== true) {\n    return\n  }\n\n  if (e > 180 || w < -180) {\n    // deal with the antimeridian situation by splitting the bounds polygon into two polygons\n    const w1 = e > 180 ? w : w + 360\n    const e1 = 180 - 0.001\n    const w2 = -180\n    const e2 = e > 180 ? e - 360 : e\n    boundsPolygonsCoordinates.push([[[w1, n], [e1, n], [e1, s], [w1, s], [w1, n]]])\n    boundsPolygonsCoordinates.push([[[w2, n], [e2, n], [e2, s], [w2, s], [w2, n]]])\n  } else {\n    boundsPolygonsCoordinates.push([[[w, n], [e, n], [e, s], [w, s], [w, n]]])\n  }\n\n  const geom = {\n    type: 'MultiPolygon',\n    coordinates: boundsPolygonsCoordinates,\n  }\n\n  // using tilecover, get xyz tile coords as well as quadkey indexes (named uid through the app)\n  const viewportTilesCoords = tilecover.tiles(geom, limits)\n  const viewportTilesIndexes = tilecover.indexes(geom, limits)\n  const visibleTiles = []\n\n  viewportTilesCoords.forEach((coords, i) => {\n    const uid = viewportTilesIndexes[i]\n    const zoom = coords[2]\n    if (zoom >= 2) {\n      visibleTiles.push({\n        tileCoordinates: {\n          x: coords[0],\n          y: coords[1],\n          zoom: coords[2],\n        },\n        uid,\n      })\n    }\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_VISIBLE_TILES,\n    payload: visibleTiles,\n  })\n\n  const isMouseWheelZooming = mapViewport.prevZoom !== viewport.zoom\n\n  if (isMouseWheelZooming === false) {\n    dispatch(flushTileState(forceLoadingAllVisibleTiles))\n  } else {\n    debouncedFlushState(dispatch)\n  }\n}\n\nexport const queryHeatmapVessels = (coords, temporalExtentIndexes) => (dispatch, getState) => {\n  // use tilecover to get what tile quadkey/uid \"belongs\" to the point\n  const geom = {\n    type: 'Point',\n    coordinates: [coords.longitude, coords.latitude],\n  }\n  const zoom = getState().map.viewport.viewport.zoom\n\n  // get quadkey for tile at current zoom level, but also neighbouring zoom levels,\n  // in case current zoom level tiles has not been loaded yet\n  const uids = [zoom, zoom - 1, zoom + 1]\n    .map((z) => getTilecoverLimits(z))\n    .map((limits) => tilecover.indexes(geom, limits))\n    .map((indexes) => indexes[0])\n\n  const query = {\n    ...coords,\n    uids,\n  }\n\n  // console.log(query);\n  dispatch(highlightVesselFromHeatmap(query, temporalExtentIndexes))\n}\n","import difference from 'lodash/difference'\nimport uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  getTilePlaybackData,\n  selectVesselsAt,\n} from '../utils/heatmapTileData'\nimport { markTileAsLoaded } from './heatmapTiles.actions'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_HEATMAP_LAYER = 'ADD_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_STYLE = 'UPDATE_HEATMAP_LAYER_STYLE'\nexport const ADD_REFERENCE_TILE = 'ADD_REFERENCE_TILE'\nexport const HIGHLIGHT_VESSELS = 'HIGHLIGHT_VESSELS'\nexport const INIT_HEATMAP_LAYERS = 'INIT_HEATMAP_LAYERS'\nexport const REMOVE_HEATMAP_LAYER = 'REMOVE_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES =\n  'UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES'\nexport const UPDATE_HEATMAP_TILE = 'UPDATE_HEATMAP_TILE'\nexport const RELEASE_HEATMAP_TILES = 'RELEASE_HEATMAP_TILES'\nexport const UPDATE_LOADED_TILES = 'UPDATE_LOADED_TILES'\nexport const HIGHLIGHT_CLICKED_VESSEL = 'HIGHLIGHT_CLICKED_VESSEL'\nexport const CLEAR_HIGHLIGHT_CLICKED_VESSEL = 'CLEAR_HIGHLIGHT_CLICKED_VESSEL'\n\n/**\n * getTemporalExtentsVisibleIndices - Compares timebar outer extent with temporal extents present on the layer header\n * @param  {array} loadTemporalExtent Current timebar outer extent\n * @param  {array} layerTemporalExtents Temporal extent present on the layer's header (an array of extent arrays)\n * @return {array}                    Indices of the layer's temporal extents that should be visible\n */\nfunction getTemporalExtentsVisibleIndices(loadTemporalExtent, layerTemporalExtents) {\n  const currentExtentStart = loadTemporalExtent[0].getTime()\n  const currentExtentEnd = loadTemporalExtent[1].getTime()\n  const indices = []\n  layerTemporalExtents.forEach((temporalExtent, index) => {\n    const temporalExtentStart = temporalExtent[0]\n    const temporalExtentEnd = temporalExtent[1]\n    if (temporalExtentEnd >= currentExtentStart && temporalExtentStart <= currentExtentEnd) {\n      indices.push(index)\n    }\n  })\n  return indices\n}\n\n/**\n * loadLayerTile - loads an heatmap tile.\n *\n * @param  {string} layerId              layer id\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {string} token                the user's token\n * @param  {array} temporalExtentsIndices which of the temporal extents from  temporalExtents should be loaded\n * @param  {string} urls                 tile endpoints provided by header\n * @param  {array} temporalExtents       all of the layer's header temporal extents\n * @param  {bool} temporalExtentsLess    true = don't try to load different tiles based on current time extent\n * @return {Promise}                     a Promise that will be resolved when tile is loaded\n */\nfunction loadLayerTile(\n  layerId,\n  tileCoordinates,\n  token,\n  temporalExtentsIndices,\n  { url, temporalExtents, temporalExtentsLess }\n) {\n  // console.log('loadLayerTile', layerId, tileCoordinates, temporalExtentsIndices)\n  if (url === undefined) {\n    throw new Error('URL/endpoints object is not available on this tilesets header')\n  }\n  const pelagosPromises = getTilePromises(url, token, temporalExtents, {\n    tileCoordinates,\n    temporalExtentsIndices,\n    temporalExtentsLess,\n  })\n  const allLayerPromises = Promise.all(pelagosPromises)\n\n  const layerTilePromise = new Promise((resolve) => {\n    allLayerPromises.then((rawTileData) => {\n      resolve({\n        loadedLayerId: layerId,\n        rawTileData,\n      })\n    })\n  })\n\n  return layerTilePromise\n}\n\n/**\n * parseLayerTile - parses an heatmap tile to a playback-ready format.\n *\n * @param  {Object} rawTileData          the raw tile data, loaded either from the pelagos client or as a MVT/PBF vector tile\n * @param  {array} colsByName            names of the columns present in the raw tiles that need to be included in the final playback data\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {array} prevPlaybackData      (optional) in case some time extent was already loaded for this tile, append to this data\n * @return {Object}                      playback-ready merged data\n */\nfunction parseLayerTile(rawTileData, colsByName, tileCoordinates, prevPlaybackData) {\n  let data\n\n  const cleanVectorArrays = getCleanVectorArrays(rawTileData)\n  data = groupData(cleanVectorArrays, Object.keys(colsByName))\n  if (Object.keys(data).length === 0) {\n    return []\n  }\n\n  const playbackData = getTilePlaybackData(data, colsByName, tileCoordinates, prevPlaybackData)\n  return playbackData\n}\n\n/**\n * getTiles - loads a bunch of heatmap tiles\n * @param  {array} layerIds                 list of layer Ids that need to be loaded for this/these tiles\n * @param  {array} referenceTiles           list of reference tiles (tile data regardless of layer) that need to be loaded\n * @param  {object} newTemporalExtentsToLoad (optional) a dict (layerId is the key) of temporal extents\n * indices that should be appended to existing data\n */\nfunction getTiles(layerIds, referenceTiles, newTemporalExtentsToLoad = undefined) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state, layerIds.join('-'))\n    const token = state.map.module.token\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const tilesByLayer = {}\n    layerIds.forEach((id) => {\n      tilesByLayer[id] = [...heatmapLayers[id].tiles]\n    })\n    const allPromises = []\n\n    layerIds.forEach((layerId) => {\n      const heatmapLayerHeader = heatmapLayers[layerId].header\n      const { temporalExtents, temporalExtentsLess, colsByName } = { ...heatmapLayerHeader }\n      const url = heatmapLayerHeader.endpoints.tiles\n\n      referenceTiles.forEach((referenceTile) => {\n        // check if tile does not already exist first\n        let tile = tilesByLayer[layerId].find((t) => t.uid === referenceTile.uid)\n        if (!tile) {\n          // console.log('create tile ', referenceTile.uid)\n          tile = {\n            uid: referenceTile.uid,\n            temporalExtentsIndicesLoaded: [],\n          }\n          tilesByLayer[layerId].push(tile)\n        } else {\n          // console.log('found tile', referenceTile.uid)\n        }\n\n        const queriedTemporalExtentsIndices =\n          newTemporalExtentsToLoad === undefined\n            ? heatmapLayers[layerId].visibleTemporalExtentsIndices\n            : newTemporalExtentsToLoad[layerId]\n\n        const temporalExtentsIndicesToLoad = difference(\n          queriedTemporalExtentsIndices,\n          tile.temporalExtentsIndicesLoaded\n        )\n\n        const tilePromise = loadLayerTile(\n          layerId,\n          referenceTile.tileCoordinates,\n          token,\n          temporalExtentsIndicesToLoad,\n          {\n            url,\n            temporalExtents,\n            temporalExtentsLess,\n          }\n        )\n\n        allPromises.push(tilePromise)\n\n        tilePromise.then(({ loadedLayerId, rawTileData }) => {\n          tile.temporalExtentsIndicesLoaded = uniq(\n            tile.temporalExtentsIndicesLoaded.concat(temporalExtentsIndicesToLoad)\n          )\n          tile.data = parseLayerTile(\n            rawTileData,\n            colsByName,\n            referenceTile.tileCoordinates,\n            tile.data\n          )\n\n          dispatch({\n            type: UPDATE_HEATMAP_TILE,\n            payload: {\n              layerId: loadedLayerId,\n              tile,\n            },\n          })\n        })\n      })\n    })\n\n    Promise.all(allPromises).then(() => {\n      dispatch(completeLoader(loaderID))\n      dispatch(markTileAsLoaded(referenceTiles.map((tile) => tile.uid)))\n    })\n  }\n}\n\n/**\n * getTile - This action is emitted when a new tile is queried from panning or zooming the map\n * This will load a tile for all currently visible heatmap layers\n *\n * @param  {object} referenceTile a reference tile containing xyz coords and uid\n */\nexport function getTile(referenceTile) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_REFERENCE_TILE,\n      payload: referenceTile,\n    })\n    const visibleHeatmapLayers = getState().map.heatmap.heatmapLayers\n    const visibleHeatmapLayersIds = Object.keys(visibleHeatmapLayers).filter(\n      (id) => visibleHeatmapLayers[id].visible === true\n    )\n\n    if (visibleHeatmapLayersIds.length) {\n      dispatch(getTiles(visibleHeatmapLayersIds, [referenceTile]))\n    }\n  }\n}\n\n/**\n * releaseTiles - This action is emitted when an existing tile is removed from panning or zooming the map\n * @param  {array} uids tile ref uids to release\n */\nexport const releaseTiles = (uids) => ({\n  type: RELEASE_HEATMAP_TILES,\n  payload: uids,\n})\n\nexport const updateLoadedTiles = () => ({\n  type: UPDATE_LOADED_TILES,\n})\n\n// triggered when a layer is added or set to visible\nfunction loadAllTilesForLayer(layerId) {\n  return (dispatch, getState) => {\n    //                current layer, all reference tiles\n    const referenceTiles = getState().map.heatmap.referenceTiles\n    dispatch(getTiles([layerId], referenceTiles))\n  }\n}\n\nexport const addHeatmapLayer = (layer, loadTemporalExtent) => (dispatch) => {\n  const layerTemporalExtents = layer.header.temporalExtents\n  dispatch({\n    type: ADD_HEATMAP_LAYER,\n    payload: {\n      ...layer,\n      // initially attach which of the temporal extents indices are visible with initial outerExtent\n      visibleTemporalExtentsIndices: getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        layerTemporalExtents\n      ),\n    },\n  })\n\n  if (layer.visible === true) {\n    dispatch(loadAllTilesForLayer(layer.id))\n  }\n}\n\nexport const removeHeatmapLayer = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_HEATMAP_LAYER,\n    payload: {\n      id,\n    },\n  })\n}\n\n/**\n * updateLayerLoadTemporalExtents - when outer time extent changes, checks if more tiles needs to be loaded\n * by comparing the outer time range with the temporalExtent already loaded on each layer.\n * @param  {array} loadTemporalExtent Current app-wide extent of tiles that need to load, expressed\n * as an array of two dates\n */\nexport function updateLayerLoadTemporalExtents(loadTemporalExtent) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const indicesToAddByLayer = {}\n\n    Object.keys(heatmapLayers).forEach((layerId) => {\n      const heatmapLayer = heatmapLayers[layerId]\n      const temporalExtents = heatmapLayer.header.temporalExtents\n      const oldVisibleTemporalExtentsIndices = heatmapLayer.visibleTemporalExtentsIndices\n      const newVisibleTemporalExtentsIndices = getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        temporalExtents\n      )\n\n      const indicesAdded = difference(\n        newVisibleTemporalExtentsIndices,\n        oldVisibleTemporalExtentsIndices\n      )\n\n      const indicesRemoved = difference(\n        oldVisibleTemporalExtentsIndices,\n        newVisibleTemporalExtentsIndices\n      )\n\n      if (indicesAdded.length || indicesRemoved.length) {\n        // add new loaded indices to heatmap layer if applicable\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n          payload: {\n            layerId,\n            newVisibleTemporalExtentsIndices,\n            indicesRemoved,\n          },\n        })\n      }\n      if (indicesAdded.length) {\n        indicesToAddByLayer[layerId] = indicesAdded\n      }\n    })\n\n    // getTiles with indices diff\n    const layerIdsWithIndicesToAdd = Object.keys(indicesToAddByLayer)\n    if (layerIdsWithIndicesToAdd.length) {\n      dispatch(\n        getTiles(layerIdsWithIndicesToAdd, state.map.heatmap.referenceTiles, indicesToAddByLayer)\n      )\n    }\n  }\n}\n\n/**\n * Returns clusters or vessels data from a tileQuery\n * @param {object} state - the application state\n * @param {string} tileQuery - the id of a heatmap layer\n * @return {object} { isEmpty, isCluster, isMouseCluster, foundVessels, layerId, tilesetId }\n */\nconst _queryHeatmap = (state, tileQuery, temporalExtentIndexes) => {\n  const layers = state.map.heatmap.heatmapLayers\n  const startIndex = temporalExtentIndexes[0]\n  const endIndex = temporalExtentIndexes[1]\n  const layersVessels = []\n\n  Object.keys(layers).forEach((layerId) => {\n    const layer = layers[layerId]\n    if (layer.visible !== true) {\n      return\n    }\n    const allPossibleTilesByPreference = tileQuery.uids.map((uid) =>\n      layer.tiles.find((tile) => tile.uid === uid)\n    )\n    const availableTiles = allPossibleTilesByPreference.filter(\n      (tile) => tile !== undefined && tile.data !== undefined\n    )\n\n    const currentFilters = layer.filters\n    if (availableTiles.length) {\n      const bestTile = availableTiles[0]\n      layersVessels.push({\n        layer,\n        vessels: selectVesselsAt(bestTile.data, tileQuery, startIndex, endIndex, currentFilters),\n      })\n    }\n  })\n\n  const layersVesselsResults = layersVessels.filter(\n    (layerVessels) => layerVessels.vessels.length > 0\n  )\n\n  // it's a cluster because of aggregation on the server side\n  let isCluster\n  // its a cluster because or multiple vessels under mouse\n  let isMouseCluster\n  let isEmpty\n  let layerVesselsResult\n  let foundVessels\n\n  if (layersVesselsResults.length === 0) {\n    isEmpty = true\n  } else if (layersVesselsResults.length > 1) {\n    // if there are points over multiple layers, consider this a cluster (ie don't select, zoom instead, or don't highlight)\n    // there's an exception if vessel selection contains an encounter, in which case it will take priority\n    isCluster = true\n  } else {\n    // layersVesselsResults should contain a single result\n    layerVesselsResult = layersVesselsResults[0]\n\n    // we can get multiple points with similar series and id, in which case\n    // we should treat that as a successful vessel query, not a cluster\n    const vessels = layerVesselsResult.vessels\n\n    if (vessels.length === 0) {\n      isEmpty = true\n    } else {\n      // look up for any negatives ids (clusters on the server side)\n      const clusteredVessels = vessels.filter((v) => v.id < 0)\n      if (clusteredVessels.length) {\n        isCluster = true\n      } else {\n        foundVessels = uniqBy(vessels, (v) => v.series)\n        isMouseCluster = foundVessels.length > 1\n      }\n    }\n  }\n\n  const layer = layerVesselsResult === undefined ? {} : layerVesselsResult.layer\n\n  return { isEmpty, isCluster, isMouseCluster, foundVessels, layer }\n}\n\nexport function clearHighlightedVessels() {\n  return {\n    type: HIGHLIGHT_VESSELS,\n    payload: {\n      isEmpty: true,\n      clickableCluster: false,\n    },\n  }\n}\n\nexport function highlightVesselFromHeatmap(tileQuery, temporalExtentIndexes) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const { layer, isEmpty, isCluster, isMouseCluster, foundVessels } = _queryHeatmap(\n      state,\n      tileQuery,\n      temporalExtentIndexes\n    )\n\n    if (\n      isCluster === true ||\n      layer.id !== undefined ||\n      state.map.heatmap.highlightedVessels.layerId !== layer.id\n    ) {\n      const layerPayload =\n        layer === undefined\n          ? null\n          : {\n              id: layer.id,\n              tilesetId: layer.tilesetId,\n              subtype: layer.subtype,\n              header: layer.header,\n            }\n      dispatch({\n        type: HIGHLIGHT_VESSELS,\n        payload: {\n          layer: layerPayload,\n          isEmpty,\n          clickableCluster: isCluster === true || isMouseCluster === true,\n          highlightableCluster: isCluster !== true,\n          foundVessels,\n        },\n      })\n    } else {\n      dispatch(clearHighlightedVessels())\n    }\n  }\n}\n\nexport const highlightClickedVessel = (id, layerId) => ({\n  type: HIGHLIGHT_CLICKED_VESSEL,\n  payload: {\n    id,\n    layerId,\n  },\n})\n\nexport const clearHighlightedClickedVessel = () => ({\n  type: CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n})\n\nexport const updateHeatmapLayers = (newLayers, currentLoadTemporalExtent) => (\n  dispatch,\n  getState\n) => {\n  if (newLayers === null) {\n    console.warn(\"New layers in updateHeatmapLayers can't be null\")\n    return\n  }\n  const prevLayersDict = getState().map.heatmap.heatmapLayers\n\n  // add and update layers\n  newLayers.forEach((newLayer) => {\n    const layerId = newLayer.id\n    const prevLayer = prevLayersDict[layerId]\n    if (prevLayer === undefined) {\n      // console.log('adding', layerId)\n      dispatch(addHeatmapLayer(newLayer, currentLoadTemporalExtent))\n    } else {\n      if (prevLayer.visible !== newLayer.visible && newLayer.visible === true) {\n        dispatch(loadAllTilesForLayer(layerId))\n      }\n      if (\n        prevLayer.visible !== newLayer.visible ||\n        prevLayer.hue !== newLayer.hue ||\n        prevLayer.opacity !== newLayer.opacity ||\n        prevLayer.filters !== newLayer.filters ||\n        prevLayer.interactive !== newLayer.interactive\n      ) {\n        // console.log('updating', layerId, ' with visibilty', newLayer.visible)\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_STYLE,\n          payload: {\n            id: newLayer.id,\n            visible: newLayer.visible,\n            hue: newLayer.hue,\n            opacity: newLayer.opacity,\n            filters: newLayer.filters,\n            interactive: newLayer.interactive,\n          },\n        })\n      }\n    }\n  })\n\n  // clean up unused layers\n  Object.keys(prevLayersDict).forEach((prevLayerId) => {\n    if (!newLayers.find((l) => l.id === prevLayerId)) {\n      dispatch(removeHeatmapLayer(prevLayerId))\n    }\n  })\n}\n","import { fitBounds, pixelsToWorld } from 'viewport-mercator-project'\nimport { updateHeatmapTilesFromViewport } from '../heatmap/heatmapTiles.actions'\nimport { onViewportChange } from '../module/module.actions'\nimport { CLUSTER_CLICK_ZOOM_INCREMENT } from '../config' // TODO MAP MODULE\n\nexport const SET_BOUNDS = 'SET_BOUNDS'\nexport const SET_VIEWPORT = 'SET_VIEWPORT'\nexport const UPDATE_VIEWPORT = 'UPDATE_VIEWPORT'\nexport const SET_ZOOM_INCREMENT = 'SET_ZOOM_INCREMENT'\nexport const SET_MOUSE_LAT_LONG = 'SET_MOUSE_LAT_LONG'\nexport const TRANSITION_END = 'TRANSITION_END'\nexport const SET_NATIVE_VIEWPORT = 'SET_NATIVE_VIEWPORT'\n\nexport const setBounds = (bounds) => ({\n  type: SET_BOUNDS,\n  payload: bounds,\n})\n\nexport const setViewport = (viewport, interactionState) => (dispatch) => {\n  dispatch({\n    type: SET_VIEWPORT,\n    payload: viewport,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange(interactionState))\n}\n\nexport const updateViewport = (viewportUpdate) => (dispatch) => {\n  dispatch({\n    type: UPDATE_VIEWPORT,\n    payload: viewportUpdate,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  // Not needed as call the callback with the same values\n  // dispatch(onViewportChange())\n}\n\nconst transitionTo = (increment, latitude = null, longitude = null, zoom = null) => (dispatch) => {\n  dispatch({\n    type: SET_ZOOM_INCREMENT,\n    payload: {\n      increment,\n      latitude,\n      longitude,\n      zoom,\n    },\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const transitionToZoom = (viewport) => (dispatch) => {\n  dispatch(transitionTo(null, viewport.center[0], viewport.center[1], viewport.zoom))\n}\n\nexport const transitionEnd = () => (dispatch) => {\n  dispatch({\n    type: TRANSITION_END,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const zoomIntoVesselCenter = (latitude, longitude, zoom = null) => (dispatch) => {\n  dispatch(transitionTo(CLUSTER_CLICK_ZOOM_INCREMENT, latitude, longitude, zoom))\n}\n\nexport const fitToBounds = (bounds) => (dispatch, getState) => {\n  const state = getState()\n  const vp = fitBounds({\n    bounds: [[bounds.minLng, bounds.minLat], [bounds.maxLng, bounds.maxLat]],\n    width: state.map.viewport.viewport.width,\n    height: state.map.viewport.viewport.height,\n    padding: 50,\n  })\n  dispatch(transitionTo(null, vp.latitude, vp.longitude, vp.zoom))\n}\n\nexport const exportNativeViewport = (nativeViewport) => (dispatch) => {\n  const topLeftPx = [0, 0]\n  const bottomRightPx = [nativeViewport.width, nativeViewport.height]\n\n  // compute left and right offsets to deal with antimeridian issue\n  const topLeftWorld = pixelsToWorld(topLeftPx, nativeViewport.pixelUnprojectionMatrix)\n  const bottomRightWorld = pixelsToWorld(bottomRightPx, nativeViewport.pixelUnprojectionMatrix)\n  const leftWorldScaled = topLeftWorld[0] / nativeViewport.scale\n  const rightWorldScaled = bottomRightWorld[0] / nativeViewport.scale\n\n  // lat/lon corners for miniglobe\n  const northWest = nativeViewport.unproject(topLeftPx)\n  const southEast = nativeViewport.unproject(bottomRightPx)\n  const bounds = {\n    north: northWest[1],\n    south: southEast[1],\n    west: northWest[0],\n    east: southEast[0],\n  }\n\n  dispatch({\n    type: SET_NATIVE_VIEWPORT,\n    payload: {\n      leftWorldScaled,\n      rightWorldScaled,\n      bounds,\n    },\n  })\n}\n","import area from '@turf/area'\nimport { POLYGON_LAYERS_AREA } from '../constants'\nimport { clearHighlightedVessels, clearHighlightedClickedVessel } from '../heatmap/heatmap.actions'\nimport { zoomIntoVesselCenter } from './viewport.actions'\n\nexport const SET_POPUP = 'SET_POPUP'\nexport const CLEAR_POPUP = 'CLEAR_POPUP'\nexport const SET_MAP_CURSOR = 'SET_MAP_CURSOR'\n\nconst getAreaKm2 = (glFeature) => {\n  const areakm2 = 10 ** -6 * area(glFeature.geometry)\n  const formatted = areakm2.toLocaleString('en-US', { maximumFractionDigits: 0 })\n  return formatted\n}\n\nconst getFields = (glFeature, source = null) => {\n  if (source === null || source === undefined) {\n    // console.warn('Couldnt find source when looking for fields of layer', sourceId)\n  }\n\n  const fieldsDefinition =\n    !source || source.metadata === undefined || source.metadata['gfw:popups'] === undefined\n      ? []\n      : source.metadata['gfw:popups']\n\n  const properties = glFeature.properties\n\n  // whitelist if 'gfw:popups' exist, if not return all\n  const fieldsKeys = Object.keys(glFeature.properties).filter(\n    (k) => fieldsDefinition.length === 0 || fieldsDefinition.find((fd) => fd.id === k) !== undefined\n  )\n\n  const fields = fieldsKeys.map((fieldKey) => {\n    const value = fieldKey === POLYGON_LAYERS_AREA ? getAreaKm2(glFeature) : properties[fieldKey]\n    const def = fieldsDefinition.find((fd) => fd.id === fieldKey) || {}\n    const label = def.label || fieldKey\n    return {\n      id: fieldKey,\n      label,\n      value,\n      title: `${label}: ${value}`,\n      isLink: def.isLink,\n      isMain: def.isMain,\n    }\n  })\n\n  const mainField =\n    fields.find((f) => f.isMain === true) ||\n    fields.find((f) => f.id === 'name') ||\n    fields.find((f) => f.id === 'id') ||\n    fields[0]\n\n  if (mainField !== undefined) {\n    mainField.isMain = true\n  }\n  return fields\n}\n\nconst getCluster = (glFeature, glGetSource) => {\n  const clusterId = glFeature.properties.cluster_id\n  const sourceId = glFeature.source\n  const glSource = glGetSource(sourceId)\n  const promise = new Promise((resolve, reject) => {\n    glSource.getClusterExpansionZoom(clusterId, (err1, zoom) => {\n      glSource.getClusterLeaves(clusterId, 99, 0, (err2, children) => {\n        if (err1 || err2) {\n          reject()\n        }\n        const childrenFeatures = children.map((child) =>\n          getFeature(child, glFeature.layer.id, glSource)\n        )\n        resolve({\n          zoom,\n          childrenFeatures,\n        })\n      })\n    })\n  })\n  return promise\n}\n\nconst getFeature = (glFeature, layerId, source) => {\n  const feature = {\n    properties: glFeature.properties,\n  }\n  const fields = getFields(glFeature, source)\n  feature.fields = fields\n\n  // Get most likely feature title\n  const mainField = fields.find((f) => f.isMain === true)\n  feature.title = mainField === undefined ? layerId : mainField.value\n\n  return feature\n}\n\nexport const mapInteraction = (interactionType, latitude, longitude, glFeatures, glGetSource) => (\n  dispatch,\n  getState\n) => {\n  if (interactionType === 'click') {\n    dispatch(clearHighlightedClickedVessel())\n  }\n\n  const currentStyle = getState().map.style.mapStyle.toJS()\n\n  const event = {\n    latitude,\n    longitude,\n    features: [],\n  }\n\n  // Collect and normalize features on legacy heatmap\n  const currentLegacyHeatmapData = getState().map.heatmap.highlightedVessels\n  let legacyHeatmapFeature\n\n  if (currentLegacyHeatmapData.isEmpty !== true) {\n    const foundVessels =\n      currentLegacyHeatmapData.foundVessels === undefined\n        ? []\n        : currentLegacyHeatmapData.foundVessels\n    const properties = foundVessels.length === 0 ? [] : foundVessels[0]\n    const isCluster = currentLegacyHeatmapData.clickableCluster === true\n    const count =\n      isCluster === true && currentLegacyHeatmapData.highlightableCluster === false\n        ? -1\n        : foundVessels.length\n    legacyHeatmapFeature = {\n      isCluster,\n      count,\n      layer: {\n        id: currentLegacyHeatmapData.layer.id,\n        group: 'legacyHeatmap',\n      },\n      properties,\n    }\n    event.features.push(legacyHeatmapFeature)\n  }\n\n  // Try to retrieve 'gfw:id' (generated when instanciating CARTO layer to preserve original style.json id)\n  // In most cases it won't exist, so fall back to source id\n  const getStaticLayerIdFromGlFeature = (glFeature) =>\n    (glFeature.layer.metadata !== undefined && glFeature.layer.metadata['gfw:id']) ||\n    glFeature.layer.source\n\n  // Collect gl features\n  const clusterPromises = []\n  const allGlFeatures = glFeatures || []\n  allGlFeatures.forEach((glFeature) => {\n    const layerId = getStaticLayerIdFromGlFeature(glFeature)\n    const source = currentStyle.sources[layerId]\n    const feature = {\n      layer: {\n        id: layerId,\n        group: glFeature.layer.metadata && glFeature.layer.metadata['mapbox:group'],\n      },\n      ...getFeature(glFeature, layerId, source),\n    }\n\n    if (glFeature.properties.cluster === true) {\n      // lookup for cluster\n      const clusterPromise = getCluster(glFeature, glGetSource).then((cluster) => {\n        feature.cluster = cluster\n        feature.count = cluster.childrenFeatures.length\n      })\n      clusterPromises.push(clusterPromise)\n      feature.isCluster = true\n    } else {\n      feature.isCluster = false\n    }\n    event.features.push(feature)\n  })\n\n  Promise.all(clusterPromises).then(() => {\n    // The whole set of features is considered a cluster\n    // if any feature is a cluster, or there is more than one feature\n    event.isCluster =\n      event.features.length > 1 || event.features.some((feature) => feature.isCluster === true)\n\n    // legacy heatmap layers can yield clusters with an unknown number of features, handle this here:\n    if (legacyHeatmapFeature !== undefined && legacyHeatmapFeature.count === -1) {\n      event.count = -1\n    } else {\n      event.count = event.features.reduce((count, feature) => {\n        let featureCount = feature.count || 1\n        return count + featureCount\n      }, 0)\n    }\n\n    if (event.count === 1) {\n      event.feature = event.features[0]\n    }\n\n    // When autoClusterZoom is set to true, we handle zoom here\n    const autoClusterZoom = getState().map.module.autoClusterZoom === true\n\n    // Check if cluster using customizable isCluster() callback\n    // If not set resolves simply to (event) => event.isCluster === true\n    const clusterBehavior = getState().map.module.isCluster(event)\n    event.isCluster = clusterBehavior\n\n    if (autoClusterZoom) {\n      if (interactionType === 'click' && event.isCluster === true) {\n        dispatch(clearHighlightedVessels())\n        const clusterZoom = event.features[0].cluster && event.features[0].cluster.zoom\n        dispatch(zoomIntoVesselCenter(latitude, longitude, clusterZoom))\n      }\n    }\n\n    let cursor = event.features.length ? 'pointer' : null\n    if (event.isCluster === true) {\n      cursor = 'zoom-in'\n    }\n\n    dispatch({\n      type: SET_MAP_CURSOR,\n      payload: cursor,\n    })\n\n    const callback =\n      interactionType === 'click' ? getState().map.module.onClick : getState().map.module.onHover\n\n    if (callback !== undefined) {\n      callback(event)\n    }\n  })\n}\n","const RGB_MAX = 255\nconst HUE_MAX = 360\nconst SV_MAX = 100\n\nexport const VESSELS_HUES_INCREMENTS_NUM = 31 // 360 / VESSELS_HUES_INCREMENTS_NUM - 1  should give a round number\nexport const VESSELS_HUES_INCREMENT = 360 / (VESSELS_HUES_INCREMENTS_NUM - 1)\n\n// Legacy: this is only here for compatibility with pre-mapbox branch workspaces\nexport const COLOR_HUES = {\n  orange: 0,\n  peach: 22,\n  yellow: 60,\n  green: 85,\n  brightGreen: 145,\n  lightBlue: 182,\n  blue: 236,\n  purple: 284,\n  pink: 312,\n}\n\n// FIXME mark explicitely as legacy. Check all usages.\nexport const getKeyByValue = (obj, value) => {\n  let result = null\n  Object.entries(obj).forEach((entry) => {\n    if (entry[1] === value) result = entry[0]\n  })\n  return result\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport const rgbToHsv = (_r, _g, _b) => {\n  const r = _r / 255\n  const g = _g / 255\n  const b = _b / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n      default:\n        h = 0\n    }\n\n    h /= 6\n  }\n\n  return [h, s, v]\n}\n\n// converts hue, saturation, luminance to an rgb object\nexport const hsvToRgb = (h_, s_, v_) => {\n  const h = ((h_ % HUE_MAX) / parseFloat(HUE_MAX)) * 6\n  const s = s_ === SV_MAX ? 1 : (s_ % SV_MAX) / parseFloat(SV_MAX)\n  const v = v_ === SV_MAX ? 1 : (v_ % SV_MAX) / parseFloat(SV_MAX)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r: Math.round(r * RGB_MAX), g: Math.round(g * RGB_MAX), b: Math.round(b * RGB_MAX) }\n}\n\n// returns an rgb string with default saturation and luminance values\nconst hueToRgbDefaults = (hue) => hsvToRgb(hue, 50, 100)\n\nexport const hueToRgbString = (hue) => {\n  const rgb = hueToRgbDefaults(hue)\n  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`\n}\n\nexport const rgbToHexString = (rgb, css) => {\n  const str = ['r', 'g', 'b']\n    .map((channelName) => {\n      const channelValue = rgb[channelName]\n      let channelStr = channelValue.toString(16)\n      if (channelValue < 16) {\n        channelStr = `0${channelStr}`\n      }\n      return channelStr\n    })\n    .join('')\n  const prefix = css === true ? '#' : '0x'\n  return `${prefix}${str}`\n}\n\nexport const hueToRgbHexString = (hue, css) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToHexString(rgb, css)\n}\n\nconst closestNumber = (numberArray, goal) =>\n  numberArray.reduce((prev, curr) => (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev))\n\nexport const hueToClosestColor = (hue) => {\n  if (hue === undefined || hue === null) return undefined\n  const colorHueValues = Object.keys(COLOR_HUES).map((key) => COLOR_HUES[key])\n  const closestHue = closestNumber(colorHueValues, hue)\n  return getKeyByValue(COLOR_HUES, closestHue)\n}\n\nexport const hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst rgbToRgbaString = (rgb, opacity) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`\n\nexport const hueToRgbaString = (hue, opacity) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hexToRgba = (hex, opacity) => {\n  const rgb = hexToRgb(hex)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hueIncrementToHue = (hueIncrement) => hueIncrement * VESSELS_HUES_INCREMENT\n\nexport const hueToHueIncrement = (hue) =>\n  Math.round((hue / 360) * (VESSELS_HUES_INCREMENTS_NUM - 1))\n\nexport const wrapHue = (hue) => hue % 360\n\nexport const hueOrColorToHexColor = (color, hue) => {\n  if (hue !== undefined) {\n    return hueToRgbHexString(hue, true)\n  }\n\n  return color\n}\n","/* global PIXI */\nimport 'pixi.js'\nimport { hueToHueIncrement, VESSELS_HUES_INCREMENTS_NUM } from '../utils/map-colors'\nimport { VESSELS_BASE_RADIUS, MAX_SPRITES_PER_LAYER } from '../config'\n\nexport default class HeatmapSubLayer {\n  constructor(baseTexture, renderingStyleIndex, hue, useNormalBlendMode = false) {\n    // this.stage = new PIXI.Container();\n    // the ParticleContainer is a faster version of the PIXI sprite container\n    this.stage = new PIXI.particles.ParticleContainer(MAX_SPRITES_PER_LAYER, {\n      scale: true,\n      alpha: true,\n      position: true,\n      uvs: true,\n    })\n    if (useNormalBlendMode === false) {\n      this.stage.blendMode = PIXI.BLEND_MODES.SCREEN\n    }\n\n    this.spritesPool = []\n\n    const initialTextureFrame = new PIXI.Rectangle(\n      0,\n      0,\n      VESSELS_BASE_RADIUS * 2,\n      VESSELS_BASE_RADIUS * 2\n    )\n    this.mainVesselTexture = new PIXI.Texture(baseTexture, initialTextureFrame)\n    this._setTextureFrame(renderingStyleIndex, hue)\n\n    this.clearSpriteProps()\n  }\n\n  clearSpriteProps() {\n    this.spritesProps = {\n      x: new Float32Array(MAX_SPRITES_PER_LAYER),\n      y: new Float32Array(MAX_SPRITES_PER_LAYER),\n      a: new Float32Array(MAX_SPRITES_PER_LAYER),\n      s: new Float32Array(MAX_SPRITES_PER_LAYER),\n    }\n    this.spritesPropsCount = 0\n  }\n\n  pushSpriteProps(x, y, a, s) {\n    this.spritesProps.x[this.spritesPropsCount] = x\n    this.spritesProps.y[this.spritesPropsCount] = y\n    this.spritesProps.a[this.spritesPropsCount] = a\n    this.spritesProps.s[this.spritesPropsCount] = s\n    this.spritesPropsCount++\n  }\n\n  setRenderingStyleIndex(renderingStyleIndex) {\n    this._setTextureFrame(renderingStyleIndex)\n  }\n\n  destroy() {\n    this.spritesPool = null\n    this.stage.destroy({ children: true })\n  }\n\n  /**\n   * Updates the main texture frame offset to show different brush styles and hues\n   * Both args are optional, if one is omitted, previous value is used\n   * @heatmapStyle bool whether to use heatmap style or solid circle style\n   * @hue number hue value between 0 and 360\n   */\n  _setTextureFrame(renderingStyleIndex = null, hue = null) {\n    const textureFrame = this.mainVesselTexture.frame.clone()\n\n    if (renderingStyleIndex !== null) {\n      // one diameter + tiny offset between 2 frames\n      textureFrame.x = VESSELS_BASE_RADIUS * 2 * renderingStyleIndex + renderingStyleIndex\n    }\n\n    if (hue !== null) {\n      let hueIncrement = hueToHueIncrement(hue)\n      if (hueIncrement === VESSELS_HUES_INCREMENTS_NUM - 1) {\n        hueIncrement = 0\n      }\n      textureFrame.y = hueIncrement * VESSELS_BASE_RADIUS * 2\n      if (hueIncrement > 0) {\n        textureFrame.y += hueIncrement\n      }\n    }\n\n    this.mainVesselTexture.frame = textureFrame\n    this.mainVesselTexture.update()\n  }\n\n  render() {\n    const numProps = this.spritesPropsCount\n    this.resizeSpritesPool()\n\n    for (let i = 0; i < numProps; i++) {\n      const sprite = this.stage.children[i]\n      const s = this.spritesProps.s[i]\n      sprite.setTransform(this.spritesProps.x[i], this.spritesProps.y[i], s, s)\n      sprite.alpha = this.spritesProps.a[i]\n    }\n\n    const numSprites = this.stage.children.length\n    for (let i = numProps; i < numSprites; i++) {\n      const sprite = this.stage.children[i]\n      sprite.x = -100\n    }\n  }\n\n  resizeSpritesPool() {\n    const numProps = this.spritesPropsCount\n    const prevNumSprites = this.stage.children.length\n    const delta = numProps - prevNumSprites\n    // console.log(prevNumSprites, '->', numProps, ' delta:', delta);\n\n    if (delta < -4999) {\n      // sprite needs to be removed. Do that progressively (max 100) to avoid UI lock\n      const toRemove = Math.min(100, -delta)\n      // console.log('removing ', toRemove);\n      for (let i = 0; i < toRemove; i++) {\n        this.stage.removeChildAt(0)\n      }\n    }\n\n    if (delta > 0) {\n      const toAdd = Math.max(5000, delta)\n      // console.log('adding ', toAdd);\n      this._addSprites(toAdd)\n    }\n  }\n\n  _addSprites(num) {\n    for (let i = 0; i < num; i++) {\n      const vessel = new PIXI.Sprite(this.mainVesselTexture)\n      vessel.anchor.x = 0.5\n      vessel.anchor.y = 0.5\n      // ParticlesContainer does not support .visible, so we just move the sprite out of the viewport\n      vessel.x = -100\n      // vessel.blendMode = PIXI.BLEND_MODES.SCREEN;\n      // vessel.filters=  [new PIXI.filters.BlurFilter(10,10)]\n      this.stage.addChild(vessel)\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport uniq from 'lodash/uniq'\nimport * as PIXI from 'pixi.js'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { BRUSH_RENDERING_STYLE, BRUSH_ZOOM_RENDERING_STYLE } from '../constants'\nimport { vesselSatisfiesFilters } from '../utils/heatmapTileData'\nimport HeatmapSubLayer from './HeatmapSubLayer'\n\n// This is a faster version of worldToPixels that omits pitch,\n// and ignores values from the matrix that are consistently = 0\nconst s = 1 / 1.5\nconst worldToPixelsSimple = (x, y, m) => {\n  const fx = s * (m[0] * x + m[4] * y + m[12])\n  const fy = s * (m[5] * y + m[13])\n  return [fx, fy]\n}\n\nclass HeatmapLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.useRadialGradientStyle !== this.props.useRadialGradientStyle) {\n      this.setBrushZoomRenderingStyle(nextProps.useRadialGradientStyle)\n    }\n  }\n\n  _build() {\n    const { layer, rootStage, useRadialGradientStyle, customRenderingStyle } = this.props\n    this.subLayers = {}\n    this.renderingStyle =\n      layer.header && layer.header.rendering ? layer.header.rendering : customRenderingStyle\n\n    this.setBrushRenderingStyle(this.renderingStyle.style)\n    this.setBrushZoomRenderingStyle(useRadialGradientStyle)\n\n    this.stage = new PIXI.Container()\n\n    rootStage.addChild(this.stage)\n  }\n\n  setBrushRenderingStyle(style = BRUSH_RENDERING_STYLE.NORMAL) {\n    if (typeof style === 'string') {\n      this.brushRenderingStyle = BRUSH_RENDERING_STYLE[style.toUpperCase()]\n    } else {\n      this.brushRenderingStyle = style\n    }\n    this._setBrushRenderingStyleIndex()\n  }\n\n  setBrushZoomRenderingStyle(useRadialGradientStyle) {\n    this.brushZoomRenderingStyle =\n      useRadialGradientStyle === true\n        ? BRUSH_ZOOM_RENDERING_STYLE.RADIAL_GRADIENT\n        : BRUSH_ZOOM_RENDERING_STYLE.CIRCLE\n    this._setBrushRenderingStyleIndex()\n  }\n\n  _setBrushRenderingStyleIndex() {\n    // only NORMAL brush styles support different zoom styles\n    const cappedZoomRenderingStyle =\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.NORMAL ? this.brushZoomRenderingStyle : 0\n    const newStyleIndex = this.brushRenderingStyle + cappedZoomRenderingStyle\n    if (newStyleIndex === this.renderingStyleIndex) {\n      return\n    }\n    this.renderingStyleIndex = newStyleIndex\n    Object.values(this.subLayers).forEach((subLayer) => {\n      subLayer.setRenderingStyleIndex(this.renderingStyleIndex)\n    })\n  }\n\n  _redraw() {\n    const { filters, baseTexture, layer } = this.props\n\n    if (\n      layer === null ||\n      layer === undefined ||\n      layer.tiles === undefined ||\n      layer.visible === false\n    ) {\n      this.stage.visible = false\n      return\n    }\n\n    this.stage.visible = true\n    this.stage.alpha = layer.opacity\n\n    const tiles = layer.tiles\n    const defaultHue = layer.hue\n    const allHuesToRender =\n      filters !== undefined && filters.length\n        ? filters\n            // pass is set to true by filterGroupActions when none of the filters fields\n            // in the filter group is supported by the layer headers\n            .filter((f) => f.pass !== true)\n            .map((f) => (f.hue === undefined ? '0' : f.hue.toString()))\n        : [defaultHue.toString()]\n    const currentlyUsedHues = Object.keys(this.subLayers)\n\n    // get all hues, old and new\n    const allHues = uniq(allHuesToRender.concat(currentlyUsedHues))\n\n    for (let i = 0; i < allHues.length; i++) {\n      const hue = allHues[i]\n      if (allHuesToRender.indexOf(hue) === -1) {\n        // not on new hues: delete sublayer\n        this._destroySubLayer(this.subLayers[hue])\n        delete this.subLayers[hue]\n        continue\n      }\n      if (currentlyUsedHues.indexOf(hue) === -1) {\n        // not on old hues: create sublayer\n        this.subLayers[hue] = this._createSublayer(baseTexture, this.renderingStyleIndex, hue)\n      }\n      this.subLayers[hue].clearSpriteProps()\n    }\n\n    if (!allHuesToRender.length) return\n    tiles.forEach((tile) => {\n      this._setSubLayersSpritePropsForTile({\n        data: tile.data,\n        numFilters: filters.length,\n        defaultHue,\n      })\n    })\n\n    allHuesToRender.forEach((hueToRender) => {\n      this.subLayers[hueToRender].render()\n    })\n  }\n\n  _setSubLayersSpritePropsForTile({ data, numFilters, defaultHue }) {\n    if (!data) {\n      return\n    }\n\n    const { startIndex, endIndex, viewport, filters, viewportLeft, viewportRight } = this.props\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let index = 0, len = frame.worldX.length; index < len; index++) {\n        let hue\n        if (filters === undefined || !filters.length) {\n          hue = defaultHue\n        }\n        for (let fi = 0; fi < numFilters; fi++) {\n          const filter = filters[fi]\n          if (vesselSatisfiesFilters(frame, index, filter.filterValues)) {\n            hue = filter.hue\n            break\n          }\n        }\n\n        // no filter passes: bail\n        if (hue === undefined) {\n          continue\n        }\n\n        // wrap worldX when point crosses the antimeridian/dateline\n        // world points go from 0 to 512. There is no way to determine if worldX is on the \"wrong\" side\n        // of the antimeridian just by looking at its value (where with lat/lon we can simply look at -/+)\n        // Therefore we compare it to the viewport's left or right boundary, depending on what is currently\n        // \"the right side\" of the antimeridian\n        let worldX = frame.worldX[index]\n        if (viewportLeft > 0 && worldX < viewportLeft) {\n          // worldX is \"behind\" viewportLeft, which means it is \"on the right\" of the antimeridian\n          worldX += 512\n        } else if (viewportLeft < 0 && worldX > viewportRight) {\n          worldX -= 512\n        }\n\n        const scaledX = worldX * viewport.scale\n        const scaledY = frame.worldY[index] * viewport.scale\n        const mtx = viewport.pixelProjectionMatrix\n\n        const [x, y] =\n          viewport.pitch === 0\n            ? worldToPixelsSimple(scaledX, scaledY, mtx)\n            : worldToPixels([scaledX, scaledY], mtx)\n\n        if (x > -10 && x < viewport.width + 10 && y > -10 && y < viewport.height + 10) {\n          this.subLayers[hue].pushSpriteProps(\n            x,\n            y,\n            frame.opacity ? frame.opacity[index] : this.renderingStyle.defaultOpacity,\n            frame.radius ? frame.radius[index] : this.renderingStyle.defaultSize\n          )\n        }\n      }\n    }\n  }\n\n  _createSublayer(baseTexture, renderingStyleIndex, hue) {\n    const subLayer = new HeatmapSubLayer(\n      baseTexture,\n      renderingStyleIndex,\n      hue,\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.BULLSEYE\n    )\n    this.stage.addChild(subLayer.stage)\n    return subLayer\n  }\n\n  _destroy() {\n    Object.values(this.subLayers).forEach(this._destroySubLayer.bind(this))\n    this.stage.destroy({ children: true })\n    const { rootStage } = this.props\n    rootStage.removeChild(this.stage)\n  }\n\n  _destroySubLayer(subLayer) {\n    this.stage.removeChild(subLayer.stage)\n    subLayer.destroy()\n  }\n\n  render() {\n    return null\n  }\n}\n\nHeatmapLayer.propTypes = {\n  layer: PropTypes.object,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  filters: PropTypes.array,\n  baseTexture: PropTypes.object,\n  useRadialGradientStyle: PropTypes.bool,\n  customRenderingStyle: PropTypes.object,\n  viewportLeft: PropTypes.number,\n  viewportRight: PropTypes.number,\n}\n\nexport default HeatmapLayer\n","/* global PIXI */\nimport 'pixi.js'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { TRACKS_DOTS_STYLE_ZOOM_THRESHOLD } from '../config'\n\nclass TracksLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  _build() {\n    const { rootStage } = this.props\n    this.stage = new PIXI.Graphics()\n    this.stage.nativeLines = true\n    rootStage.addChild(this.stage)\n  }\n\n  clear() {\n    this.stage.clear()\n  }\n\n  _redraw() {\n    const { tracks, zoom, startIndex, endIndex, highlightTemporalExtentIndexes } = this.props\n\n    this.clear()\n    if (!tracks.length) {\n      return\n    }\n\n    const overInInner =\n      highlightTemporalExtentIndexes === null\n        ? undefined\n        : [\n            Math.max(startIndex, highlightTemporalExtentIndexes[0]),\n            Math.min(endIndex, highlightTemporalExtentIndexes[1]),\n          ]\n    const overExtent = overInInner && overInInner[1] - overInInner[0] > 0 ? overInInner : undefined\n\n    let n = 0 // eslint-disable-line no-unused-vars\n\n    const drawFishingCircles = zoom > TRACKS_DOTS_STYLE_ZOOM_THRESHOLD\n    const fishingCirclesRadius = 1 + (zoom - TRACKS_DOTS_STYLE_ZOOM_THRESHOLD) * 0.5\n    const drawOverTrack = overExtent !== undefined && overExtent[0] > 0 && overExtent[1] > 0\n\n    tracks.forEach((track) => {\n      n += this._drawTrack({\n        data: track.data,\n        startIndex,\n        endIndex,\n        drawFishingCircles,\n        fishingCirclesRadius,\n        color: `0x${track.color.substr(1)}`,\n        lineThickness: 1,\n        lineOpacity: 1,\n      })\n\n      // Draw the highlight over the track when the user hovers over the Timebar\n      if (drawOverTrack === true) {\n        n += this._drawTrack({\n          data: track.data,\n          startIndex: highlightTemporalExtentIndexes[0],\n          endIndex: highlightTemporalExtentIndexes[1],\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color: '0xFFFFFF',\n          lineThickness: 2,\n          lineOpacity: 1,\n        })\n      }\n    })\n\n    // console.log(n);\n  }\n\n  /**\n   * Draws a single track (line + points)\n   *\n   * @param data track points data in 'playback form' (ie organized by days)\n   * @param extent extent, in day indices\n   * @param offset object containing info about the current situation of the map viewport, used to compute screen coords\n   * @param drawFishingCircles whether to draw fishing circles or not\n   * @param fishingCirclesRadius radius of the fishing circles\n   * @param color\n   * @param lineThickness\n   * @param lineOpacity\n   * @param worldOffset offset to use when a track crosses the dateline (ie 512 to add a second world to the right)\n   */\n  _drawTrack({\n    data,\n    startIndex,\n    endIndex,\n    drawFishingCircles,\n    fishingCirclesRadius,\n    color,\n    lineThickness,\n    lineOpacity,\n    worldOffset = 0,\n  }) {\n    const { viewport } = this.props\n\n    let n = 0\n    let prevSeries\n    let prevWorldX\n    let prevWorldY\n\n    const circlePoints = {\n      x: [],\n      y: [],\n    }\n\n    // line thickness is ignored in native mode anyways.\n    this.stage.lineStyle(lineThickness, color, lineOpacity)\n\n    let duplicateWorld = false\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let i = 0, len = frame.series.length; i < len; i++) {\n        const currentSeries = frame.series[i]\n\n        n++\n\n        const worldX = frame.worldX[i] + worldOffset\n        const worldY = frame.worldY[i]\n\n        const [x, y] = worldToPixels(\n          [worldX * viewport.scale, worldY * viewport.scale],\n          viewport.pixelProjectionMatrix\n        )\n\n        if (prevSeries !== currentSeries) {\n          this.stage.moveTo(x, y)\n        }\n\n        // more than a ½ world of distance between two points = crossing the dateline\n        if (prevWorldX && Math.abs(worldX - prevWorldX) > 256) {\n          // worldOffset === 0 -> this is the first time drawTrack is called\n          if (worldOffset === 0) {\n            // set a flag to call drawTrack again at the end of the loop\n            duplicateWorld = true\n          }\n\n          // get Y coordinate where track intersects with dateline\n          const atDatelineWorldY = prevWorldY + (worldY - prevWorldY) / 2\n\n          // whether tracks crosses dateline from west to east\n          const isWestToEast = worldX - prevWorldX < 0\n\n          const worldXEnd = worldOffset + (512 - 0.000001)\n          const worldXStart = worldOffset\n\n          // get X coordinate ending at dateline\n          const atDatelineEndWorldX = isWestToEast ? worldXEnd : worldXStart\n\n          // get X coordinate starting at dateline\n          const atDatelineStartWorldX = isWestToEast ? worldXStart : worldXEnd\n\n          const [x1, y1] = worldToPixels(\n            [atDatelineEndWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.lineTo(x1, y1)\n          const [x2, y2] = worldToPixels(\n            [atDatelineStartWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.moveTo(x2, y2)\n        }\n\n        this.stage.lineTo(x, y)\n\n        if (drawFishingCircles && frame.hasFishing[i] === true) {\n          circlePoints.x.push(x)\n          circlePoints.y.push(y)\n        }\n\n        prevWorldX = worldX\n        prevWorldY = worldY\n        prevSeries = currentSeries\n      }\n    }\n\n    if (drawFishingCircles) {\n      this.stage.lineStyle(0)\n      this.stage.beginFill(color, 1)\n      for (let i = 0, circlesLength = circlePoints.x.length; i < circlesLength; i++) {\n        this.stage.drawCircle(circlePoints.x[i], circlePoints.y[i], fishingCirclesRadius)\n      }\n      this.stage.endFill()\n    }\n\n    if (duplicateWorld === true) {\n      ;[-512, 512].forEach((offset) => {\n        this._drawTrack({\n          worldOffset: offset,\n          data,\n          startIndex,\n          endIndex,\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color,\n          lineThickness,\n          lineOpacity,\n        })\n      })\n    }\n    return n\n  }\n\n  render() {\n    return null\n  }\n}\n\nTracksLayer.propTypes = {\n  zoom: PropTypes.number,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  tracks: PropTypes.array,\n}\n\nexport default TracksLayer\n","import React, { Fragment } from 'react'\nimport * as PIXI from 'pixi.js'\nimport PropTypes from 'prop-types'\nimport { BaseControl } from 'react-map-gl'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport {\n  hsvToRgb,\n  hueToRgbString,\n  hueIncrementToHue,\n  wrapHue,\n  VESSELS_HUES_INCREMENTS_NUM,\n} from '../utils/map-colors'\nimport {\n  VESSELS_BASE_RADIUS,\n  VESSELS_HEATMAP_BLUR_FACTOR,\n  ACTIVITY_HIGHLIGHT_HUE,\n  VESSELS_HEATMAP_DIMMING_ALPHA,\n  VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD,\n  VESSEL_CLICK_TOLERANCE_PX,\n} from '../config'\nimport HeatmapLayer from '../heatmap/HeatmapLayer'\nimport TracksLayer from '../tracks/TracksLayer'\n\nconst shouldUseRadialGradientStyle = (zoom) => zoom < VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD\n\n// builds a texture spritesheet containing\n// - the heatmap style (radial gradient)\n// - the circle style that is used at higher zoom levels\n// - the 'bullseye' style used for encounters\n// as well as a number of hues for each in a 2D grid.\n// Then, only the texture frame (mesh UVs) is modified depending on the zoom level,\n// in order not to have to recreate sprites\nconst getVesselTexture = (radius, blurFactor) => {\n  const tplCanvas = document.createElement('canvas')\n  const tplCtx = tplCanvas.getContext('2d')\n  const diameter = radius * 2\n  const NUM_STYLES = 3\n  tplCanvas.width = diameter * NUM_STYLES + (NUM_STYLES - 1) // + (NUM_STYLES - 1): tiny offset between 2 frames\n  tplCanvas.height = diameter * VESSELS_HUES_INCREMENTS_NUM + VESSELS_HUES_INCREMENTS_NUM\n\n  for (let hueIncrement = 0; hueIncrement < VESSELS_HUES_INCREMENTS_NUM; hueIncrement++) {\n    const y = diameter * hueIncrement + hueIncrement\n    const yCenter = y + radius\n\n    // heatmap style\n    let x = radius\n    const gradient = tplCtx.createRadialGradient(\n      x,\n      yCenter,\n      radius * blurFactor,\n      x,\n      yCenter,\n      radius\n    )\n    const hue = hueIncrementToHue(hueIncrement)\n    const rgbString = hueToRgbString(hue)\n    gradient.addColorStop(0, rgbString)\n\n    const rgbOuter = hsvToRgb(wrapHue(hue + 30), 80, 100)\n    gradient.addColorStop(1, `rgba(${rgbOuter.r}, ${rgbOuter.g}, ${rgbOuter.b}, 0)`)\n\n    tplCtx.fillStyle = gradient\n    tplCtx.fillRect(0, y, diameter, diameter)\n\n    // circle style\n    x += diameter + 1 // tiny offset between 2 frames\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n\n    // bullseye style\n    x += diameter + 1\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.4, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.95, 0, 2 * Math.PI, false)\n    tplCtx.lineWidth = 1\n    tplCtx.strokeStyle = rgbString\n    tplCtx.stroke()\n  }\n\n  return tplCanvas\n}\n\nclass ActivityLayers extends BaseControl {\n  state = {\n    pixiReady: false,\n  }\n\n  componentDidMount() {\n    this._build()\n    this.setState({\n      pixiReady: true,\n    })\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.props.exportNativeViewport(this._context.viewport)\n\n    if (\n      nextProps.viewport.width !== this.props.viewport.width ||\n      nextProps.viewport.height !== this.props.viewport.height\n    ) {\n      this._updateViewportSize(nextProps.viewport.width, nextProps.viewport.height)\n    }\n  }\n\n  _build() {\n    const { width, height } = this.props.viewport\n\n    this.pixi = new PIXI.Application({\n      width,\n      height,\n      transparent: true,\n      antialias: true,\n    })\n\n    this.renderer = this.pixi.renderer\n    this.canvas = this.pixi.view\n    this.canvas.style.position = 'absolute'\n\n    this.container.appendChild(this.canvas)\n\n    this.stage = this.pixi.stage\n\n    const baseTextureCanvas = getVesselTexture(VESSELS_BASE_RADIUS, VESSELS_HEATMAP_BLUR_FACTOR)\n    this.baseTexture = PIXI.Texture.fromCanvas(baseTextureCanvas)\n\n    this.heatmapStage = new PIXI.Container()\n    this.stage.addChild(this.heatmapStage)\n\n    this.pixi.ticker.add(this._onTick)\n  }\n\n  _destroy() {\n    this.pixi.destroy()\n  }\n\n  _updateViewportSize(viewportWidth, viewportHeight) {\n    this.renderer.resize(viewportWidth, viewportHeight)\n  }\n\n  toggleHeatmapDimming(dim) {\n    if (this.heatmapStage === undefined) {\n      return\n    }\n    if (dim === true) {\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = dim === true ? VESSELS_HEATMAP_DIMMING_ALPHA : 1\n  }\n\n  onTouchStart = (event) => {\n    if (!event.touches.length) {\n      return\n    }\n    this.queryCoords(event.touches[0].clientX, event.touches[0].clientY)\n  }\n\n  onMouseMove = (event) => {\n    this.queryCoords(event.clientX, event.clientY)\n  }\n\n  queryCoords(x, y) {\n    // bail if all heatmap layers are set to non-interactive\n    if (this.props.heatmapLayers.every((l) => l.interactive !== true)) {\n      return\n    }\n\n    const { viewport } = this._context\n    const [longitude, latitude] = viewport.unproject([x, y])\n\n    let wrappedLongitude = longitude\n    if (wrappedLongitude > 180) {\n      wrappedLongitude -= 360\n    } else if (wrappedLongitude < -180) {\n      wrappedLongitude += 360\n    }\n\n    const [worldX, worldY] = lngLatToWorld([wrappedLongitude, latitude], 1)\n\n    const toleranceRadiusInWorldUnits = VESSEL_CLICK_TOLERANCE_PX / viewport.scale\n\n    this.props.queryHeatmapVessels(\n      {\n        longitude: wrappedLongitude,\n        latitude,\n        worldX,\n        worldY,\n        toleranceRadiusInWorldUnits,\n      },\n      this.props.temporalExtentIndexes\n    )\n  }\n\n  _onTick = () => {\n    if (this.heatmapFadingIn === true && this.heatmapStage.alpha < 1) {\n      this._heatmapFadeinStep()\n    }\n  }\n\n  _startHeatmapFadein() {\n    this.heatmapFadingIn = true\n    this.heatmapFadeinStartTimestamp = undefined\n  }\n\n  _heatmapFadeinStep() {\n    if (this.heatmapFadeinStartTimestamp === undefined) {\n      this.heatmapFadeinStartTimestamp = Date.now()\n    }\n    const timeElapsed = (Date.now() - this.heatmapFadeinStartTimestamp) / 1000\n    let alpha = this.heatmapStage.alpha + (1 - this.heatmapStage.alpha) * timeElapsed\n    if (alpha >= 1) {\n      alpha = 1\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = alpha\n  }\n\n  // FIXME move to container?\n  _getHighlightData(highlightedVessels, highlightedClickedVessel, heatmapLayers) {\n    const hue = ACTIVITY_HIGHLIGHT_HUE\n    let highlightLayerData = {\n      id: '__HIGHLIGHT__',\n      visible: true,\n      opacity: 1,\n      hue: ACTIVITY_HIGHLIGHT_HUE,\n    }\n    let highlightFilters = []\n\n    if (\n      highlightedVessels !== undefined &&\n      highlightedVessels.layer !== undefined &&\n      highlightedVessels.foundVessels !== undefined &&\n      highlightedVessels.isEmpty !== true\n    ) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedVessels.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = highlightedVessels.foundVessels.map((vessel) => ({\n        hue,\n        filterValues: {\n          series: [vessel.series],\n        },\n      }))\n    } else if (highlightedClickedVessel !== null) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedClickedVessel.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = [\n        {\n          hue,\n          filterValues: {\n            series: [highlightedClickedVessel.id],\n          },\n        },\n      ]\n    }\n    return {\n      highlightLayerData,\n      highlightFilters,\n    }\n  }\n  _render() {\n    const {\n      zoom,\n      heatmapLayers,\n      temporalExtentIndexes,\n      highlightTemporalExtentIndexes,\n      highlightedVessels,\n      highlightedClickedVessel,\n      tracks,\n      leftWorldScaled,\n      rightWorldScaled,\n    } = this.props\n    const { viewport } = this._context\n    const { pixiReady } = this.state\n\n    const startIndex = temporalExtentIndexes[0]\n    const endIndex = temporalExtentIndexes[1]\n    const useRadialGradientStyle = shouldUseRadialGradientStyle(zoom)\n\n    if (highlightedVessels.isEmpty !== true) {\n      this.toggleHeatmapDimming(true)\n    }\n    if (highlightedVessels.isEmpty === true && tracks.length === 0) {\n      this._startHeatmapFadein()\n    }\n    if (this.renderer && this.renderer.gl && this.renderer.gl.getError !== undefined) {\n      const err = this.renderer.gl.getError()\n      if (err !== 0) console.log(err)\n    }\n\n    const { highlightLayerData, highlightFilters } = this._getHighlightData(\n      highlightedVessels,\n      highlightedClickedVessel,\n      heatmapLayers\n    )\n\n    return (\n      <div\n        ref={(ref) => {\n          this.container = ref\n        }}\n        style={{ position: 'absolute' }}\n        onMouseMove={this.onMouseMove}\n        onTouchStart={this.onTouchStart}\n      >\n        {pixiReady === true && (\n          <Fragment>\n            {heatmapLayers.map((layer) => (\n              <HeatmapLayer\n                key={layer.id}\n                layer={layer}\n                filters={layer.filters || []}\n                viewport={viewport}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                baseTexture={this.baseTexture}\n                rootStage={this.heatmapStage}\n                useRadialGradientStyle={useRadialGradientStyle}\n                customRenderingStyle={{}}\n                viewportLeft={leftWorldScaled}\n                viewportRight={rightWorldScaled}\n              />\n            ))}\n            {this.stage !== undefined && (\n              <HeatmapLayer\n                key=\"highlighted\"\n                layer={highlightLayerData}\n                filters={highlightFilters}\n                viewport={viewport}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                baseTexture={this.baseTexture}\n                rootStage={this.heatmapStage}\n                useRadialGradientStyle={useRadialGradientStyle}\n                customRenderingStyle={{ defaultOpacity: 1, defaultSize: 1 }}\n                viewportLeft={leftWorldScaled}\n                viewportRight={rightWorldScaled}\n              />\n            )}\n            {this.stage !== undefined && (\n              <TracksLayer\n                tracks={tracks}\n                viewport={viewport}\n                zoom={zoom}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                highlightTemporalExtentIndexes={highlightTemporalExtentIndexes}\n                rootStage={this.stage}\n              />\n            )}\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nActivityLayers.propTypes = {\n  zoom: PropTypes.number,\n  heatmapLayers: PropTypes.array,\n  temporalExtentIndexes: PropTypes.array,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  highlightedVessels: PropTypes.object,\n  highlightedClickedVessel: PropTypes.object,\n  tracks: PropTypes.array,\n  queryHeatmapVessels: PropTypes.func,\n  exportNativeViewport: PropTypes.func,\n  leftWorldScaled: PropTypes.number,\n  rightWorldScaled: PropTypes.number,\n}\n\nActivityLayers.contextTypes = {\n  viewport: PropTypes.object,\n}\n\nexport default ActivityLayers\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport convert from '@globalfishingwatch/map-convert'\nimport { exportNativeViewport } from '../glmap/viewport.actions'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\nimport ActivityLayers from './ActivityLayers'\nimport { queryHeatmapVessels } from '../heatmap/heatmapTiles.actions'\nimport { MIN_FRAME_LENGTH_MS } from '../config'\n\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\n\nconst getHeatmapLayersAsArray = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    const a = Object.keys(heatmapLayers).map((id) => ({\n      ...heatmapLayers[id],\n    }))\n    // console.log(a)\n    return a\n  }\n)\n\nconst getTracks = (state) => state.map.tracks.data\n\nconst getTracksWithData = createSelector(\n  [getTracks],\n  (tracks) => {\n    const tracksWithData = tracks\n      .filter((t) => t.type !== 'geojson')\n      .filter((t) => t.data !== undefined)\n    return tracksWithData\n  }\n)\n\nconst getTemporalExtentIndexes = createSelector(\n  [getTemporalExtent],\n  (temporalExtent) => {\n    const startTimestamp = temporalExtent[0].getTime()\n    const endTimestamp = Math.max(\n      temporalExtent[1].getTime(),\n      temporalExtent[0].getTime() + MIN_FRAME_LENGTH_MS\n    )\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst getHighlightTemporalExtentIndexes = createSelector(\n  [getHighlightTemporalExtent],\n  (highlightTemporalExtent) => {\n    if (\n      highlightTemporalExtent === undefined ||\n      highlightTemporalExtent === null ||\n      !highlightTemporalExtent.length\n    ) {\n      return null\n    }\n    const startTimestamp = highlightTemporalExtent[0].getTime()\n    const endTimestamp = highlightTemporalExtent[1].getTime()\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst mapStateToProps = (state) => ({\n  highlightedVessels: state.map.heatmap.highlightedVessels,\n  highlightedClickedVessel: state.map.heatmap.highlightedClickedVessel,\n  viewport: state.map.viewport.viewport,\n  zoom: state.map.viewport.viewport.zoom,\n  heatmapLayers: getHeatmapLayersAsArray(state),\n  tracks: getTracksWithData(state),\n  leftWorldScaled: state.map.viewport.leftWorldScaled,\n  rightWorldScaled: state.map.viewport.rightWorldScaled,\n  temporalExtentIndexes: getTemporalExtentIndexes(state),\n  highlightTemporalExtentIndexes: getHighlightTemporalExtentIndexes(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  queryHeatmapVessels: (coords, temporalExtentIndexes) => {\n    dispatch(queryHeatmapVessels(coords, temporalExtentIndexes))\n  },\n  exportNativeViewport: (viewport) => {\n    dispatch(exportNativeViewport(viewport))\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActivityLayers)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport MapGL, { Popup, Marker } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { TILES_URL_NEEDING_AUTHENTICATION } from '../config'\nimport ActivityLayers from '../activity/ActivityLayers.container.js'\nimport styles from './map.css'\n\nconst PopupWrapper = (props) => {\n  const { latitude, longitude, children, closeButton, onClose } = props\n  return (\n    <Popup\n      latitude={latitude}\n      longitude={longitude}\n      closeButton={closeButton}\n      onClose={onClose}\n      anchor=\"bottom\"\n      offsetTop={-10}\n      tipSize={4}\n      closeOnClick={false}\n    >\n      {children}\n    </Popup>\n  )\n}\n\nPopupWrapper.propTypes = {\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  children: PropTypes.node.isRequired,\n  closeButton: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n}\n\nPopupWrapper.defaultProps = {\n  onClose: () => {},\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: true,\n    }\n    this._mapContainerRef = null\n  }\n\n  componentDidMount() {\n    if (this._mapContainerRef !== null) {\n      this.loadObserver()\n    }\n    if (this.glMap && this.props.setBounds !== undefined) {\n      const { _ne, _sw } = this.glMap.getBounds()\n      this.props.setBounds({\n        north: _ne.lat,\n        south: _sw.lat,\n        west: _sw.lng,\n        east: _ne.lng,\n      })\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._containerResizeObserver) {\n      this._containerResizeObserver.disconnect()\n    }\n  }\n\n  loadObserver = async () => {\n    if ('ResizeObserver' in window === false) {\n      const module = await import('resize-observer-polyfill')\n      window.ResizeObserver = module.ResizeObserver || module.default\n    }\n    this._containerResizeObserver = new ResizeObserver(this.handleResizeObserver)\n    this._containerResizeObserver.observe(this._mapContainerRef)\n  }\n\n  handleResizeObserver = (entries) => {\n    const { width, height } = entries[0].contentRect\n    const { viewport, setViewport } = this.props\n\n    if (width !== viewport.width || height !== viewport.height) {\n      setViewport({\n        ...viewport,\n        width,\n        height,\n      })\n    }\n  }\n\n  onViewportChange = (viewport, interactionState) => {\n    const propsViewport = this.props.viewport\n    if (\n      propsViewport.latitude !== viewport.latitude ||\n      propsViewport.longitude !== viewport.longitude ||\n      propsViewport.zoom !== viewport.zoom ||\n      propsViewport.bearing !== viewport.bearing ||\n      propsViewport.pitch !== viewport.pitch\n    ) {\n      this.props.setViewport(viewport, interactionState)\n    }\n  }\n\n  onMapInteraction = (event, type) => {\n    this.props.mapInteraction(\n      type,\n      event.lngLat[1],\n      event.lngLat[0],\n      event.features,\n      this.glGetSource\n    )\n  }\n\n  onHover = (event) => {\n    this.onMapInteraction(event, 'hover')\n  }\n\n  onClick = (event) => {\n    this.onMapInteraction(event, 'click')\n  }\n\n  getRef = (ref) => {\n    if (ref !== null) {\n      this.glMap = ref.getMap()\n      this.glGetSource = this.glMap.getSource.bind(this.glMap)\n    }\n  }\n\n  getCursor = ({ isDragging }) => {\n    const { cursor } = this.props\n    if (cursor === null) {\n      return isDragging ? 'grabbing' : 'grab'\n    }\n    return cursor\n  }\n\n  transformRequest = (url, resourceType) => {\n    const { token } = this.props\n    if (token !== null && resourceType === 'Tile' && url.match(TILES_URL_NEEDING_AUTHENTICATION)) {\n      return {\n        url: url,\n        headers: { Authorization: 'Bearer ' + token },\n      }\n    }\n  }\n\n  render() {\n    const {\n      viewport,\n      maxZoom,\n      minZoom,\n      transitionEnd,\n      mapStyle,\n      onClosePopup,\n      clickPopup,\n      hoverPopup,\n      hasHeatmapLayers,\n      markers,\n      interactiveLayerIds,\n    } = this.props\n\n    return (\n      <div\n        id=\"map\"\n        className={styles.map}\n        ref={(ref) => {\n          this._mapContainerRef = ref\n        }}\n        onMouseLeave={() => {\n          this.setState({ mouseOver: false })\n        }}\n        onMouseEnter={() => {\n          this.setState({ mouseOver: true })\n        }}\n      >\n        <MapGL\n          {...viewport}\n          ref={this.getRef}\n          transformRequest={this.transformRequest}\n          onTransitionEnd={transitionEnd}\n          onHover={this.onHover}\n          onClick={this.onClick}\n          getCursor={this.getCursor}\n          mapStyle={mapStyle}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          onViewportChange={this.onViewportChange}\n          interactiveLayerIds={interactiveLayerIds}\n          clickRadius={4}\n        >\n          {hasHeatmapLayers !== false && <ActivityLayers />}\n          {clickPopup !== undefined && clickPopup !== null && (\n            <PopupWrapper\n              latitude={clickPopup.latitude}\n              longitude={clickPopup.longitude}\n              closeButton\n              onClose={onClosePopup}\n            >\n              {clickPopup.content}\n            </PopupWrapper>\n          )}\n          {this.state.mouseOver === true && hoverPopup !== undefined && hoverPopup !== null && (\n            <PopupWrapper\n              latitude={hoverPopup.latitude}\n              longitude={hoverPopup.longitude}\n              closeButton={false}\n            >\n              {hoverPopup.content}\n            </PopupWrapper>\n          )}\n          {markers !== null &&\n            markers.length > 0 &&\n            markers.map((marker, i) => (\n              <Marker key={i} latitude={marker.latitude} longitude={marker.longitude}>\n                {marker.content}\n              </Marker>\n            ))}\n        </MapGL>\n        <div className={styles.googleLogo} />\n      </div>\n    )\n  }\n}\n\nMap.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.object.isRequired,\n  mapStyle: PropTypes.object.isRequired,\n  clickPopup: PropTypes.object,\n  hoverPopup: PropTypes.object,\n  maxZoom: PropTypes.number.isRequired,\n  minZoom: PropTypes.number.isRequired,\n  setViewport: PropTypes.func.isRequired,\n  setBounds: PropTypes.func,\n  mapInteraction: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  transitionEnd: PropTypes.func,\n  cursor: PropTypes.string,\n  hasHeatmapLayers: PropTypes.bool.isRequired,\n  markers: PropTypes.arrayOf(\n    PropTypes.shape({\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n      content: PropTypes.node,\n    })\n  ),\n  interactiveLayerIds: PropTypes.arrayOf(PropTypes.string),\n}\n\nMap.defaultProps = {\n  token: null,\n  clickPopup: null,\n  hoverPopup: null,\n  mapInteraction: () => {},\n  onClosePopup: () => {},\n  transitionEnd: () => {},\n  cursor: null,\n  markers: null,\n  interactiveLayerIds: null,\n  setBounds: undefined,\n}\n\nexport default Map\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { fromJS } from 'immutable'\nimport { TRACKS_LAYER_IN_FRONT_OF_GROUP } from '../config'\nimport { closePopup } from '../module/module.actions.js'\nimport { getTracksStyles } from '../tracks/tracks.selectors.js'\nimport { mapInteraction } from './interaction.actions.js'\nimport { setBounds, setViewport, transitionEnd } from './viewport.actions.js'\nimport Map from './Map'\n\nconst getStaticLayers = (state) => state.map.style.staticLayers\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\nconst getInternalCursor = (state) => state.map.interaction.cursor\nconst getModuleCursor = (state) => state.map.module.cursor\n\nconst hasHeatmapLayers = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    return Object.keys(heatmapLayers).length > 0\n  }\n)\nconst getInteractiveLayerIds = createSelector(\n  [getStaticLayers],\n  // Note: here we assume that layer IDs provided with module match the GL layers that should\n  // be interactive or not, ie typically the fill layer if a label layer is present\n  (staticLayers) => {\n    return staticLayers.reduce((acc, layer) => {\n      if (!layer.interactive || !layer.visible) return acc\n      // We also need to check nested layers interactivity when custom gl layers are provided\n      if (layer.gl !== undefined) {\n        layer.gl.layers.forEach((glLayer, index) => {\n          // layers.length === 1 is used to ensure when parent layer is marked as interactive we have to\n          // have at least one interactive sublayer, then checked eah one individually\n          if (\n            layer.gl.layers.length === 1 ||\n            (glLayer.metadata !== undefined && glLayer.metadata['gfw:interactive'] === true)\n          ) {\n            const glLayerId = glLayer.id || index > 0 ? `${layer.id}-${index}` : layer.id\n            acc.push(glLayerId)\n          }\n        })\n      } else {\n        acc.push(layer.id)\n      }\n      return acc\n    }, [])\n  }\n)\n\nconst getMapStyles = (state) => state.map.style.mapStyle\nconst getMapStyle = createSelector(\n  [getMapStyles, getTracksStyles],\n  (mapStyles, trackStyles) => {\n    if (!trackStyles) return mapStyles\n\n    const currentLayerGroups = mapStyles\n      .toJS()\n      .layers.filter((l) => l.metadata !== undefined)\n      .map((l) => l.metadata['mapbox:group'])\n    const trackLayersIndex = currentLayerGroups.lastIndexOf(TRACKS_LAYER_IN_FRONT_OF_GROUP) + 1\n\n    let finalMapStyles = mapStyles.mergeIn(['sources'], trackStyles.sources)\n    let mapStylesLayers = mapStyles.get('layers')\n    trackStyles.layers.forEach((trackLayer, i) => {\n      mapStylesLayers = mapStylesLayers.insert(trackLayersIndex + i, fromJS(trackLayer))\n    })\n    finalMapStyles = finalMapStyles.set('layers', mapStylesLayers)\n    return finalMapStyles\n  }\n)\n\nconst getCursor = createSelector(\n  [getInternalCursor, getModuleCursor],\n  (internalCursor, moduleCursor) => {\n    if (moduleCursor !== null) {\n      return moduleCursor\n    }\n    return internalCursor\n  }\n)\nconst mapStateToProps = (state, ownProps) => ({\n  viewport: state.map.viewport.viewport,\n  maxZoom: state.map.viewport.maxZoom,\n  minZoom: state.map.viewport.minZoom,\n  cursor: getCursor(state),\n  token: state.map.module.token,\n  mapStyle: getMapStyle(state),\n  hasHeatmapLayers: hasHeatmapLayers(state),\n  interactiveLayerIds: getInteractiveLayerIds(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setViewport: (viewport, interactionState) => {\n    dispatch(setViewport(viewport, interactionState))\n  },\n  setBounds: (bounds) => {\n    dispatch(setBounds(bounds))\n  },\n  mapInteraction: (type, lat, long, features, cluster, glGetSource) => {\n    dispatch(mapInteraction(type, lat, long, features, cluster, glGetSource))\n  },\n  transitionEnd: () => {\n    dispatch(transitionEnd())\n  },\n  onClosePopup: () => {\n    dispatch(closePopup())\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map)\n","import { fromJS } from 'immutable'\nimport uniq from 'lodash/uniq'\nimport GL_STYLE from './gl-styles/style.json'\nimport {\n  SET_MAP_STYLE,\n  MARK_CARTO_LAYERS_AS_INSTANCIATED,\n  INIT_MAP_STYLE,\n  SET_STATIC_LAYERS,\n  SET_BASEMAP_LAYERS,\n} from './style.actions'\n\nconst attributions = uniq(\n  Object.keys(GL_STYLE.sources)\n    .map((sourceKey) => GL_STYLE.sources[sourceKey].attribution)\n    .filter((source) => source !== undefined)\n)\n\nexport const setLayerStyleDefaults = (layer) => {\n  if (layer.layout === undefined) {\n    layer.layout = {}\n  }\n  if (layer.paint === undefined) {\n    layer.paint = {}\n  }\n  if (layer.metadata === undefined) {\n    layer.metadata = {}\n  }\n  // initialize time filter for time-filterable layers\n  if (layer.metadata['gfw:temporal'] === true) {\n    const temporalField =\n      layer.metadata['gfw:temporalField'] === undefined\n        ? 'timestamp'\n        : layer.metadata['gfw:temporalField']\n    layer.filter = ['all', ['>', temporalField, 0], ['<', temporalField, 999999999999]]\n  }\n\n  if (layer.metadata['mapbox:group'] === undefined) {\n    layer.metadata['mapbox:group'] = 'temporal'\n  }\n\n  // set all layers to not visible except layers explicitely marked as visible (default basemap)\n  if (layer.layout.visibility !== 'visible') {\n    layer.layout.visibility = 'none'\n  }\n  return layer\n}\n\nconst setStyleDefaults = (style) => {\n  style.layers.forEach((layer) => {\n    setLayerStyleDefaults(layer)\n  })\n  return style\n}\n\nconst initialState = {\n  mapStyle: fromJS(setStyleDefaults(GL_STYLE)),\n  cartoLayersInstanciated: [],\n  staticLayers: [],\n  basemapLayers: [],\n  attributions,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_MAP_STYLE: {\n      const newMapStyle = state.mapStyle.setIn(['glyphs'], action.payload.glyphsPath)\n      return { ...state, mapStyle: newMapStyle }\n    }\n    case SET_MAP_STYLE: {\n      return { ...state, mapStyle: action.payload }\n    }\n    case SET_STATIC_LAYERS: {\n      return { ...state, staticLayers: action.payload }\n    }\n    case SET_BASEMAP_LAYERS: {\n      return { ...state, basemapLayers: action.payload }\n    }\n    case MARK_CARTO_LAYERS_AS_INSTANCIATED: {\n      const cartoLayersInstanciated = [...state.cartoLayersInstanciated, ...action.payload]\n      return { ...state, cartoLayersInstanciated }\n    }\n    default:\n      return state\n  }\n}\n","// This utility looks at GeoJSON features and returns the predominant geometry type\n\nconst TYPES = [\n  { gl: 'line', geoJSON: ['LineString', 'MultiLineString'] },\n  { gl: 'fill', geoJSON: ['Polygon', 'MultiPolygon'] },\n  { gl: 'circle', geoJSON: ['Point', 'MultiPoint'] },\n]\n\nexport default (geoJSON) => {\n  // collect all geoJSON geom types\n  const allGeoJSONTypes = geoJSON.features.map((feature) => {\n    const geom = feature.geometry\n    if (geom === undefined) {\n      return null\n    }\n    return geom.type\n  })\n\n  // collect number of geometries by GL geom types\n  const numByGLType = TYPES.map((type) => {\n    let num = 0\n    allGeoJSONTypes.forEach((geoJSONType) => {\n      if (type.geoJSON.indexOf(geoJSONType) > -1) {\n        num++\n      }\n    })\n    return { gl: type.gl, num }\n  })\n\n  // get feature types with the higher count\n  let glType = 'fill'\n  let glTypeMax = 0\n  numByGLType.forEach((t) => {\n    if (t.num > glTypeMax) {\n      glType = t.gl\n      glTypeMax = t.num\n    }\n  })\n\n  return glType\n}\n","import { fromJS } from 'immutable'\nimport convert from '@globalfishingwatch/map-convert'\nimport uniq from 'lodash/uniq'\nimport throttle from 'lodash/throttle'\nimport { hexToRgb } from '../utils/map-colors'\nimport { STATIC_LAYERS_CARTO_ENDPOINT, STATIC_LAYERS_CARTO_TILES_ENDPOINT } from '../config'\nimport { CUSTOM_LAYERS_SUBTYPES, GL_TRANSPARENT } from '../constants'\nimport GL_STYLE from './gl-styles/style.json'\nimport { setLayerStyleDefaults } from './style.reducer.js'\nimport getMainGeomType from '../utils/getMainGeomType'\n\nexport const INIT_MAP_STYLE = 'INIT_MAP_STYLE'\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE'\nexport const MARK_CARTO_LAYERS_AS_INSTANCIATED = 'MARK_CARTO_LAYERS_AS_INSTANCIATED'\nexport const SET_STATIC_LAYERS = 'SET_STATIC_LAYERS'\nexport const SET_BASEMAP_LAYERS = 'SET_BASEMAP_LAYERS'\n\nconst setDefaultVectorTiles = (currentSource, refLayerUrl) => {\n  if (currentSource.type !== 'vector') {\n    return currentSource\n  }\n  const tiles = currentSource.tiles\n  const refLayerUrls = refLayerUrl === undefined ? [] : [refLayerUrl]\n\n  const newTiles =\n    tiles !== undefined && tiles.length > 0 ? uniq([...refLayerUrls, ...tiles]) : refLayerUrls\n  return {\n    ...currentSource,\n    tiles: newTiles,\n  }\n}\n\nexport const initStyle = ({ glyphsPath }) => ({\n  type: INIT_MAP_STYLE,\n  payload: {\n    glyphsPath,\n  },\n})\n\nconst setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n})\n\nconst setStyleTemporalExtent = (dispatch, getState, temporalExtent, applyToThrottled = false) => {\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n\n  let start = Math.round(temporalExtent[0].getTime() / 1000)\n  let end = Math.round(temporalExtent[1].getTime() / 1000)\n\n  // TEMPORARY, remove later - temporal layers points should have a timestamp, this is legacy\n  // logic for legacy encounters layer that only have a 'timeIndex'\n  const startIndex = convert.getOffsetedTimeAtPrecision(temporalExtent[0].getTime())\n  const endIndex = convert.getOffsetedTimeAtPrecision(temporalExtent[1].getTime())\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    if (glLayer.metadata === undefined || glLayer.metadata['gfw:temporal'] !== true) {\n      continue\n    }\n\n    if (\n      (applyToThrottled === true && glLayer.metadata['gfw:temporal:throttled'] !== true) ||\n      (applyToThrottled === false && glLayer.metadata['gfw:temporal:throttled'] === true)\n    ) {\n      continue\n    }\n\n    // if layer is temporal, a filter must always be preset on the style.json object\n    // because each layer can have a different time field to be filtered\n    const currentFilter = style.getIn(['layers', i, 'filter']).toJS()\n    if (currentFilter === null) {\n      throw new Error('filter must be preset on style.json for temporal layer: ', glLayer.id)\n    }\n\n    // TEMPORARY, remove later - temporal layers points should have a timestamp, this is legacy\n    // logic for legacy encounters layer that only have a 'timeIndex'\n    const isLegacy = glLayer.metadata && glLayer.metadata['gfw:temporalField'] === 'timeIndex'\n    currentFilter[1][2] = isLegacy ? startIndex : start\n    currentFilter[2][2] = isLegacy ? endIndex : end\n    style = style.setIn(['layers', i, 'filter'], fromJS(currentFilter))\n  }\n  dispatch(setMapStyle(style))\n}\n\nconst applyTemporalExtentThrottled = throttle((dispatch, getState, temporalExtent) => {\n  setStyleTemporalExtent(dispatch, getState, temporalExtent, true)\n}, 400)\n\nexport const applyTemporalExtent = (temporalExtent) => (dispatch, getState) => {\n  setStyleTemporalExtent(dispatch, getState, temporalExtent)\n  applyTemporalExtentThrottled(dispatch, getState, temporalExtent)\n}\n\nconst applyLayerExpressions = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  let newStyle = style\n  const currentStyle = style.toJS()\n  const glType = currentGlLayer.type\n  const defaultStyles = currentStyle.metadata['gfw:styles']\n  const metadata = currentGlLayer.metadata\n  ;['selected', 'highlighted'].forEach((styleType) => {\n    // get selectedFeatures or highlightedFeatures\n    const features = refLayer[`${styleType}Features`]\n    const refLayerStyle = features && features.style ? features.style[glType] : {}\n    const hasFeatures = features !== null && features !== undefined && features.values.length > 0\n    const applyStyleToAllFeatures = refLayer[styleType]\n\n    const defaultStyle = defaultStyles[styleType][glType] || {}\n    const layerStyle =\n      (metadata && metadata['gfw:styles'] && metadata['gfw:styles'][styleType]) || {}\n    const allPaintProperties = { ...defaultStyle, ...layerStyle, ...refLayerStyle }\n\n    if (Object.keys(allPaintProperties).length) {\n      // go through each applicable gl paint property\n      Object.keys(allPaintProperties).forEach((glPaintProperty) => {\n        const selectedValue = allPaintProperties[glPaintProperty][0]\n        const fallbackValue = allPaintProperties[glPaintProperty][1]\n        const paintOrLayout = ['icon-size', 'icon-image'].includes(glPaintProperty)\n          ? 'layout'\n          : 'paint'\n        let glPaintFinalValue\n        if (\n          hasFeatures === false &&\n          applyStyleToAllFeatures !== true &&\n          applyStyleToAllFeatures !== false\n        ) {\n          // style reset when no features filter is declared and neither is applyAll\n          const originalLayerStyle = GL_STYLE.layers.find((l) => l.id === currentGlLayer.id)\n\n          if (originalLayerStyle !== undefined) {\n            // for reset: do not repaint with default style when layer as a custom main color property\n            if (\n              currentGlLayer.metadata &&\n              currentGlLayer.metadata['gfw:mainColorPaintProperty'] === glPaintProperty\n            ) {\n              glPaintFinalValue = null\n            } else {\n              glPaintFinalValue = originalLayerStyle[paintOrLayout][glPaintProperty]\n            }\n          } else {\n            // this will happen when no style exist in the original definition (ie custom layers)\n            // in this case set glPaintFinalValue to null and we'll just skip applying\n            // any selected/highlighted style for this layer\n            glPaintFinalValue = null\n          }\n        } else if (applyStyleToAllFeatures === true || applyStyleToAllFeatures === false) {\n          glPaintFinalValue = applyStyleToAllFeatures === true ? selectedValue : fallbackValue\n        } else {\n          let layerColorRgbString = ''\n          if (refLayer.color !== null && refLayer.color !== undefined) {\n            const layerColorRgb = hexToRgb(refLayer.color)\n            layerColorRgbString = `${layerColorRgb.r},${layerColorRgb.g},${layerColorRgb.b}`\n          }\n          glPaintFinalValue = [\n            'match',\n            ['get', features.field],\n            features.values,\n            typeof selectedValue !== 'string'\n              ? selectedValue\n              : selectedValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n            typeof fallbackValue !== 'string'\n              ? fallbackValue\n              : fallbackValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n          ]\n        }\n\n        if (glPaintFinalValue !== undefined && glPaintFinalValue !== null) {\n          newStyle = newStyle.setIn(\n            ['layers', glLayerIndex, paintOrLayout, glPaintProperty],\n            glPaintFinalValue\n          )\n        }\n      })\n    }\n  })\n  return newStyle\n}\n\nconst toggleLayerVisibility = (style, refLayer, glLayerIndex) => {\n  const visibility = refLayer.visible === true ? 'visible' : 'none'\n  return style.setIn(['layers', glLayerIndex, 'layout', 'visibility'], visibility)\n}\n\nconst updateGLLayer = (style, glLayerId, refLayer) => {\n  const currentStyle = style.toJS()\n  const currentStyleLayers = currentStyle.layers\n  let newStyle = style\n\n  const glLayerIndex = currentStyleLayers.findIndex((l) => l.id === glLayerId)\n  const glLayer = currentStyleLayers.find((l) => l.id === glLayerId)\n\n  // visibility\n  newStyle = toggleLayerVisibility(newStyle, refLayer, glLayerIndex)\n\n  if (refLayer.isBasemap === true) {\n    return newStyle\n  }\n\n  const refLayerOpacity = refLayer.opacity === undefined ? 1 : refLayer.opacity\n\n  // color/opacity\n  switch (glLayer.type) {\n    case 'fill': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-outline-color'], refLayer.color)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-color'], GL_TRANSPARENT)\n      break\n    }\n    case 'line': {\n      const color = refLayer.color || (glLayer.paint && glLayer.paint['line-color'])\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'line-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'line-color'], color)\n      break\n    }\n    case 'symbol': {\n      if (glLayer.metadata && glLayer.metadata['gfw:isLabel'] === true) {\n        const parentLayerIsVisible =\n          newStyle.getIn(['layers', glLayerIndex, 'layout', 'visibility']) === 'visible'\n        const labelsVisibility =\n          parentLayerIsVisible && refLayer.showLabels === true ? 'visible' : 'none'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'layout', 'visibility'],\n          labelsVisibility\n        )\n        if (refLayer.showLabels !== true) {\n          break\n        }\n      }\n      newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-color'], refLayer.color)\n      }\n      break\n    }\n    // Event layers and custom layers with point geom types\n    case 'circle': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-stroke-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        const colorPaintProperty =\n          glLayer && glLayer.metadata && glLayer.metadata['gfw:mainColorPaintProperty']\n            ? glLayer.metadata['gfw:mainColorPaintProperty']\n            : 'circle-color'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'paint', colorPaintProperty],\n          refLayer.color\n        )\n      }\n      break\n    }\n    case 'raster': {\n      newStyle = newStyle.setIn(\n        ['layers', glLayerIndex, 'paint', 'raster-opacity'],\n        refLayerOpacity\n      )\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  newStyle = applyLayerExpressions(newStyle, refLayer, glLayer, glLayerIndex)\n\n  return newStyle\n}\n\nconst addCustomGLLayer = (subtype, layerId, url, data) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n  const currentStyle = style.toJS()\n\n  // add source if it doesn't exist yet\n  if (currentStyle.sources[layerId] === undefined) {\n    const source = { type: subtype }\n    if (subtype === CUSTOM_LAYERS_SUBTYPES.geojson) {\n      source.data = data\n    } else if (subtype === CUSTOM_LAYERS_SUBTYPES.raster) {\n      source.tiles = [url]\n      source.tileSize = 256\n    }\n    style = style.setIn(['sources', layerId], fromJS(source))\n  }\n\n  if (currentStyle.layers.find((glLayer) => glLayer.id === layerId) === undefined) {\n    const glType = subtype === CUSTOM_LAYERS_SUBTYPES.geojson ? getMainGeomType(data) : subtype\n    const glLayer = fromJS({\n      id: layerId,\n      source: layerId,\n      type: glType,\n      layout: {},\n      paint: {},\n    })\n    const layerIndex =\n      subtype === CUSTOM_LAYERS_SUBTYPES.raster\n        ? // if raster, put at index of last raster layer except labels\n          currentStyle.layers.length -\n          1 -\n          currentStyle.layers\n            .filter((l) => l.id !== 'labels')\n            .reverse()\n            .findIndex((l) => l.type === 'raster')\n        : currentStyle.layers.length - 1\n    style = style.set('layers', style.get('layers').splice(layerIndex, 0, glLayer))\n  }\n\n  dispatch(setMapStyle(style))\n}\n\nconst updateWorkspaceGLLayers = (workspaceGLLayers) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n\n  workspaceGLLayers.forEach((workspaceGLLayer) => {\n    const { id, gl } = workspaceGLLayer\n    const finalSource = setDefaultVectorTiles(gl.source, workspaceGLLayer.url)\n    style = style.setIn(['sources', id], fromJS(finalSource))\n\n    const existingLayerIds = style\n      .get('layers')\n      .toJS()\n      .map((l) => l.id)\n    const layersToAdd = gl.layers.filter((layer, index) => {\n      const layerId = layer.id || index > 0 ? `${id}-${index}` : id\n      return !existingLayerIds.includes(layerId)\n    })\n    layersToAdd.forEach((layerToAdd, index) => {\n      // doesn't add a sufix in the first elements but it will for the following ones\n      let layerToAddId = layerToAdd.id || index > 0 ? `${id}-${index}` : id\n      const defaultGlLayer = setLayerStyleDefaults(layerToAdd)\n\n      const glLayer = {\n        ...defaultGlLayer,\n        id: layerToAddId,\n        source: id,\n      }\n\n      // set source-layer - defaults to source id\n      if (gl.source.type === 'vector') {\n        const sourceLayer =\n          layerToAdd['source-layer'] === undefined ? id : layerToAdd['source-layer']\n        glLayer['source-layer'] = sourceLayer\n      }\n\n      // find correct z-index\n      const existingLayers = style.get('layers')\n      const newLayerGroup = glLayer.metadata['mapbox:group']\n      const newLayerIndex = existingLayers.findLastIndex((l) => {\n        return newLayerGroup === l.toJS().metadata['mapbox:group']\n      })\n      style = style.set('layers', existingLayers.splice(newLayerIndex, 0, fromJS(glLayer)))\n    })\n  })\n\n  dispatch(setMapStyle(style))\n  dispatch(applyTemporalExtent(state.map.module.temporalExtent))\n}\n\nconst getCartoLayerInstanciatePromise = ({ sourceId, sourceCartoSQL }) => {\n  const mapConfig = { layers: [{ id: sourceId, options: { sql: sourceCartoSQL } }] }\n  const mapConfigURL = encodeURIComponent(JSON.stringify(mapConfig))\n  const cartoAnonymousMapUrl = STATIC_LAYERS_CARTO_ENDPOINT.replace('$MAPCONFIG', mapConfigURL)\n\n  return new Promise((resolve) => {\n    fetch(cartoAnonymousMapUrl)\n      .then((res) => {\n        if (res.status >= 400) {\n          console.warn(`loading of layer failed ${sourceId}`)\n          Promise.reject()\n          return null\n        }\n        return res.json()\n      })\n      .then((data) => {\n        resolve({\n          layergroupid: data.layergroupid,\n          sourceId,\n        })\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  })\n}\n\nconst instanciateCartoLayers = (layers) => (dispatch, getState) => {\n  dispatch({\n    type: MARK_CARTO_LAYERS_AS_INSTANCIATED,\n    payload: layers.map((layer) => layer.sourceId),\n  })\n  const cartoLayersPromises = layers.map((layer) => getCartoLayerInstanciatePromise(layer))\n  const cartoLayersPromisesPromise = Promise.all(cartoLayersPromises.map((p) => p.catch((e) => e)))\n  cartoLayersPromisesPromise\n    .then((instanciatedCartoLayers) => {\n      let style = getState().map.style.mapStyle\n      const currentStyle = style.toJS()\n      instanciatedCartoLayers.forEach((cartoLayer) => {\n        const tilesURL = STATIC_LAYERS_CARTO_TILES_ENDPOINT.replace(\n          '$LAYERGROUPID',\n          cartoLayer.layergroupid\n        )\n\n        // replace gl source with a new source that use tiles provided by Carto anonymous maps API\n        const newSourceId = `${cartoLayer.sourceId}-instanciated`\n        style = style.setIn(\n          ['sources', newSourceId],\n          fromJS({\n            type: 'vector',\n            tiles: [tilesURL],\n          })\n        )\n\n        style = style.deleteIn(['sources', cartoLayer.sourceId])\n\n        // change source in all layers that are using it (generally polygon + labels)\n        currentStyle.layers.forEach((glLayer, glLayerIndex) => {\n          if (glLayer.source === cartoLayer.sourceId) {\n            style = style.setIn(['layers', glLayerIndex, 'source'], newSourceId)\n            style = style.setIn(['layers', glLayerIndex, 'metadata', 'gfw:id'], cartoLayer.sourceId)\n            const refLayer = layers.find((l) => l.refLayer.id === cartoLayer.sourceId).refLayer\n            style = updateGLLayer(style, glLayer.id, refLayer)\n          }\n        })\n      })\n\n      dispatch(setMapStyle(style))\n    })\n    .catch((err) => {\n      console.warn(err)\n    })\n}\n\nexport const commitStyleUpdates = (staticLayers, basemapLayers) => (dispatch, getState) => {\n  // Store a copy of static and basemap layers. This is not used directly by\n  // the Map component which only needs a prepared style object\n  dispatch({\n    type: SET_STATIC_LAYERS,\n    payload: staticLayers,\n  })\n  dispatch({\n    type: SET_BASEMAP_LAYERS,\n    payload: basemapLayers,\n  })\n\n  const layers = [...staticLayers, ...basemapLayers.map((bl) => ({ ...bl, isBasemap: true }))]\n\n  const currentGLSources = getState().map.style.mapStyle.toJS().sources\n\n  // collect layers declared in workspace but not in original gl style\n  const workspaceGLLayers = layers.filter((layer) => layer.gl !== undefined)\n\n  if (workspaceGLLayers.length) {\n    // Adds the gl layers again in case the source is a dynamic geojson source\n    dispatch(updateWorkspaceGLLayers(workspaceGLLayers))\n  }\n\n  // instanciate custom layers if needed\n  const customLayers = layers.filter(\n    (layer) => layer.isCustom === true && currentGLSources[layer.id] === undefined\n  )\n  if (customLayers.length) {\n    customLayers.forEach((layer) => {\n      dispatch(addCustomGLLayer(layer.subtype, layer.id, layer.url, layer.data))\n    })\n  }\n\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n  const glSources = currentStyle.sources\n\n  const cartoLayersToInstanciate = []\n\n  // update source when needed\n  staticLayers.forEach((refLayer) => {\n    const sourceId = refLayer.id\n    if (currentGLSources[sourceId] !== undefined && refLayer.visible === true) {\n      if (refLayer.data !== undefined) {\n        style = style.setIn(['sources', sourceId, 'data'], fromJS(refLayer.data))\n      }\n      if (refLayer.url !== undefined) {\n        const newSource = setDefaultVectorTiles(currentGLSources[sourceId], refLayer.url)\n        style = style.setIn(['sources', sourceId], fromJS(newSource))\n      }\n    }\n  })\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    const sourceId = glLayer.source\n    const glSource = glSources[sourceId]\n    const layerId = (glLayer.metadata !== undefined && glLayer.metadata['gfw:id']) || sourceId\n\n    const refLayer = layers.find((l) => l.id === layerId)\n\n    if (refLayer === undefined) {\n      if (glLayer.type !== 'background') {\n        // console.warn('gl layer does not exists in workspace', glLayer);\n      }\n      continue\n    }\n\n    // check if layer is served from Carto, which means we need to instanciate it first\n    // TODO BUG: check if layer is not instanciatING too\n    const sourceCartoSQL = glSource.metadata !== undefined && glSource.metadata['gfw:carto-sql']\n    if (sourceCartoSQL !== false && sourceCartoSQL !== undefined) {\n      // only if layer is visible and has not been instanciated yet\n      const cartoLayerInstanciated = state.cartoLayersInstanciated.indexOf(sourceId) > -1\n      if (\n        refLayer.visible === true &&\n        !cartoLayerInstanciated &&\n        !cartoLayersToInstanciate.find((l) => l.sourceId === sourceId)\n      ) {\n        cartoLayersToInstanciate.push({ sourceId, sourceCartoSQL, refLayer })\n      }\n      continue\n    }\n\n    style = updateGLLayer(style, glLayer.id, refLayer)\n  }\n\n  if (cartoLayersToInstanciate.length) {\n    dispatch(instanciateCartoLayers(cartoLayersToInstanciate))\n  }\n\n  dispatch(setMapStyle(style))\n}\n","import FlyToInterpolator from 'react-map-gl/dist/esm/utils/transition/viewport-fly-to-interpolator'\nimport { easeCubic } from 'd3-ease'\nimport { MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL } from '../config'\nimport { TRANSITION_TYPE } from '../constants'\nimport {\n  SET_BOUNDS,\n  SET_VIEWPORT,\n  UPDATE_VIEWPORT,\n  SET_ZOOM_INCREMENT,\n  SET_MOUSE_LAT_LONG,\n  TRANSITION_END,\n  SET_NATIVE_VIEWPORT,\n} from './viewport.actions'\n\nexport const TRANSITION_DURATION = 500\n\nconst DEFAULT_TRANSITION = {\n  transitionDuration: TRANSITION_DURATION,\n  transitionInterpolator: new FlyToInterpolator(),\n  transitionEasing: easeCubic,\n}\n\nconst initialState = {\n  viewport: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    width: 1000,\n    height: 800,\n    bounds: {},\n  },\n  maxZoom: MAX_ZOOM_LEVEL,\n  minZoom: MIN_ZOOM_LEVEL,\n  prevZoom: 3,\n  currentTransition: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIEWPORT: {\n      return {\n        ...state,\n        viewport: action.payload,\n        canZoomIn: action.payload.zoom < state.maxZoom,\n        canZoomOut: action.payload.zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n      }\n    }\n\n    case SET_BOUNDS: {\n      return {\n        ...state,\n        bounds: action.payload,\n      }\n    }\n\n    case UPDATE_VIEWPORT: {\n      const viewport = { ...state.viewport, ...action.payload }\n      return {\n        ...state,\n        viewport,\n        prevZoom: viewport.zoom,\n      }\n    }\n\n    case SET_ZOOM_INCREMENT: {\n      const currentZoom = state.viewport.zoom\n      const zoom = Math.min(\n        state.maxZoom,\n        action.payload.zoom || currentZoom + action.payload.increment\n      )\n      const viewport = {\n        ...state.viewport,\n        ...DEFAULT_TRANSITION,\n        zoom,\n        latitude:\n          action.payload.latitude === null ? state.viewport.latitude : action.payload.latitude,\n        longitude:\n          action.payload.longitude === null ? state.viewport.longitude : action.payload.longitude,\n      }\n      return {\n        ...state,\n        viewport,\n        canZoomIn: zoom < state.maxZoom,\n        canZoomOut: zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n        currentTransition: TRANSITION_TYPE.ZOOM,\n      }\n    }\n\n    case SET_MOUSE_LAT_LONG: {\n      return { ...state, mouseLatLong: action.payload }\n    }\n\n    case TRANSITION_END: {\n      return { ...state, currentTransition: null }\n    }\n\n    case SET_NATIVE_VIEWPORT: {\n      return { ...state, ...action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n","import { compose, createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { TRANSITION_DURATION } from '../glmap/viewport.reducer'\nimport { fitToBounds as fitToBoundsAction, transitionEnd } from '../glmap/viewport.actions'\n\nlet composeEnhancers = compose\nif (\n  process.env.NODE_ENV === 'development' &&\n  (process.env.MAP_REDUX_REMOTE_DEBUG === 'true' ||\n    process.env.REACT_APP_MAP_REDUX_REMOTE_DEBUG === 'true')\n) {\n  const composeWithDevTools = require('remote-redux-devtools').composeWithDevTools\n  composeEnhancers = composeWithDevTools({\n    name: 'Map module',\n    realtime: true,\n    hostname: 'localhost',\n    port: 8000,\n    maxAge: 30,\n    stateSanitizer: (state) => ({ ...state, map: { ...state.map, heatmap: 'NOT_SERIALIZED' } }),\n  })\n}\n\nconst store = createStore(() => {}, {}, composeEnhancers(applyMiddleware(thunk)))\n\nexport const targetMapVessel = (id) => {\n  const track = store.getState().map.tracks.data.find((t) => t.id === id.toString())\n  store.dispatch(fitToBoundsAction(track.geoBounds))\n\n  return track.timelineBounds\n}\nexport const fitToBounds = (bounds) => {\n  store.dispatch(fitToBoundsAction(bounds))\n  setTimeout(() => {\n    // needed as the transition end is not being called on first fitToBounds trigger\n    if (store.getState().map.viewport.currentTransition !== null) {\n      store.dispatch(transitionEnd())\n    }\n  }, TRANSITION_DURATION + 1)\n}\n\nexport default store\n","import tbbox from '@turf/bbox'\nimport { targetMapVessel } from '../store'\n\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  addTracksPointsRenderingData,\n  getTracksPlaybackData,\n} from '../utils/heatmapTileData'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_TRACK = 'ADD_TRACK'\nexport const UPDATE_TRACK = 'UPDATE_TRACK'\nexport const REMOVE_TRACK = 'REMOVE_TRACK'\n\nconst getTrackDataParsed = (geojson) => {\n  const time = { start: Infinity, end: 0 }\n  if (geojson && geojson.features) {\n    geojson.features.forEach((feature) => {\n      const hasTimes =\n        feature.properties &&\n        feature.properties.coordinateProperties &&\n        feature.properties.coordinateProperties.times &&\n        feature.properties.coordinateProperties.times.length > 0\n      if (hasTimes) {\n        feature.properties.coordinateProperties.times.forEach((datetime) => {\n          if (datetime < time.start) {\n            time.start = datetime\n          } else if (datetime > time.end) {\n            time.end = datetime\n          }\n        })\n      }\n    })\n  }\n  return {\n    geojson,\n    timelineBounds: [time.start, time.end],\n  }\n}\n\nconst getTrackBounds = (geojson) => {\n  const bounds = tbbox(geojson)\n  return {\n    minLat: bounds[3],\n    minLng: bounds[0],\n    maxLat: bounds[1],\n    maxLng: bounds[2],\n  }\n}\n\n// Deprecated tracks format parsing\nconst getOldTrackBoundsFormat = (data, addOffset = false) => {\n  const time = {\n    start: Infinity,\n    end: 0,\n  }\n  const geo = {\n    minLat: Infinity,\n    maxLat: -Infinity,\n    minLng: Infinity,\n    maxLng: -Infinity,\n  }\n  for (let i = 0, length = data.datetime.length; i < length; i++) {\n    const datetime = data.datetime[i]\n    if (datetime < time.start) {\n      time.start = datetime\n    } else if (datetime > time.end) {\n      time.end = datetime\n    }\n\n    const lat = data.latitude[i]\n    if (lat < geo.minLat) {\n      geo.minLat = lat\n    } else if (lat > geo.maxLat) {\n      geo.maxLat = lat\n    }\n\n    let lng = data.longitude[i]\n    if (addOffset === true) {\n      if (lng < 0) {\n        lng += 360\n      }\n    }\n    if (lng < geo.minLng) {\n      geo.minLng = lng\n    } else if (lng > geo.maxLng) {\n      geo.maxLng = lng\n    }\n  }\n\n  // track crosses the antimeridian\n  if (geo.maxLng - geo.minLng > 350 && addOffset === false) {\n    return getOldTrackBoundsFormat(data, true)\n  }\n\n  return {\n    time: [time.start, time.end],\n    geo,\n  }\n}\n\nfunction loadTrack(track) {\n  return (dispatch, getState) => {\n    const { id, url, type, fitBoundsOnLoad, layerTemporalExtents, color, data } = track\n    const state = getState()\n    if (state.map.tracks.data.find((t) => t.id === id)) {\n      return\n    }\n\n    const payload = {\n      id,\n      url,\n      type,\n      color,\n      fitBoundsOnLoad,\n    }\n    const trackHasData = track.data !== undefined && track.data !== null\n    const trackHasUrl = url !== undefined && url !== null && url !== ''\n    if (trackHasData) {\n      payload.data = data\n      payload.geoBounds = getTrackBounds(data)\n    }\n    dispatch({ type: ADD_TRACK, payload })\n\n    if (trackHasData || !trackHasUrl) {\n      return\n    }\n\n    const loaderID = startLoader(dispatch, state)\n    if (type !== 'geojson') {\n      // Deprecated tracks format logic to be deleted some day\n      const token = state.map.module.token\n\n      const promises = getTilePromises(url, token, layerTemporalExtents)\n\n      Promise.all(promises.map((p) => p.catch((e) => e))).then((rawTileData) => {\n        const cleanData = getCleanVectorArrays(rawTileData)\n\n        if (!cleanData.length) {\n          return\n        }\n        const rawTrackData = groupData(cleanData, [\n          'latitude',\n          'longitude',\n          'datetime',\n          'series',\n          'weight',\n          'sigma',\n        ])\n\n        const vectorArray = addTracksPointsRenderingData(rawTrackData)\n        const bounds = getOldTrackBoundsFormat(rawTrackData)\n\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id,\n            data: getTracksPlaybackData(vectorArray),\n            geoBounds: bounds.geo,\n            timelineBounds: bounds.time,\n          },\n        })\n        dispatch(completeLoader(loaderID))\n      })\n    } else {\n      fetch(url)\n        .then((res) => {\n          if (res.status >= 400) throw new Error(res.statusText)\n          return res.json()\n        })\n        .then((data) => {\n          const { geojson, timelineBounds } = getTrackDataParsed(data)\n          const geoBounds = getTrackBounds(data)\n          dispatch({\n            type: UPDATE_TRACK,\n            payload: {\n              id,\n              data: geojson,\n              geoBounds,\n              timelineBounds,\n            },\n          })\n          if (fitBoundsOnLoad) {\n            targetMapVessel(id)\n          }\n        })\n        .catch((err) => console.warn(err))\n        .finally(() => dispatch(completeLoader(loaderID)))\n    }\n  }\n}\n\nconst removeTrack = (trackId) => ({\n  type: REMOVE_TRACK,\n  payload: {\n    trackId,\n  },\n})\n\nexport const updateTracks = (newTracks = []) => (dispatch, getState) => {\n  const prevTracks = getState().map.tracks.data\n  // add and update layers\n  if (newTracks) {\n    newTracks.forEach((newTrack) => {\n      const trackId = newTrack.id\n      const prevTrack = prevTracks.find((t) => t.id === trackId)\n      if (prevTrack === undefined) {\n        dispatch(loadTrack(newTrack))\n      } else if (prevTrack.color !== newTrack.color) {\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id: newTrack.id,\n            color: newTrack.color,\n          },\n        })\n      }\n    })\n  }\n\n  // clean up unused tracks\n  prevTracks.forEach((prevTrack) => {\n    if (!newTracks || !newTracks.find((t) => t.id === prevTrack.id)) {\n      dispatch(removeTrack(prevTrack.id))\n    }\n  })\n}\n","import PropTypes from 'prop-types'\n\nconst withReducerPropTypes = (name, propTypesSchema) => (reducer) => {\n  if (process.env.NODE_ENV === 'development') {\n    return (state, action) => {\n      const result = reducer(state, action)\n      PropTypes.checkPropTypes(propTypesSchema, result, 'reducer', name)\n\n      return result\n    }\n  }\n  return reducer\n}\n\nexport default withReducerPropTypes\n","import PropTypes from 'prop-types'\nimport withReducerTypes from '../utils/withReducerTypes'\nimport {\n  INIT_MODULE,\n  SET_TEMPORAL_EXTENT,\n  SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  START_LOADER,\n  COMPLETE_LOADER,\n  SET_MODULE_CURSOR,\n} from './module.actions'\n\nconst initialState = {\n  loaders: null,\n  token: undefined,\n  temporalExtent: [new Date(1970), new Date()],\n  highlightTemporalExtent: null,\n  cursor: null,\n  onViewportChange: undefined,\n  onHover: undefined,\n  onClick: undefined,\n  onLoadStart: undefined,\n  onLoadComplete: undefined,\n  onClosePopup: undefined,\n  onAttributionsChange: undefined,\n}\n\nconst moduleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_MODULE: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    case SET_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        temporalExtent: action.payload,\n      }\n    }\n\n    case SET_HIGHLIGHT_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        highlightTemporalExtent: action.payload,\n      }\n    }\n\n    case START_LOADER: {\n      const loaders = state.loaders !== null ? [...state.loaders] : []\n      loaders.push(action.payload)\n      return { ...state, loaders }\n    }\n\n    case COMPLETE_LOADER: {\n      const loaders = [...state.loaders]\n      const loaderIndex = loaders.findIndex((l) => l === action.payload)\n      loaders.splice(loaderIndex, 1)\n      return { ...state, loaders }\n    }\n\n    case SET_MODULE_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst moduleTypes = {\n  loaders: PropTypes.arrayOf(PropTypes.number),\n  token: PropTypes.string,\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  onViewportChange: PropTypes.func,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n}\n\nexport default withReducerTypes('module', moduleTypes)(moduleReducer)\n","import PropTypes from 'prop-types'\nimport { trackTypes } from '../proptypes/tracks'\nimport withReducerTypes from '../utils/withReducerTypes'\n\nimport { ADD_TRACK, UPDATE_TRACK, REMOVE_TRACK } from './tracks.actions'\n\nconst initialState = {\n  data: [],\n}\n\nconst tracksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TRACK: {\n      const data = [...state.data, action.payload]\n      return { ...state, data }\n    }\n\n    case UPDATE_TRACK: {\n      const trackData = action.payload\n      const data = state.data.map((track) => {\n        if (track.id !== trackData.id) return track\n        return {\n          ...track,\n          ...trackData,\n        }\n      })\n      return { ...state, data }\n    }\n\n    case REMOVE_TRACK: {\n      const removedTrackId = action.payload.trackId\n      const data = state.data.filter((track) => track.id !== removedTrackId)\n      return { ...state, data }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst tracksTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      ...trackTypes,\n      data: PropTypes.object,\n      timelineBounds: PropTypes.array,\n      geoBounds: PropTypes.exact({\n        minLat: PropTypes.number,\n        minLng: PropTypes.number,\n        maxLat: PropTypes.number,\n        maxLng: PropTypes.number,\n      }),\n    })\n  ),\n}\n\nexport default withReducerTypes('tracks', tracksTypes)(tracksReducer)\n","import difference from 'lodash/difference'\nimport {\n  INIT_HEATMAP_LAYERS,\n  UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n  ADD_HEATMAP_LAYER,\n  UPDATE_HEATMAP_LAYER_STYLE,\n  REMOVE_HEATMAP_LAYER,\n  ADD_REFERENCE_TILE,\n  UPDATE_HEATMAP_TILE,\n  RELEASE_HEATMAP_TILES,\n  HIGHLIGHT_VESSELS,\n  UPDATE_LOADED_TILES,\n  HIGHLIGHT_CLICKED_VESSEL,\n  CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n} from './heatmap.actions'\n\nconst initialState = {\n  // a dict of heatmap layers (key is layer id)\n  // each containing data, url, tiles, visibleTemporalExtentsIndices\n  heatmapLayers: {},\n  // store a list of tiles currently visible in the map\n  // those are necessary when adding a new layer to know which tiles need to be loaded\n  referenceTiles: [],\n  highlightedVessels: { isEmpty: true },\n  highlightedClickedVessel: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_HEATMAP_LAYERS: {\n      return Object.assign({}, state, { heatmapLayers: action.payload })\n    }\n\n    case UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES: {\n      const heatmapLayers = state.heatmapLayers\n      heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices =\n        action.payload.newVisibleTemporalExtentsIndices\n\n      // also removing indices within each tile\n      // adding is done after tile has actually loaded\n      heatmapLayers[action.payload.layerId].tiles.forEach((tile) => {\n        tile.temporalExtentsIndicesLoaded = difference(\n          tile.temporalExtentsIndicesLoaded,\n          action.payload.indicesRemoved\n        )\n      })\n      return { ...state, heatmapLayers }\n    }\n\n    case ADD_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers, {\n        [action.payload.id]: {\n          tiles: [],\n          ...action.payload,\n        },\n      })\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case UPDATE_HEATMAP_LAYER_STYLE: {\n      const newLayer = action.payload\n      const layer = { ...state.heatmapLayers[newLayer.id], ...newLayer }\n      const heatmapLayers = { ...state.heatmapLayers, [newLayer.id]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case REMOVE_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers)\n      delete heatmapLayers[action.payload.id]\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case ADD_REFERENCE_TILE: {\n      return Object.assign({}, state, { referenceTiles: [...state.referenceTiles, action.payload] })\n    }\n\n    case UPDATE_HEATMAP_TILE: {\n      const layerId = action.payload.layerId\n      const newTile = action.payload.tile\n      const layer = { ...state.heatmapLayers[layerId] }\n      let layerTiles = [...layer.tiles]\n      const tileIndex = layerTiles.findIndex((t) => t.uid === newTile.uid)\n      if (tileIndex === -1) {\n        layerTiles.push(newTile)\n      } else {\n        layerTiles = [\n          ...layerTiles.slice(0, tileIndex),\n          newTile,\n          ...layerTiles.slice(tileIndex + 1),\n        ]\n      }\n      layer.tiles = layerTiles\n      const heatmapLayers = { ...state.heatmapLayers, [layerId]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case RELEASE_HEATMAP_TILES: {\n      const uids = action.payload\n\n      // remove tiles\n      const layerIds = Object.keys(state.heatmapLayers)\n      const heatmapLayers = { ...state.heatmapLayers }\n      layerIds.forEach((layerId) => {\n        const prevLayer = { ...heatmapLayers[layerId] }\n        uids.forEach((tileUid) => {\n          const releasedTileIndex = prevLayer.tiles.findIndex((tile) => tile.uid === tileUid)\n          if (releasedTileIndex > -1) {\n            // console.log('releasing', layerId, tileUid);\n            prevLayer.tiles.splice(releasedTileIndex, 1)\n          }\n        })\n      })\n\n      // remove reference tiles\n      let referenceTiles = [...state.referenceTiles]\n      uids.forEach((tileUid) => {\n        const releasedRefTileIndex = referenceTiles.findIndex((tile) => tile.uid === tileUid)\n        if (releasedRefTileIndex > -1) {\n          referenceTiles = [\n            ...referenceTiles.slice(0, releasedRefTileIndex),\n            ...referenceTiles.slice(releasedRefTileIndex + 1),\n          ]\n        }\n      })\n\n      return { ...state, heatmapLayers, referenceTiles }\n    }\n\n    case UPDATE_LOADED_TILES: {\n      const newHeatmapLayers = { ...state.heatmapLayers }\n      return { ...state, heatmapLayers: newHeatmapLayers }\n    }\n\n    case HIGHLIGHT_VESSELS: {\n      return Object.assign({}, state, { highlightedVessels: action.payload })\n    }\n\n    case HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: action.payload }\n    }\n\n    case CLEAR_HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import uniq from 'lodash/uniq'\nimport {\n  SET_CURRENTLY_VISIBLE_TILES,\n  SET_CURRENTLY_LOADED_TILES,\n  SET_CURRENTLY_SWAPPED_TILE_UIDS,\n  MARK_TILES_UIDS_AS_LOADED,\n  RELEASE_MARKED_TILES_UIDS,\n} from './heatmapTiles.actions'\n\nconst initialState = {\n  currentVisibleTiles: [],\n  currentLoadedTiles: [],\n  currentToLoadTileUids: [],\n  currentToReleaseTileUids: [],\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENTLY_VISIBLE_TILES: {\n      const currentVisibleTiles = [].concat(action.payload)\n      return { ...state, currentVisibleTiles }\n    }\n\n    case SET_CURRENTLY_LOADED_TILES: {\n      const currentLoadedTiles = [].concat(action.payload)\n      return { ...state, currentLoadedTiles }\n    }\n\n    case SET_CURRENTLY_SWAPPED_TILE_UIDS: {\n      const currentToLoadTileUids = uniq(\n        state.currentToLoadTileUids.concat(action.payload.tilesToLoadUids)\n      )\n      const currentToReleaseTileUids = uniq(\n        state.currentToReleaseTileUids.concat(action.payload.tilesToReleaseUids)\n      )\n      // clean to load tiles of tiles that needs to be released\n      const newToLoadTilesUids = currentToLoadTileUids.filter(\n        (tileUid) => currentToReleaseTileUids.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newToLoadTilesUids, currentToReleaseTileUids }\n    }\n\n    case MARK_TILES_UIDS_AS_LOADED: {\n      const currentToLoadTileUids = state.currentToLoadTileUids\n      const tileUidsMarkedAsLoaded = action.payload\n      const newCurrentToLoadTileUids = currentToLoadTileUids.filter(\n        (tileUid) => tileUidsMarkedAsLoaded.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newCurrentToLoadTileUids }\n    }\n\n    case RELEASE_MARKED_TILES_UIDS: {\n      return { ...state, currentToReleaseTileUids: [] }\n    }\n\n    default:\n      return state\n  }\n}\n","// TODO MAP MODULE remove whole reducer\nimport { SET_MAP_CURSOR } from './interaction.actions'\n\nconst initialState = {\n  cursor: 'progress',\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_MAP_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport ModuleReducer from '../module/module.reducer'\nimport TracksReducer from '../tracks/tracks.reducer'\nimport HeatmapReducer from '../heatmap/heatmap.reducer'\nimport HeatmapTilesReducer from '../heatmap/heatmapTiles.reducer'\nimport ViewportReducer from '../glmap/viewport.reducer'\nimport StyleReducer from '../glmap/style.reducer'\nimport InteractionReducer from '../glmap/interaction.reducer'\n\nconst mapReducer = combineReducers({\n  module: ModuleReducer,\n  tracks: TracksReducer,\n  heatmap: HeatmapReducer,\n  heatmapTiles: HeatmapTilesReducer,\n  style: StyleReducer,\n  viewport: ViewportReducer,\n  interaction: InteractionReducer,\n})\n\nexport default mapReducer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\nimport throttle from 'lodash/throttle'\nimport { trackTypes } from './proptypes/tracks'\nimport { heatmapLayerTypes, basemapLayerTypes, staticLayerTypes } from './proptypes/layers'\nimport { viewportTypes, popupTypes } from './proptypes/shared'\n\nimport Map from './glmap/Map.container'\nimport {\n  initModule,\n  setTemporalExtent,\n  setHighlightTemporalExtent,\n  setCursor,\n} from './module/module.actions'\nimport { updateViewport, transitionToZoom } from './glmap/viewport.actions'\nimport { initStyle, commitStyleUpdates, applyTemporalExtent } from './glmap/style.actions'\nimport { updateTracks } from './tracks/tracks.actions'\nimport { updateHeatmapLayers, updateLayerLoadTemporalExtents } from './heatmap/heatmap.actions'\n\nimport store from './store'\nimport mapReducers from './store/reducers'\n\nconst mapReducer = combineReducers({\n  map: mapReducers,\n})\n\nstore.replaceReducer(mapReducer)\n\nconst throttleApplyTemporalExtent = throttle((temporalExtent) => {\n  store.dispatch(applyTemporalExtent(temporalExtent))\n  store.dispatch(setTemporalExtent(temporalExtent))\n}, 16)\n\nconst updateViewportFromIncomingProps = (incomingViewport) => {\n  store.dispatch(\n    updateViewport({\n      latitude: incomingViewport.center[0],\n      longitude: incomingViewport.center[1],\n      zoom: incomingViewport.zoom,\n    })\n  )\n}\n\nclass MapModule extends React.Component {\n  state = {\n    initialized: false,\n    error: null,\n    errorInfo: null,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    })\n  }\n\n  componentDidMount() {\n    // First trigger synchronous actions that should happen before any map render\n    // At the end of this, set a flag to allow map rendering\n\n    if (this.props.viewport !== undefined) {\n      updateViewportFromIncomingProps(this.props.viewport)\n    }\n\n    // TODO\n    if (this.props.glyphsPath !== null) {\n      store.dispatch(\n        initStyle({\n          glyphsPath: this.props.glyphsPath,\n          // TODO apply URL updates here\n        })\n      )\n    }\n\n    if (this.props.onAttributionsChange !== undefined) {\n      this.props.onAttributionsChange(store.getState().map.style.attributions)\n    }\n\n    if (store && store.getState().map.module.token === undefined) {\n      store.dispatch(\n        initModule({\n          token: this.props.token,\n          autoClusterZoom: this.props.autoClusterZoom,\n          isCluster: this.props.isCluster,\n          onViewportChange: this.props.onViewportChange,\n          onHover: this.props.onHover,\n          onClick: this.props.onClick,\n          onLoadStart: this.props.onLoadStart,\n          onLoadComplete: this.props.onLoadComplete,\n          onClosePopup: this.props.onClosePopup,\n          onAttributionsChange: this.props.onAttributionsChange,\n        })\n      )\n    }\n\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n    }\n\n    if (\n      (this.props.basemapLayers !== null && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== null && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    if (this.props.tracks !== null) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // Now trigger async actions\n\n    if (this.props.temporalExtent !== null && this.props.temporalExtent.length) {\n      throttleApplyTemporalExtent(this.props.temporalExtent)\n    }\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({\n      initialized: true,\n    })\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== null) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // tracks\n    if (this.props.tracks !== prevProps.tracks) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== prevProps.heatmapLayers) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n\n    // basemap / static layers\n    if (\n      (this.props.basemapLayers !== null && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== null && this.props.staticLayers.length)\n    ) {\n      if (\n        this.props.basemapLayers !== prevProps.basemapLayers ||\n        this.props.staticLayers !== prevProps.staticLayers\n      ) {\n        store.dispatch(\n          commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n        )\n      }\n    }\n\n    // loadTemporalExtent\n    if (this.props.loadTemporalExtent !== null && this.props.loadTemporalExtent.length) {\n      if (\n        prevProps.loadTemporalExtent === null ||\n        !prevProps.loadTemporalExtent.length ||\n        this.props.loadTemporalExtent[0].getTime() !== prevProps.loadTemporalExtent[0].getTime() ||\n        this.props.loadTemporalExtent[1].getTime() !== prevProps.loadTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(updateLayerLoadTemporalExtents(this.props.loadTemporalExtent))\n      }\n    }\n    // temporalExtent\n    if (this.props.temporalExtent !== null && this.props.temporalExtent.length) {\n      if (\n        prevProps.temporalExtent === null ||\n        !prevProps.temporalExtent.length ||\n        this.props.temporalExtent[0].getTime() !== prevProps.temporalExtent[0].getTime() ||\n        this.props.temporalExtent[1].getTime() !== prevProps.temporalExtent[1].getTime()\n      ) {\n        throttleApplyTemporalExtent(this.props.temporalExtent)\n      }\n    }\n\n    // highlightTemporalExtent\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      if (\n        prevProps.highlightTemporalExtent === null ||\n        !prevProps.highlightTemporalExtent.length ||\n        this.props.highlightTemporalExtent[0].getTime() !==\n          prevProps.highlightTemporalExtent[0].getTime() ||\n        this.props.highlightTemporalExtent[1].getTime() !==\n          prevProps.highlightTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    } else {\n      if (this.props.highlightTemporalExtent !== prevProps.highlightTemporalExtent) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    }\n\n    // viewport - since viewport will be updated internally to the module,\n    // we have to compare incoming props to existing viewport in store, ie:\n    // update viewport from incoming props ONLY if zoom or center is different\n    // from the internally stored one\n    // TODO FFS incoming lat lon should be an object, not an array\n    const currentViewport = store.getState().map.viewport.viewport\n    // stop propagating updates from outside when zooming in\n    if (\n      this.props.viewport !== undefined &&\n      store.getState().map.viewport.currentTransition === null\n    ) {\n      if (\n        currentViewport.latitude !== this.props.viewport.center[0] ||\n        currentViewport.longitude !== this.props.viewport.center[1] ||\n        currentViewport.zoom !== this.props.viewport.zoom\n      ) {\n        // if zoom delta is precisely === 1, zoom with a transition\n        if (Math.abs(currentViewport.zoom - this.props.viewport.zoom) === 1) {\n          store.dispatch(transitionToZoom(this.props.viewport))\n        } else {\n          updateViewportFromIncomingProps(this.props.viewport)\n        }\n      }\n    }\n\n    if (this.props.cursor !== prevProps.cursor) {\n      store.dispatch(setCursor(this.props.cursor))\n    }\n  }\n  render() {\n    if (this.state.error !== null) {\n      console.log(this.state.error)\n      return (\n        <div>\n          <h2>Map component crashed!</h2>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n          <div>Component Stack Error Details:</div>\n          <p className=\"red\">{this.state.errorInfo.componentStack}</p>\n        </div>\n      )\n    }\n    // won't render anything before actions in componentDidMount have been triggered\n    return this.state.initialized !== true ? null : (\n      <Provider store={store}>\n        <Map {...this.props} />\n      </Provider>\n    )\n  }\n}\n\nMapModule.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.shape(viewportTypes).isRequired,\n  autoClusterZoom: PropTypes.bool,\n  isCluster: PropTypes.func,\n  tracks: PropTypes.arrayOf(PropTypes.exact(trackTypes)),\n  heatmapLayers: PropTypes.arrayOf(PropTypes.shape(heatmapLayerTypes)),\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  highlightTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  loadTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  basemapLayers: PropTypes.arrayOf(PropTypes.shape(basemapLayerTypes)),\n  staticLayers: PropTypes.arrayOf(PropTypes.shape(staticLayerTypes)),\n  cursor: PropTypes.string,\n  // customLayers\n  hoverPopup: PropTypes.shape(popupTypes),\n  clickPopup: PropTypes.shape(popupTypes),\n  glyphsPath: PropTypes.string,\n  onViewportChange: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n  onClosePopup: PropTypes.func,\n}\n\nMapModule.defaultProps = {\n  token: null,\n  glyphsPath: null,\n  autoClusterZoom: true,\n  isCluster: (event) => event.isCluster === true,\n  highlightTemporalExtent: null,\n  tracks: null,\n  hoverPopup: null,\n  clickPopup: null,\n  heatmapLayers: null,\n  temporalExtent: null,\n  loadTemporalExtent: null,\n  basemapLayers: null,\n  staticLayers: null,\n  cursor: null,\n  onViewportChange: () => {},\n  onLoadStart: () => {},\n  onLoadComplete: () => {},\n  onClick: () => {},\n  onHover: () => {},\n  onAttributionsChange: () => {},\n  onClosePopup: () => {},\n}\n\nexport default MapModule\n","import GL_STYLE from '../glmap/gl-styles/style.json'\n\nconst AVAILABLE_BASEMAPS = GL_STYLE.metadata['gfw:basemap-layers']\n\nexport default AVAILABLE_BASEMAPS\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport Map from './index.js'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This component displays and load fishing activity and fishing-related layers on a map, used in various GFW projects:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/map-client/blob/9c5179358d4870c0fd4c2c0742917e72e6025c59/app/src/map/components/MapWrapper.jsx#L5\"\n        }}>{`Map client`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/vessel-profiles/blob/aa0e17395f6a4947bb3fdf3106cb9d0a744ba64f/src/profile/components/MapWrapper.js#L3\"\n        }}>{`Vessel profiles`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/data-portal/blob/96b1e24efcff58ade672a67229da0610d9d241ab/src/map/MapWrapper.jsx#L2\"\n        }}>{`Data portal`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"available-properties\"\n    }}>{`Available properties`}</h2>\n    <p>{`TODO: fix crash on Props docz component`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<Map viewport={{ center: [0.026, 123.61], zoom: 5 }} />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      Map\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtKY9VmLDZXaD04AEchJCiGZJFUbB_zgAiIPYQNJTIk1NXaMFUF0FFjlOXDnAIRIsXYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnJSABYNPYAA2DStPWMBgIAMW9aBEiU_hnEOBEHUwGChH4JYiGoSg4F0hFLOrayaGcCBcMudgAEZDO0-Q-IEqYAEE5kk9gIyg8gbCgdAw3YeQOUksQMujGR2BRcSYG4YA8NEqq4HkLca2AbLoDy4IADJOvGRJ5koZo2ty_LuFGuUwGQyUBlQdp2AAfg2dqwwjIqriGjrUAS6spBkKs3zMGF1WOGAwDCKAphW4rSu21Ll2rBMOIIHAbMyFIrwIZqa1rEiZnYVgIBgEYiJqrL9AyK4AG1lJwZSACZTKWaLYaTHBTOigBdJZcOEIgrgAVgKzDNxXKRHue173uaqRbr2swvxAKiaLohjww0LQKGA_QGEO-0oMwU7QnOgquIo2jZl450sCI6TDReSxKGvNoMDgJYCFceTRx-gA1eA4HnYWjXIyiIi6CWecg46BaF_x2GSrXkoaAAZZLr0ds8AH1r2S5wzz1ZLoOcA23VFjwKToli6aUBnqLF-i6OYwDdBAgwwMIo7HpF01FVtI60MoGZLD6-ARf7fPzTE-YI9QNPecLIgPDQGAxXQUIEQEDDM-yUJNJz2u8_-qcg-wrOLS6Fue-rtiJiEG5YBFqAnH8PBJGnkQCF9XuLdRCVtkLyuh6NyRS5mCv4BXzIdirmuLc2aI6Md-CMj3-AllDvX78fgRn5Viq1ZicgH6JCfkXDuht3RHwHKfOAkg4JAPbhLa-Mt_qAyIt_Uk-dQgFxAQfcBx8oGSDgH4MeEtN7sB-iLD0mJmY_Q-MBVwjcBAILYjJasaAXh6icILGA2kLB6wIJYGA2Z4hniwMnHhFVRwAAkIApDwFAGRhABFCKgCIsR6w-H2D6HAIU8UKG0U4bAfRLdYA4DNNNK-zDcgzHQFkLWAMgbqlVpkVA-RuyoHlgALRxjg0WVDZiSGQQ44UpiprUAsdLKCbCCD1VgEsT4RAXgxJgAAVWsVkH-swySJCUXaYRoiXSYTAb4qAzNKomLMWEphESrE2NoJYC-2xQHBw9NvS-58d5wBCW48JR0oKYNqTASR4piCzEARkH-_SshjIEI7SgHYclCjycnJp2EPS3xGfRdZ8cKkuJIZPaWKIhTdCKcbI5VSjp0Wbq3cZejDldEkGPa58DEphObLMK5bd0qfAbs6D54zMqyVmFcS5Xc24qzMIVPidy_xdDJBKJuoLIwgpbm3fa_FXn4hnuvGAt0kgLMyCo_JmYpKr1njACMEZaDKNUfoIq3ASosN4SbP8LAArRGyhGTJeLBG5MJcnSlPLFl8tpW-JlRycCst0gQDlfD8VLP0AK6lRKCAcjfEoGKpk0VJRqbY-xREXqRAaOihJM486DikhGNAnwCh2JQeqOlDL1HMolbYKVHKVyTNoLaoJBAAX3RrHBGIBBQiYCuFayINq9Xqg-GDAQUNMYrgsAvGcLwQ1RXDSalI3qiIxr0HGjG4ivrY0iGG41ka7XBOLUQQtBVRXsDVYlOCcA7A_Q4cY7o2AQLoDsGTNc1AXSMt_lkdKg6LBRIgPECK2QrinSgHrGtGQhBlnYKgQWUAF0CCXUa6yVxV0JHEVtdYnx1w0C1Fwew7K8ARkXTo6Em6hTbsoEVUdhYXGUBMQvFI1770CCWDegQj660WAmLYHAfDRJZD9V9Cw_6rj_prTBn9j64NIdQNZGtkLqyHurMe_tp6uAcOQr659K5HjsBshAduUxUQyLSEcOAiR-J4CEKgQYIRQkuPxNECqwxBY5D8HMYIgRrJdBCKgZIdEJx0CnKRyQttqObGhBgPYzQQM_z4SEQ0cFZwRBCAkUY7BJOTgyAUPiX0IDNEpQSHAx9OmBOlgAQjGshfmjd0Akf9RYT1MBs3qgNUQI11rTXoSs6B2zOB7P2pXNhr6ZHLA6l1CuCzGU1M2fQieJIMw8BwGgtEPETmpJ7qgB56Dv9xWSsvVGTzNYolJKg6VmsmI-rZdyxMK4qXwtNayzlvLCHoNxYSzqEIcwkjsGSSKR2OraDnC6ImmsmHStAYKmZmrlmOvpeoMlG4_QPDhHMfYPwM5ugFdyOGSAzp3PSTm-t_OnTNvbYgLt7pB33BpAjNCk8o4IO0BWjgeOZS_zRBo098xS2YurYytC9g3UytdE-9Ev-5KOR_dmH9gxf4IjbGCKNKSLmTpuZK9Bj7FXpVXrm2O6uBA21cPqw1ocWPFL4jC-lzHdA-tfTCBEewUA8i0AEF4ktTPOnhc55QbnvOMgC-reTmrcBxconBkLtLt2cC2Hl3z9nNZqC-eFC9o77XrPhe11G3Xh20ia4sNQSRlBWCK5u3cHAVubcZAt3sVA3PYjbAN8zlX1APc7Fd9QWZHYIPCm98LjbqBg_oFDwQQPUe5noDXLAWg4flcO6D4n5Po5uEy8t-7heetoIYJmGno3Bf_IwGLzMTB8etvA722EvXaQy-R_rztxvLjm-5-qxYBb0GwcrbHWtw36WbCyPkbI_hgqCU0szCdor0Oer286ePuRCjp9KuTjgWAM4JiE6-sT11lW-HSInxvuVwqaChYjyrtfk_FEz_lTQVV0Wh-cEs3Nm_6fOlv0EaMz-OwBfNdJfJXcLP_D-OBTpXfFIffdgAAH3gK_xXzAz_liGmSALGkXxhxQJRGiHQMAJ3zoFgLwCWwPxrCPzZVJyqzp3iUSTElgFSQGTgG_3CzwP_gwIQPgPYAhkxjAPSwgIAKgK4J4PRiWwsEH39H9WS1YJZwaUwMKzXXILFThxJw5W83qQ6VkJV1aUaVf39XBwsDIwADkDMaMMQMgQgGN-J2Nul38ZCUCqVeU58phgCEhQDHCn8r8noYC4CX1gNmM15YBcVskvCXDtCHcnChUXDJDZNoQ4B5EaBLRbBXAPBYBzRJYLREjKRNRJBWNkj0BzRfIiNzQ-FSjEcVxUtwNEdacatKcJ15FIp0B2s0Qe8vpMM4itlSJYFxkksR8fcHcuiZhOC3DisrtqtKC3Ur1vMhk74hD_kUChiMDVZR8VcF55kwjlV9D2j1hwdcMMxtQuAmDIN-wYBWAzU4ByCyNdC4A-iUtVjIj5D2ATtTjzi5COllDYcWVj9qCND5CIjOkbjtj5t38yMhj2Aej247iAT8BhlICbkXiug3i784T5j25PjJjKsZjUThjACYSljACViBjoDE9L8YjYj_UyNBDfo5N2DYgITADoTkCHjf8w40SFCV0QCcCWScBqSMCiC99SCuDmTiTUD8CAFADnisCuTl8eS6SJSoCBSSCyDxjSsZCZcUC-TJTESziLjeS2TcThDECNS5S0CFSESxpXi9T5SMC5tPiVDviqD3Ve8aw6CEcqpjjpsYSbTJTEDRCiTb8HctSjTuDeDxCaxwytodipDYs5N1j0AyTlVoSUD4zEzk4pTFD3DuTRTUzNjt9fChT_CP9ro6crT0tcyt8XQcdOT3DjSXSHMyy1jSS8zjwCzhSXSUzmzKyaB414dLB-QkcMy-wkS9SKznDlVezTx-yjxLo6y6dOyNjuyCAIYMY-yBzLodTkSHcxzoiJzVypz1zwz7SviXUnTpi0laBplo80z9AWCFyEyWyX9Iy39KS5MojZ8kzpD-jAzATHzXDpSszZTRT3zn8fDiC_C5t1SXTGzIi_zJIAKoB2y6cGyRyWc_ylSCw5yGtPClzJzRxpzBzNy9SQLvC8L-FDykLsKeSSKXCVz0Y1yZyioiK0LcL9z8LDy7TVSqKsVgiRtQilyYSaKti5soyQSYyawwSFEH9N9xzk5kyeT78L84LRiPCFKpKlKlyMLCzILP9oLUK791Kp8bziUELKLSsULdSx9DLH9NK2ysLStFjrKZLdzk4yKCKNzRo89hzLKDLz8jK_y3KKL7LoNHK_KbLZL9A6KGLCLPKXSLAYLV8nLjLly2LyLGLOKiyHTTypj3spEkq_z8T8qlzgToz2joQ51ugiyHC1KwrnKPz0zmLfL19_LiquLStMTqDT8iqIrr9QrmrwqXKRURKXy4jIt7RzQKorVugxqpgcR3DAgptcw0A-dUB4hRtdMJhuhfJ20a0yMRhug_Bbchw65dJRMM0ChhzbtjrsBbAYgZw_oTcxxzBoUlgAZEA4jvMHqK0pQ3Rzr7rbN2AdRjDHYABNYsqtPYI4BEPNTgOwFgMAMAC4GgOIsBTazgPNVahIZEZlHIftOI-LXUcjGyQOP62cQNCE5kQhNoXKdgBa9wPYDwdQLYOPFdEQMTEITdeCFcbVXoTdfQHXKYKSD7U8b7JHFHGYCLR6yW76uIw5X6Y-VwFIfA-67zOwMBfYfIDyEYTYcwKtC6tAJk6rFAmaocvHc7XMbqObYWr7Go5HeOGaj4PoMMfhZxVxaaeCzMqAFcT4qC2gp2_mqWwNVNDyE7Y2qW6GvneNMy6DXm52gWnfagZ4YNEOsaMO763NSOjGaOr6WOgO9OiG0Onkh2qtDKmXMjZLCGzAc6VwWG7y8gakUbas6KLGbxfMPEGu7eFxF4aaGXGQkiCYUxDwFg3OmgeOiGiatOn1HAKtOlMaaKY8rKtQq9Tut26gTxHGGEmakq6DTCecPWNqhrbzAW_zQLCNYLW7Tex68MvvYagw-w78n_R29uIUIchKp-7RAQDE51Je3KggTRZ-gQGE3mj-7e0S0S4zQB8g6q0Ddgv8f9IcorT4gSd9P8T9b_WBnAf9cMroYNAQcwGghrGMWQLyxMWGMQchfYl0cgTIQhbIBzCsMhkh36cgJtOAYw70aqfgMecQYAKoxHTBn9VSmB_h_9HACIUSacL9DkeQJcT6Qh3aPtA49gCDHYdgM8QRrUUcehOdcsHcYhuK2sZh1h9ho8PgQQbIHhvhrIARrdNDSgWhdMfQFR7YGRo-ORr6HaWMO0l82MvMagdoKYCBsTRIEDe64TI5Ww8xdGk6vDQ49AQjTMQ67oQIYIcwujCx_1HBvocwKx2gVXeoydJooc1EBkeaGsxCq4Ahjx_uLgSw6FGqaFJqGXRgchYAHAdplfImdx2sSQGpqcORutLabDVtdHdPb-EddYVnRnM1b-VAyR8RGaq4GZkBMDATclGa7-ZHWwMUAAR1CEo2yHEVF3V0lxxiWYHFma8HfXETVx5wV2XWWcrhwAmn4nERuPOfzlmfVkyESB1DAAjEefgEwawDNEpQaU2Y5HEQJKgI-awSee-fgj-YBYuZWcIVmHJWheAUrlVTeb_Nha-c5t-f-cBc6TQDwP4hgCRa1CyBxfWEUpap6oIHxZWYRaJeRc-ZWbJbVgpapZpchfWB3Pqv0GZfhcJaRZJfyfJYRF5doFperGDPGRFaBdZfFZRaebRfmAjAVa_hATlaZXFIwKVc6RVeJbVaBY1fJR9LgQhfEWAaFCNbmYKHETI16EOSIFtOrGGFtwEGr0wQdYtYjEFBrzhfgH5Zw3kR2F9dL08g5fVbWcDZL02fES6xazy39ZoxnHEWN2-u7wdZefICzYTxDzVjDxjZDc6XzcLej2z1TzLdmcraZAL09zzcmkLet29Zbdecbfb0e07zlzNyiglYberD90LyrxL07YLYhT4hGfbQlROjOgIAuImerCmd3TXWTcy1Tba3KaOfCDFzub5ylxaIZBubl0PcV2vVtxfyujOOPFuYlyOGrJKbaN8G6sGpoHXf3UmfkK_fXTpedx9Ynd3aPQje2Cjb_ahZxMNZA9Xbxdg6TS7MZcg_WG1fuAQ6HQ4MAJQ5wy0XtYw-zZ9VzYygdWkiUEbej1j0qdI-AHI5HaLaT0dBTyikunpTI8Lf9y9xI6ulo7bcA-o547o_zx7ZBybwHYE7Y948be50rwg-48k7o-w3NktkXbIVmGp1gEjmUEZljgIWZRZjUATm0CTi5lTksVw3nR6FNFoFEiOSWC5USD1C4HQFgBGHVm6EKWDkeQnkQVeFQF2CKW8_LjwGQm2D2UQSgksBFGSmMOcAaEsAaCBvdi1HG2SgS6Bp8XaaeBKX8QdseTbnOVrkgH4QViVm7SsNlhK8VhczgGSg4ycXcFXtQDPGU089WUoRy_ogdp2SrjMBTxib1ha8OzBS-UdErz5F0viqEARGbUwdQFYBwGMISw9jPGMK1g9rlEwFtwXhmHelmkturEDem91jm4W79mgndhFDPBS4AA1LvfYdRLAPYtQzxrxkkABxDbgJ1o2aYK0uGbzpOgBbq75KewSwd2f2C787-727-7vUR75717j7r7l918MwQnHmsbvWAAdVxE0dYHlnfTsCki6D2YOcfC6F8loHNCC624iCJ9fAccFBx7x7OMJ7nSPSx5gCG_cBG6kgs5gFx4mHx_Z5YJfVWqPCUnIW2q4WCi-lNHOgHJPdfYsGGBRAl6inaAXjiCgDV5fBrSIiuAAA5lJTea0ogsBkoW81JlIa1YG3B6jIpl13tEdSPMp2B2mxTaAfIgUZZPeMG6IlghilIlvwefYRQGhkpHYGgPFrvZpMJCoD0G0pDtUod-frOYBbOugKUaP1VeOBvufUBhv_kHOnPOxXP3OrNQvVU0VlPtUS3TxtZdZ9YLUuAaPOeXFqMGl0praEdIM7bUcbiJVohXBnnVAKUVUronouANuuAxHKAJGCgVo60OqOViv5ZqvlY6u3EwWd5PtSuav9D1gsm8HxgGkxGBzsjN_u1p3JZpZtV1-D_lZ0otWyvLieOnVysfi1-5Yn_u1t_por_Q_iv3YpHh9gOfD_q-RXRBBMAOQG2GjRXrd1mQ0mWuqximCBALqOvWALjXMCQAqMlXDfm_zP60ZQQX5SHM6hFq21xa0tKeiPRdqNckB5gUYl_S_5nld-XdNxC1wfCgNdiSwKLjFzi7pdjCyXVLkIPYAABqGKMnwOhSwjo_MVTtCi07RwmY_iaktAkYhsxE4nMUCOBGljvdHY7sZwJYBBpuwKEHXZmJiHKINQ9OVUZiP4xeSd9bY9sJ2C7DdiexvYvsf2IHCkj6DDBxgt2H9i0a1JXAEMdoCkDAAjBEA1Jc0JCRYjow-IyneQYLBSjODnYrsD2F7B9jndnASgnTszDwQgJ2kl8IzhzD0A6DEEJLEuAOHLggI9kdfDFLoXGZSRB0XAdNpI1VxwBdm-zMeOIj6BQA2hTrdYMEIdaUBGazNW1u-nw4SsUQ8zSZkXBGHOgkWoQtIJQE0D-Mlg7QeYNpn8haRTsrmC7GIXESQlkq6HCVia3ZbltTEYrU1rGyBarp64GQPVpV2v5wAdQDHB1lc3_abRchMcfIZAkKGxCShQEMoSnF0G5wzWatYOMfBqGVw6hsg-0NqkxY6t94zQ9YK0LraosM2KQDoV0IOaLBJm0AeAKOHvADDM26iN4KfFJEpAFmtgR7LAA-HCAvhqvBkA63uGBBf0TIQKC8EcgYinmbIl3FZGgB85ThEIq4T8yRYrhph8bIsmCVKaAd-g5QBknAl8ClNksfCObCF0Haij-RHI6rGRkgDnQMgWseIAyDsC2BNMLADjOrGSBoA8wNgbKNCAlB4gscNouwDXQNF85Uic8SAPOHxF6i5MlQP6CaOLjmj6arLFTHpkQrM98gaRaasGLsARgdQIoWWIaM_pzZy6UUD0UaPjFXAsoWQFIEKB5EQw8YSwUyOjGWzVYsxAgY0TzngAjCxhkoDDHWjDaq9xQU4f1tKJXDSZBQy1EUbcLuwNi483NInreBMZaj-xjuQcTWiErLIHW5ws4dcIuGzMdRTw4DH-TgCOxdYDI65rsS2adCYAZPHoWiLzRmJbc24r4Up3hFTBtU2rJoVxXRHTCsRNImMfSN5FAtPh8UBIVeNfSCQrWWLYuKiNYTNE3xnSGYQUBxEHjuhhzdYANkJrncyECWZJKYIaB2AJg3GNsLALEw5A1Rw4bWokHWD_QXx44y4R-PUTzhma06ECbyUZHiI9YsASUNkBsjDI-gdYqiQGxfQ-jcoVImtKwBzFUT5xoosCTOBbG1ooWTlSiRK1ImesZE0lRicxK6B9jLh7ElcJxOAmPjZh_qXibWMUkEtxRNwpSViJEmJ9OREobkayNCAPDdRFgKgAvAeaCSnx6iYYCMAfiBAdGVEqSRTk9FTQzx7kmiYKNTE6SWWi4hcXpKXGYjJGTwtXLzkFySS_J1YekB4EpFUT-0Sws2m5g2ErC1hM0DYTQz5ztBDh6wPodxKGEj96xTNRsesExBlTxht_emHkP8QFDK4BCIhNkCBEmdyhbESoUUmhFQI4R9_DFEG0wR3jB07UpllRNYyYAjh-BZOsROXEWT2REEw8dBOrDJok6aacyZZMWlQS_Rl4_qY4I2bYJAJFgKtBtPZG2tY0c44KdqPmmPDPxqAOqb8P8R-J6INCJOPQmdACA2p2g0ERF1fTOhOIbXciCPBp5dwfO5nDPs4HImSgX6gM7iHROZqFcLYhsAAFKBxYZ7QfkEQHCBeiYAiMmWPwPsAABpZwO7Gdgg0zwIod2A0GEE2QRQQNcHjqBsjux3udM5JNBEy4ehdAkAFIHjKyhjso2HMoxFwiFnlIOMnSTQLzJHD0DL4SSFZEbBaTyEihjSMDFDJNjiyektcOiEai8luJMuLMHWdNC6TmJmIksvhC8KWB8IBaDXDgdNC4F6zuuYsk2aQnIQnJJAP0PZNqkoEGtJSFqWBqRwD6o4AcXvAglATMCeypE0HH2eQJpZXQA5EtIYrCTmKGlei6KRwaeG1kZBMa_9D-i_z9mxz-G8cZahkB2Tv0hQYcjFI33RzZyX6vs13vnOsbxwZeJiO1gIAcGCQ_AcAWYhsk4Lp9hkmfVWUKAIYQxTwXc-Eu3ATSHckR7_STiuBP7mAdQg4nAC6JYJTzkcbZEqMpF2Lo9y5ac4kSeO8kwBpk94YnlZz7mQz6JJsIeV7Kw5QEJ5RhOTKYVrabBRM-1KwvSCPBcYpgkJRoFqDsClwB4uYNuoZnRyGZL0-IboPoKVE3I0JUwKmnxhglyYFqRci-DECOov00Br1boBXFiBrVkgaNA0YhW_nJYa6cEVyVAqODmjTiesZGodz_HolIB8vUcNk0w4hzxkoYRFBSglAFtyF7farDIQcyQl8mBso6n6QEWfxJaREoqHPPYzkB0xcmbHoiDnTDgMJx1bKFsF2DOgFcOQWIejWEXci7RwQV1hEFlCYhyFbo0TP_NqboAdKGUQRaYpOxpSLsx5OxVAB3yEERMZ4J0RSkxDTJXqrMXhXTnvlmKtKG3aKLXTyC5hdMdAekC_J1p9h3OmYIhXYDkhY44BZo_eagu6CvykmQ4LymCVcBHVuM5IQSP2l0XFyD5FUN4JCRWKGLNgOwXMOKDxClLVAbALgKEFwVeVfagSpNOIsxBuLFSbZJutnQawRgfF4io8GrGCGm0zsbmUAmMrgSBDJlI_ZYREMQDILTxuM8sc-1aLX0IyB9WghXKgBHycgUkeZRkFVw5A_SGg9gBvLKbFAAAJMAEEVcB5A5oR5RoPkDFB2AVwZ5dYoMYWAuFNmPIFejOUAZ3MXlUSqVn7xlU96lVGXICpryEIIwvy58tVmkVcLosSwMMlvPfBtypgjfWYLLNzl1y2Occ1ArYLohJId5gkAlTMCSRfIIZA8wBusGHmaxCVDBF-FLM0IyyOVcAO-RlEpW8qGuOwWWQEohwRgHMuhUVVJlwbmBBVDUd_DzX9o0Bpk73JCOalAV0reVc2efqjJWg6rARVYilGMTY6uKJlHYEftMv2HZBwy4tY1aRzNVBDll7QOiNUEQCIQ2gMwfKUtnr4NIMCRqNQF8mVUEBVV6q6Av4AIABrsASLAmcTNJnJRyZlM6me7Fpn0z3YjM5mazOghFRJB0Ud_P13OzxAfoRKqSPKqxCBCNYRqCMKEO0R9AZu-U4VdsFllgZXIobFcP1zLXwAe5mq5taeEfCxC0e_qKVbyv6VsKPFXi3fjsF8WcAxVX0TtRuKjnzr-SZLDIL6l0L-rWYEgzgEsBRnOBJ12waZKAyWyFqoAxa3lelBPVnqGoKs31Fr0AK7Cl1gBJbNIsvXsqFVWGbeSnwrmjhq5T7U-VkHPnM1B5LK9ORjXiC_qlglc9tL-v5WWowNUACDcAug14dP6DC8VU3JgC_qEGShfZTKuYUYbf1PjGsNIuQVZyUNOKt8NqkFVZB5Yy7WuVkCWCjBUAFxN3oOkWaYc_w9tKWjNXEQW9j2HG6gQ7T404xeNaAfjWSqE1iaRNR6FDVcFPC_qXeNLN5pQAZxXAyVGG-fgzl41vrXxtKurH7Khb-BR57JK4B3OM3Jz24im2VjcwyVsBD5n8Y-XJr3nCL7NcCY-VZpgBhsOiqcwSHRDPRnlaN6EF_kvVY1kSCAAtSpjxrKUoLpootWdccG_5XpLZj1CMFFvWUcY4tgzWiaOBeGVMvAh_NDRYB_pmy3-QA5WMCSE6aqM5MW6gJU1PhLBA0DWxOjuvkmcqWGj7SDVAHe5fZW18Wn-lrNs3UBKURcBrdECa2ZtDQrWn-O1vuadbut0SXrVlp_YMDOBGACTo6n9Q_1EBq27gUtvo4yci8wHVjhtq-g_0WGsnEvMv14EQpa-34pIULF0D_TfUgKLVTRsoAXFtNMwfzVMUC23Z0eEYH6G-AekqC446OEWYDkdkARjO307mN-O1TUz4u7seHil1MFSR2gCO8HsjqQlngzYcOjFD7HB5Pc9Q0EJMVH3dhngbuT3YwpYHSjtACd7sInSTui4GCKdVOywLjr2mCR6dkiBoO90kTR8-dhO32EzrJ2s7VuNOtHdzt5387pdQu4naTpZ2U7xdHOo6NqiMHJQRQ4PR2DqGSgvdkxkuywBrq10669dKuhERinsD6hoIbsJ7qTJN0Uzadlu4nTbo9ja7ddFMs3dePx1nhMdiEtwfYHGzOAkxtO-nVjv92B6kxfU1XRiiiQadugFqWzG7xC1oaf6L6JKRjqR1-6zwBveCPGSuC2Yk-t_GQZztgUlsQ1ieSwhaiXoWzEcTWjsBkHvBir6-A5PAgKHSjOgxg1LH7MjgPLpUcM36j6VkHQDR4G9JyimvXrBVWr8cF2O5Y8vjKj75A7sR5TECPCt6Zgny75eMBb1qwBQQwxLbUSSnq7Nddu93SKBz3iRE8TmwfbQGH0V6wVhe1hJZnU2jNM8xbdWP-VxwzKnFB9Z_XO1f0x4y9-qj9dWGkXz6wVReu_tHscHHpmOI-v9cirv2N6roEYavVLLi0p799ae-YQ4Ct0u6T9eu8_XnvH1Th7wD-6yRilgbpRr5SODvoJDAMnzf9XCBOhPtuKP6MoAiu_dAXAp4gYcjBkxP_prbHZnMX-m1T_oLmo4NNAhpjjniAM31vhUheoY4MI5ERu8L_dLW4nQNscUDiWyDTbRjkzz-9jgyg6cr0Pd7aD14taqHFUZC1xDEtSQ6gAFrd4VsMhLAVYd2DVlHFohl9HPJxXkH9pj1HvrYZoFEQVsrhneLUXUOxba9K4E6V9SnrF1pN_qCOorghgO0HaQdGaUsDSOB1E6wdGAPyosD5blYVwB2kUe7Q1o4gqAKXEahKPh13A1R1ABUfqM4wdQ4QWo-nUqNS5WjQ4_1MUT1gPxy9BkOIzmj6P2bBj1I3cRAcUO_j8KcFC1DONpTIHB0h-n3QzuF0K7ydSu6neIl0gX6Ow7WP8vFFu0l6JEBAM_P1TqqgUX-9LAakKxvZaHlj2BqXXzoF2SI5dIuxXWzp2O57L9b7WqslSONfiTj52w7cGxf5J6dDaBklSdp_Gl7h0JhvvmYbYMebqB9hg7eOzBMOKRDl2F9Hwb_CjsLtwbWQxWN2lQGZjf9FDS_xbmhbV2Tx1Y2Ho9gB6RQQes_esF2NEGW5gJ-6VHHqn0RnpASKWj1y-kgiGAv04rubL7AQAagc6eWNjyFA010ZM1IohkDiAmxzQpccqS-FIR9ILygyHEv2SxD-YBagsoYpICGIGnlWYsyWcofVCqH0ZWXDDeDqNmVJtTDgR2MkiMEUz3Y9gaPkTPdgeIdQ-oKmcYXsBXc9Q4uwWVzJkSzRYJQ2eCQyaBNkmpg9O68DqGSTGEtQ3guUCmbTMZnnAnu2E8o1WNawGgZ4bHkzol3ZnizpZ8s0mPZ3F6kzY2aCFqDS4ewSzZZis7TrZktnbd7Z2s5roLNq7VjAZoM9TNDO-wIzku4c4Gb1DBnxz4Z6nYOe92-6PTrutLnbuMKfcpzK5n2PGuN2bmlzjg_gbF3i6JdhBq3LULTuPOCCzz5OjM4ea52rHjCaXBoFrDbM1nOz2592M-YS5vn3YfZis1HvN1GGctRAi1GUenklR6sKx8HqmfTOZnvjex4CRBa5MNngL5J40xajS2DbUAmhqC8noMNFbMDlROk-DwAt1nCDvxnjZMerA_1sSSci03ACNMpbgSP9G06blezkpIj1ATLVMbx2OCj6ARrC49U9KebkDBFmE6npIvzArg3Z1s_-Y_MUWVw7JqiyJd1NkGEtbA-ixskYvMXvqV26sCYTZoYT2wdgLAeAtWAJA3DeYXEBZYqAfytJpohBZpZyrsW_6A7Ay9hl9Urbpo8sNQ_xEp76BRtQaNNO3o3YU0U0M0sK_unYAQ1PaEJs8mKqktDrSL_pmc3ObDPi7KL-x3DVakCs0A-sGRtNIVdyOZG5sVaDDBpbou6nzNulmUALQMtEW2Bbl7vJ5cTPoWu-PltepQClwv8t64lxLUlf33bbfLlACMEViyPh1Y08aSax0emsFphj0aGetIMgMdWz-XV5rspgtQJWpiQ1tgVgZktWBouJ5oQXea1BVX992luiHVciANXWL--lqx5f0Kkm1rVabWZQB1jNp5w9gWNC_yKuTSIra0gG3FfKY7XL0e1nKiNe6sRgfTHpp7pTJ9MNA_TI52c2OcyvbGGSIVgG6tLyMt1Igz19q17scGP8XhL_CC2DdJy6HETYlwi4WeMNQn--5hv6L9CkjinStL6CC5DAhgQW_saAR2BNp5smoBjfBbm2_xRxYB-b1I2mmLYt7C2CjNl9ADuwk3capaOIRW3gBrSbAN8amoI9kfTpa2p8OezsAUHxi28aLTVyG67UYHyxxr4V1gBLX-vcJmbCdSK8VedvLW-LJx82Ow0yWYWMoq1X21fQGuJW0N9ffOJuLABLsfAUkKGEsGUjxDDDgkLwDcEiAigN80EaOzwQDt2b46atiYEsGzu2546BtwgAnecvHpwg3QWAJHawkTgN8KmMAHwlQnDhMAvYIBe4BX0mYWA9NOkAyCZsRBhiJ0AgHKYEA00pIMwKU3vVlPymHwA9iO1HYLv4Ei7UtCe9KeSSoANTzNaaP3X6BYA60N4teKnY3wj2x7kp6U3AGnuj2Hwyd4xWnanwZ3F7gd9OqvfnDr3N7HGHe1Kf3sYpq7w9me84B165gSU4doeyffQBR05MhdnzFLTgCAOmb_QKfGA4AfxAgH0tlO0QDvuEAwHEDldEvegfp1YHKDlbGRkDQwJmQVAPBjchEyGY2EmIUYYyETtTBWMwoPAAosEiFY8H8dZCO_bXUgPI7Gd7-0Yf2B4BPF7D3B0_anrcOhAmp1_ug8wdR3BHSdsCwfWYc7tVHrD-AClXlu1qlbwj0R1o5rT7UUQu6dUBo5RAzWuxEatTXo4jUWPgDe-_a9Jaij06fzr598x2aUv-oVLOVosr_aQeAO_RpWBB1g__sBO-sKFzFTRa2jA7dO_JoOUKah2lDk4opyxLup8SYzsZsYvGboG9Y_VsIAAAToehwoAkAQhAUDc6k5Y45oHJ6urxnIQIAOzeeIvEISSB6nOzPGaSmxRNObELTzpxvH2S9JfA2AeWCKBSAeBBZe2OdFU5slCgNZFsdXQl3sDxrE1JM-wEbp1BnWSd1MywEsAWdI3lnFM1Z-s4Z1OwzwJMi81s-p2RnqA3MyWQHqMFBmyZhzwwckmvDGDoIZzpYL4OvPQQNdEZ-05zNeQd25n7AXwUYJMFng9ElggHNAiDlZTTZo4aZEkk0ZWwCAcs8BEHPy7nKJZpCAlWgG62RBn4Zg1pzECmd4vUABLogM_CAtE3BIGe6HuC9R1yh6X_sPwRC4fPJn6TrLxl5C6_MMv_BOOtC7S-Iga7CZ3p4508-ZMQ8SZ1M9XSGcj5PdLzaOv2CKDFdrPNdGzyVyTO9jBm5X9gBV3HyFeFn6dezpZ1q5D2rHTXBz5kxy6LOwWPB0Pc11-cyGeCLuWrj2RQdHAovF2OsaGV_EJEnyIwdAlyHWqdtdAwA0yZJKPbFUuHg1Ib6iBjiLhDl2gtuP16-APrSLg3ra3w4WdJcASegcb1tRfyxDwOTokb0eyfPDflvEKHh7E2U14Kb6IYVbz-FG6gBl3GH0AkYIxckiVEA3U-82jkBwIBuQltyhaG0-rWe9m3cCVtz_E955u-Vq0KTBG5bcVvj-TC0_i-k95ZvQ304gN7ukBiMWD0ntxs7Vg5Uv8oIKbHrAWEKhLG5hh1llxdx5eIWiDL6S961g1vXbNoWqT11Th03x7yBVUGk8BlSv8uIXz734wDlQs-bYFNtKqMlWC2QnqDqsQ48NiyTyxrAPFVB7Oj1hN6KDiOKg6YbFr_YOVArUcL_CqiBGG5f7pm8G7Pc2HbBEQPVYo_xVHKo5tH2wbEJWz9c8C9oKSP3TwChgyuiqRloFUYrsA5M0UU3spDrT9cUBfHvLIJ5czCeP2Wj6KpdAk9Se0UQSxnaTpFAg0lglPZ3JjcsIT0vCZivsJQF7E8Zqa_GApYiC32r6d9MwAMrXVgBK1yA-Ewy3GUoDPByAhoF-m54lDJB4QSsYUeQs_lu5RsOSmugEwHJRqJ4fh38WXvi-jd5uq6-HH80bs54EyA5LbGhC2C0ihtCxnsvHbU_AltU0mFL_z2oC5OMvCNPhNkAIp5eug9dfIEV4CqpV3KR_EKC_WRVkeIA6UZSEqE4C1hUgrHgZdweG8QBxB4g8gp7PG-V6xvGBCGBAATvmZLMoKxZRarVgbdPDly7gpt_NXBCVlkQkivlOKY7LcNScNAH3bvriVh8JZaDJyj4rofAiZKE5anVaJzKFvn0o786vCGnevCiAPp9kHO-h1LvwVCwM97Q-UAMPQRIB2NGw_dAYch3p1WrBO_A-gfIP9AOd-2UMgVSRZa76ugYfRk4iyWJJeMC8L2cUxfOQzLzj0xudEgAQboFQrI_Mg0acL7ROYFGGam4igQOIBEsdEOjv5lR6YIUoS0I0ka1GAcrLF9HHUFqVYjJjnQxR0CKMqYwI7YNA3Vq71UBXYRAA2FVjvVuqvdUtljd80aAav2n9WUQa4bV4YwDvWox_SPgqxdPpOyz4Uls_nqHKuwbgJfokVyFSkTrdMguUUlfGOn6Lnp4M-CIjPgaEz5T-UTmeexNAQkLxhprReHPmj70M56FyueYA7nzz740_T0lqHgXjz0pioBEYbk38mBZF-SDp_YvR4eLxLGV-ODbAm4_P1QZ-9beplKPrv39_R9hDVlJFCjL6Nx9jQG_MAJv9zWDWW-MgdFCGLDC2Ww12_QXspjx8jWbqdb7-6f-b4ICz-40i_hf0v7b95_V_C0Sr5v6Ux_LD8dH8jyYj4RVrQhA616gb6FEZAG1ZEPVar7f-f1BmDjnKnwhXqsAC7yAeK1tqgOcyVHD7ve6UCD4UoqBkh7x-jLGKrVEcHgVTwBhHsh5LkTiPj4QoSwIZCm8xxo2YQBcxilh_kFNtlBU2eFlxQoBsAMlTaGZ5JQG16iASp51oxAUuRQB2KA-DoB1NpgFIBEBuAF8U0yCIhUKbXpxi1yVUFH7LucCHEjBq73D95B-Dmv4poa_XB3r0q9Hppwdu7HnPDqBGOJQBMeTNpiBEu_PLIFd-p8Ezb3a7pBJDGBu_kkjd-_3qsowu-Ukzb9-NdNYHO0cgcH4uB6wEqA1qqsqD4bCNxjfr5SzzEKCeKHKCAG0BRcPFpkYp4BIgXycktEAsSdgC_SBBCQbgzwAw4sTZTa6UFO5z-DysAAA4z8PIBMSiQQpLFAa3q6QYouQQIBqBk2qUHFwMOIjT1BoEme4LQTQekEtBVUMPJQAz8OWK5ikKoWYdyJQR0EXq2QSpSNBYwcIbWqg7j1DtBSQRFjxiI7uwCbySRhigOcSSPLDJQCQMMFJBOQWW6fwEMIUFFw7bi36CQFgbUHnBvKocEcqvQd0G9BIhLRyZBdBp_BqBX-C4GgELgRj6OB5YjDifBg_pELfB1wXB7HBRUH6SPBqwY4JrUuWMtRmoq6gDAnyUEJ7yXBEgR7ztMkJEkhLAk7vsFwI9KoYTFkiYovLLynKAkDQhNALCHCg8IWvLcGnxDEHDgq8OiB4gCoO3QjYOCrGJje8SstSXUsIGJBzYC8pqZLyMAEz7EhUAKSFLsA4HCGhsIQQIBhBV6KMoih70mKH5wq6okDxapwTB7xB6ADWKlMUkFCEKh5ITEDwA3QaKH6hiQOjDxoMuA_yWGO8FqH_uuoTCHihFIYaGYgxoQ6FiQZoRjAWhA0gqE6gMyPBD7A6UKEKxA1AKURTouwhjK6A5oPyCK0myvkzta5QHKEuhSocKAqhXlAtA6--wM36BKSkLpDLUmYaVj9czoQqEUYmNDaG90k3IEpDB2QdWRI-S-F5TrBNwZQBbBUADsEKSF3qUwHc3SvWFwejYdsGTBrNvEB6wMuAvTietJGe4e-s1HEqsYdQSMEu-5opgAsM7nHALKYzoLiCWEoYnxRNhXlNqhCgMiGgDxASLrf5guArqOrtwY_BgD2qV0K4oz81ZHQIeB4im3zv4apJZg7hCkPuEvBZ7libTBw4UErUO44VcAnArNIEwwAOYZmBAKFgXf5ZKcSt_I2wNdEYrGgUQLaIzORwMfDKhXlA95VM3SgW67-d4QsrvBHYZhHWSJgZ4Fo-IQv8GIACEe7iTCPrHqGuhiQGP6nK8ofaFJhPIf8r1ouGnTiFhy1MWHxANodFZe0rEbvQVU7EQ1icRFvnuFQAvEVJAvh4kQeFdBIEQQA-hgCPsBmhokYqHchpoWhEVi3SoJH70mVP1hvkBIDZbuEAmPMDmA2tMEBThAONCBYAt1NExo00kZjSWw46MyCWo3QHBGygsQrsq-MtompirA-9BpiqR3ERJHBix1IviBi-1FryIU6gPT5wA2wBAC_QDnKZisRZGEiBxBFEugBmm4kjkBWR1Dr5GQkmkYFHiRkkeUwQqMuDpHdAMhF2G0BPYc2FVhn3qUx-kVUTACbBvYc0EbcSPsOGFRJYSFE6hfFBsE1RLYQBL1R3QAtDwyDEpqEhRM6FaE7ApYS6TlRwkUmhkekJI4C2Sozh4CL891Gjp5hDWDITVBtCLZLYagFEu7B-SEf24E4C0ZUGOCy0VRFrR6UJsBYAIzmM4Rge0UhFeRAaJ_ArRQoGtEbRs4FJD5B10atFjOoYEoBz6H0TdFAxKQCDFPKYMYDHvAHgJ8qlRBjF1E8RPUTwSaRLqpehy8mEcsKjguwnMEKSY_L6Ly2dOPjFAsjli_CaRp8ANBpR40bxEnY7QEJI8ymkRYCjRfgRNG1izMZvpjRN-jaHsKcKAiCPg9yldw2Qkrt6Y6g2upTIig73NeC7CAMV9FjOP0SJLdKVMc0CzoUAG4Z0x4_ozHbR3Sm0HTR2wLNEERFgFNFWW1ocGJ8xcEALHtAQsWeAixCal6aW6EsZdzSxssTDHyx60YZKu4FQVCqPh4qsjHBRtYmdEz6vfqKFBRmsfFYXRqgbf5Rxtgg_6oAGEXThP-96goFuarMKSDehvoa0DhAnWomHqRxMSJGMRYkd1EcxBjLsoDBfeJIQVxa7rKqduVKvIbUq1GD56YgrmkaK0iDcPIhiQxKiiHVBKcQ3pKBtNtqiESj2NAD6KJPNiHnKQ8WyF4-I0XKCTxvoJvrtArGM6CZh0ikHJxx2vs_5LeigWoAbCsCBmEbCk8SPFiQH_ofEdxKYfXHQei1PoLTIXcbEhbxbmosDHRn8Lh7QGcbrf5ByjHib40eb8VVDdqWgagyMkK0mR4xx2gRBGhGhykfKbqbgU4wcq_JOdjoA8XheGmqFyhtygqjegYE_eQajYGwJ7iuPzIqDqignVkaCeCriUZGKfHci6wCAn_uEQBiCwA0yHYgxiR8YkDjWgMBiFPx0gffF9xagFp74he0bYDXgBpBtwvs5BNIpUJOKqW5SBGQDqBcincWPGSJn0vnCmSsiVMHT6uYAtBhKVwHtGKJ9dCxHl2VEZIDaJFCfFL5gDonKHB-p8HN4Ug40NABQA7QLmJzYVCe3qsJJHi6Q3qj_jr7jIuwmglpxcoPJFhhBCuaCGJx8XwTVB0iUonnxdOG4nxxScbr69xAGD4mbCCof4k2JgSeEDZE1TlREf-L0VRG7KUSRvHJxnCfEk7xviUkmv-CQBkm2SH_t87HWzgL85Xc1OuGQeApoNsBEa1klYla8jcHYlXeKvlRF7B8iftEv0fpGYniK8kd97B-8kU_6NwFSUKDeqDic4kUehWPMkaBkSevExJniXEnxeGwn4m7xUyUEl0RISePECAYSTokRJDWHklrJ8CBskJJ2yXKDpJSER_6vRc2E0nigLSXd4507SQxj1w76F0lVUG3n34kRYyeMokRGPm36pE84PRFn8-PsJHaop1PoBHycAAwl0i8el5RUJ8OO4mbx3icUnph4QGGHkJwSbPRo6c8bjKehV0WClzoiKe3GjxXlLCkqqDmgiltxc8DDh7RVNM5JkpxPMNFlMKbgym4yC8UvHEpLpI4mLJIwLYHrxXlBcksQVyVil7xOKQfFtxTCQ2peUpCnvQUpTCUOFlhGUMylOSLknvRthYlnpGFGzSWVG30pWIKm1x3vqskeJlyYUmbJJSbmEbCtAKIiBJMifsmSB0yMcnciPCet4aphyQMlHAn4aok4mMuKamopFqRik_eNqYkl2pcoA6kWg9yQcn9JjydVjlxtNIalvJElHJhng17F_KSkgYu5HmeQCkn74qMAMaBQI3NO0n101EL6D2J1WMGlLJJPmcmhpBSZinYAWyaUlygFaSwwwATqeElZJhye6liQuSY2mxJ1qdcltp7QB2npEMwippdpeyb2nyJ_aefE2Kz0T6mnR_qQO7HkmPLZK5xyoT25IxmCb37ERSyjt4HpQKUemkRAPuRHvSn0dRFMR6kU4GsRC0Kj5npGPhRHXp26cmH3pBEUpATpXafclBpdaU4nCp5qXvIJx0GOKleJ4aaOlRpSEe-luhruNkm2SaqUmlPJqaaVSuk7SblLv-1aSakAZQqSKkgZMuOBmSpLabak0AYYZhkCA3aSckKpLpKEnOp3jNVjPJrgK8loZRWguzJC2GdBhMZLGWJRyGlCbhmoeSQEIFSwCkqIEsEVCa6mfwcScRl72K2KIl1p_AWsGdgmiG6zXxn8LnIUiI2uQqkGuQKPZLAwQuQEa2DNrKyh2eHvCbGZNBkAml6CyQJrEeFKtR6aBP8aAkfxegV_GkJAYp2AVQrasWTjgJwPAAzQUwDdSCQQCKIDIm_8S2qhucABDCQk94FsoqJ66QfSp83mc0K9Qh1glKnwWkeKrpZSbtWT3O8WLOZauLzm84g0Hzs4D78WUhiRFuUylJDBC0WOVT70MhNlnzAG3HlmPO9sVK7OArzu85nOoYBGqPCuGrWoJuxbvm4QwfQt7EUERbnm7hQkUOlCwweMKZCtJEERr73-IGTWqtqEqdpnoAfBLurvYi2uIlhZTmQAmKk8Cd4o_epHJt7XhY0DFmXYtbl-GJZhykYGVKiUjlljQrWQVntZJMp1nFZpWeVlc-ZTOS6Uuz8CgYj8i7k1n1piXix43xrNjKB6qVVMBLXZfWINkIgPyg5qBOIVNgaGBI2nNjSpY0lJzVY8kf0FNiTwdmmpxganwATEmmc1m5ZcNm1krORWd1llZFGTLgLQ5dM0AUZpIOEAhAT1IGrUxTaIEx9ZRwN_LYACICfAMkrkqwbdK4WYCJtk5oF5RhKsuQYxS5gCQRFj8qYkgklQV4TkD0xSqXOiDqKuUiTjIlmSrnwJiCfgmXhYjC9lo6FGXrkNYa0IdknhXBoKTsAE1Hmr-oVkToE3q_agUlByfapaksQyOAFARs5KDFk-JtvIUkVaK2MVpsqWqlVARBnmmAEYo3mCPaNIgUDABqZwhBagjAQoCnnwo6eeMiGZjAfoYwmqfPh4ImotMSbce78UEZBynaithZ5AgDnkIgeeaeHjq4QfXmN5aeY7CHqhWoWaRIj8aYqYQUkO3lsoTeV3mfwxObLCY08bm5BC0XruxnnQvribCMWcoRFkJuSwMPmp5zeTgB9CS2O7kQR5yQzHrZevltk7qMOXuonq0-fHmKqGKEFl3UKQMcoMGLiaVjw4Xubr62qn8cSZfQdqmbnIJD4RCHPBUBJsGeZDEQ7mq5fOMapSZ6NNwk95EOZtnpQvyiITXKo7uwD5BLym8rAAHyl8pho1_tBjSKDmLfkFAD-bGE848Yddlg4S2LEJAF6AFKEyhEBdayNhnYH4rQFtNr4x-ZcAAFkhAnmTXT0gkAD4A-RimHgKCQ5Eu9ABAnOeOBzUiFLlECF76AvA4g91P2gS50GP1zHCDBQglj6KhclCdgKCVcqbqyBagXoAryu8qswG-tgVzY2qBYE4Ri3nwiyRsAN67JCLBBoWdgnqZdE0qmCUdJnJ7TBYXyBvdPDmfwVBaQYy4SOemho5pPv6KnGXmaG4xC6mRNQWBzdhEUJunADgVepK-UEUW5VOeP6puJsOm56RSWaG5Q5iqX4WqFa2ZEWQkEKXt5lMM_Cjn0FmheA6H5JRZ_CfpBcdMjFFCblEVwIuPvEUIg0yLfRyKk-TkAUOLXlMC4QkYazBmFN-TZEoghBVHI-5o4K_meJ4ZNqgd6oap6qd-h6dt6kRrqt4Duq6qo0VqhnbpAlk51kbdRTFx2aoAPwKIKbkmqMJkE7ru5gEsWfwaqisXVkrih_l20wKRjEzAbqh6qYIuxfNjhke-WvGzFfubsIEFM4PySB5sQOSj3FpOSRlh5O2aCo180WIMw8JUeb-4x5wAQDj3WbAmwGMsKJo3KjMxXiqgJ5u8n_Tv6lAJAlSsE6LQB5wCSPvQWoUEEEU6ZQRRejCgC_AACKk2De4DxGKHRCOAaGDIgjoZipDB951jqG46Z-cN0i5iFUDsz9CnRZhpklzgByXCw8gOWKiUVGrMB8l3MuNiTYUkCF6YA42EjZjcBxBGCoyQNI6wpoYAMwm8lNzjIjleKvmSXJQS8YkB9GP0K27pQVroVnqu8WJs46g2zhbHwogsedyW6xhDZC86D6hqU2lKQNqU8J8mWMA0l1IBSgKS76LbjxaiNNQRxArJY6XUAzpYMCul0bjqqbU8ccumQWwkbtHmsf8HkA3KUkPgHSeF0cgwmIbnHgwRgxQPGQXUvOepmnQhIjkCPKjJQYXFAb0fGV6w7CjI5vRoiWuhGptGbcVSY6skNqRk7-TrRwBIOTAXEa8AMmXko-qeQrfFE9sBLBCJ4VuVcAruL2Wa40Kn8U6qqpuEGLoqoS4UoMOAI2Xxxl5SJTIlima36d8vPFSXylrJd2rIqT6sHZTEheSZm02yVl9BJSKrmq4SuH2dK66uhuvK6tm51spY_GOVoCJ0QdBf1mmq4ir2VGSzHqsCflgBIOX5uSFbMAoVqGmxzyaZJRSXcs9dFkB4V35XAh2l0BmRW4VMoNSA5YTFXSUxstJYDgJAQbgxVQEeFZ0jIVgbKRwS055bKE02JUPHn72PFeMh8VeFSuBiMC5XBqUlQ-iyURAGBFeWV5NmdQa_YdmSYi151WEqrYJNmS5n6BfCq-X8Q75UnhSVLeaEETqGZapXPxy5bAXzu2pe6WG6izta5HOGric5uw5zhmaXOlgP6UCxXlNbGSuLMmmbQQDQFqBYxtBFZV7l6qlwBIZZdHJiwolsd0CmKQRTZYFgNdA74ZVNfoL7zul1AAo5AHgMkAqVw4O4DZlfRpqp2A_sA0AkpgkKoGtq94OlD5BdleSXoVTVQYUjFSlTfrFAgRVXmxxBGQYwtF9agXasJnVfnFfQO2RuXAeh1im5AajCK7jAYe7jwTOVE2JNWnlLpM4U3-Rld75V0OeO4lBFG2W1XB-vZWIS-xQStlCcWcpdExrU5njX7ucuQPkD3U44KMrpABKKNiCgSQAWLmAkgjrmXEFofbmGqNleEGgqMmVeXJFm3hlU3hsVRhUXRTKLtWDVG_vknDpzaSSBygQRR_6NVYpSQkERAJcBnI1RGSOlYpLgWGEXpXAA8mw1nVW9GwF1QfAW4J54T_ka57Cv0mXZ_PFTU41yONUGaRe-d5jN5ceXEkXKkmbRWIxdOCeVVx93jWColQAZawcqR6nJUiVFKJeXLl9ZX-B3l36GmIGEK1tMZe6RAAkiWBKSLqaBudCj_BocBeRZliqZGFnz2eVADMDJA1MfKS121JMEpWAhkeaJoCT1bmAsAgxaNglVzlmjQUMRpS6Da0sQE0qoAo2BhJui3lLCnZRZ7jz7M0__pVgHWzjpa5uV-zlq7ZWwEibUXWjjilaHWKZg66suGdfBVIWVwGhwP6TNjoox2_vGaTLEqIfqTvw7JN_lpErGvXVpEr1HAACJjddGwvstaByAnBhZreGOwl-SfJaVA_BLQ15f7sb6_YR1cQ5yYNkhfLme84XBBjw0TBvnwotNJzke1tog5G9g6VU_mFm69aPndqhqj_5EVDqr0qIUa6QTjOGlmEfWd5_JAWRXEcmDUWoSimKYo6KitO9LRMcQPvQc-3maGLHAjGPZB-emUn9lBFK4NVYDIyeSPkP1eJPfXN5lxH_7uZ6ND1VuR0Uh5GSkyWCZY4FSqm6wn1uCWrkrgNFahUa594XLgYNQiV94w4Q9SPXRZ94Vtm7e2JusB1osbvg2EET9YlkYNcCSDWyhkJFeU_0ekCpnGK_NYIpg5o2gsoHl5Ctvl6Z0jQZnkF-2bAX02Y9dQIA4pHtZnOZthnXGwF_8ctm6BJlbAWgqJ8krmhyHbpiAj1WCc7Qip62eAn0VOFYAWUARqGg0BhA9WRifUGVeZF3FMAkr4sK5pNZXShE6tUHxauRQm7NVcicH4JVZAkG6yBw9etmHBE1UHEW0PUHtFEpVDVCm_J3qf0lTK19d_p6R-NUjWHVR-RbKdVGwsEIf-O2XtHyNxqdBhll_SX0KJNgaS6SLF41aG498c-ai6L5QoMvm0NcTWdXC15yjvn9ViNStmE1dRQm4bZfTZ_57q2NQm7b0chmhneaFgNQ59eY4IN5Teo3kY1aUU3jN5zeECepkMRy3qt4T5vZasUdVobhPnmNyWWN50NZ1RPnXZL_E-nrFDTYCm4R7xeTU4-YhCIS9l1-Y4J01UkKfWM1VxRCSEJV2ajnOFtTVDnxZ50Rk3DJCyhln0xbht8UYA2RUlU_iN5erVhChCuplsFgEUcUog6Sn4wN5sDRBmHqKoMhn6VwEDd7g5FYnERqKqjOT7qZ5onrACAtuDkBgIZVevn2ieIEeCNcc4NAKRKw4Fyxvlw6OOCCFoWWH6DY7AG9zvca0HUq7ADLcqLu1bNEK3mV0QNTKfc9PMc2tqZVYqU6l1zUW7vBOTUk36tobnYED-F6W1WlEMpb8WNZ2rQqVKlJ2DWG8GdrayW6tDTTSFyY1AKNgKta4XYCpNgYh3K4tKTLSBmVlFTfotAo4GMV2N9lanFoNY-hgwnVgBE40UVFlfkxqASLHDUlQ5oK7lPhj3jcX9JqTdPG1h9ZIm2xtKbUPrFtyFKW3jI8sMm3CteTCdlM1wLSc3VkGFaXRNNVlRfaONobe-VAqSKgyUlNcpTq0cl_TUcDi1mWS353Ut3qEU7VoCXzVj5cCALWFJQtewmPCijfiHVt7cLW09t1jJw0voP9Cq1htH5TG3_Im7V211tqrbKzINidZ1TR5-mnLXJ8MTszA3ESssayQ67MMCLJOZnNLAEAHgNUAiw-TrgxgAkgH-3eAksg3zR5n1nRKCy0KOFzMIlUuxSwAfFcmw_q5IA4YLVyUISzgo1YFuVd6rgEcydg3Ko0jF4vYmKDhgkjHh0od0ssR2wIbhpR0QoxLpM7QI5poSJ4dpsmXpwGcSNIaXkd-oLKOmGmj1w0uhZrrpagDOtFxEytOiJ1idoPITK2uclrbqxqXZs2byWsara5hmOoH-aKdaOup2ad4nbJ14qXKg0h4duWO3CoOb1asJc-L8YJCd2gpev5XA26FEiJAf6GtrLBmWTIRgNzICj7FpWUs8xTa5BB52oAvnc0E0FE6qTFXliIv4AEUxPDLikx6eBKF2A-EaVixdKEY6GdIVAEKD6QVFa6HwhlbQ1jJd2XUCzpdAgJl3UlBXYCQt6uXUl2tacXal20IGXXuGldzEfCEX8q-ksErBubRGAdyUXceT5dTXYV3CAxXQ11V4ZXS11AsrebKEDIndhDXiqk3TL6MAGfmKTCg34Qt3r-6ULN1HgEKvVkVRlmOt3dAJUJ3ZzcjTQREHdcnscBZAndqLUNY47QMH944DFOWvu3nVz67uR4Ffxv8kMAd3r-qsAOSHd_KkMwGdU5A0ik2FqAF1Wd6Aso6_t1QOZ0VZ1ccwovoQttEBl1b_BDBJg8tkLZDGEFnY5zqrgBLYI90tjVx0U5vNj2S2iPfj2L-R7hfFkYmjKcSqmkSk8QiYUQFMCnUz1YUCXxp4DqC5QRHS8I2QQoAz3BaI_PZydgmXhpj9hFVKD0Z-K7Df7v69nfyWU4TnV2IudZtsAaGNxaRL01g8PWNIOdsvYT049Y0uaCa93Iubx82Qxvr1iQ2vcT3O5JvXL1K9_nkcArNI3lJBh5gymd1qww_LQAHdBZOs3zdHvZwA7N92Y4K7da3SPyu9o4AOQre42TIQB983R91l6nxNH3v6gfW70DkdWbCr4hAfft3fd0mLH0Z9W1s70h9G3Xd53N3GDVlB9jtmH3Qk5NPN0rCvNlHjRAnxFX3q99NeK3zYW3fiHk0JUPX1E9tfbhod9OvY30jU_qMoWbRzvaPw42M0mX1RNekEL1ke08T7SWYUAPdTzdtZXpHz9s4OIJSQSYKZDtdO9ItkyEK_Rs3Fp1fZLZ19B_Wj2_REJDODJ9Qkbv33U7fSf1E9wkt3139EtkP0r9RGuDjXE3fNQz-QesG_U0gndgqITo4lO51P9kts7kjg9jKf03KakHjCqQMOJP31e0_Yj4DheqbPJTlbPRz2A9b_Nz0CADPcDlqw2AZ5rrt0imnpK8q1d92fdC3dJjy2KwuT3YY-bLrKpkDSPuqE40ivQF_lFtT3naofeUsB9CqsFpls2NXG8LR4EjU_DriXHbZL6ZlqoPnrWOwMc2l5FmZ_n4hZKkPy7ljbZPxsc0_B95SQbfJ8Q-GBff_mM9CFWPpw5fWLwPXYWORS0SDc2AIPKwQg4ngYYE-boSSI_gHh0wB5_Nk1QtwccvjuDlqqMSODDSM4NwAbpbjij2zzTDj1N4wT1ARD4_ttEOEAQy4NLlRZN47UF1WcP1zYyQ_vxA9hnTvAvCeA64CVxUtZgapZUUFJ2xq6cUha1o99CljxDcAK4OiKTg_4Ctuug7cX99exWAaRVlHsKBwGbA5eg16NLMmRJu9MQF0otYRVT0teFbTcQ29vPUX5-eumAtT7V4bdogfyNiAX4x0DQtOnmANhlR52GBJRsO-xMKaxX5uB5Eh2HDLBLwP04bOOQonC21exXUgpiFxWlwHFfxWEVglVdDCVlWNeikcElfJV0AiZa4BdurHUuUsFaw9AZodrgwibc44oOh1-umHT8wsEmQACO2FIORdX4hDmJ2nuAeHVpTDheg2LX1V_OV25GdlqqcrqqeHUG5gj_PWjEGMd6lja4yruFrylWaaNFUNYOEOd0DkTI6VgMxJmPADsj0GO0D7UG-DyNfQDMTIhRAgo-wDnVktXsWZFQoLCPwQ6UHpBEdOWJZ7J-ZHVOAFApIwiNEdeHbsoH2NXAR4KRGAzkNYDPPdEDPR_w1qPIjko4UO51ysdgbydHsGUPUpRg5xndKB5ZpHDC2Q5fCwQ8EHR0j8qWhh2EsSsYEorCuWnj3Kw-_EtUZ-r3TVwk94Y53au4lWlCq7KZ2tx2Hyd-ggYT6kVXM2VDBhC31FkaZeoT5lriYWWJlobI5XiqBMewSVlYgNWUEBmKAZgO-6jEujFlXvHkACIoiKOVTlBMVlKKD7RLkkljeQ9N2wFF7o93UAX3S92NwpNtIMA9O8MZ3qwesFwGWjkud-p_8o9fhSYDNXIONeUQFZhFJS9o9J1EykY8kMujmEW6OsRRWqVLgDWUpGMWAIY2_w3jUY5OP3jmkYmNXdb0TIQ2D3aHYMdgy3RB1olUHfOCWouNYErJpEtZEmK1GtaRyq1t5erD3lm6NmMWAZ4bgoQCbHCmO_gPHRPoZjJBlqCIlaaX91fqvzdH624RHS_y6ESBg8Z3uUUDp0OjeneB4-OlRA0gBFWGFB461i1IqMv8HeuxMx2nzVobcBVASNIDSSJFxMKD49WIzyErva4DOWekLXafUnHsiacT8hOQQKTHSCF3hBykzsDhdDQoxNj66k9sAXKUbYJCvEJE-PZCT4k2oOkcmg1Q07w6CXwqWYRk93y3ZAaceQ_0jA-Ea6T2Y_NEyE9k3vyrpWBAe7n8r0cJE7j85HaPKdCnbRNOjpdfDWJF-7gSN78Z4wRFIRsU0R2-pCY8eWoqfY-u0usaHVYinYESjkA3EbJqZMqT43RSjeTGkz3n8Kuk3YCiK1U2eEPglKBZMgtJk2zzn8Og7ho_0hnsRNMD5U3pM6Db_Y-08mj0psg4kZpjiTOmLiMKZftYIvaDw0iNGGBuQRSAvA9Oy8HNNI0QUKQhtO3TkvCtO1cO06bTe07eDbTLTm063gvMgh3kUJwxGg_9VHZCPuAnTQICyjTPsmwkj_PRdMWm3o4kC-j-A2RIXyAE3OhbYuiCcgegTHWNMMWgI2rCSyKShabJQG4hXo5A9pmDM6Ww7oJ2um6_px0nUsBrx0Au4Ok6aozChvxaCQUnZIhngaXI67tZknVqCidJM2TNF17WXJ1hTHsDTOWA5M4mpsuTLu0D7jzM6zNemPLra5SdwsRTKrc9gA6OnOlM6J2Cz9SSLPeVgrqtbCu7ADzovGsuv-ZnOPsMPW06iszLqC6Ks84Bqz-Zka7w6xhIjrczdMys606GeibNuuH2Wp0Pcf5pbPWutOtRPuw9s5K4MzPZkzOkzLM6bNem4fqLpbGlgCTJu6L3KJ3UyWoEjZnOu6RYCczjM87OezPM5TK-znxuLqBz9uiHMZm4c_rNyzhZlzNxzrLglwczOc7TMXc-c7LOsTV3G7AeCsc0XMyzWZu0DlzpM7ub2zJc5nOsT-40HPXcNc0p3uz-Bh3PNztrprOvG4PIjZEyHc2-a6zZ4Hq3tAA88rPDzhMqPOqzE87a4-mpM5TLTz2s7PPzz485PPLzGus7PS6g896a-mc86J1jzas3sjGApgOYBGAXKuuIUpsAAGqQldgBNRrg7nKhIDkocEcD7AlhJ2jB1tlv74_zyft5TUKBwDkyKY38rfAyYV8-wD5Op1N6AWAwAKyyYQgrFcb_0ztBn4fzewJXZHAAC-K3XzMC-rBwL0kIgtXD64lYBmeOC0Asug7PmAsNF5wBPoZQYYoSwRiFC6ywA1UC_k7EDxC0bGlYD8zNwRiaNKUWoS5C8qhv13GHAo00C1ESlFAPIGYD0D7tFOS3z3KbwvwAWEwCYkLS5O_wCTr8bv4uEsePAVIcKnqJ5G5g9cGouEdsv80GLdxqp696xi9qgtKfC9xMCsfheuKqTsoYSVMF2AME0NCf5HoskoAVPHaODf5OYvMBVi3RTJkQS8pg1jWEc7S6LZeh4Q-LcS4wDQJNAGYsYAPtBgCPzfbVegaCBQ_3gkaGSzNwQGF89IvEG0yBaZgD8ZG6LmA4JHm44A0iyUv4LmQLKDSQjMUguo53C0QrX-eC7AvNLwAPHWSgmEHm6OA9XQHbFwIVISKFgIy-khcQ4butNYKhIg0s9L8C60sXD54zWBo0ESowjN2DOIssELvS8QuElcAMovYgXLfwuKY_8yItcQIS6BQp-NnrTRV28M7stNLyy1iKYQfQnYDcLy1XPDdiyo2i6FVVirTR1-bYqQLsA3S3svwLBy6QulYd1dTECLtC0M70LFy8shPLhC8ACfCgy-uKbizaMBVfeNWf4xd8eCsODxkEvvNMugBVX_g4C0S2Ssy-OCw0vEDeFZhCfL0GDXR4VEXhIX3L05WuU5AnjVvpzw5ovPpdLvIGhiTQDA4nhlLhIgQwI5BIrADDLg3aMvYdwGBsO4sGi8cviIfSLI2HLvASp4biusBWKE4LrGEg3laDPSMdg4q76AiD9-ryuYaA3SV2cqhy8cusNlmPU2OTCWWnqBE9voDCO-zY5zMTYnoBgCFpyQYOKoCbNAUraMOMm7g5-87qOB0LU4DblqlA0vOCK0_kHxX6jH06cMRg5w1MxarViz_AkDMqzatDdCq-svriqq5USYrusBpbgBCQNMgprUkHhX3DUAIGyJrBYixXXTbauJTaoxwoSKsrQqbcN6wpY9ohQAKZT3lrUNa6cM_DRZZqMQz-Q8uVJlQ6-uUy4Aq8cpVFo-prhTrSIz9NJpCjVhgxlU5V2tXTHFUUsmAJS0z0tx_rnPATUp61UsIrGyFavHUNdHChfTO8CDIdgyQPT3RAdS1fMorvS3yHM0mEOuswArg4Epo0CI3evBCdephIwAq4UcCo0imFsJJrZlvIhULRwDBFkIWsJYC9M14DZB_QC1VavfrEK4SyYQNkp3WJAY4gREa8yQapiKYNkhZKcYrPpmD8FlIP8NWroi0w4wC8vhVH8QJBUtSgLxyOJF9gtHTvBpD7C0svSQ_SwQCDLhIrKu2rHy8BUTLRXTJszLJ0HMt4bIm-CtELhG95TnEgmzsBAbX0BGASl00PEBFQiEVYlLD8yx_IULbnG6JQApoOgDJAAqzb2RrhIvZyCYymBtSGRtWewvEDv6wMtMrpWI-tuGL6_ZuGYGQGkA5AXm6CtCrci8yCnrZq-SgAblHYWBzoo4hwxfd-a1MvTYpICOQ6b2wNqNcU_XF5s0eaHQ9NPTa43_QlbAY3CNmjiI4BtLjw_VQavTasGSNQjpW1h1LAvm09BEhxG6ltHgwJDISdbAoUKEGZIStWRL9qAzXG8E67TCm5b4I1yrdrs236PgbyWyRtji6W9auZbnKlaSLbasHWjSKgW7OMj8R65fOgr82xJATUlS5pi7YTGBGI1LAbvhsabPzG0sPxsmx0u2R7ZcqLHyEXiopzDDy_XpstfvgSArwmwH_X3bam88uPb8EP-vKbC081F9u3SvIglKbOTDvwg8yxJCUoEy1MpdAStMV1YglGzwrfb7G79vEGSvmCsQ7fS4OKYQnE-uLyw0eBlCGbPYGMQ10lohdD3N5omjQuiRULCvCLyK1Av2LxcDX7iLxVYiBubmElEoTFd-cJtRbsiyKvyLiHSovXZP8LMuw7h7p24nCtO4njpQe3iwNTlPQ5TYcDwIyXnmZY9Xc2IGSrkOhdD6Y6gawMFq8fL_gyo4-Dmgr4D6rrDDOJR55M-JXOxTME-VPLu7nGqjgJyU8o4MBut4FDlkc7aqjkVsvDRSht8y5fO6h7BwVwBL-EMJ7xTyK3ltnDZfKkiUT5UIacMuN-apHuuLRFeRPXFLhVMBIisxIPBSQae9dn0UECyCsgjgkFBCar1y94Q6rzaOIOrbHDMLApZqe5HJwIle5YTJp2qM6s3rY8oPufSPy72KZ7vscruo7jFkXvLppKxSwWm03S6xytxZHm5CQxcB7XxAdm8F4S7ssFRiLrZHlvskoIe4kDNFte_VMT8TU_sxaDS7nMsWm2-X_l04_Cnm7DhBq2-gfoPno-DUMfcneu7Cc-yvuEiL-8BPzkEy-4XdK9-5oko7IByYj37kY_asFLXavDOQwG1fM3AbF-1fuo59FIirL0hImXF5jeSvPWGrP-1-jtA1kC5hWrQB3AcIgz-_ftlxKI9qh7MXIw-QqrKB9F0GM1Oxosa7HYEw3TBmkQtA17uBxIpIpJwscuaRyUzTvkliePQ0PxA9aVj18Ja5wd8HY-mtOw7oGV9CsHcIOweMsRy5weu4tS8geWiqB_9uJVTTQ0Ldrhw_oumrfhRKsFFD8fBl0HcOyYhDLBa_KtGHSq15QmHj82oeu4M1bplMiu42IOUx5ax3uXdi2CiO57ba8LjAqGOwevUgNw18vDdbaxOsUoUEEuuo5BnuaPTrtaOWMpHYjCoemHcM_9ta7e01ofjLbh8UePzI-tQW6Aqpsp45rxy2odvRb0bUupDcW_YfABmkYltvTrET1ukbaW70cuHz--4ebbRa8rGgHkW4ErJH1ozlSBHe4zHNNzpzkePOj0Uz0oPxPyvDPHKD43m6Rjr40mNlRc5dnuS19a2tTChfFcjgDjAjfvowGOeN0PtDOE-GT9a6sLvCEisM3UdL7T-8O4CVH-1PygHjB_LXAG2GMUtQLxw90ATU1gKGIcYtdIIgvA4bTyvZVnq1vvmiOhwDBstboLpCoA1cPIVHAetPdRo0dECUvQn2IDYnEGmmFvvUOd1XQKjYqTeCRyToKw9sU7mptDvL79BxMs10wB25Bb7b0mwj3UWAIkC4Qky8V1VLOQPfvSLQq8pwxb5gBCffHKu4QdcUrA3xPQmB9MFPrL2BgLO2xQsyGaizbsH1jHjj-wqexIpx1KPcp5mt2oqN8cIHv97KcmadESFp0m3lcUkINtEhRKY6dQEyOEapf4se2xzuntp-3Dp79FIW3DR3tFUOpa5pwGdHL3aFiMdT--hCcsE_p0nL-q5RjwTcnrh_kY8CIJ3xBgnp210DFKGZ0_Ou1MJ7rLmi8JzcCAKcSvTSglOmBMvmiXU7mBgI2J7iezgL9ASc6YimMSfg7qK8Qv37b83PDhuuQFwBxF-Z-KCDhV81KeEzQEQWfduFqH2dAexQ1cD1zlcysc-VdE8BJ9nLE1OeLUdR7OfycUFo8aHWbc6nM1zUHh_0kCq9UifheoYp2C5gL9Bpi6YUi8Kv8Qoqx2BNhulkKDTIJDWCo67NcXrsUBBu6XtkYny3QLkK9nO4TpnLGxPnpne51acB740zBdg7p2vGfy7LBPIej68aT8dYgEeRfGsTekB6eLe35xBvJUhmWL3HCpC_83iK9e59KHLN7RyjJ1VwMTO5zVs4mqZ1J44hNohUmb0XjouClzlqwDoiHUOisK-cs87t5FAWPzHNNNTcpmVXiA8XiFF_PShn5KVhEpEh5wdOalxm3t3zk_pweVHyC94Sa45Fxot2klVjRZoic_eIohnJKJd77t--vGTvnAbtgNfnKKsg0vW8sw2cEX8Br6f4Wg1hgY2jGp4dZOzLs-1lsXuViEUFQD-qCfHrUC95hXklizctgDPKwpfi9FC1dVHY02nK1mizQL5CiYBVZHUcbJO10uArJ1OrAXU9kVgvi9ziGkAyXFloSV6Y--wVcRrTIdI3MnxC3pcuEDgMGqoe5oGrYdoyqPwt9uNfj9tEr9g9ZEiBpOxVyMLPzPwtZ5ufRLkyLWczKc7nn8NeTriqi2QFKnuuyqdF5fvUl7G7hHooOIiUZ37vUCNp8mfK5Ze-JczcVBQnvKizQniGungoSvJRnXp9HvfnJe90mOCSIndFRn6F2CrjZTlRRdj7aJInJTgRR0ZcUtShrlBaXqlyUffXZ1wsoqXNR4UsQ3DVYDDQ3SN0cOzGGi1pfHLul3Ff6XGpOuIMZBk9zmPzNRag4aHqO5Ucd66NxwclHmuO-iah3KTDePzxNyjek3M3GKC-QrLWt0WY7J-Sgy4jN7Tf6HpawKlo3zNxjeKFX0DcMyE_O7Vy3n1BXZTcEct1zfO4it9SHCRKUZ5kO-jm3LfHUDJ4y3NAXKKyHLJDWOqcOUoU93NBXbM4nObGbOinPu6ac2HMizzgK7iGngR1KusRNNxLd03j85GMq3RE8tLaR6U9U3JFct-Tfq3gpMeRy3115fsHBte-lDh3Ct6Hc5jcRAmfVXet3NOF9L20Lx4ALR6oXpQD10KEx3qhTddrtUTYru53-dzUWxnRZD_Qy4CZ29fdoVd6oeqFfQx7vwXScizVYXnKiXc1FZd5rVRHeE8dslLYoLKqIbj7MkFHAtuF9ZzoDW2Agd0hImyUMgAgAX5k7cCyyd_rHGmANo0xt6qbu0sDPhsFBry1avL3GQMkAT0imDPzUxNdAbdwIdK_d3ibmEJEhwAZ4AKCm9sNCcy_osNIRh6wX9zuplc_0z_AI5LG8SIIzkpw3HsA7sDoeJA5msSoMap9yvdOdrey4TxeZY9yWkpGebZmd3GyInLdy510bvCgVXig_KoaD1FkBLHbhf6HFhJWQ9hLHbrEJAP-e-JRF3DhU-qL7ZBZwM_2-zWYq_XsWeX0WX0l-D7pNc2DiO8ZF11CHf94hxfv5e_NzAFL3SD2AfPDMwBSiMHxUNjniK87jfsJHYlVatgHu3q_sRkOe7xLQAOMnucSPzaFI9Ygt4DI9zLYBZGDIEipxoMTLRrTMG6PHg5_qCH_qM4UGVztPv4nygilWJS3-IaGsmPsYgvt7tJN_csog5SzqHGPpCrQEBu5odVgMPzfHOhZLtRF9DVKMuDPd0S6HNzFAPW2FqyaOz-8tt5uZ96vd9DRDz4lUPJGd_4BSQY2BNiPizYWYpPs9_uL0g50P4-AEQD3Y_Mq_qN-dAPF9XAg9POT3vRtdLDXPWcAL4FHUzatPvz5hA-9DfcYg2O_gTMg1C90DMt3rJNSYA6jZ_cXsrcl55TPMz_s_3LAvos9HAWMorxkg01Kk92AeOBc-DA9af1y2Av95hr7Puz7YBv3J8KsPKFn8EA9igHT030FqgD7c-31tit0-3PAL_YWjbY0ONvSEr9-_fJAVl9O3CwKfbv0QvbT1C-dPSwfPQH0rOeAqiYj1QGt7AWz5c8xA1z2YpcdXdIPC-RsESc-uRQkBwXcxeNrKBcsbYoxpHAJwBwWBBS2NcTPyuMtevC5wEaWfNAoz4hTcx7tHyecY1Z-iiV-397aKCXeIL_UVRs1OSdqwWOMOQDA_QCxHmY57I-xuDKL_NEvoJDhi-5PWL38tC7r6GrC2i3BQUADn8AMkIR7wz5C8OvQsJRdQE_z669ouST3ESvyovrEFkv8UXPDEvQCvkAJIK9RIhwgYp4kV-KdoqHV-R1LXtQbPqfgVPWcEXqhv0g5AADwTQiFGK_sAMDwXYhrPQO88GDOG20_01zr5i9evEWKC-S1MhGK-O5JBBtxwvapAi_fPBr9S1GvvRQvAqauU9SfiY0AkrSZKZouVxkjk9xGsc-GQFs-a0hA-zfFvj7NkCMPUkA2-9PFKKwCkcC3DPyL94ZC4b7Pi77c-13vdHq_3MHbyJTEHLpFQcYAS76dgNOt4P6NtPSwKlobvKslG-7KLz489f3F6iC9tPOLyndgMtjQAWLekJJ6-AvAhwGllMtHJvrAfLr4C8nhcmfd2w0Xzx_cPss2j_cfv-zwA8uYQDxaskmhNoaCy75DuSACA5xrJKahtz5dCDoxA045XAa828Y6zesyFdVUbb2JDK8fWCwye4OMl_cmx86JE7ZnBM9LCLXgQf9P-Y5mto_lPyDzQ-swZY5R-bXiHoR5eLRhvIMm7pb5keQFnz4i8d1_92h8RKWn5e9kf5b9IPQPSD6J9W00RkbTyP5931iSfagBkFeP4Z5BTHvVvhymQ-0jTPwuPwymSqB7WUT0_3NJ2L8re0H14B_URFQ-Tl0438i6tuYqYSVEGM7F4EroivynscBuYDyus0XSX5GphX3SmDkpfYGJTkq8mEdRfZf1FwcdzY5t_5dRQtH2RYLzw9Zrju3jh4riQkuWEhau46n98-u47HzsCcf-z2GiOfles5_K3cAK8-fv08a7iBBnX4-zdfn70I95fSXd--5Px5X1gnlXb9VhnaRHyR8b4-720-NWTT8e5rWgQZxwbf0Ha3yPxHDxRO0mh1hV-HzSNsfP0fE8-ucnjCU-9FOHn7t5qsT6I8R9ZR-3_p-Hf-5xlCHnUUDvOrz-8zPNHzm82rNbnJxldbskHE4DB11dAitetUWhnRcfuOHYR7o8aGjITQlNyNb44aL6NBPq1_AMYSerOiraKQ_FmmZbuAATBytFY_AM-otD1vQcNnEGBGeicQZeVQLWn400HsoN0k4GKyT515j_-NtBSwmsptFZw-YPo-oBkRNSRYWavEYezL-AEzP8uS170JHL-3Xng14a9F0E8at6QBQK7EPxLx_vr4XAZ0L_TqcP_jfkkl_bpFLpKvxPGCPfk8L82_REqAT8_Yh1PHDRzk7ZeJ49l4aafnn8E3ceTS6TLjW_n0qk0L4MPwI-O_Ln1NyM_VF6Uyh_9v59KaiwylH-sAwfnskIMYfwspp_kf1pvB-gT-n_x_vTzVNIEelNH-SNtmkdRx_ETeX_UtEhJrekH3-6gy_77QJ6g6_tu4_GzQQCqfHHxY1QX9EpyY8RYGMSx1bfMX1ruzPZ6kUy-6aR6Is78Pf3SkSmxTwfkSmRjmogv8x_03w1h7Jq_5n_OpkY4E9b_5yoE_-31f_v-fSkRrbhpTxx3--mXhz-iPmAmCHlMLjZiusAsPR3KX_jICvy9cBN4QUH_vXL6FVMZ_Y6jwSQLU1yG3B_-7mE-InU0DuHl1f-KfzBauS0Gm2nGGmenCOQDyERQp4UScn7VM4M0wtg3yEbgfyHbgPiG84cHWlgcenwBxLn46ozCxcjCFIQiozIBwM1far7XYUKKHf8pCHM0dAOaQayFGmCcioBeMlqsAbnYB7XCRmzMBY65ah4BpCAFoAgPlk2XGZgeXDQBeMiSQkgPdA5gn8QmLjkBpCGq0OyEUBFEGUB9EG4sgXTEBBE1807yDQBo3HrgeALQBYvFkg6OCuApALQBbzF_YVgHkI-AKg4Scho-OJGcBdLH1MK1T4BWIA8B8Ug5UVwAUBdgIIkj1CuAEgOCBrCBws0vQNk1AD8BL3zu08-TeQMwHwBPwhB00gNy4UtCoBU0ywBiCBsgeKG7afOC-q0QBfogXE1ARRFmA5oExAO4BRAnoDgAXwFBmUNlQAApm-o5oDAASQHLglABGKhQPfQxQOoBAzlrgY50w0bwHpI6MnQASYHNAgwMlkeoGTUKNlJkZ4DfMjsCWAfsDu4swLdgCwOuc_JSZi_QItg15lPMSXG6yGwPJYaLnOm1YBzM8Fldu6wHp05Fk104iH3G1wJ2clwOnMo5hDM6NgeBpwPpMaZl3MzsH3M73HEQuwNOsF5nEQLjhfMf5nuBQM2aQzQKno-MwNmGKH-Bt5hS40XDEEUkBgGKwUgeL3BsgyUCQkhOhqSewOMIqvUaBWoD6Aqz0ZwcIKS4CIJfMQNHsBG1mq0RQJNgsU3Iw-QJpBPQMvkIkkaBojhNsjoj_uwwKnYF8TsWBTCgAotFV67GhfQjtiuAivUyeDI1DQywRrQsRiTANaECAJVyGM4oJrAE9lJwYoMMcXAB3YknjN4K4BLsY0hN4yoMKMb3XY4n7gsAwmkFwywLSsjznmBt31kgUmgtBMwPSsawNtBOkCRI_GjlBMml38mhBtktWlg4rlxU4yQnw-L50AE9NjkuotHs4HGEJwcABMSeIE5QHGDSKKAySMViSuBilk10sXyo-riXaYNu2yeoQMiY1ABswRg01wnRhxgNRjzBgXQyGENHm6AciwAUuCLBzRkiA3RiuAJcgrB3iBKgAfHtB0uBL-rAHE0_DASMkQAW-rQ3Qy-9DOBeZnTB93RlwNdQY0MuE5sZYILBTXyv-ktWVeTZm7m9wNi-g8SEsfvCzBvYMeomIXaYzYKMGE7RXKNcT0ik4O94OYO-oNXzdBZzEWslaESMPsX0G7yWHBTwNRsLwInM1OjXBKvmDUvVi2GeTD7BRAEieINn481fUqO1YNrB8KnjBLYONAfpDoEvVkkE-4KQssYXysTfWlukTxNoUB2gwp4L_A1FkzBOAHRBmIMdg2IIEEuIM1wFVkXW00nWkdYQghRgzcUNIw24i-FGi24PTojtk308EPjINENxsi60lBlwEohbiDnBbENH6oVmx-7hAYh1jHSMXEJYhVEIQhAkMmkKdwsAGYMiSW4KnBLpGwhMVSqMJYMZwlYOweNYLvBDWGLBDYLaMsVlbBtmQ7Bl4LOIPYNEhUtFIhTTWDU3oKa4VwFJBwgm6yOABRsA4IfBQ4O6Aoek-Ba5h-BY4OPB9dRt2wCgiUAxlmQQxlYhmuxu6iqisSDkLOsvkNh6_kKYCdAlshjAj_Yh4LxCS4OBBv5ncc_ZksAsUI3c8UIQenvDCh_BwihktQsC71DRUU5UPufHyfaT0k642XCsEWIBsEJiCykWghFMYEEHQ_AG9YogX4AxvHEQ_AEvcPUPYA_AEIAtwHuAjwARGJ4FZAu2GZao0gcYkgDkCowniAFGDKcM4Gx4l6CqclgkvcYsHuYkgHdg-wBrwBAEkAwAFCgaLn4uLjCOhlVxgA8gBswHgDAAc0ARG3ABfY3kHWA_AACg2r0ZASACGhIABGhdwAeADyH-Gk0NeA00JVM30jmhC0OKcy0JsAq0PWhdEEqBUAFKI_YBeAZ8CiAO0P2ABCERh02Geh1YH4AXgU-hL6BxhswC-KYakGhRZH4A0QkRaSEAwAJMK-hGvEGhZMINI5oAphZXH4A4Vzmwr0LNI1MP4AtMM-h7MPFILMMOOX0JIonMJAA3MKuA_ACFhIAFZh1WHFh8hGFhosMFhssMlhAsPph3dVaBRyCRa1ijxhNMI4YdMJAA0QhEwefkphmsNShNaH6hqymiEnHk-hEMDmwUEH4ACVR5hDMCyACQCRh3kC-hOuV1hbgFoAzsNoA_ML6wtsJUAmsLFhIsNMc5RHVgrsP4A7sIdhphBYcyjBLYvsJthX0PthQcP-q4cJUArwhPgPdE-hvdQFh_sKThX0MQg4pC4QtxBAASwDth6cLcQg0OzhfsMThgcK-hocAmAzpVHAq91ThtgGkSFcKzhX3gGC8tjNhAIW1UeMLZhDMDZiJMJlw_AAIUw8IMYo8JSSSEUGh1sMEAYzlcAEYBtidsTZmjsSTEzsWvAcdhwAeMC5AJcK-h8kFDgEYFt4R8MUA0nn4A_13mwmuH4AP6XHh3SivhlGE7S5RCEAWOG6umoLwAM8Nhgm8LxgGBy-hP6Ufh06WmSrcithXDHnhh8JPhYCNPhu8OARB8OPhR8J3h38LvhlaS7SmQBYAeQBnh0UBLEywXPhmB3aIfWGGhWURvhDWAQRnaQIRdOCIRk6VRA_8OnhQCJAAAAGIEaGABU4TQipPGfCJyveCFmn1CGYDY1-4f6hXoU7CO4h9DYvuLD7tkAiXSMNCbgL9DHgLAQA3JaARAN1cZ7K0DbAFDCUgOaAjeLDAAAOymIOYABQEQBzQ1gDRQFeBpfAhDRAAxGwAOaBYAGqBYAeQCdQRIA1QRIBWI3CA1QXCAJQEABzYfOLiwouC6wpnIlwgeFTZKdCDQubIIwAeFA4DvDtwoOHkIKZQAASthgykGigRvFBcwgGbiSwCiRMSLiRz5mcAyUCWA1MjPA73AaAfAkXQrgD1ATcNiAdgAAA7bWBb7uG5uAO0AfoWNDJACMB6kSeAEkc3JIgPrIoAH6tzQNLF3YB6YxplAB6IHzgiAHAB3YOHB8AMQBbEmIABEDgN8dskg9YFIBXABIAmknGAXEQYRTYcHCWHKHDAEYIiQAPO4Z4SPDvoeIjakVIisQDIiLQPXlcoAoiVocojVERojMkNoinoJ8AAkPoio1odCXECYiYAGYiLEVYibEcAA7EZ1AHEcAAnEfwBXEbgitkR4iHYV4jgUb4jIoP4j5srx8voBHC2UiQiawEIiS3CIjSEXsjRoX9DDkfABjkXIir7OcilESoj1EZoi7gIKA7kS0i9Ea8i-EHkQEiGylXke8jgAJYjrEbYj7EY4jnEUCifEaCig4eCifEYSJpsgIj2AAEjYUUiiQAAXD_4EXDEURYAcYSREJUcKiLWmSUrWl7QHYdzFTtmAhRUbEAi4QYpRMIQ5YAM4htgNwBDIICik0hCjOUV9DpRoAihUZKi9YXlhG4aiB8JNwjSsFKiz0jKjLUXKjWSgqiPYRPMzwGDxTtqmoDQPXC8ADajV7pDRB4CVVjoCfA34UsioVMaj5gLrCzUYaicESuAcYdidRAPajoMI6j1is6j84aspLWnAAZSrrDlUdfNfUXmB0ALpB3YKxh3YOq8YAEMjdIMXDL4SKjVlINI7gDsiDGLnDa4VzCdYUrCAjjXDdYSMAS0fQhNYaXCQAJHCg4djwtQL84f5PHCW0d2iHYRABW4KgB3YKqZU4cOivoQ0BkkPYA8QRehaAAWJm4Z2ivKK2jdYeUAZEO7BiCEuiyUrrDNGPkAUgNnZqAJOjulPuiwUcBF3YO5xJJruip0XbC20cHCK0cxkPoVLC70dOig4VWNi4b-jAlPeiAMRWVBkYkBAEcBi6cKBj84TbgK0aCjoMQ1hYMQTCZwE-jwgBGikMaVgUMSABvWBZhb0SBj_0YnDtEEmB-YTLhz4crCQUTGiHYXGjI0RfDE0SAABQOrBQgDKj00bVlU0Q6j60ZEIc0XmiHYWrMvUTTpC0XTIDQL2jS0QpIaMONF3YBEpq0f4AsYWiiL0o2ji4ZDA90URj20Rt1X0X-j30T2i-0fbDB0cuj-AKOjx0ZFUCMTBjVMSoA50QujogKejXJLrDV0euiHAPmJCxCZjkMWZjD0SkBj0Rf1IEUOiz0Q7CL0TIhr0f6ANMYRitMQ-iZgE-jTQM5jsMWZjy0ZWjIsdBgcMYBi4sV9AEseBj3YJBiksS1AzMQWJWAAhjqMVhj4sWZiogGhjOcJhiBYclizMXhiGEUFjTMSFig4bYBKAKRilYeRiRKNGj-UZ1CFqvGj6MTwiQAEEBcIKxjGMdKiOMWmiuMYgAeMYqig4fxjvUW1UqgO7ApGptR3YCsJq0OAoFscWkiAO7B9qB4AjwNRBegboYewB_IbYBrwNhL1jEAL9xuCEQB5IDPwbYNjtpoLNj-8sWkNeBVxYUOqACgGWi0tnKBjsadjDMBdi0lFJgiIC9iZ-EWjesXJjCESNjFMTPCcMdzCCoBRjWsbGiOsd4jpYSABgkb2xQkV9CzwGeAPEOhw5IAwg8_MbIhQIUA6MX3gVkWvg9YLJihsZajcYbF8XUdmj5UbmjxsV9DJsYJimtPtRAGNdjqALHsrsTjjqALdjyMMJi_jNlgxzsDjOMQpiS8EpieCDhjWcdXBjYXnwzMSTpQaO9wkuIVk_nMlB-YdDiOUdRig4bRiLUV9DS4LQBxonChnQCmjNkRTjhIj3DRsTTjeMRNjPUd6jr5k2cZ4OlF9cZG14cfJiG0SLjm0ZpiA4brDIcWVjMsbVivoaJj-0dZj5wLrDDMclAJ0dViXMb7i7YRZjF0V5j9MSAA7MRujHMTuj8seVjI8SAA3MR5j8cXpifMUHC_MVejiQRlj4FmZjYUOFjxQIXiZYGniYsd-jy8SljEgkBjvcUXi08YBi0sVBiG8RXiPcQ7Dssblif0W3icMUVj3MSVia8RViTMFViU8T7iO8XViSMWRiXSKriEcWYEaMXDjgUUjjROIFiwkb850OPUiRgMrhdcTfoHcU9ADcZ1jCcQxiBAGABfIP1jjcXpFTcWNiPUW7BvUfNjFsTUoVsZEB1sTABNsSqYdsdhUIgDNipGp0BT8ZQATsSIQT8eM4OcX9i0MT_iT8b5AACX6QgCY9jOcfOipGjASQCc9i0MYdiJwGABxnEWiICZQBBccNjhccGxRcRDBxcegTfYe3i84fwBZcSDR5ccIJFcSDwVcS1i1cW1jcMXDitcVfCwsVgTz8YNjKcVmjuMebi6cc5ArcTTp78atjH8YtiX8W_jtsSbA4kGSVv8Y_EpGpdi7ADASi0RmU4QAIB3YERB4gO7AsCe7AbAJoSMgk7iQcXgTMEAQSiCR4ASCThiKCVQSPKhDxaCUrDZ8Zxj58RrjmCcsiGMWkQGQOdhNCX_iOCU6iycbKjqcW6jacTfiBMctiH8cETVsWIStsaqZb0NNiPANzii0a4Tp9B4Sz8QTiusfYSTUe1i_XIfikMfwAFsj4S2MUdsfCVTieCf4SLcV9CC0VxBtgNsA2CXATa0bsjDCU2irYRDjvQC-jwrqQSP0RYSFcRBUlcXQSjUQwTYcRkTkia-NR4fEBtgHBBlYAuiwkFO8C8bkSBsd4SuCVfjeCYETrcTzj9QIaBhiaMTu0OMSXEJMT24XWi6icYSzMTm8oAK9j1MS0ScMdjBnQGYSzMc-j3YLmjtgP-DbCfQS58WkSmCf0SWCT1jZXnmhBkfQhRcaTCqMYwTaMRCjhEegc3iXexk_O7BSnEoj-sQ4TTUYvieUSijlMaIj0URIjPQFmljWBPZ52AtwinPEAISeU5L0I7h5INIAR-E3YDOAoUJ0CiTbyJIAcSTOBKUUdCnEYoAGUUoBvkWyjqsONlBiT1jUSR5iK_HmgoSc8SASXCS9CQiS0UTUi_oaCS0XJoiIABiSMsItCSnIojcSaTh8SSkBCSWrBiSaoBSSa4ByScn4_VlyS-cDST_kYyTLEfSS7EZkSLAG4iZiRmiCidwTEAGDiGiWZjRSbdjuiWwiUicKjRSYMilaDMAeSeriYSf0TASfCTKRkKT9kSKTUSeKTJSViSZSRciKnNlAFSUqSKQGi4SSZooySS6SngP4h53LST9SYySjSckSTScCiL8bUSXcfgTwcbaSs0vaSHieS0E0d1iXSWoT1QB6T_ibCS58UCS_SSDjhSY8AXScGStuFKTinFSSUgBGSBPHjjoySqSMAGqSNSbGSiILqS6SQyTDScyTSsKaScyYiS9iQWS08XaT7YVDi_3isiKySF45Xu7AxXtWTdYQF0cCZajZnqCAO4aewB4QeSBACRBtIZEBBoZJ5gUexi5iX8TdYYNEVohfJM4XWjSYgQSKMSCSOSW6TNyak9tyZ3jRxoFjgUaeTK4a0QgKfs9zyVLgryYaDhUbeSTcfeSHYY-SZClvYb0foTOMW-SZ4R-TnCeWSOSURAfybPc_yUHDdyahThUcBSjyev8r4eBTsepBTPodeSB4bBTL8fBSg4YhSEgMhTAKbsj0KVbDMKWWS4UYIAuEFCRpidCT-oQBS9yV9D6KbsjBKSABmKc-SUKa-SptBhSVycfi-KXAB1TL8sfib0T_yRZ0ZKXRT8iXeSJKVJTWKSJTLURxTgSaWSmnhwjLYYKSWoAPCyCVaidgBrCRKXkS1YJmiCYZ8UtiluVdYeTCd4PZTMyflj3EZ6T6YXZSjYQ5TvMVnFDcXBS8UnaiNcdyljSb5SQAPJFnKbZTtgBrCAEbrCmETEjDIBv0YqTd0a0L8SbKRUAvYfwjgqTOS0UZsUsANsVPVB5SGYUzCXMFlSYcWCiBcsFSIGkqi-ES7DiKZaiccglSIqbGjoqT5TsqSuBcqR-j1HOsiiqZwS4KaVTyqZghKqarDqqVTDeqXVSuUQ1S2qaUTs3A7ChqTx5Mia-MBqZVSG4RMod0dmTRqQxTxqe5SHYZ5TAqczC5qepSg4WPClqa9CVqUHD_UYGi7UcCigim0VDyfdTrUbtSnqQPD4qRaTJ4eUkqEZZS0UQrh3SUtSvoLPDTwKnDMAOGiz4a7h-ADQjooDAAkwIZBTILIpQaTWBtQdBTOMfDTXALDAwAKZBGsa7hokTqCJ4bQjYoPDA8YHjBDKTWAkwFJ5YaaTSYkWABDIC-jXcDWVMacNimEegBooB4AMqVTSLACiC2aTxSmEa4BooPjTTCWjSLAJv1iabfDaEcpA0YNFAkwLDBeaewA1EbTSvKHDTlIDTT0ALDBmaV5QDQQLThUUwjJPEbwEaTFSsyexSUkvsA7klRFdYdlg4IKAjlggABSRGCm8J2nLBHeGvki2n0ZahHIKWkEfQrFQRwxuBhwkAAi2fgAl0YOlLAOUHSg9gBxQGKBcUp0nwLaykfopjHI0G6lmksSmIko6nqqfNEcwi6lPE_yngAGxKNUu6lfQ5Okpo56mtqV6kbIkunJojak5UxOm6w0ulRFcXIjU2YlwU8moLqGzFkUutGZ0iqlKonOmPE1In50z5JeARVHl085oOw0ulF0-or33Cek101OkdU36lbIztAKI30S6w4AAa8ZxF1omNJqwlOnKYkAAigUYQiAYcAcIKcKOwDfAw08SnL0_IBQomilb9VjJIYramz05jEt080l3knumTUvul8w3OmD0xgnXUsekJuBumnUFjGp0l6n5RJ-logWun9U-ungM0IBN0vegv09OnO4yISgpTumsfXZHv0kGlgYr-kD04bESU4envoKekAMmBmEMhECV0wBnP0-el-hcIAJU7emqSNekb0qmniw5eknQnZH70w-m6YE-nDgM-lT4C-mIk7enX0_lGSeBSn-oR-lBwoHGp04qkg4jBnZ07Bk9EvOm_0wukgM4un8AcRn_00hlgMsRkwAPrEDEuukI4mym9YuBkc8CRkHU3MnIMjulB4runoMwmFuUrOmf0_-C1Uy6mlE50oj0khmME1RkDw0Bnj5B2HuMhHEL03SnMMgGC5QehkcMTemX0x1IsM6hEH05OzH0vyDsAbhmEAXhloo_hl-I2-nCM5LHQMoOHE4gXHGM1umHU6xllU46lYM-xnf03BnPEv-keM5RnfQhRAk4mokI4zxkz0zJnVM7Jla40RlfQrJn-AQxm1MzjGSMoXGrKFBkWMtBkZ0_JkTUzBmlE_ulyMn-n5o5xkEMpRnj0xpmyIGpmuMshkOw9pldM4bF-MuCm0MwJkfo4AAS4l5SMMpenhM4CCsMqJlH0shCxM-JkpojapMMx1ICMqClpMqyl6Mj9HsEnJmv0sanDMwpljM2RlRoxxl_U0ekVMuZl7wzwmzM1ooaMoFlJElpkZMn-FsE4Fn7U3JlWM1ykFM2xlFM2IAOM-Rm6w8pl1MypnkAGFlJEtRldpMFmsExInYEnRlQMp5keU2sTuEl5lwst5l5MxFkjMmRnFMnBk8UiSmYszjFNU-6mUstADEspZmEsvWFcs-dEvMyFnkssFF_4zpkIMnSlt0vpnmMunEvsbukfM5FlfMplkTM0plD06Zn_MrFmAsrhiwsgFmgsrxlconVm-MqhlhUhilbM1ekOw3ZnARZAnuYhhlo0m5kWgCJl7005kcMi5nn08OlhMi0B3M1JmmUo_EiMqFnZEiVlOUxenSMuxmoskpkssspmKM_Fm6wnIn4s5ZlBwnInCszjE2U0yDis15mIMgwnSs7VKys0CkIsomG90lFmo05lnCovBnqs1xkxs3ln6sr6GxsgeEbM01kBM81lBw9elNE0Jl8M5hnHMyJnsMmJmn0t1nXMw5meslJlXAIRk-sh-n-suKl24vXGjEx3E0sjNndMhVkFspVlhs4tmWo1llRs3VkIgXWE64-3FTssunrsgllVs_gBbsydnuAR3FJs4bE2Uo9m74ndlpsmdmSshint07NkgU48lDM-lmfM3mHKsn5nospVFlskFkbsh2GXs7IB74ytkNM7XETsq9kns3dlGs0Kk0MhtlBMi1m2srents3eloxNhnRM85k9snhnusttm3MwdkxQO-liPX1npMkVlXUtYmVAQZECQbYkvkgeE9M4bEhswtlosyZkOwtlnDYjllfQ2dAjEsjmbEzZ5TEuNl8s9jnrE8jkTEllpTEs9k8Umyn8czjkUc4TluIG9nUckxmzkrNk54yFLr_cnHzsj-n0c8Nkls54n4MjVnssypkScsYlSc3iQ7EvdnxstjmkcwzlCc4zlUcqDn7AGDnhM7Zlr0w4nHEq6EHM2hkdsp1lds9DlcM3tmIcnDk30odn4c7BGjs4jlfQismdkwNkvou8kXpCWGDMkqlqc0ZlMM5RAMc1VmME6-G_stxkckiLkZcszn8ACwLBUn6l3k3-HII2dGi4j0GIk3-EA0r6E0ImyBngY2mvcA5m_wqdLPwvOwRosUFbwutFNcihHPwqrnq0qTym8LKmic4VH6Mjknrk7knpsu9mmMzHzJcyxkvs_NnqcwWFeEFLkRs_Onpc6NneM0bkfEvnDAct6miUxIEFchUIJU4rkdgUrmDQ8rlooyrnW0h2E0Is8DzZQyBqIrUCNc--HkIp-FdpVrmDQ6GAliXZFdc17kpU67n9cgbm9UobmWo_Rlbc8ZBPo2wDBUiSlrcvdm6wsbnCiCHlrMnin1M3bmHs1SmRchKkxcpbmzcpBnTc3lAj-ODlBwzuzxeA5l0cxbkzc5dna4w7mL0y7mIZa7kwAO7lqIgdHfc57lIIk7moIz6HnckHG_wvZIfcnAAAATk65rPL_hz8N55n0KC5JsLJZybI_R8PPB53xL2haSUbgUPOeJMPM1ZRDLEZYPPbgiPJ25VdLR5vYgx5i9Kx5M3Li5mbMB8yiAJ5H6OJ5oxTtZI2NfSVEVgykVJ_hwvOa5v6Su58rNfZirKS5vKGW5wqMK5cFNp5ZchWZNKPtpykFdpofLjs7tJZ5iCJF5rvLp5QcJoRDPNMg93OZ5FXOd53XLe5r8KvJQvOj5JXI55VwAWyI7M2pY7IrJbpOV5q3NZ55bI25t5AWxswB15B6P25E3KDZ0XKH82PJN5c7I95C7K95QqB95lqL95DFOO5KCLK52fIfhvXNoRNkFq5aiOSgm8ht5P3P_h73PF5HXKj5D8Jd5f3Pj5APOn5DzITpoXJUZOFKrJqdOh5FfIy5cPN35woDr5DsPy5jfKi5UrLN53vJx5UjIS5usIlhlPMPZ1PKK5wvNz5Q_KX56RFH5NCMMghkGSg0UGvA_PKe50fJX58_Pa5X3NT5oAvT5q_Oq56_MG5WFKI50vOP51fNl5qhK3JR_Kr5YJLQFeFLokZfMYJOnIN5b9If5DsIlhuxIcCfcK4JlqNSCtcMCOdsIjCUYTSArDJwFgQVThaApYRBjFAmh4MI56zONZCVKDCqAEjCUQCYF3jM15BzIEF5oDWoowECS3rDggozKehhfN0ZyAqwFaLk5JoXgyAuAvnAZaJukgCPW5YjM252pI0FGAvmpTjK-SunNo58nPi5HfIW5XfIJQPfLY5P_lYZHclThhaXGJRGESZvAug5i9LNZhPK-hwAFcF2pKfRf7SRIFlVbZSTKQ5YVNnhzrOPp2QFnR9xL7ZyTIC5MUA_hHrMkFTGED591MPsRABiEQ9jc5y9IGgWXkiF0MCN4SwHNA0MEX8z_Lipr_M2Zy9L8AC8FgFw0ISIIfNdp2oIdpkfOw5FoDqFnQPAFAqM35uGgXJX5NmAmgvMFyPMqZJfKGFxgt-ZDMB_Zt7Kb57zOsFiXKXpM3PIFvcIVUFpOoF-CPWFw3IYFwgv5R4NKGFrAq8xpfODpkR236KrJ4pdbN2REgsYFjBOOFdaIkFUgpGAMgoyAcgqfZNf0l5frO357JOr535LFe2gssklfP0FPwomFv5P352nJmFcnPhZc3JsZnfKWFt_MqFVYicFpOMHRAQtC8HgouFfAu8FsHJ2ZqIqIwQQueS_0CH0YQpBx7nOQ5UQq85hSJQR8Qr85A7KSFSMBpFaQuygGQrrhWQpyFkdjyFjqQKF6oithxQtKF5QrsJw2L75qQq6FDQu-hTQrDy4fLw5ofPaF4QsdSIop6FitMUFUvPPZMvJP5BAGGFgIrC5aoo1FYIrVZZgqIF8wvm5iwrIFU3JhcmaI2FtVAsYWwpB5OwujCrDNwphwpRFe_KwRBHLOFn7M4xlwsRJ1wt2Fm7L359wojCjwueFo9lr5ZFL6FrTJ351fNwpfwp1EmoojFYJKjFoIpMFr0IhFCOJo5PFLJ5tgviA9gr-p23OoRzgq8xuIpTpppM9FsoodZjnItZhYvVFqRAJFoQo5FDrI85KHOiFZCFiFFknRFuDKvpuHPpFqQt54wwF15esNZFv9jrFgSQQGRQpwAJQudy_IsqFQoo6F5oBFFo_NtpzQudp0oqHF8osz5n0MVFjpJ4FW_OUFhFMyAYqKOR2RCR5wqLTFx4pIF71NVhBsO8plQokp2RFjFIqL3F6qJRRvHIPZ94sLhT4oHhiIuoRnlC8x9ynnxg6LPpzoB-ibYt751QoYpVtLj51XOigaiPwCRvANRNvPSSYvKoFdcIpAWfLVpDMAHsBBNjsywRwAaiJFs44uhguEqxUgvOwli_hdF3uIDpzoBfh6tj55lNKVFnwp3F-cIfFvQAPFCKMv5CVIzFVqIvF6sKCpmnJXZ4Iv1FmAt3Fb4r0Jz4pA5_UKYl4qNTpn4r3p34sHRv4tBR_4sbgQEqw5HosxF_jIc5jbL8FmAEQgQQEagAAC6hxY6zGxRSKWxbKAmwJOhUaX2ydOeqZUqu9BdYbeKbedZKR8qZgthSrDBGXTS5aJhLI6SiC8JUuL47GRKGRV6ykJW5LUJSTTPJTPDkeksBCJTwQ1EYjBSJWVEGRSng-cAjDTJJ5j2uRuKd6MCjpxaWLRRQuKJRS0KXaTKKSRbUL4gN0K1xRAKGRSvRY_DPDs2ojAEhSVL6hfOLg-flLSxEbww-TgBDIPzyipfYT8hV7TgpZxL3JWhLwpVbCsJQtYIYOOKxpcRL_Jawi3RfHT-hRPi3YaxLZhVfy6WUaKpqf_gZgGrDsdjxLrxc8TuUWry_2cnDWJcDzi8UpS7xWiAdUUeK-JfnSHJctL2JWeLBYYyJi4VOLQJbsj0kitNWWO_C6pXWj0kj0LZ4cq9XYbPDZJShyIaV5jbAIT8RgDDTlOXwRooB1zY6WGKx2RdKMgLJyDpYwSkZfxSkxdMKBJcCiSxcVKNJb4L-ANDFXJMSL2WeqybJfCg7JQ7Dbpd2L9ME8LAOK8K7-T1LORSOKZ4WHkyhWOL6pUcyyRWhKAZeLSUOcDLwadOziMRDKoZS-xv4bPD-EXYLd4eSK0OZSK4hWfDxZQHTPRKPTjJbLLXWZhz0YC6LOZbSK9hVfCUJdLL-AALKhKWXThZYDBRZa0QYZZHSkYAKL0xZYL7-QsLH-U9KEBdxTHmQxKuGEpSVKfrzBJXvCPZQGt8BbrDVeZxjspdzz3-ezyCCXrLBwgbKQAEbKRUULKy4SLLw6dDLSxBHS-2Tzy-pTFBh-S9z_4YhLlgguCTSbVIhpmkCozNiIMAaNJDAC_UWQvvdKaKOA78qwZWJglxwzNHxjCB7BPTOzIpILDBDIKdtN-l3LVINfMMaSOEYoGd1PPKxNpgTTJouOGY5gZuZLAJIgkdFmYG5RPMskX4IzwOzIyMGEoVhjmc5MA28pMOR0kovqI3QL5EIaLABtuLXZUiM7go_OR0nqpgJWeUtk2XvwdqYkMQYQY4JT5hPMSZNFww5mToWZLrpSzNTox_laDZzNPKruM4BJEOLFzdgXy-XskwrEh_zXqBYZufOHVkgAtRtUV7UmNEVcQNmHLViX65LLMxKK2us9h-uqIs5tqhn5cPV3BLuY35auiszEbwzAOXRqljiQIIvplVEkMADMO0BXCZug6IpphC0kZFCFMIA9JgrMFEEB9dVswrH5YJBCFSTJ7Zq7BxsCmpQePFh9dNhL0EXh9tUJIrXzPFwQaHvMlZtrNJEMkheXGpAkYHIqMUMIqq5l7MLuGHM9QKPL3uBDxHYNBBJEKHiHelvCdFUeY9OiTJdQAHNf5bMCAFWc5gFY7BzdoqLBFSK47uLUkI-E9wSZB85KZJK5ZsgDyN5dFodkJQrkqmgrqYlvKe3tsB7_raIX7HOhtIBmJfAAZgV6lVc0aO19UlFJhngJTQU3hytqHFagSChdQG3t4r2AIQrLvn6Z4sG7BjrNLNoIDdx0oMOyKlbDZPTAjYj5n_KMrG-DKzK7kKlaPKulc6C9Wq7k3Gsy1VgLrRvEPf8PNuaJhTkfL5wK_AxClMA2ChwUUgO0pnELQBEQHE9UiEwl-riW58FRihLQasCbQcMqDUVIQyMF5syMGfT9anetWyvdRqTt5J9FDooplXSFDIrMq72K4oolVK1BQtQBjvoy1CQKS5EKJKgeiMVVOckAoqAPONugFMpYNg8tmcYZDjQHMr-IqxMFFSWZjBFYTDlU6DjlTLN8DOq1mlaiCmgXJhIZH8ttaGItClQtQ0aKyh_9rQA4VR5F3lcdRiVvO5T8saBsqsGEKVTgwGHGQkAjBDRyYp0hyMC_RD2k7Ya6NyqIxJ9yOFRSdhTkmBqroKrHqJ8rhTtTFYYBlAEQCPF5Cs0B5VZIJPuW-A-XuaJA2szsDmJxBCIGaAJ3opgdRBGJiXkCrH4JSsiTrMAViJWV1np8rYQO-sKWGcsRdhLQKlc3N8DF0rGZMTQfdIN4bFfx9GzB6UIKl6UNnBc5fSlc5QvnKAmyd8AySu2TsSbKSZwN2SoyZstJAB2ATUMmqJ7A8jY4HNBi5dwB7lEGUgaKGV3uLa4A1XTkg1TXMfSts5I5hGqAyY8A2qjGqwyUoiE1b2Sk1Smq0AGmqIABmrmYPcpQqlmpIqqmSjoZYijoXYi_sKwAtTH6q1rLGpA5u1lgzCmo6ZD_KM1GFU2ZLTozvLYrBIG6rtSt-Y0cWHNNzBDxkkNPLxdEjYKQXiC0dCcATkfIjOyRLAaoX0jFZEPxuYrM5sgR1JqkP_sANEypCAUSIL5JLIFFlgEpZGt8GWCp4-OmDoNNLernkGOr5ZjONL4HNsPNP7IgjCoMjtvsqSSgS4spMJMn1TZwmVAQwwNY0h6OodwgSFPwzJmfVGplPwEwV9xhhm-A3wKxNTwAhqufLQC2xEi9_1ChqL5MBoUfgQAKNWvR5COIh91CWUh-Eap8NRoMJJu61P1JA8tsWkAS1AB5YAM3QIIrDAFzkdUpSjXUqoLDKjqruDyVLABYYKvk-FpVpYhJDAZNaJqHcgpqAcMprYhBPJvNA_wf_MxrUALeACKJdCHmgBSlgAyUy9M50EZjG5LMA5gAuiIQnNQBSguh0EpFFOVqfh243yfv5UHAF13NfMEsXBShFfOgBBoj_AwuqL925JF0KuuGqpqtV0UugaEEup1BrBglqRugpshuvqEcuol0awL11uQs10MtaMsstUCxO7MlrUtfUEauklq6unKssun11yuq1115LnKoml10W9EgwMUKFrRghVrFsU3DEgNVqZNkwDrkJUcIwKFrpNoWsuOptsPFnvYCjrm4ByKNrRlp1r0gpVqCtR4datflqStS3oVvKzAXRbAVbAEagCKNkQ5HkeA5tcOgolqt0h3EdqVtVSqkllf5OlJZhdte4hL-I3BluiNrLtf10Jjuk9Ctf0NWIi9r3taVr0np3ZjtbKxThTcUa4j9qatZjC5oprgsoK9r0OLwRxxqxIG3Mmkd3o5rQtX1rC1rGcX1D_40gkkF9hu1qsdWFrWtKr1n8u0xSYprhutbaikJZ7xYuuTqKnluEYdTOh8dWjrPDglLA_mV1KdSTq0tXVq2vq9ritehxFji3oGdamJWpKVqL_pDrZITT4LgATrguvgdhtfjrBogUM5IVOVQteFreBKIQsKgF0_NcYM5Ku0wAujWg3yTOgptJrryeorqa4hrr8dc-UaVKOAbIGuhFRsJrkNf3J6NX08LAKyoNLi4QqbCZqqNa-tYNO4sZBnoQoteXtIuiQFarjgR0KI1r8ORF0L7E8QrLh0gPCOJMw9dCQHMF104KKIouuopM8NKfxvNcHstsddV0IfqxS2ISUjFitA-sNJgDjKxR6KDYsi9YtkS8g1A3BipNgtV_guFI2ppuu_sfBrtt09eYAMVFaMlGlc18groQLlPIAiOn1VLDop8bMhuUpNdFN4mqG50YEhLgKtgYwhABSxRqVgPRlWITNWZqByJdD91BJN4dZdCGnld1RdQjtsOA2S70ZzF0RL3q2pgYUAJfABigA-Mginsc59dkRF9dBgCchscawB0lKJa1yuks3ROYlHNwJTMkWiD5MqIg-M28VuKQMSfrgJGfr4pgYUSOsn5r9ZzFb9ZzEkpOOlWeY_qpqj_5IYBjFScLsIcYpEAetTCJNlFip2gGGFoDS-A-CHKzViRVRv4V9Bn9YEchRgPzSuV0k4oN_r20sLz7kv_qdgKlNOYsAax8WbS5ojLhpFIJrM-Lyo4wdwpMSpTyB2pFlCckKVRCIeDafjXEzRcAZv3CSUf1YQBGvA0g7dYypHdVfI8qP8YUPORqAKZ7r7NrBpAgmotsNYbsMUEnqlyHdF32FYtQCMYbQ9dwYoBuHrzDZF0o9b7rktW4bxnlE1E9YHrLDSnqXDR8R29dF8s9cXIjsETqKCGXpTNNYbQKIXrd9SXq-cdJRkqFFQK9UGMBgtXqrAh4b69dVhhDU3ryxi3q9-AZlAjZ3q8RjdU_osvpz9fIBlDTfpB9cUa98mPr1sjPqeCEEVp9S_rEDcMMHxsvrjNQBS19dnqjsJvrSnuvrOLLvr3RSBNXcOpqj9aAa1lqfqyjZAaKjVlFL9XABYDWst4DWstEDQ_qHxtQamDW_qM-erZP9Q-Mf9VMlWDXKA6EQjQUDXNKxal7FjynwapygIbZZNkaIIpGRq4ePr8-GMbEdWGdMmJVDtVAoaV1UWlqOnAB1DWfJUNSBordTbr5CLLIqbJUbVDTvBZZN7q1DUKp4jet8EyLCaGoPFp-FDQKiOtKppFMOp31Iwoa4jcahDViasQEHwsouibeVMg0gdIXLYnHVC9ARNN1ZK1Dppoghn0QB0gOsmrTQJLJ2idQTOiSDxDgdyxjga6Y3vhCavvnvQ4kKt8PvmBwDvvrAcZqaYE5PjNfpG9YaAB9ZUnj9YYaIjMHZN0ghOkOZweCTpoIIuqvzFqa2ZEvMK5pTI9TW3K5QAD93YMaai1Vy4LuEyYWTBa5MdKy4bTZHp_uqOBMOuKBCZEQB5VcD1aovUExes-i7iZ6a8OaCtr5uaBTIKdtn0XKFBovvxPqVhV31hWcx9H6aPTfPxZkIA4foo-A6AOaAPTLsIoIBbx-QBZIXoDsgz0EnR0OKpA8lkrqTRnGaLdT8aLeYG5MQINFimq00I4rTZbWg2bTKH6Roamr8juumk0Wg2VYJo-BHAHxhMwPAkbqjyt4lRdRqHKpJ8dqUV6zaE1gJnsQ8db6JahtPpGBJWqLAA5gMqm2aDWgCkIvjPoNzaa0_gnsSyisw1qsAtApttVhRSkNl9zXmSjCfekmbIlqcugxFIzXebbPs5YQ6l7DbIslgyIopjZoLflXqM0APauioEgEzYJzYTJHroXdCQo9cIzZzq1tZcRV3sQ1tgKRwJzSi5nIoF1BlLC8RCIhalzbxDG2mAAbsiVAcLc1N2APBaGmhM8O1vObcoCfJgLY9dv8qpIQLSqF_dUGJA4qzZtmbRaNuOyarCUrj_si6bTQO6bYYJBafTZvonzVFkaLYKFxsuYUToBeptmYubzsIwItHjhaELdQU2arL5coLRbQQtwRwQm0MyUmt0ToG4oyFH6RhLasMTdbD1IKMBJ9LYVYyUn1hyYlZ8XgK-J_omSl5AFcBHlOTFPlH1g2_GgAuOPzAOhABLtgC5aBvu9J_wtpaXnu9IHBjusAPm8g0ABbyVzUpaYzthaELR0ISILaIZ-tHQJzbJbYrYpbF4hwx03MFRkrTFaroGAACLRjIcfKpaVJJJafXsiYKIhFaXHuQRyrdsy4rd_VkXvWk7uqDrJLZWapZEN8MoLWbWtHNoetKG4xeqeSwmmN5Hzelr9nvaSO3C20BrdV0IGmY0BQVc1MQPNpL8rtlOareabDr2tqKsWU1ylH5NTPFpLmqa15NPs9hAgwJqAFLgx3vcwdMhrUxNTPRlyttahsrtbH2JuI7PMPR9njpl-eVNLH3ougP4YtBhoHQBm9ZZhF0GEo_SG9bsRjAARyjNKlDir4coBtBwtV8hwbWGBv8utAHUF5RTwINEg3ODbOtJGaEvia1Zmkhk6cHOtbcBk9oMFZDJctDa6AOFqQ7lutTTjmNDLafxHhtSAWrYjbCdV6a6zZtlpzQiAxeqTEwjYJa5NN6bFtYJbjdYWYJzfqNqzXxb0gszbZ3ks1quvzamLQubJnvNpgFHQYIAFjhRsGzag0Kbd1SuFbtmRJaFzSlbcrbVaErW78rINV1lbf-5qrXL5tzWok4CsCh3pBbyFgiXEYeqfxSYjt95ZgNoYgZsMMoHoDn4MFZcbIDZPbR1bmgl1aFtD1bkDEj8qOqLQ0fk2a7tThYjAuP4clSMNkLmwJ-TaKbPcOKbG1jhdv4oZVQEnBcJ6t75O1NPUeEhV4s0mEbHbDWhpIXl99df6QspnJgnyczRa7Mw4ogI0RjkNkFmQKX4gVknJU7c7QV_B55zNHNsM7Xg9rTt59a3otEv5Kf4O7TiRBomC9omrv527bA8cSJiMWvp3Epvrs1ibLN8dUnFrXSMGpJ7Z3ag-np8l3h2bmcqIQZcHbkJ7UPap7UnJMRlvb-7RddBLV-8sPge9ULQ7163H0F_PNfa2nkk89iih8rfFSsVVEfaN7S70clWN8T3tPEJ8tqTIrWOgevk-wOUjQ017V_bp7UH1RvrGIhvkgMKqLvbs2vvbH7Ve8b7dwZ21FA6k5INEwjSA7_7mMUiMGZa4EFwT0RHD8sHRshMRgl8G7uqolIE3bzNDyMBYTzbFsqKTAtQTEZdXQ6R7a1pr2oc96kISsZVHCAjqGREKau1b3qhW0eVoe0qShdQg1eF5dMKz4WWt0Bd6uK9vfFlJEinWgyMEahZbRYYf-lM8_GBwUfzV5lyDYhRrLLpgMqpE1leoiZWFGCp_MHIEcHQzauHWo9-nj7bFtYIpDWh2bvvGjbT0usUQUh80irf6gnHSxITwipqGHM5ZK7ZxBTFOhTNAvs9a1nvaO3GtQbHVWFxrW1E_SKeaAVAkB4ncF1SpkLaWJAp8gvv1br5JY77wNY6ubSxIsnV0AXdkI4GzR_aDakE6oskr9S3mzbc9QH5Syr4Unvi6QtypzaPHa80z0u47qui473ihgyaMsMav8jrqrda1pSnU7YQHkEUUjeGd_HXDhBLR8ATnolaZRN54VNPf9qHMBS53qeSe1q1b9nuM6_bZflrjgpVTydN1YuqeSvkCW8SYtV0gHfzx9nh8AibagBwtVpRHymYUoneOsZdVs7DhuGRYum_bFvAoKYVEJF8xtV0fnX-okfMw6s0qw6gWDLqwutf8LAOccuKh87Yjoc7fhsdo8XnJhrAJBEUGOEVqYm-Ta6AJBamKvU6Xo-wyfEbcB3mzbAGqeSOXgS8KoskoImGhJYFfXb6gl2JwXcC7gHdCBwXW-ScXiIQWHRy7zNiFr7HWxxvnaA60mrO84iE3agbr9AdFKL5EgOrbTyWScsqnf9_OKxgRgHcUdBRGI3yUHxKgHPBfIvy9yockUOHdg7Cde58YcPq6NkJGbrnWNBs2p8QWHdc7ncjm1m-in0iyNa7QvOlBuXVNoBtQLEg3KF4WtPxbgRpk8yPKTF-zcShpwgE6gHX6Q7XSDrmFEA7JBAG60RUai3aYOD0Ik66iMKEorXey76bWy7jwG-SX7WJQ4iNjwqzvuwv7r1YmWqfs6QqBS-WodgXON0AIaPy8c9gW79nt-CRJqiZRmMcx63d4gAHZLUyMAdh1FMWQznXkBMBBg0IoOGtgXZdAwjLIMoBBCAPahpgcbcXAw3lkhjqFexFjGxwWHSy723XsVTydeAYAIdQtXvqNy8qJMNNMO7RSUthl3UK6bnY-wN3Vu6y5HW9LMC27H2FLhZ-q7aI7Zbl20mBx9uD1Bj3fA76re7847SKbLRYKa50Ft9QbaCNb3W26M3TQAIXeQ96KGc6YcK67mgr2RTydPQcYDLgf6HKaIgP9MlTeAVC7V7bMjPO97mHe6Mpjm6B-mR4W5C6603cF02yGmFC0u_5N9N5rkiu-7FnW78rvJSY0dFWgRittE8QqV8YLEjoHTRHpWTPjl1jpyZTjoA79Yqy63bU-7x0i-7OLdTZtKhIYX9E2xVGOpdd3U26_9KgB22KQJoSKO7dgJVarvPrEF3S_gBpgXLEAWkD-TDQhS5TDpv2unBNQJ3AzQHjIupFCJqhL1JnZLMB9BNZqYICXglgW8ch9lZ7JQOUDNpZiA8ZB8VqgHDDqgYdDSqXDCPgM2hJZGuqJsBurruOq0d1XurqdAeqxBDjNi5XjIABP9AxIJwR6AaeJuRJIB0vdyJ-SFK9sXCC4YXHoh44GcBeuJfEo2NjxMgIJh4DInpTMo4JVPjSNxtEDYnbOtAwwMKbK8NeBwgBEBGjG7h0TD3suQooVWBiTAo2Oo8aRjVBHbMmli7VN6uIcPsx2D16U7KgAaoCCYYAEt6-vcmkCTHrAaoNt7XOdVgexUKAzGDfZLyT5SuRfhR84DVBs2spBk0uS8-UTVBDIAt7K8G8JOODVAkfAMFumK1B7nQMEpAFGxmoCtZqvbV7YQGMxDpAVtyIVKCJWDqItpHiIjhFxDTpOcptmJBIYfUeh7nayJAQND6jxOGxuvb17fQbFJ30Bj6g7gN6x2JOw7pGYBAfZkhzlBYE6NFxQ9vetoTQbyDWGGpxfoAAtyuL2gg6pmAtFjMJW4JfIGvbiZMEJGBE9JURrMPTYiyKMYdQB2xlOcFbgKtZghkRGUaAO9IMgGKBmgJ7Rptuz64mAkxiMAfRoGJ0hZfTMA-Sta8PpEr7DomMQiyKlh4yAvJNnpGAFdfiFUsJiByENmQfyDepSbFp7CfBigoIGWinbDcSxgNINbfaepUcKeBchuGRcCKBZNxnpF1HFcAPfTRDNcDo48ABH7owVH6ZcEY4xpF76d8GSIXSGOdk_c6BU_RMYybcPdSLY4waALjwEgOvZiiNfgoGA_RNiQb7FffAAp0Bb6p3v1lTfTL6ivQIAAXrX6h6PX7PpBSrqAE9pFBv-9xKOb72_fI6_1P4BGMH54UXX_9LMHXMa_ZFA6_UP7ZoAq9VSWMBqwsgM2tY4IMNPKM3OOOBr4BTxp_TOlB_d6wVKUkACFDbkvoHIUTgFvjW_TP79_Yt4NNJf7KWNf6jgH6QNNPly00gERQMJX6FfS37d_bP6tnr2s7_T_7IwKlgK3bAB__Q_6lsKlgP_QwhQA5b6FEtf7v8Lr79fZ_6lfdw7VeJq6EUAIyAA_AZ9AK-96LVBBWuUHwoNlPghvdgH4QnB7vpGKBJQBPkoIFFpktN9QhvSvhwzq1yhyA7QmA36Q9QcwGpaHqCMSKOAGrCeD2mCpCGsPgGZcHqCFvrksVsI9Yc9RlBsLM7b-JhPlbMH7ZJ6CEYomukN0IPHRmISdh0jOD7ugC595AzkZXbCnRl3noG2vcMpdA_nRvEBoHLId4gdA6oGpaAqDJGBwH06HYGLqNYHbsPHRVQQ6ILA8_YXgNlAAvo37RSLQGfUBGcLwREqMtK7w3-uIHUAD9ANAbCcLUKKS-BvMB4tCgQnbeUod-OYN5gMXrwXSv0BjAT05sCw6sg9EBMetBgYPR0ErPtZhZrd1aAGXZ97HPRxVPVgGs0okHrMNQAogzhZdPSzRqkYBw41hEHOOC_xD3T3lUsE0HZgNEGd-HEHn3Z7hOg-JRTwEb6LUOG4UTZZhBzswJbfGUG_fSzYl3PDgfoL2MlcOUH_bQkUSUEsGaECLQi3D8hZ7HsHZgGIGJgz-omPb99YaFqBXoApBZwFyVS9lwMsIjnIffSyR1PUx6EKM0Ma4rYAbg4rQ7g5ykC4X-0dfgvFAQ2x6JtpG7yNNUHgMK7R6el0JNHC_xzhkmVQ3M_AcnVvANhvQG3g1E0pmMb7QCEiGE3JHa0dBaZX3UEcUcNQQovQYJm5bF7t1ZiCEvYs5D1aqhcNPJDD6KPYrgGYMXSNRc-dbbAMMTuFcIMSClIBu73OEcBZoJIJsQwLCSoXxkQDNJgrfTtdIIHNgBA1j0LyZ2DSsCagwIUbQrbDto-sJ2o-sHt6o2Gx8wOLqGNRIBwDQ9VgzNFGdNQx5724C5bq_g_kMMDAFMQ-CHT-KBkiGD4UzGMScfKdZJjGBwwGmCOo6IFwLKkcAAl9kOMlcAgG6EFAHxLXIkyolwKmg4887rbbgaoOP6fDsL79rtmbHnuL7FcDWFx2n3gow5EHHni1w-cPGGgw1URkw4FC9YGmHl0NnCy4smlumAmAfoPoI90Z7wZqFwLFdWAAaoLb7RwEr6mw-tYXELCHIJJo5Ww9ZgV6D2HWDiiBOwyxqNrFwJWw-qHbZBgBRwyp7AOP2HQME7hvWLOHXvbwxGg3J6XGAjaLgwAwFw50h5NChpOw52oaoJ2pDw1RScYMeGzw5EBDwx2Djwx2DZw44YB2LuHHcA4ZHqN3hOw2f8z1sfIaoB-GH8p2GclSKAw5Q96uBdWGWoKaH4bhaQRevvQYcIwB8vZl7JSJuBOw61B9QyXgwhj1AclQLJIhnm1AlIwByfXV7OYo7ZVvchHg2OxCZpJ2GJQfoHqoEhHPcFGwXbG16yI66RFvTj6u9Rv8K8Dt6-lqxGMTJgh6IyBHsMehGS8LQgQRPRHfvSXgavRT6BADxH60IhHcmJxpUw7_7wHT1AvWBkAMI246YcIpGgOJiZTKDDhKjtUwRI0D6G9gRECI8AA1IzRHpvfhGuITVBjI_xHi7fRGPQ9j7lvW97kBtxHOYkZGjQ_xHRpEJHemLpGxIxJHpGHuiUlBBHymJV1AlP5HTwmHqgo3TgQo0o8KUCFHXqG7xOYi0wLQ4RbBQt-G2lpN7gACFGSI2mgkFuZH0oxaHaI3kYmmGst4FhlH3I_FG3ZBaGJIxIRfIy6QpALWHHYCBGiGMW9_AGwwvQ8fdr1AWIfPHQkfPJQAumHNhPGPowUIXx8zADQhj4MNJJmBsNipNWB2NBKxxNgT60cp2pqpJKA5o7awiI36xkpFOIAON6w5ODNGNo9WBzQbjBxpDoLlo3aC1ITFJrpJtJEfUtI0cgEHDeFRJ82MdH4pCH7ijHdHW2C9ohg9NASfdJx-ZMBwh2K9HV2FOHqAFwJPo7hwAGJNHUA53IozueIHo2aCLQ4FJRWKFJJRIJJOxMk8tA_D7T_vuIroyVYKI2jHoYyCNk4Gj6ZIVrUWGjZoXNA_lLpKFJ1JAUAvNDOxUcFT6gtO4U12Bhw-I8GwcOKrxXIyzGMOMkGatIzhx_ZVodQ0dpc-FSCfQZtZgJLzHbWLJpOY7DHWYyEHMlGTGMOCVoYxnsIA0qT6s5uBEfoKkDdOFKavAeWoEnB-0y5eZ77QHm4qAFs8ikPk5Sqa8iMkt6wDONgA8ZJgAijItNg4MtMdpnbGlYBtNtgTLBoIOMh5gAfJCkRIShQMaZFTI9RlTH7HKMjw5JZMiqlFWirkoCsCMVQsCsVUHN1WnwJTnA7dROrMDPVQToNgbc5tTO9MXNmu4ZzgG4xJLVRhPjKBzNL0JdTLucC4wx1XZNKarTN8a7XN6ZxsPUlLAKDQFLHFx0hJ3MvzEyYm4y3GSzG3G3BH3MKlfTou4-LoW4-3NROs3M7TQ3GRQN3HlFWPGa5paah5o3GR48ornANjxIeL3NTnF0jIqrXMh40vHqdC3HV4-vHx45vHkkNvHbXKBUy1afHMzJBUx47ToL42urt4zfHU5jbMK5ruZQKhvGfKlvHMzI7NPUZXN348fHP41fHM5p8rxMf0BOIEbHAOPetJqDOA54IfL3lZ8qK_BIt0Gm6wp0AVNhrvwc8dpDRgFKJhMANa9sBFBdWevLtjYxkArlS8BA3DNQ73coEyPIBCFPIqrG1hQnvEJII3VUHMPVePyCdDJ5T9gG5koFsqp4spyzLhlAIaCVAI46irCsuirrQXHGS5tirNzOQQQbMInZ4xBUxEwVlMVZImE45uZe3FiBuE2GteE6C7rekyGzQdyzYjATa1etj13YIYmdISkdauDwmTTkNHL4m0DgVCM5yJBSA9zii7_zkZlqDGL1lGvtcsKolDZDvMhCRMkhhzsdd2fuDNy1D4nryP4nhznokG_gnQKDt25f7HSrfjLsIwk6SQIk92gPwJM9u3I9VRzhSAcBKNgkTu4QIgDEJNdgVUclNJbaGNopE8ElEglL5F2dsOBolCxIKoL5ARAHiBCJO0pEKI0DmfAQB9qMEA4E9txFCvwpkk34nGCMOdD3qW9EoQG4HEwWcAk86dsHvHJtY4V0bIZQAxQPnHhkzfwoBJr8m_lOFsrmjsBdugnH4tknmenKAZAl6CJk0snHE3rBpk5cQyWrHacqAcnCzuPbnaIxZJk4MDLk9vQOPdgZlzm_HRXB_GznF_GLgUTGbE6xNoZh8dSjphJ5jKkmSyq4mIbEnVqPmQhRXJfHH4zq4x4yFc83JcmNLF_tB1o38v0KinhzgEE7PJPlFEbmBblTzJ0k7RZ99HYnCEM8mnEwG42rIYCpQHcw8ABaZBQRagRMF0VKkzOAmwtDc-3JBGdHq4n_yjo9OfXCYqVaz9GbI5ld_Fyn0jZ595k2l1g1BKnbPgPaWNmocmHk5VTk8smXk4EnHFkANLMKym0xidyOUwkA5U-ylP3QfR53EqnkluFpmbkhdUXgC7AHWvb4ZnucpUyEmFkxPb7U2Dsd_HHRLU-WpMnSpdHHqXt0Iqb9_tgvtzJgRr79htwfUwgdfTh2bjyKanfE9QUZdeGnRbbNKJau6m4Uq6mvU69cBVqvtlymb4PU0RIg03gl1Bvt09Hs8U003-BVHqbbOzQ5RVU-cmUkCMn2HaWmwDvh7GnnObHBDGno8Jcm5HliA1Dt_lC0-MBG01EnMUzEnnfEKA3IMSmTsQA8E3NHgCgJynPU-2tLqmQcsU4-AiUkknZU7Omoo4LQi00CcB00asm_vGRdhG2nE8K8nt0-Qcd_QWd909Wmpk8Oc1HfX9B08atzQPemndjwkD0x2BF9v8dgRj_Q5Th_snymSm_LrNUU6ovHp48vGe5gAnPnCXUOTKum805XGQreJR1Tpx7h4_vGV42vHoIB84QM38nGPtdhTk-2ncUxhmu02cnL0-UYhUc08oGlMhS0ywQsSjlQKU4ym8M4MDl8gTY6U1A8XY5NBGJAynmUxlAJLFxQf6JRmmU7bRk-GJb7Y8xngVKxnGMxSwIwO7BhMwiAwtSxmmAiiDCAmtZSfjdYiAH7ZhtSOndU_pAUgDOnIM-kaOooHaf03-ULpiHb3wGhp8Xj5EAY_17YovFFiDAUBUAcUoqkwPLYVM5ZyDCxTOIHdUCqraIZqA5mKoPinNqLKBdMFQCD7bmnLHvKmB5dg02aO2cZ0AymswEeBu7F7DVhsBdiyDqmp0_qmJItykeglam4s7eNOExJAwEHQJDUx5n7M4c8voLEECqtlmIM4FnFCulnQFBq8q6Dt4wVXanA02lm5MIVnMs8XAwENVnXAOIIPM4rqCzixsuIG1mFckEpeEF5nhwH5mqnYannciVAA07AJGLM5YK6DjAOQeJnGzhFndMAUpLPDkBkURs9dIPcTnArMA_bN3b3Mx240IZqp46PtnnLABFd9rTLgmHetPqC3B7Ax0mFVcGpRsF61kgDPQXzfQgpQIDsO0MphhLlgpTMwkne3txgTaIGJiVgz02oIScrU_woWA6_CXNQ7R2A0_6ds-HQbIb9mFg94Y6fhKGglBI7h0FKq6A_yrjqLEFSHMmguILA4ugKkx84BCQh7IgoshXXYiAxBYmbBBY_bA75PY-3BvY5kpfY5ETqxClot6LTnlHNbD_UHTmpaFI5VhMzRq1BKKCpLzm3-Fw4N7NI4hc6kZVbK_DZrFPQ9QaLn85aRbHBBDBlXX-g-VOlAacx241cxbI_0AXZk9sq6ZrPEQCeibn47OvlUAHRQKgrqNlYMXhvqk3gYdUw9K6vyAyE6mtCRMQmZkC7m0XEEGp6C9nkTPIh9auV0NE1Yn49Ag6oI7MEVM4ln1Mwam107qkREqjmaWsiY9ujFATeCIQxgPN1s2ibxn6sdA27H_NFMB3Z19VwBABpNRg0MSCirhCUbgKVdFMBBYLPPbmQ2htQZrl9UEIGEgJ8iMAwlLqUoBrEjVIAtAxgFcAxgJIIN-k4bHBDAB28ynnVIBNRoYKbxw3YfUAzZnmh80IUAzcnmu82UxITmpBu5XBgVwBBY7c83mu8DDr0nhDAD823mDc1ioR88fmeCKfmKoCLYj85fmsVNfnUAJrKJRl9At8--gd83Lg98zLqD82rn3rffmT89_mRbDAB3rXypb84AWr83_nNZYMxz3k_m3-Nvmfqm_n3tR_nD82fmIYE7Yf8-fmLZFfn0C7fmDc-AXVfbvJjQOhDEDXqBkhBAAYC-sJhxBMdYxt2hSC7vmJjuT1nLH26wc_RJAOFTZ2AIKdhTrycbVm6JsQPOBEKDbA9mB2AXRFAVsAMXBxrBwxxTjPx6QrIgLLJkgsKhswA3NJsT5BAnvWJntzOktiA82QnZC49RGLGQ9O01sBAOGm1hCywQQieoW0XJoXNMyNkB6nIWsQAoXF9gpsf4BABUQ0Ocx9FYX4ALQ8jmqW8QbHYWj_NCRBE-3LPiAmm4jv20NSFJt6dRdEyqSKdu0IUG6cDyIvCwWgvKLEYvC2T0WdS6REDs868JiiUB_rPr86qsZ4M83HlFb3GGgO3Hm5iFcAixXUO3O-8IlHm6ggFAApcBdRS1PDnn7FeDjQJ4Hfc4h6tU67aBvo88qi_OBai5tEw84mCbk5VguM7yiaiAln2U9Hnks-YWkGrsRIC1LVX8a7GBM4Qhy8iFocVP6CWDsZ8cSNe9PXRl0f4NZ9DC-bV3E0Zm5MPlV3c5AndMLEFiVdL454PwX0AC6JWnDPwyYfOBE6EBiPNiz5flgYFVsWEbEDcQamRp9rpsJDA7C_lHsPYCXHbL90mbCDY9syrYzA5eSUGrEEbi4IXcopydrxJ1dek_MrN6lMABwsopCA3gB8tPYHUSykqZs-YAlwaBd8Sz1nA2h7Vg2g1cQskzY-zgGEKrNSqwBudbGE_DL_UN_lcIOdkiE4BxSE97n2S0thv8iYWONacXlCxoIVFsYWvc9MXWSwJURSyWVpS_Ghc7RigYHmEat3JwWa0Judy7d2bF0zA9SUxbZKsEJ9UniJ8cSBGAC3iQ9k4GQ86M5eqSXNABoELDCkIrSbodG1DgRIJApYteAuPU0r25RTTIHuoqPYMsD0oIPnIHs4AtYK6XcVXirWJnoqvSzK5XwQuYnFcYRkkAaB1-mEoyMIPnxPJUqqviIqNFRGX5zMnNvzLGXGS7whClc8BxfEbDOSACK4NUIrUy87N0y90qoy76Xu5XJgIwGGXKy2jYelSTIYywaAXcmihLlUfbw8LXQns0M5RMOs7HQPgRKUp3EC0l0AfPf-0mkj2LCWh3k65dudV4avN0y6r1FkPrhpQWyYmQlcBYYCkLqwEAhaZfnzlQTpK6AMbxIBQakN8GqoggIzhYoMeWISBvhrwLWIh2aojxEPESNyxv0djH0BrnhuXYJTsY3LVcAkwF2KKenJhQyjdxwzKAoG8qNcI2EjDRsDbAm7fUAu3aow7qnkBowp0gKlaeBaLbeBiogZtGaFkZgxGKp-uApJAwSr7qwINsSAyosefJ_9BftgG6LcCMZCBRW6KGGnsK9OV8K0phbUdm7SzTXE8K-dAR7lAs-Srk5r1s6Xkti_RyYsdRJEAGWYKzV5xkO7R6eoLBJJlAsLVCfBGzm6AfoSKTAujiA4ovMBu7FGSVK-2rhK4GWkIjcTU8p-tTtrDN35MXBv7lLZAxMATRMEV7sJLxtwilhK5sl_CsJCUs55EMA9c7XYOAIxtbK2HlVyPUtuzs0t2AMYRVXROAGsOi6pMP0VekuTEHtv5XAq7OBSsCFWDy0SXwq8GJIqwFXLJIUZgq9XnA4qdEIq95spyrbAmFt0oQq9pXfsR755fRXCJzhUr94fLBJEHAAOABahNCUsAFsQ1WPAGL0_1JoTky_ZWDAulAFse1WPSx25xnFJB3YOM45MB1WVc0YDM7EBCLeM9FINK_AsKiah0oBNW0AFNXUgDNXdnm_CDs-lALeKFbjgBtXsemAMTUEzYT5Bbxm3mUxVIP-Fky5tX2ixGAjq9WQTUOQQ8QHfaUotlAZQHzCsMLMXeEDGCBVNj0kGJArdXQ1h7q-1awBs1XkyzkBJBKMpRvOM4FoKGaxQbspuMmYUrEikBfq6Vh_q1qwwBqho5MCDXehS6RYa_pUrEh4BEa9Bhka0cAJqCkAioOjWt1Kcq6cNjWl9YkD8a19B_q_hy8QniBJAFJAC-WjnAjRDAjMj_BWAAnZQTvX8eKyqInbPlSiQW4gGtBZI9wo6rls-YB94QzRefKWXy9jVXHov1WMoHgB3YBbJVa39B3YGL1ka5113YOwAHaQrMNFa6XSa_EpTOnkC5kL6gvS0bWioNfNWa3TYe-LrXqyAGWgy-olN9O9hda_rWna8sDja6esza6aNPa9HHZC-lAcsRtx_a00qXa5Fp3a8oxAy17Xkyz7X1iL6hQ6_KXW_PNWFPG0CBup10YzXdEwBhABbzUHXTthGB5chVAsKo05l3vnXC680Br5mwsnKnnXr5gXWwBnXWJqGABra0XXnAk4BE7nrWzIPA4AwqwAlgDsxSQP3XxgFkYzQttRrcxXIAwizQe639Be6wPWZgMPWnAKPXHBErWIYNn5s_BPWsjL3W561tl4Pn5Dl0EBCjYc9FTts6Wja5BobAQp5967OBr5kfWva6_BT6wPR96-M5L650iY6_hMQE7cVr1tLXGYtVdwIkLWHxcyAgc2LXVqI6ruVZA9NRIrW7Cp09rjFCk2ONlgCeEsmnopqIlgDAMlxbJn5ZqA24Gx7F7AxahNRC1WxnHdEGQGA3EgSvIcApKGa4sUB94YvDdmUDEBAOqhHlPvCTwDQ3KG3DFCoEPq1i1UExnFVXsAD9EX-PvC4kM2gPE6iAAwp0AyamGEPAL8VYbYdhnQFAAxxJpNoDBI35wMVF94RDBUrpI2xxOfD-uMo35wBIwobe4BJG7zFxGFiIC65qgl0ho2A4qUx5uiLSN0nI2BQQI2_ospBHlCY2JGAjER2ZTaiS1Y2JGOTbEJuoAHdoQasKqcReCl8hsVkW00wjQjZoEpBlIAl5AjfkE_G1KZ5AD2VUQE43WG59d8G-g2hkFgAuG1g3T2D0A-G417BINLXq9sk21ouA3vc9g3bbVLX2G5QBUm6maeG1k22Fl5YVfGOwUQClX2RBxMdBU9NINHMgripQlWm4Sx3XeSgYAccniKlBYgIakRh6E7QwBgWJjNqN5hm0PQYAeM2Om0VAFoLHQBLUiRuvKxM0G-iYUQNelIGwKn-E511tQm462A_s2I4tIo9vDR4qIpIgGQDaET5C_95yxWWznOPUKUJzsroLc3wyxDAXRI_nB6g02zjNqFi3pXhGmzoLPXbZILmz5h4xEHxiGy42pZKhXEgDaEYbOLE14eGWuvT_1vm7O9Em-3JhnOg3rjJ4scm0BFQPlJBJAAAA9GhFzQatSuAVoG8AXgBbZYACwwQqAktslsUt9GBUtmlsQwUlsMI-luMtjkD3KBiDAsLYCddTxalNhiscV_1ALQPSLLoU9bayYsrJCU3MWNsnX56CFXit9ivLkMnoaoIY200WVumdeVtevZHowyzVCuQr6B_sFq2VV9BuuAdJsapMZyMaZ1KkcMhsgI2htUNhht0NyGJLAG1tMNx1t9LZ1LMNuuNoNtaLGtrETbN81vhJHBtK1z1tjOIptENxNPSKQ1tetqptmtvYAWth22DBdFtetzFvo1PZIBt764PRdBu8t2TIkN5hQRt-eFRtjwB-tk5La1bc6aiQLBIQqqs_NvZvaXf_bvQUjiltgKyCIF0DXzBsu_JpstRlj1vJN4FtltxttBuqtvw26sB71oTxVt5MuD55uv1l8svhlqstZl1suMl1ZvbnEYC1e4FvbNutulMfWt-lkDWDBBkA-ha9IcNrABbNi1BIRMFs7N5EyJ_F30Oh6pYFNsZyVNgxsIN5TkoBwI3Tw-QwWlpKDAue9WgiVibVJAQR1JScwmgEBEwIk-EcgdU2wgnEGnWA4HuFFGxKQFGzBQVFtTAYWa5meGy1zFriGC4DUVK68AigD0wzy-pJ66OL08uVXpLcEUB-wR2Dqg9YBvcLvI-wcmQbllWOsTNDsYdrpVYdimQ4dgVyq9UhUfy0hXi6YjvVgfVwigZeZDsqjvbnNi00E0ma06ATucm0mZAdxwRvZKwlfZBnKq9ALpKQNo3H8AXJKQa3J3SC0txOb3xZA0z0OlsUxn5dJx61TJz9ORBBbTJabNOZeBtOPGRHhCFxQueGEwuJqF_geFzZx94H2mx9wCucRAXx0tWK4iMt6uA1xwVasAPuMf5Ag1OovmM1wfZQLv2uLITezZkzgg1ZB2dmk0euSEIPYFfEnycdzP_cC1ChSzsBCI6p8lgSpBFFS1XQDLtngGp2T6hNy0W-ijL4zvB8lrjVTO2OTeZSq38auWunGGwqAbQht_WByph28F4LKHHJgfV1ZOvc5Rddu645udF4LKUZIVp8giCKEbvh7a3pDd85TvBUbsH0Pp3dOgbvW9KhXd0QpgWbPjbq-REtHgBRGpicNaMnVvqeO47xkRM7xxZY1O4_bxbm89W0r2zY4zdt5ot8y7uj-U7tKxgdy72ifxr6HWI1gbL6Xmm_lCoC3m_FAJ4_-QRtrULA3tAMQD7prwgW8uOwi2doCMAcHsPd3KBLAZ61I95HtI9zWXrtabu_efp0Jcw813ZEUGHd51QDOpfwBMLwiZhd_q0kMjx3VHRS6YD2qpNIV6i5HRQwgcCsxZkCu5Km2CpNFAyJA2mgGkR1YddvrvGsl347K-mLLpsbviKHHIC9s-K06PlKk9_lv5RXkE_uZFwtd8QKwAZALe-YGpf_Phptd0vbWFd8JVQENvfnb9MQttRpy9l8qrd6xvmZQdALRqZq_0BXuouFggFdp4RntC9pHtYCRw6p1DeyGFhl2-VgGkGDiu96sDld7pB8d6WDgRGU4eaRO78g8MFlgqMEfVuMG8QixKJZKxL-dnlwfgxwQd6GWpBJqeoWpS9wf-IqHUFN9x5YbBgIfTCE-8dEpRQVPt_uVKFlpJ8HOdsf65Q8wCIhRSHe8HtQBA2cHJDCvtJgqvt-CYLseVWvubgr3iC12uqH6nPtt9x8EeQ1YwuueObOAHvv19vvuvwb3uD9ySHErcUPuQuFOqucVxeVTztQVGLj6uWCrJ9wSCO9ndrhtauoN9v8D79uNoKanPvnw4gb5Qxvun98trhtJftsZVFy01wI1VQuQzROCk3MwUGYA5VbHPwN9vly4s53PUlyPKrhVuiKYAEuU0p4gnF2BiZysWWU4hWgcWtFpHA22o4oYGdGTsx2dYAXuWUpbGrxLFpCAfoGy_U_RMMJEFxXgEDrETneSrSYDpSDH-3bF4DngjtAagtED4gsMD1UpqrMbzfpZA00DoPTGEdA0_FjYTEDmIA_FlgdmAdtyJCTnvmdCAeW1Ug5OZjEvuEFYQQD8AY-ZkBBM2OJ24Drgd3iOQdcD8D3UW_l2PBlcaygVmzVdGnUGW_EKLY7rvQtER5ea8cqv-wI2LYhMEwugeUL1Ku3Gq6mI06nLqhoyBSmD0tIdue4S3gfQSPZBnI9pqII95FQIWSQbwrgFQeuZemQrMTJ0aDqIcJB7NNrYIuD78CAcGFrABIsWIfU6IIdZtXF5h-iyQzeP96yGuKFVSYoYZYAuyhDsBg8JGIL-uwnVQIaq5o0NfCWEbUm7PTHJU5axIJATMIFhHoJFwc8lhD6sA-DxIB-DpIeZO3tMT-lLA4Ae4RQDFocwAc8l19LoetDp6CYgObBTDnockocYeti9Ivb15hRTDgz3KCXTigzEQF1bF3pad-k1sQGvDuEEzsrTI-BroOpx7TY6ZmdvaZ4yd-RHTC4c7TJ4d0RV0z5BkrhgOHxBKmCIm9A9UxS57ODuxmpz2gU2Ohkzsndk6ZxiV4UB4yXbDtQLgTsK12Rwj3KAIj35Y2e5tb-QD3AugegHyIDwBHwDEfnsAGBkZHM5RXU7bdaa_QC7RTDalOIrErPN66Eee4v0Re7LJE7br3WUDH3SRiSbLECjgN0oOUc5ZpfLnv70bUpH3SFYaLGsAuZ_kdIrW8hH3J-4m170CvbBrAT0EIsUF5zYSQDgsTHARMiaVgtLAFUL1AIv2Aqznu6YGBElLfzZMrUzy-3GbiwHMCTgJl5VEiE0tiXOW4P3ce7SQJ6aMrT5aTXOUbUxakdObXyJ5uCB6EJjS4WmL0dznUew5IWPzZrG5bpxJpYIhB4NcUEfYVuJ3PVgJUBNHeK7JOorBiERfY4LSbWOFvoQmdOUcjoAYLUVvq6YRnpa_kDRZYrDkjCJXDQ5jvZYtBd_QEUBoBB6QDLsALvTkoHBZyl-fgNjnUCpm8MjVjqMeHdeseNj3tYtj69B7kdMcRATsfdjnfp2TGsfDZQHXSfObC9juUc4ATOwlj2cd75rAALj0ey5jgZE4AGjWrj8Y7g6oFjGDrzBbjmcfCncewzjg8f9akuhuQ2Aqj7ZEfoAVEfLUDNYhjnlBhjoI7bjthaG0ALaXj8I5Gp5TnDKBsi_j80fFwHQPATkW6cHVIdIsHJZQDZB1ePKscVudJ6DNDYfZt0_jvLTiunbSGRpVLG68oQMcTYJCvlVhrsQnaJ3aPPhCtuVWBKrO0fJ-SMd5ju65i9am3aOzVN3j-McImS_B4Tx2B3kNL7kTqidouGicDIutDLNfrh9CYh6O9Bw0hDNJ7e9YSebqL3qTeII7xeX3ovoBieQu-I4M5gkdYjsv2TiA30WmF8dzoUbKj2eLykGjYYp21CfmAJSesGGDs7O1rZVbeCCBuPo5t6-lCKd2ran2vDVmop6YbvayfJAZgQkjlke2wOGiWqdlafATjZ0-K55zwVhYZQMJSwgW2ARVfN5IPSQBAIdWACjnBRY0SFjgKVsBE7YcALUAQ38YC4A-V07aNLOBa3_NrZwjdmjhiamLibMyyhhls6aYX2sEABWlPTJzZNXPN5LLb8os0ZNDr5bEtPQdpiioVkfJbWja_9JKNM-Y6gT2VRg4K1ydYdcF6tTscZzgDfB_oaVDdT6BYwD-mjibK17vSC6g10Gqd1TphbUOJq61Ve7iWAcbDNy0TpzzMGgtT8bTtTmafQgOad-jsjVNbVwIKqyrYwjdra9TogAuIMXqpDcEL92EQA8RDyc6rJ3JC0CyR3vQqc_Tx94zrNjgj9LiFYjLasvannAvT4xrvoPqervQFu0bWYP3TqyePTuEZR0GhoPTk2BlbeNBKN-GcvTp7va7QL7otXs2lAAmfmAexsUzzCCUKEqtPUchQT7faJd7D-RPYXFo-RTHYj8fsoWD0HXIDRbKYm1oj2D6GcIzzJ1PN99PLKd5tNjjaewwJ6aUoL6cSRH6ebiKO72D9RvBqJ6a7PQ8BSVm_RT9P5YO9LasU-q97xiF_iiz0vbHed5ue5OgRPTN5siWmQKXPIfTazquuJ5pZq9eZ55QJKOlO9IGfozmydbNIQs-AGSeCkKbyswBScppmgD1Tm51oznGdYdTbVqAcbJCz2GdF7fWfsxU0Q-qCySaz7ID2ziQTmpp6ZAltNBPO3RNTlLzaRXHyfcV1dR2AB6Z5Vqa5TKXTCfTayyxm2uzQoM0RfyU4C4KAyvXzEKtTKLn2SgBpOhiDvVMLEUvFVZICL3D-T1OFmgAwTTAaYamLEvO9hBo9eVQLUk7R1Y7gWPe6jA0yMSjAP-S5bIaewIRpPPgORADz_qf_SXWDWiV9BdQqJiBiduclMTudaosjyTUvnZw0UpTUANyCcoSOyWELfaBtSksCrbqf4bSueKYDKpTKcJhnUVmAXUUNErDezjc-INZSvKpPXzMAaCq3DYRgKWduThqdOiBFaxrCqcwzkNoWWJcHUxT2PbCfs7ypyBcTUd0f21ZoDEvTkLZKqxKYLrDYEJvKdLLQY5kbbJUUzv-R0zw1WQqokmjgOhX9I2ZShop5FILu049Tq8eFrLUctALGD4bbbY-jQ7Y7eJacZwxnZabAYB5AUbCObPNzVzsRc10cMQRgJE7G2MHMfyHfXXT7c7ETnbZ3TvIad7XrZO2PheeHLTaKL3TZAjYvJWHJDp6L9KAiLp9YWLnbwVp--3LN3Uh6Lrasg2ExfpIBD0wl2ApVoOyB-uACOD81Ly1eU8BS4AJcmwIJelciMB-5vxc4wCJdfRMOWqjEzAzgNtD_uEEcLD0cDhLs0CJLwfnJLyRhpLmJc4wLCr-LnJdHJZ1IhL9LxhL-JdlLhdJFL_GyTPKHB3VEJ7xPNyL0LirjLT5eRnN1BfRj7pd9T2EZgW_kLdbEcRDHPrac8HpewjWwteLHpdKNpfx_O1O43_dpcBQArw-ifufheai7PTlxC7PaFCMcHpcuNASONHGjawz2EY89pGdxzy9FRAYV1FQHZcrRBGcy6zoBhym3IuGehe3lDqdXLr4i7Lu5fxHdoCzpU5dHLyabF295e4mHGi3LuOf3L05HoAG7gn-j5egryabgrmewg0cYP-pl5eKWysfAro5CfLsFffL5lrwhcYPOWCNBTAIVU1-dlZkqmEM89XMB_z5JhQbJec40DeeiL1RhTKBl7k0c0AlQCFcg0a9O1-Ysg2AW86M4XuptAxWi10cefUKifTeBJOI0jMMLF2sMK7dYIKZOmyQozwFvMzmAD4zttxmDnc3cEGhccMZVd17ZzjY4Bj1JDNdAu8DFewr6bTvoeAFSTKACM-P-QgEC5fKL5TD8jHhk6QA1c3L-hcbCG1dhhe1eEAG3LOrvZef6BpyGrseDGrpOsNVCyTEGk-S7lR2y5zpmwd6fM2r6fMf92OLxSfE-QpOpzZ29a5QO9BrRiT4suhrgOeBqP2ckEHNfYAIOeEexnq_LONerBCZeboKZfLlQtKzLhPohCcgBmhDQSsk7x5WHRvyuz_5f1a7S5qAObALQQtKjdEnlnmo-dVL0cDazxry5eMUIFeUQIJsZajB9KbqgkACsNAICtngbsuWvCkuQq0pQ8rDkPHQBcIvyGew3cSQBg0CaiojDte3lPdcL2wSBq5vdfr5BFdL-T4eX2XKDVqPtfF29BAzr0EuIwJbB9riFdulwlq5QG7jKWX5anrq-xg0IfIIr8M4nrm1efEPtcf8ypfBIG1cjOMOWVHPtc2rkiE1LwJdJLqUMFLwEAobyIAJLlv1hyhjL3055c9L15cb4SDcAbtP7VeNLzBID1clcOpefrjqcsvXDcLpa31EbhGex7JIYAbnFf5uPtdmOgj3JFBzDRrppaGhK3nRzrPptrmz6BFgg7ibvltzvaUDd7JbvtUEFcvL2VcUzk51Cb5Ve0bZPY1r_5do93P04ZEYAxr4TcJr6OcXqITdRtKdqdvCfJybj-RCpQzdRZETfYAcbLer4WevXf5dXlazdKrnTfpPbTcUzj5vNpyZ4nqJIBcdO2qduV0AcMOIr2Rb1jijmxf0rvLaWqcTbOWDzcMLs4gyLhIgH7Y4r3Ufl6iqhaiAcBdsInOgAEiaTc1AKPbq9ifjGbrFvAjBRd6LiGAObrABL-QTfhbmrflburfm2QI1Vb2Ld4dONvgBQjryEUNf5L9UZEjNjOWLjjMwO_wCQwuosxOi8Yu9L9fKp4fqAb3KDAbmJ1WQZ2f9eV2eiTv6dzbmjfez65R5riYAFrrABFrvYqXrq-w3ca9dAb29dglaID3rh8AQwcNdcQqOeObyQYu9UvpNrmGVLYXcpfrh7d1b9KBfryBpB9Nldfbpfxsrv7cu9IYJxqlICA7utckbqfCQ7jeQ5uaRQFz7yclLUPGzu-RCrLnDbtwd2guD-XbmLuLc7eXKKywrivQjv5Zlz-qeVz4cC47qYbcYAzbyQdwCoJoq4rDd_iBieuc6O7XgdKXys4bT2d4Kb-feZX-cnQCJgaCQBfJAGefS7IifrjDpC47iDVjTn5j0T2xeap5be29F2eHFdbdNvZd4eTl97Ndb3o7bsnP-zn2eHbi64B9NXdc72deh9JtfBG4h4ZLuryFCsddHgZryTrwAS7dcFqOag7aOLkIS1bz5qu-4mxCb3B01gL9eQwaXfwQebeQrwHcbVNlf-79XcA717fR-rkaw6gPe9arjdRZKPfCBsbfg78PfG7sHcXIkPe6tp_XVb93embnWEQ3CzdV69rXe78ey575rcxzoTdB7m7jpPOPfV7wHfHqKvdsr2vcR7hFcN7lSRV7hPct743cJ79vf-oDzf4AFPcXI7vcRzn5iD7pizg7vveYHfbbuL3C7bnMV6ew2wA-iCfcBSF_gebybU7qH_xXNjxP4EOADL7vx6DL5mhDbFghVibfeYMb1jMJWXW-ieVcebiGCqSImfYmD1o5-VSTBrDEsh5w1X8rcRQAD8ZXTANza3VcwDZAKq5Lg8oDUMR7A-NXxg6u64AYoyRFTQsGELwCGHg7taGVOG0tIbGgAMQZtCmiSQCmQNGA0I3ux6FvWr6Ac0BJgJGmdSpPmmQYAUVQnmeIO6weY61MRXNu_fbM-igaCJFi37-_cN72Cd2u1ivMKfKlL7-EJ-PFq0L73ffL7psIH7llNCbjfcS6-hQYPX8RCH-EIiHn_wUWhQ9yVLjVN17W01oisc7KOSq8u2XWpidyez3Rfd77vg8KH4bXiHn2eb71MS9Pbfd7bSqGyH-ADyHgKRdbz1x_TW55bYUibTrdbbifSp4b-YpI1PdGp1PYURi9LeXy7jtx4Bq9c_r9AD6eIcA6o3nhNwMOVGoMBzr2V3M--iz7Nw8SiCT_12dDbw_YAYbzNAebq-HnI_672Aoeb3Qt4dO_fh9bVOl7qNNWvKloqSFberNB3qe9MLdHgavfbbwo8XXEYCZ2Afefb9wuAewSAjAGjVdHtvfuFgP4ukCVT-HthRK3Mt50SAw_CH7YLGH9ffbqKp1-PBkM5a0_0-AKJYzbiegoMZxAIgKJd5AeI8z2RI9_LVY--732cgbk7dbqCIDRHilh7Hgw4JHynBlal0j9HqsrhHw9dRHkI27HuI-oAe4-u5k48WAZ4_XatleXH7Y8xH248HHq-xHHoJ61_HIoYoPN5LdmXAv_DzdkVidTGzi6JivK2emhfPdHgDE-NrsiW7KMV79r12cMI5SEHveNOpPJtOZZRq3MKcpUU9S-ZkavKiHIAuH6DlLAFxrkJkbNHQ0b9Ny02QraDb7ZGslo1Rn7dPomIffbZdwiqCntx6wa5_LIVYo8Cu9TfHwVRuqoa5MNbVmyBoECCaMYCKDjJU8R9Evoa3c7uL1slhrdFGAEgGhJNLX7DTweADDAci0oGFGDmnqmi5QABxrwDkCanifKZ2MYFgYQByX69WC_YK0DvSYXP6ZFGCTVn5A_wE5QlQSO7KkdMcb6rCUwDMQhKnxLw3lNWCxiLVhksVd4_IK6A_ILEbN1NAAyNpOxoAJzgu2t08moJM_vgJM1Nz2ACpm7M3Y9XM1EAfM0cYQs1kJjcu1oWM8XXH5ArD44ABn7HpFn646yHFM0GNis82RLGTVn7mN1ntFwNnwqBNniFsitziyQwFs9oAV-C5n7Hr0ULxuLV9oCAAYz_XwJrgP5uhwZZ4O2lPFgAiz1iNVUPbtlz4AAI0nXPQaQskZdTQAuc6hUTZ8Kg2pZJMZLXmuFpYoBc7E07esbM92AJAkVQjLgDnvdjbdHwB4zHoBoM3_PaAO_gJwIsA9Liz0YXbWM8umZ0dtyysjwPB4F31tuYum2MlwMN0x-nbmvHosATumt0Puld09umwv9cYZMU8ZZM0XcPgAnVrj9GbDB8g0HQ9BmljjMb28yq2Q4Wdk9Ww4-ig_PJVpKU4d8w4_7qhcYuMyVGljLcmljEgZXLTF8bYtQdZD2Jg44YHCkv0wSrYieCo4z3fSkFHCzwqYzkvysa-jhJjWj4l_o4InD7YxHF0vdTbX96ODIB9GmFT6NFN7EfZ2QyAWj7Jcjj7uPwT7Rs190KOmXXjIfHBOEOzBOEJz72e7ZrbSQ77KF_9mU_YnBx_c1whJSbBC_fsGC4Mr7o_aQvQP21mgV7Z0wV88vZnzpwdhqXIEV94hyQ18vjs-X7R-mN0p-l37jc5YMx13oMOIZPNmEOYMU4E1zJlPzCnBnSeOfYL7fkKL7JOwIBJUJivOBmd0-F57mIoCKvrV6TXlV_oM58M7WiBldn9BnqmlxQdUG3Eav2OXqvEJQFi7Qx8S89G5ncUJavZV_av7fdivmelcvpF6TEU_ev77XoljQ_Y2vp2hprK19P4r_dw-9GYw0Y0ZWknBnJjiLH0kc0kskrIImjbEgckcHAyv_EiukE4n5VMrHjyhbAfDU55ejXbBqD_HBBvPIPzwnHGBj-eEo4ERohvCl47AghhhvRPu0v0bF-joN-E4iXYMv4nARvcbfAiIF-YByIhUWLqnRwD6nRwmzCurpl7QB5JsM9unBfaQ_DfPdJpyBnUghE3582lv59-kjQmwQOM0akZ8BuIeMkJvTyEAvHAMtLUziFvbcDAvfEF-kpQ1omy4JU6ct6dminURmQ_GhBl8Rov5vZKkasHQOKse8sl8DMv0cgsvGt8b7Nl7Q00YO8DsYPsvQQ8cv-9FlvMnT6vqQxT2x_a31LfaMGl_cL7oV4a2J1-X7-41jUfV90Ic2xz7kT1SGGDF3KfxwaQ31uqGkBou8Si5D8bW4aQVxuPBXlDncDSFdwKd6UXlxr03uBQ9vM_a9vCboTe7EFtmNE3tvgXyAi3N0hNOwH6tOfbEm1kyl-sBRDv_DFUGeGt0IFk3P1Q5AbOiJtrvTV9Wvnt6mU3t8f7i7Gf7q8QqINib1vjSFuvU29cAD17ZYiMYnEXoElAeNvTvOwDQQJX0vGO0c1MVlonGzoFDGIUnggfWDvGisYlY8999QekXV6aMc1wp_XPvMuFlsuPUh9Ogovv9_QRrh0cskogaJy1YGpjG7YJvuIAAvICEfAAt8bUF9l1Y7GvwBtN92HwgK4BCFzQBf_YNjSyr5uKmxeHLTkpuFLHAvjQGcv-ion7twOWOI_1FiiV6zLc8dDmGc3EQTF2rmkrkwfw_xIfU6qfc6wECu2D-Cu6wC1OtXKlmep3H-1YELmBiplm4iE-THs2rmxRfWAF32EVZD_ksc8d4f1YAu-G8xPmVX3EQZprEfIPwkfW83Iv4CBrjapoM6xt__cg6BSiCWk4g98poVOigjAghc_3irWAmZGCau4C_uoy20zWrJ8RuIE8UKU8kJyzliaX15aR2PWdpOyQFSaHla7O1SbV4iIFEw-8-bQh87UXamc0wOt3UyumG2ASrrjeDolyu6U45WAqzXc_N0YsOt7pYfdraeUpVntPIirhST9_dn33-mOHH9BwfYI-8cVDB4faYCpt8HQ5t9JwDC3jBDl46vFs1ofKzh77g22aj_mMyg6qAChUEFsfrt4qGi30ihgo6wfFD5tu6xjgvqF6cV-D_TmLtz6vvux_Bf4E5-SNZ-u1d-v2Vj4gnsN2u7Yo8ivL6e9ueacluvsRSiSiikw3N31onBxkutoiauvo7CK2vxeqt8-dAIQCfnRwBfnMEU7nvF1ifJobmfaz8Vuoh00eww99TwkWMOktzqOvN0l8mhx8OoB18OM3DqOruGrvAd3Lvdd8MeWd5xNPd9zvvu37vBd-If7D8lcEz6OuLp0XkTT6vRLT_bu0z7NDwkWZbrz4uUzRo3K87kSfBjEKhrz_m-aRYjdp_EafFjxxf-fDaf4rs4I3T8XBViTYf8cxr7pd_2K3DyDvc73C-vfYwYaexn-J-Xrq_P24F8bfAjBAN72zt6nkWKjFfzRu_kyaSv7LV8Rf-d6XBND_6fFMnRfMr-ubWL8Zf8cWZf_DFXkJX3IkVKrT2EL63rlB-YUDL8vRxr9afTAXafR13ZfHV4YfOp2lmJcwafhr4dfuL440LnsQuWIA01zt6DfnKgv7FNr43Pt76f7D-9fvL_uaOoWJf12UienE0gOnT7Yhpz96PJOUW80_ZFfP1wTuM3qWi3RxGynvEEU87mGv1i67X2AAreT8GHcJuVZgt-xDTiltTfEafAO4qjzcVXgtdOQ7Ih1rGHcMupbfiaf-dlvxdI-6xGyyd84uvb_LUCREhK9tI7f_ildwA77TvE79rfU76Dy2jxS8uahVbcdMyeGj25TVwytTexUmfwr9NfBL94eW2RS-Ur7Vfnt41ft44LvXD_Qfec2TjfV9pLib6yvRg22fyVUDulC8b22b7BUBr6GXEFrzf-r4WK5hoxfx7-sYN7_zChe0ydJ3z9TF9qRIYe2n7IhwUOUr68wIyc-fqyaDD2qDuTOXnvmrs6D-mewmvDb-0eFk0BOqK9ST74zmDNadw_Vb_WPtruW6GKZ3TFBwOTrfyZtVq2mT95-6UBH80e814S21H4tMNqWWvnAsv-uft6KDZyNOqO2_ffrqAi8T73fTt7773d2NO8AHPhfZ1fTFH_LG2H-o_SvoE_rs7DfFbFUApuTfTQp7LT5H8w_6qWXSBZ3QA2n8JEKXmyHgNtk_6Rp5zKuXaYen7Awa77DyOH-s_eH-4SkYyxCDn_NYa788_J0B0_gak3fXsRBtm1XOvdfYOvBAf1fkgR7uGEE1fnL5jmwj6ffvL470HlwRCB157tUP1VfOd4ChHT4y_rr6S_-9H4fqZZ9f_IWxfjr7xfLnpoFQD0yvhslb7br82vCs3ivdH3EfN3yI77l-av174Tt9Sj_dDX_zBTX5K_3QGkfbX6Hmsj86_-1_VffX9SUOT8CjSL7KhUX440qxY1j4D6TkQgNmAC-yZv9pZOH0sGM7jsdM7u0wacKD93jgGYQzrccKL_ceTj0F9yLo8ZPOIj4sAZ35njhgiQzKGaxVQCbc78KYfj18aRTqc04fv8a-Tqrh-TJMk-_VcYhBBw7fayj-ovxT81vIMYCzYTxWqvvcIiLqfqzwb897KP8eTsacDHw5wpfmP_0AVKb1gOP-7QFL7yfnPZD7RT6svJT8jB1ATsvVT-tvHV-e_QGYKLRRbS_nu737pWcR_jn8g9989NGM19tfeUJavOWdjzSL_ShORb3jeReAzNcz6vk2bHX3P4OXfP9ef3d8F_nt9l_NH8S_t77F_AGZe_h8eQzPyb-TMv8WT4SdWTyXYqO_VWsYgyZo_lyYV_vqGrvz6fQAR6eqwIH-0WWP7VT1KZN_5Rz9X5v7yYPibd_RP4hTNv5j7jX-ohMab9_tabSTBG_0ixbyhGCSf4OBVVhWA10mA_LXK4xOxw_Kb4Pc2P4DcHafNTah2J_-n6Iaox5xTuFqqdhP4zO1v-YP_zCL_BKVtdkf7hfKv9zvlv7z_yU0z_WIDRTJf-oz7v_D_Gv5nay_fvjycb-TT8cduhv69BLf67_x10b_EKcieRf98tDeWyAnx3hm8o1ef6f5GAqCwJ_o_-z_7f-N_Xf9gthf_U_TjxN_JEFn_6AHn__2ygnlf73_Xb9r_R4PhfAUIn_Jv9imq_5oAuf4hTbfY6v97__jCKczM039V_iybD_Tf-kNi35nXgL-XvhZAKt-3Jh03hYIVJo4WL02n0jHDlgCsZhwpuzIDJh7PkZ42tCYulQCrpih6Nx6zJjB6IjM1Jpq3nyCVP5w_ij-H9DZhEIAOkoReoH2cgjk_gU-ofbaDLD-Jt40_mU-dP6x9gz-LX5YAdaaPHrf_g3-R16vPsP2cxZP9st-l174TM-eAGqjMEBqdpZJOFgC9J6u6n1c5l46PHiYYNyMsHXGI8hRGt4Q8DwAVG2CQRgaaOleygHgAWA-_iA5emJAeXoPKnBGipDN-tA-n57Q6jicVdroyMDIRAJ8mhoauGx2AW-qCMikIBkuAHTgjuDukI42lsTuksje2Jw4ARg4zPyYqprmIB-qOE4qeOCaagHtXDjML55MGBIBaXqmAXHcwhCuyLBGyQGeJK6YMDzmaIw8kpoQPk6mUP5hAa6YAyq0yMlAE8puwFPKM8p6gGjIxLipes6aZxhgfpBq9cgd3HMmXdyc_JA8I8hRnLDMoc60ag7qC1RaGvUB-r5GGs9c9Fp3Ti_8q8jf5F5cv3w6qO0waexJ7E2IvLw3pkx-nKCFDqfw0lZyGIoaluq_GhoBCgHQauJMRWz-joqMudxzbPbqgGh-uP0BiowwmgEaZhqtpvIQRwG8noTuz-Rcar2mT0DwtOP4xGo6qE8BTUzuPMpeTijntm4adwFOUl8a9GafqoywOha9yM-qmhpAmrIBycDe6utc1wG7XMKAUXROeDAE_izl6qAIxiywFNJgSIFZ-CnWA9CTVtdgHXhogWlQSOBWfKiBZXhbqMUB48qu6Ktw73DTyrPKbxp7FOv4Fu7E7lbuDXg5eLbuE66teCGCZejYgQKA5TpCFBgAzIFUbpkuCkQjijbuOKCcgYV495QYALyBMwArAeYA1wTv6Dakvh4VBFtAGwE_GpUayVBggT0BpwGXyFCBmoF_kEYa0QFbEJVM5YR01saB6ZDOLi58ugF_qkJCiFAufInqFoGtkBg68E5FkGOUgFrWDoQ8xIFr6FYaOhq4UKV4yRoT5FiB2-g4gdXsToE9kJ14HFClvEyB7a4sgWz0YoHsgRKB-XhcgUNo6_iygfyBgWSCgbGBwoGsgdl4TXiSgVOuwYGOeFn48oGNGsl41TxZgdHOFGgGdNRodSDvaPTGht68poOgdX63PFv4zQE5fvHIyT5zfJk-FxjZANk-qTxtgf7sLQG4PDQK_YGz3DSI31CDgYJoUJY-oOIgsRjK2OnQf4IuAvg8HvYdAfq-XQGEsJBqVIKXwOpchwF48H6MBmikeJHY_jgoOFnUutiB0KA4oTingeIgwTh_2FfYyDjYCFOBXGjp0LeBJ4HYCMxeKnhkPLuBf5BkPFuBPYEJGj-Bia7qXAaBS5C_gYeBX7g1gbMA32iXoL9oGqh8pnsAyrosaLe41YBZAZsWrYEKqiqWPE5mlj3kP9CoQUnIQDzbFqKc4Y7eEGaWe2gwYFeIPtg52LmCPuZEQH1o--gBARI4REA0Qfage2jxAkH2nPaPaELmL2ii0LBBRax-aIlovEH_aGkBalRrfrVCzMDles2gzN46COLQXFAnegdGQ3ieAtrYUooO0kqev9higkqezPDJQiEAQ9DwzrQASp63gepB40bRsApB1YCtcoFyofJKnsMUGgj4wGS02GDuqPAevYDi0NUAlgiSgKPYRSYFiBxmrqCwICY4zoC2QSSOrnpgmPNcZgD2QdKSHvClUpYIjaIZJCCIskFeUkbCPkHHYNfAHdgaQec-T96qQA5giUE0AH5BUhAhQcU4YUH5MhFBJeCMir2KjMKU5k5B3gAFQcGw5cDxRNpAOUGOQeFB8MKRQYd6lGRyQTTw9dhlQVgAFUGYIFVBznjBQaGSeUGIsp1Bm0pNQSVB6DhsilMA7UGDQd1BskEZdMjKA9gAIlcANCKwwNzSYAD88hKq6UEQQElBEBi1QYhQE0ENQYVBw0ED2P1BzkF7QZVB5Lw1QX1Bu0EqUpVBB0FlwLeBR0HlQSdBXUFnQb1BDkE7QfVBV0FdQTdBm0rxJpdBkUHkvNNBxXTIyi1BSUzsAItBy0GrQc8QGUEEAFlBL0GhQb9B-0HpCpRkP0HvQX9BFmaDoF4AgMGUZLeB80GgwUtBhkArQWtBUMEwwYpAF0EowQjBTIpYwW1BZMGnQWjBqHAzQUjBQ9g4wWDB-MEQwetB6hKZQVtBpMH5QY9Bm0preozCTEZcUFZBrMBDsvpBSkGZ5hpASp4D2BuWEsGocLFBZXBMwfQiSp4YwVOANPBhyqbYKkGegqQBFnjIKEqeZqo8iGgA6SRpEKcA2wBKnnqCG5bKQDLBOkD-QFpBIza6QTAAksFkrjgM_-ouILH4EYDmgDAMrtLuwdKKSp5mQQKiFsFYAEqeIMGLQfzyf_Im8MlB6i7KInJB0sEBwQKwUyRmwcsESp4nQiGEkUBDsuZAMcEXxNtB90EdQTzB1ThjsPzBy3qIAGpGMUFnUi5gCsEI0MTBmcHwwZVBfMFPYH16iADWQK6wNPqK8s6A8UHEwcYAJLyLoLUwTPr_tJAoqMhLZMtmFq42TtZ4YwDHoAaqVkTzXJXB70GuQfDCy-JcULpAEcEdAtGwsMAmQGzB6oCbQTpAKUEjQcYo0cGQwRtBHMF7RurACkBignhyJkCSeKfB_sG7wezB0MFsmNbBbiCwHEHQtuDhwWpmrUFT4BuWxkA-AKvBwoDrwYUYcsGlwUHB9CKXwWvB-8FGgpjBqsGD8j-Wp8HLwT4ASMAmQOpA6cEWABFSkRo8rpZBIxRqAFcASPYVwVzBA0HwwtPBkgqJdoXBkCZsaHKkZ8S1GERImCGvQVnBLkGogDPB-CGIAK4ANz6xjt9ISkB-gCQB-HCUegIAGkG3wR9G2kGDrJXYSsFZCoZBIBhKQSZBP8ElwRgAQgrRhKyGo9iPgMMINwoEIKwAKQDiCFgAJABKgFdUpnQEANwA4QBgACoiigAO0kmA9gA1VikADtLRIoEgisBYAHohWoDGISrSxiEu0tEi0SI2IfYh6iI2Icoh8_RwABYhViE_QnohyUDGITZAPiGb4reUKMB44j4hRNKh8rDANkCGIVYheiFngA7SykCWIcpA3iHKQPzyeiH2AFKgeAA2IQQo7iFOIcjAxB45IUmAkSHRIgEkSMqZIWoioJJOAOgA-SHKQOUhSYCWIeoieoCGQMYh9gCSeK4ApkANIS0hRNI2IdFADSGhITEisMBdIc0hrSE2Id0hnSGwwPYA3SHZtL0hIyHdIXqASSEjIWoiwtINIcMhtiExIl0hDiF9IcMhjSGDIR0hKyHRIuaAEyGjITYh0yELIcpA8yEjIYshQyELIashkyFQAKEh9gBJgCchGyHtIdEi6yGLIbsh2yFqIjYhPiFRITEhcSHeIfohPiERIUmAOOj3njNShRAgwfvCC8L2VksAkKECohTSn8L3nr7BHcqWwa2ISkGIofAh0thYAMnBHILKwUDB3gBKnoghD1BkIXTBoCEf8kOyUCHEwWbGsQrcFP_swQCBiFdWaABUSjuwaiKmQEbwGkCE4JPB3MHVONQheCHA4OIg7KHYIZyhbkHL4ogAdCEMITZcgeTwQK3B4njXzIL4_vZY7lRsxyDPgJYQ81xv9nxAjSKdRmmMHkGDoJpBd8E8IXbBqkFD2PjASKFoONvB7AB4wEahvsHYHkah8cHwwEahwl7awXmgSsG_weIhNwpSIY2s1SLVqrHAe4bykHNCdEAGiGfAswAQAEQeDEC7CtAgHUbNxIZA2hIlohKSMwAzgK-AjqFiIYUQAjJrQIBwWUEWlqDMD45PjmB6cAEPqkdAThCx-HcOK8BvjlkAHThFoShqleYzgJCI2EBOxr04paH9yOWhKQCVeqIOqLgZQH0IoY4IPIuO_E5oaHmhz6r1oaSweaC-0ulAR0IBhtbCvAC3ELwAzgDowOIIc0DSMPIATwA0lq-OPoBZAGuAXZQogYuhP2CtobWh1h41xBuha6HWrAKAXZQ6Tp-OCAIGAfRAuI74jtgu6k5PQNmhoIjtwfAAiRAWgKyg4axBQe7GuWCqMK7Ir6FhcI2gzUYwQGpOqB6yhow4aIBnAeQQqWB-wDkiSziW6DqAhMilmEuqRAAEABE24OCjCFpOEqyZrEZOGbheap6s1FTWDLQB07obWszQ0abWYKTwpoiC0NF8b-yJDv1AzQBAVo7AkiDiInCGgkBOYHKAe3gx2sBsBGG9hmI4DviUYdRhtwC0YcRgZURvVtxQjCocYTRhrGFjgHDQKRCxiDj4EX7S-qBg07p7BIOstuAmkNJhQNpV2mPEstbzkCxhw4ZPQEqE8cTtAO9wPui7CJmsmh4ukA4QqGFkvuphRGE3qNxhE-yPgMlA3Ib9ALyGbiC7CMUAAoZdAEcAy-gbDJ8oTBwdkGZhmjjsKNoiWxKPZO0ArLC7YAC-H3Zv-p0ghGE-YV60muy7BqBgwAaHDqPwRwY34LsoqWARYSiAz4bwMDFhq-BoBpiMiWFqYMlh3mFpYdQoD4CIMCJQvJDj8HlhDIG5XnFhpIzkELxI9GDzgMr6QuAJ6ilhwmFfBtkwU473EKBgWDDdfswo8y5-Xjb6BWFPQPvszKbVlDSE18xvGJYA7MhPYsKAhICtwADwkqp-wapAgGL1ACFWfqGXUBEANkjk4NNhFrxzYbqsQChO8PYwCsyWAJNh7ep2AAdhE1yYcKgiveA_AE5sImANwDyuVnDf9EJAFERSYBphBE5_Vh6hW3BPFsD6vkC4QDYko_C9ki1wkgDTIi9igmFcYcJhou7KXAlOmbzzYZlh7CgaYa2M7KSLYSIQ3-C2AGr4KSD9AEIw4WHCYYjh8FDxurZM7Bgw4brA-GGKYXJhUJRKEIne7WGF8uGckqiDYb5hToA4eD1heDCLZHVhOu6q7krgqWFDYfAADOF_gCVUl5AugV9ArOEKSDzhdoaKYQjhwuETEiuArOHBCN6gTY54dN6gxZQ84U7utigOGvN0ncqSCIZAbWHM4dYOjWQNYSDcJCa6rqDYuGis4el0cUT_uB-hYojwQD16AL7ywFU23OETEm5-M75h5JrhyOoYQSpoo870YSBhyUBgYWLEkGGlmCTh2OEyOMFU_Zo00B7UxKzChpTE1mD1NB1mrESzQC3AWCiCtOigfNCcQGthsZqiVu7hUUChCBIIkeGgYKbho84x4QRE-UihYfWglOHa4feCVtB64dRcis51rt6gaKQ0AArSEYAx0sIkvsR0SHla53rEYerh0dIdYX14TuRVgnrh7eFbqK3h-uEzIF9aTOGS1AWOjmpD4dRcKEh1HNwGJTjD4elAKQ6nrJUcFuGssNbh80y24QY2EuFbEo7hAsRD4e3hFsj94SOKg-GV4cCsI-HvgEeQFeHz4UIAzkjY4E1q7VCn4RPoTM5GLmWuM3y29Cbh76BcAJnYQ3jJbF_ho3hT4WfhTM7ezjZIX-FtHoLhCU42SG008-HUXEzOyq5f4S6KNkgXKJnYIBHoABuOLpAAEU_hGq7YnogRGvBL-JthlhwvFCAg3sbpQBbhp8DxwCVUGvDKrgmCihw1NJZgiBGBvGSAAMB-pB484Hw0NPj6c1b0YcTOG5T0EQlayWzV9Kds9BHEFowR-kZJprQRGEGuKAPhnBF1uGwRZqi2iFIRuPZ06rIRLto8Eb9UfBHt4ZJh4qiCESFOTBFSkD8BxrT0EbtW8hFOTHWU7BG7VtV4Zqi7VtfMWhHkvEhsBzy4jEZhdBH4-pIRLBEDuKAQBhEfwS4R5g6K5KYRyBE-EVuoiBHqEbwazEZD4Tfh1eFr9HwRUCDexmBgfiLONnEEbeHH4eERGBFTgIrOH762wJ5kaNDzwYE-1PbigOJi0dKMwiEwXaRlGNaIV-HxEYUKGc4ZQJ3KE1C5UNARZ-HV4frWLuEd1qcqJRHD4TPhC_71WkukSRHnKDuE-gBl5vRhT4D1ItSAxIadEQokcIClVu7QfRH_LjiAesBMYQ_h8-H_oFHmeNpfQN0RYxG-gsMR-JJEjmgQY4w-HAvwWIgzoLQBy3Sjemss7QAh4TkAYeGa7BHhKxpR4aEMBeFGxHHhpTC6YMhA9IBzAOqAjZwTLMsRmxGBdIDQoxEfEUpA2eGXEYuG3xFl5jcRheH1AM4AmCBEQHecgJGSlBOAowBTEe16FM5wkTgAxeGDRsHcIn7Y2lOUfWFRvr4wSHx4KC5sZWDy0POM4EhLpGuaeuGhEaPheTR64aOs8MwbBhC2mJHBchPhkOCP4aDc7xFl5uP4N-FwkTMRNYBC4V68r-HQYMs0w3j74QkRcRGCeLfh5gDXat70IRGjAKARs3jCRELhBmAKbnl0vXgf4fIgqBFrNL_hqpF94TURmBFE8MARn-GoEWAR0GDKkVAReVowEcRscBGoEdtqQYjT3L2AxfRqwN6gVBGREVsA8OB84OjA1RGlEXwgBAyjlKMAVBG4EUHWWYoGMIKRZRHhEYgRjpHkANERUKJBEXTgZGCSkc5I1JE34aSmVxqAvD6RHDBL-Dfh4uq64dfhUpGqkWNAaxERPC6Q0ZGUkdWs1JGcfiFQLGFk4RK250CRkHxhvjBD4fXC2UBfHCWR9JEt9BmRJpGAESyRushR2giRgxH-FhAR76BXNnxEcoYJTgq2vJF6ug4ap2pH4UGRwpEwEW2QldakkaMAis49dEqRvZEqkd_hw3goEb7OU5GAEcRsupErkQaR4BFQ0O-gxpHD4bAR65E0EaDapjb5uA74V7DxAIC2CYLLLmGRrLCqoNpGK5R-YUOU07574RORHpHCkQPhkgghkUQRTpECMqdsuZHUhF5Qb0SBkRpgiRFMkX12DhpWEfj6oZHhkcE6BjAKtsmRR4B4EX2R8YgTlKi0Q-FUkf9sK0DjnussZZFrlBWRKqCl4TkwAs7U4YCmCQLNoVguCGyXoaJB9EDAXt_eoF4rMNehKTjSwLZ62EA9SLUIBnQS3kpGbN4WoKgSo0YgIAA4mwBRAG7wVAIOahlA_3AncEDwi3DLcHeY63DVkDhA7yr5wHtw8eZ_nAFCpt6-uoWYw5FjxETeHmgRgm4g4ZASsHS04HAQiEdw_YgiUf_gUfiAvDlIcgKL2GMuVozhtl684QYmTqFWTyD43pz2vFE-sBCI9FHJqkkBJgGoKAV6hBCsUTA-7ECagC56-ZpvQAUgXnqjqogg18w2wBFUN3ANACXAUpgSkji4L6Fs3t1I9nrcUe7GUEBd1NasNABCAIhQLgFmgD56cMKSyHeulADfDoHGLQJ_DmqYYcaOdqrwCtboNlCwl7YYNoMInrAMgN2270AVtq-wC7azAMC24iAtthmWrwItlrGWCj7aAmLe1pYVAraWKD56Ki64l3Bfyh6Yw1ETtiP8YiqUyBiCYPBJiEQ-YPCKKqiqF3xelqtRW8wiKiP8RiomKmYqFioZIusAeiosdgYIn8phzOLozirpWK4qQCogKsdRaszVKmK4tSoUyFv2HsCNKpNRWXC1Ae7GHlzEuKaYHlx4yIqMN8T0Ai-0UNENFAZ0QuzTIrEe3dhdaCVyMCQ2ZPUuRACkcJpCt1Ffyqx2X8pPUTy4XSqvUe4qj3JnKogo-zDkWpScnaANJm9CSMK0MER6lU67ynJgl9wHUDQqVkRmjCjRqQBo0Xp6-Ko73NRs18pWRDX45oj5TFzkfOKWEPiWrBhkYKzRcoC7YAkAesBAILNAVkSi0dtOmvJS0QGI3BbuEKhszg7NAJqIatAv0E1cNrwCopeYiEBz8J8q6Lr9er2WCAg00f2W3u5XVhaeY2BawO_w5ojbUBZgGJxhotJgbZQ2VviWqSpyYDvUmMG4tLpgOSi-ZlsAGfAVQBjCtnzhyOFoqTztjOkE3DZhyq_APOACALhuYvS3AAho7gC8SGGupwAWSMeA9uoXgD22t6iVGJnRNuT18GSA9gBwYTAEZdEZ0f4A8OD6-p2gj4CwwIVa5gQToBMoi3jQbtfMGUraoK2WY_xZmKRiq7BV0fNwNdFMBjVkLdE54EcA18zd0Ty4gcCg1pPRAriBwO2WA8oz0bGWPdGztu1gaACELmURgQBdJueWAqJNHkFmadEXoIPRq-BvLiPRHDC0-M22E7aNlpGW07Y5lpIII1FTttTo41F6gCtg6R7l7N1RDbbvQGqR9bY1ti6A83T30W22N9F6gMN439FIQm0e2qA0at3YrdHj0QLWPVEugJIIIDEF0RPkiQDoeot4yQCSCB_y867iumAkxa6sFjkE-G6lvAXCLABVkOMAZdFwYR8AGfBRLvEAaqgncgqgc2AkgHNgyDGxoH1g7dG00EnRuG59YPQx1WCMMXmgzDH4MSiRF1yJ_Pk21bblthU2DIBVtrAxvNF7FPvCJrZBth1RM4B9tiuAhDEbEaYgymRURLZwyjwefgrEhkg_NLk2YzjdGIt4MDaK1qoui7ZiMYn8A-bSeEsAJvDINooxPNFPQEI0ajED2AXWSwBWtgfCTrb6MZ9I1DYutvvC7jH0Nl4xejFYLLyQ6qDSeFzOktQH0WQxBCi1BEox-gCVEKQxuAAEKBQGvqBh5Mg8kDFj0fpko9F84M4ULrCC0QfUFgA-AOERKTG0-LmoA8p3UBvRGmBb0d0m5gDyqkluMTEIaGQxgQAKQO-4igxhMbgA6sDkABGA6NTcMRrgE4AJ0VHS8qrXzEBCEVQ7qCv6NTHl0XExNiS1BNIxWIgjMeExNiRAGHz4a6AK0Rs8OTG4Mfkx6TGWELmo0zG4APUxaACNMeAGsTFXCG0xHTEoMd_cLDHQwDHSYeR9MWpwA9CDMeQaOHibMark1jY2ZJMxkjD3MQQoTTH7MdsxzGh5YO8xtTEtMdRA7THajscxORzBLtfM0MD88hgiFzGnbAMxuSK3MYO-JDG_MTvgjcC48OrYzSr3MS7yEzFaMS8xQ6j7MS7yxJjg4JiaA9GZ0fwEjPrCQZKQLPp2AAVR-vrFUdQEtF7KWGlRgYD2bNx8r7BzmgX66vqheBR8Qvrv-g-OTTFJhlJ6SQz0sdRqbfKRviyxJ6DD2DYkJfrsscBhMvrlABQizCT3tpQwhfo2JBQGUGy24BcQLCSiIEhBbqyikAxBVEH6WBAGJnCiIMEYUWBXulhGFgCZEHqQkOYosYXQopCWsZhQxfw4ZBqx6WAw5m8u1rGO-s6x59KugddgMvqCWN9QfKLqsWpEdmCy5urYY1SOsSrg7rFT4GcG6wCDVpTR3AgyhjLA-AZDOPXYrwY2sdKqoTGG4GlRTY5JUQ0AOAC4oDgoO_BFkEIGzz4zTtdgrtA0pGNIcrJzYAXmk6D-AEKxzTxhYewo5HS_OumxNkQNsVOAIhGpYEXRNsBw4avYEpKBIJyxaXTV0Z0EJiDaoe7QaOi2wTzgtAB7IFJhaXSVTucoCc4HYO1A3-CdsV-OQ6jC-mrAVVzdsWlRYpBMCouCGKB_4LHRLEiH0ZnR-oz_TAex2fALUZXMpCorUSmWJ1EPvhdwG1ESKttRIoDgBtZg-7E20ebhi67ZsWexf4CGwEex_gBasE4m77F_sSux07EdgRBgG7GhblmxOACIBgwgPLHCMNGEKjFJ4ODa3-BDEOBxIrqrsWFgW7H_wFjgn0h6QPAGa9Ce4Pe2YmaaOEIAcrEmps2xEpIysaRxeLErYFJiupgC0H6xM1DIsfnYN4L1AaRu5HGKYY2xHjG7-sxBwoDMcUZkM1BDIKRu67Q0JM3EndqYyEvwLABY0Vr6D9CoceuxoeaeEbk0UX7d4VJxQK5esbFhI9p6pikAGjo8potkQAY4kGhx9wxZYHdOqnFBNjexesx3sclwDQDGKnF6UfBXUZvonB4RBvLArcB4AL4sGUC9BlRWjmosOhEALnFAsHmRdL7j4f2xOAAwPAoWrQbz8L5xEHoLOhsRp26gei8BbQBqKJFx7Hz6AOyu67TRhhEoHCBHULEG9QZ9BtZgIXGcFmFxSXE0ADFx1rp_oSlxUIYxTufcoXEdMdnmocDQAMWQd1R33Dcgj1QPnMoowYQfhvJQopBTyOfu59zq5MC0H4Zx5lrhgXG7sU16rHEYhu_6BrHIQoWY0WRcQh7aM0hL-A7QAuYyOBDAHTESjJg6s1B6RrfoFEb6LBRG0JADUYJgm3HGBiVAXeafEHtxalYhQsYG5oDr9Jv0FvzbdBlAp3HZAOdxeRijeHPmJ3EbcY9xUVjhEeu2Pf6wFMduv65nbgtuF2735Fdu1VEz2NWo93EHcZ7ab65SCDoxjcTXHp8eg_LgnrlAkJ7pQFUqs8wM6OLEv1G6nOaaTSqbyjA4cDhpsaKQeEEbIARBNsKcQtjGeYBvcTNxZEIteon6V6608UBuYV4gnjceXx4_HrxOlPI4UKCBia6VYeDge0IPatYYP3yjDihxmnFqZjpx8kZK4HJxCHHxAMZxo3jdvkbQMvpDEHZAmABoAKJAGp6RsdWANxJl6OZoivHUrhyxGHHH0dg6WnE6cXwmevEdgdrxyvE8gSGBbeiKcT40PPEK8fXo5vGq8TJxnWH68aa69vG4WBbxxYFW8VUefgYu8XRAZvHu8XWOlvErBi2O4w6jAL36wRoXgLMAj_wWoCHxSrqXQJfcGnEG8UrxAfGIgUHxxtYY0mtxemDS8XDhEvFpAEZxfgBbqA3W4vEGcfJx-fEzrNfMndiR8XcA4B7BPL0iBfFRLLLx0Kx18XdO0-b1sXbxIvEu2jom99L6cUnIhnFS8QXxOoTN8eqWgFbAVuXeqiizsQIAc0BRsaoBtVCkjC2BD7zwmlPgfYFimn-6sX4rgfnkcbGCMbbAe1Eoqsoqh1EaKpnxgQTTIHNscORKQO7AKipazHR87sA8jPP8kvpzYJv8GcoaiCyI2_G_mJHG-_EsPvfS_XCBBKIeS27KBiaGXYE6pEa6KWr_8b-6PnzqZEAJGogACWk8Z9rlvBAJIAm9gX-6pLDMfJ5OoZyesXO8QRRh7F1xjbTAAgRa8_G5PIE6BjzmgbVQx_GDbu0-TlAkCfgM_kKtqDfEyaTf8QoevoEICT08MAn4CQJUYrwLnEjWz7IkxFvufEhj6jHu4e6z3Bruyn40vlusYODNkZZgo4Er8f9Mxvqr-r-I1AncPFgJQAIEJIpaEgmJ2n-6BAltvqrw5AmfwCfxi_GEABQJ-HRUCXkU6mS0CU5QP_FOfshiXlAINl5Qp-48CTzUfAk8ECoJ_X7_TCS---p76q4ifM4eXkjWWglwIJhqXgm1UH48UvqZZLoS5HS68XsURZBGJnTWZoYEgaBBia59YDaBVixkPHEJUAmTHDWAjglzfqk8Vnysatjkl4H3gWE4IjzH2FeB74F1ZN2x6EBUBqNxybE6-hNxZQk9sQyxyQAVCX32MPEW7Fkemdh7FsVu2bqYgZWB1b5-LDEJEm50PHsUESiUMajRNDFhQO_EKbxI0YMJ1DFEMSMJseR-5tCQeAljPGk-ceaLBqBgonGwAOJxetRL8M3hOuHiCckJHQg4kcK6seoqTLfabtLLCTr66_ha8W7x4fFYhixhXHFY4a2xFwCfSKYoDvr3CS5hGWDw4E2ML9BntnO8i6Ci4djhXHFvCaeAHwmQMEukPwknYLWUGyZfoA-Umv5u-roJIajaCRSMdAmr7vUJK2JnGE5QpIyQCaAJtzxJCVk-kgkZCRqIUZxvGn8BToYyAFcaLYYBhjMG02odsRPxfSSRhkM0sAAgwBZ4dkJygOOxldjx8NmGrzwZcZRG_QY5hulxzuDZhs5x2UCx4E-G3VgucbHgVYYy4P4KArGvrAcJWkYkMFFRlMCaREZGUZz8lpr2prHYRh5cTBouiFN6DDQ2Ro98GQDaiXAguolLNAoeBokH_PQJyTrowEaJrHE1QI2GTBoxgWoA3oZKgcYUTBq-HjVAvh5WiW-xoiAsSE-GnonpBFaJQgAiAGhxT4a58ft6TKwDCSdyVDG2MUkgNUDhiSjRkwkbEUkgVonuRP1uM4DRicAAtHBWiTNQ89hTejkJ9p4BOJmJj1DyODVAr4GFCdkAuonEwKxEqqD0RmuG8HFVXEAJaol04IwAGolFRgNOZjA0CqbSgSiQkBZG3gkZAHh0VomBPN2J_gkKHgWJ31A2iY9QVon2idgAjolVPGoAVomuicAA7olMGr6J3ok1iayQRP7vsf6Jz4BBiauJYHHycVaJsYkNEPGJ6NH0icAAB4mRicMJBtRJiRg0KYkpAGmJfMCJAgukvHYBgudAfKJDsoTATBpZiUPYOYnHgaWJBhQfiYWJG-DFiQUJuQmngeWJlUaSRoqJVjB1iSpGPUDPkR4wcNH33C2JNxCThh0gI4k-oGOJ31BWiVWgjiI4wBOJ5YEOicfcTomziS6JnQnmIguJpElWifEJoFBkPIOJAl6AQRJum4mBifJxT4Z4EGkAYEmaRNVG3ShSAPKJ-gAgRpxJ0GD9RgMwYAFmAKSxipBCUSiIgsHXgnfeL96eAvq-094fgQkJQEHfXj8w_F4AQT0JhhbySf-BCJr1futGG95aSUvxSeC4ibPci0Y9GNCGHSCaSShBGxb4QehBGN6Q3qNc6oCUQcvYk4F43kAkP4kgSY-Bz95nSMfwwEl5iaeBV94XxKJJbCgTcRPerHEmSVQBs0yc9oFJUJD6AbyYMCCPYL0we_ChUSAAt6HTvkkQj6FshPNcrOEUEfJuXFABJjQARvAnjEmhY2DLUEbwWc7XgCDQASrmml6YnqJRljWgrLBKQHAuhLBMjKeAfODydtyOJUlMjHwgrUkY1O1J-UlYxJVo2sgFST_oU6DRAqVJPTblSZVJQSrk6G7AtUnhDoSwDUnx1ptOPzDNSTXKiuDz6gQAeUkEAEbwnUmrScugnIwbSR1JB6C3AstQItKFSSNJxUk0ACLSZUkVSb8mU0k1SQhe_qD1SXKAjUnLSTWgLUlrSaeAm0ki0jtJFZx7SWROJ0mmQP1J4iDayKdJw0kpwY0Al0mmQNdJk0nVSTNJD0kc4PNJz0mLSdLOTUlvSbtJbUkb-AQA30l28OjJPUmYydjJpoIXSbVOsMBnSeDJm0lLSYHuE0m3SbDJPSp1SYjJ7QAvSfBAK0m_SRjJ5MmwwD9J3Un7SWzJQMnggPXhJMlgyVFA2sgUyb1qVMmBKjTJs0mPSfTJjMl0RGjJLMlygKBoxMkcyWtJccSKyUdJ6wBSzqTJUUDSyTgAoslVSZTI90loXpLJPzALSebWwsnMyZzJiNrIyUrJf0lW6lbJasnVgDVOSfKayVcAjsn_8uNJN0liyfrJcMmGyQjJxslIyebWSfJPTObJH0m2yQHJhkDWyUpAfCCuyTzJF8Ss4XluNnBYiJsEhLDr4Yt4FP6ogF4edmoLKmAAWcnr-ITg1FZbWNbxlaZX-IEYn0gFkIN2T-hxLN7xK4CrdLrOU3aWYMFhNcmFyeQQDcmVyU0JObjLNKzhA3hbDMKAjR7SYNs0MpEc2KEAYAAreGAMq3SSCC3J7-hL-DMIdzrqwI4AmACFPA4W0ODLBFgACNDCSYPR9GCJyY2EyclDyfNMF6i0ATMIGclX-ITgrOGt4b8JY9pyeE3JB9CndNPJZcl1ydHIvHiXycCu8fS1yZgc3JEnyA74m0lG8NzgWfhz_puBKAgTULnJ6wDxyYIakjBJyT8wKcmAMAfJTQmZydOUEfL8tgTEwWHzTBAYrOFr4TvJT8A7EZg2QYIcYFqwQ8m_nMwoP0TPMDKAL2ACAHPJgOB8ULbYMVgfySVJMs7BYXRmZgCs4YFA7hhYKTvwoZFYVrWIDWgInLAAntHuAMfJCU7hiL2sT0wQKcNolcBREQIydaA8XiPwCuGPkTVu_5FhkV1JGQCukWHkllrXlmSg3Cm4qG5RqCk24RgpS_CPkcgpCU4fofiCRcB0QCeM2UmS8ICsh2Kb5okAT0l45DwKjCmytgHg6wCaKRvh2imhQtvJWik_RLRIm8mCKWgpy6CMxGApVuE-KeIgwCk_RP4piQAQKX3m70IhKVvJ4CmBKbfwHckJTg9itoikEUYpqOCmKQMWVpHh0VsAJBF78GQRqSnANNieuBHqIFERD2IcOPn0sLo5KSkpEtAlVKywhwRREaywU8nexp5R1FE7wH5R4NEBnJYBiCAZwKUC1nqkIBxR5EBcUbCIB0wNOAWh5nakIAlRdgBZsalRLbEZUb9IEK60aJPYc9y1UT6gwcZs5gCOguZAjr9INHZAKvdwGZgMdtuqT7hStOh22ymzAvR2EfD7KUx2KXpAuMn4ksiCHjEAhh7wAAfuOMz7DvMmbHSsAgZxbwDQ0RCC5mhgkR4A0yDnzGi6btRR1KdAJ7zHzms8zQBzKe9oCymsbHsAgeaSmJTYnyqBiP5iRyB-tIbO0KqgKDRgPgAPVJZWYSC3UPoAjdBNaqnwzSrJlrDKtEraoBCp0EBQqeFAv4Av8B0xPkCs2pnYdgC11kQAUdDXzHkxhmAQwIZA5YjXzGgx7KnWyjGaNGqMqQKoxYhcqS0AW6jMqfLSHzbSKHfu6NSWlDzWX6HYrKDR5LHhUWaA0HFq-owhrLFnoPEwkrEccTr63LHysWr6eo4SsURgoQkEUe_6VHGUAHKxqvoaqUcQupgmqfWxuhJ5QP8MNHH5-qKxeo7KsXZoarHmsehA5fr-2J2gepBniUMJUwkG1MUwPJABqUeJ0wnK9qcJTvpogIQgUuA3iXVgXqkq4GGpUYly1K5RUbF6qXGxqnwcJAGJffDm4J7UEwkpqSiEyYkYbgUAuIS_CT_gQXEJSN2o6lqmqX8JaoypiXR46jwLKBsuxrpUXIAREDAXUAtAgigwER2p91B25G6w8akuJJWpOWgxqXgAg6mx5C1hO8oNqbHEqakm8WbIo6lxqSWp06nABMmpF4lJIM4UUEn_uAzmn7GqqfL6sHHOFDmpffHKZMhxm6n3tvOpwKjjqRiUt_hbKZh2F5h7KaYqPLhyUQR2UfA-qcIpxaTNAO7kWsRkDrH0r7GjqZep_7g3qTsp2HbnKRC4QIRuHJQAqSCwgBeg_az91DdxUalNJBepS6m3iQNUptzBchAG56mEIP-piCRnqSOpwKiLqVOpyGmx5KupQanrqTqpvJALqTjA_6msusRpCYl0eKgJdOALQIBpJyl3qWcpD6nHhHdRmagE0dToKDpMaelYpymMdhC40HENANx2bsBBcTcSuGmYaUhpSSDYaeu04mkEANeAf6lSaRyo2Gmoupyu-HaEdimkwKgQRLNhzxGzTHA-aCwQ0PIaa7oU-ugA-Gn1qYRp2gTqcb_gimkEaWoEY0CAafxpIGkBCOppUfBlMKlgCGmxqZRpSmkUeGKCE-RUJMQ87mk2aeZp9Ki_kSZpZmkpLhZp1LQY_HWknb5w4b2pkWnxeINxenE3CcFpymmuzv5poxT-oINs3KroMB8pbDyZOlWpqolFkIVpCyh8IFhpDb6TqalpVUCJaeTaPPFjwAiMdqm95JIeptSAcV6JXQA4fPUJtmD2fCjGqvye0MMo4XwHNvaxShS7vlYEg2lNqQ78SKTtRLzOaAm8jrWJWELSXLpxwAH53pupLvygJJiRK2n98XdOgii88sNx1nR7vmW-B76FmBYES7buvOcomog57AkAwLZdtPkurLp5_PWJgTzXng1gbQRKHslEcmDqHoKuJboATqGiK-rqqAAIYSAGKHcUd87yoc1pUVpQng1gVCoWWC74W5SCruCRLxFrLnCsyogchppEiM6qHgK6BYLYrPPayOkCVKjpUFgmkUc2ehE5AGmEykChNoaA-AAMgPPw3Y4ITI24x2nk6fo2kjArQKJan4K7-EkASNHoAFdph-5LRkSEVRB5aZ6cmDGxBA1xpoiMaDTQgYgd6BdpUADs6b6uOzDChFdpDibkdIH-Lj6s6Vdp3XhTVHUe9vQJwSN483RrUFdprR4DyZE8W_Fa6aaI4_QddAbp8ACy6aDcFf59thtwlrp1_Li0zIAO-HrR_lrMcE9ksvZqYWapJHEWqT8pX5zc6b8pgBAc1gyAfm7QYAsMWCjC-jzp4yB-6fkYJKRF7rEROaZ4qYkAiummiGf-lunVkNbpekRkYB7Uazxp-KaIa0Bh0QlILulUUDAwoemBnJqIcy5N-hDIVSi-_MuJ7Wkc4d5p3n4kZCU2sRHe6ct4xekLOjkRzgAR0WqxofjiqA5gJunXaRhuGOoJ5hYman6RqdpR6GlfYIXpfxrt6ehA2AzaTnpEHowdHP0cdOD3CH48gurCiFpQmuA06ev8i3zOFD3pZukH_K9cnrYYbleUjem-6Qfp5HT0UBAwvfpEceBg4-lt6e9CFxDT6RKsfMAUjEvpCh50Kqi4S7Y3uILxDmAFGm6BA-m5XsOMTQnKgaRJ8uZEQOYewoggGeqA89gQGcKA8jhjcT-Q7-Cv0Rn4xDyTiQHBSBnSTlf48XjDeLVuBpEP8KXuw_RNbkVuZ5GojEie1R7E-L7EiBlprm7Od-GDHidu227oGbvg-257kWTmb9HvCuhEefxWgdwQDmAPaf5xFYQ_NhvpGhFOzoru_rpdyerpkACjeC_pAUg5HtN4uuneEcTYgPZMWgFIDB6WkfW8qTwzHkYeAUgmHm9iGghgGWaJdB7xiAyGgRxb8VWIZOmsGVxkqGQgTJhR-ZGQOMOALvjqHqxItXH8RKRhytb46VwRdOo0ADUeQRGotHtx4R5NKjys7Cpf9F9Y_U4F5ltiRebuAEqS84BK8lYZ4R72oX8sHkFgIKpAumB4wEjAK2FZbkq0eYByjLpguCYZACagt3EzbuaIOCr8AAu2idAswjO8qLTfZmJg__ShGeYA0URJ2A5sXCprTmOAfyyCVqouWW5AKPjmzIB-vPTQqO51Gf9mUwDmgJIAs3iotOi64bgRMH68g5ZnUI3EFlgzUAzEZOY12C_Qd0FFERU8HtEZLPIUZkRJ_uaILj6otOLCimB3QaUZksLlGcEZXdiADCfss1B7rlieatR7roDu5n6fiTXYtygw4DNu83Q3GZPwG5R7UGcZ5oiPFlDCxsJPGZy08bw8tJxgW_p2APwAOCq3gSzCBxnuGSEZ3djMRv8eZxnhEUkZGUpQqGIJUgaPUPPYo3iwDD1AM24lQDNQ8jjDhJseyILaKp4Zw-q_iAE4364zbtfMDtCIKjUaATiLbjQZC26Q7mSZePFEOISZzYAV0YYGXgbSmHnAmpjb2NEAu9jMHBigy3HajlsoXlAO0O4G91awvEIc4R7zKefYVKnXPO9gxJkWyFSZPkBwYTTUm-jkqVCp1aiIKpCu8pmngSDQfBCwYVm25n50ftd6oBAbkbaxeIC5qGiZoqnZDhaZyQCPGZwGby7mmcOEx-lQEOHpeByCZpPpF9CaRJwxBERW9AREA-5p_G0EVe57JJDuaeDxabYEFgQLpLv8Ve7QbgGZHDC9ZIPywZnV6bZpe1SJAnyioFEaEUv2PPEnAeXpi7SV6WG4Nem0fke2566wKIXpTY7fKYXpoGS5mcwx-ZmbJE_x6_yBaYhpSZkLJPZpRym3qbsprGlj_DrJSEjD1GeA5MiVYfWxrEmA4Mepi7ElaecoA5mlgSOZdhG5XsRxU6RkcS-g2WnxiLlpPumenEXsEAbmqYkAnuniKLlhBIDb0Ctpa5nu8B16h5YATieUTwaHqfJxcBkVqZkwW4ml8Q2cC7EPrqepsmlrmRuZi7QTmVKxc2nsKOXet5kPgBOZ27Fwsd-Ze5n3thfp6lHMKDR6V15mAB5cIPoSSXRen8BhScfwV5mSIbpJNUhTRrmC696IWXnqzQn-STBgpEkYWc1pFkk_weuJbWmzSCsw4my9CHrABalrqc32ePrBHMWpjZmviChZFUhIWd9Q89jYWViZSkHSSV5Jc-7sQc2hzYkWlrDR8hDB-ElJ7cF9QZMp81yIIJsIW7EzKWxAXSlecDxAvSlZUXZ6P565UbMpM9iSmTqkSylEQCsp_w6NUXlRR1gydA4qj3CfZAK4xNGSIIAqpNGZxtGY8ql2AAhJ38xEoKz6moCqqayx6qmisZqpGvqNaRAGeqlWqU5ZNqkDIK5ZMvr1aU6pRHEZqXqeTewwkUxJ0YTnmV1pc6lnmStaO6nUMVlgxSJwcbWOefFQOPMap7yXmaFZefFCNCepa7HRhPKxRHw-WW-Zb3zOqVGxflkjAI1pTwY3ECy8Xh5AGQgkPiRUSSRBia7hWaUJBPFpdHlZpviOakPwPBl1_kNxE-SAcEagRqAfSKy6dVmoPA1ZdoG72qc2LpCA0oEoE1YdnigZRJp-gZzxvQnx2Cq2X0ALVtKBNVnFJENZpDyJrnRQy1nijD1Z3rDtXFJE3rB9WTYBRwAw4L1ZqAD9WXP4WdATUBdZV1lxoPHYjhplMHdZp1mb6ONZmfEu2qpAxj6pSQ-hYmHpEAdq-RDIQPlM5oB1YawYE-SOqQZu4O72AKzyJ8iCJjpZRMh6WU4qRNEuKsZZbiogKlZuUNkw2bceRKmg1uPQ8NlxqI4qBlkQuEZZJlkgKs3Wn3Lg2QiMZYbGTB3BilwNUDBJtNm0UI9Zdxk9QIBwtFBZ0HDuoTFmTK9cLd7LlL9UcOFiZpqMTAyz6ZeMfergbOb-M4ktpDLgvh7r6QiM424zgNDZiCIpCagaFyKK2Z2knQgJ0Z6EtkhXAMUA4TbTGuwaSEQ5fEPQqIAF1tIwixphfI3A0Jw7AJoo6HBf6iO-jcCPiY_xon6jDKBs9Q5OULTZNVzd8DysGyxjKmpGyQRbPGjQBFAfzEukENnU2Q5Meq5BpOURq5lC2eEYG5Rz6a3q-HReUCgZkRrzWZ-B21nm5l5Qvh4p2XRJ6kltCXEWBjAQ2fLZKQBq2YSa1gmY2UrZtx7c6trZcoDhNuPyddk2QI_q2RBW2WE-W4gCoqMaDtnOpLx2aJGiEXWxDg4LpkOm74BKnu_0pI4WANfMvwYjAFHUzPRaut3wyKiNwFuoAaxAYCdso9nQLEsslc7d8Kaqlqi2iJsI68709LNADLx44nTuRTBALjZOi9kr2eCsFCyZjtEwKwyXXEFmVC7grAPhy06mPrOAaADWQNpB_oTZKp1criDtKLrI5RmSYFFootG6YBXYVKpE5jvRdhbxgD1Ohdnl2erZBiibULc-LdigbJ2SPQAw2VgmaAjgOWfZzyydkiXZ8ADY2dBu5RmIOT-kUtw9To-2NYA9Tk3Z9ogt2c2gaDn5Th5EHdnhJFQ5SywQrtrODdgtcZ7UAOmUnJ_0QgCBGRZYAyAHagy8cJn3rFwUEiC6ANysM9jHUCBswnH3QMqhDGYx2TsAtRDi2W7k-ElS2f6gMtmQNHLZUDml2f3u6jnYOZrZ5a46IO2oltnkOTbZRdq0OSckhjgz2Ew56a67iJmp5QnlqRFZH1m9DtJ-WmyQyFG8mfGvEGA4f644MW45oG67adeIrPKhrj7u4RbI_tBgRYjy2HiEJDhz2SBg1tm6rOaISKmr1LaIUDhIaDSAiQCWrgZWtak_mYixgEocqLPZzoDN2UY5_Fbf3NkQzG75qGR4LcCMETT03w6LabUeQhnS-EVumR6YGWgZua4YGazAWBnNbjgZJe45Scd47u6-xPwoJBlE-Ld41gyq6SIZ627nGYIJjbx7bhrpOu79yRukTOlWNDHuIzm97sMeAqT5DsxGZKlnGdDksZndHuWIkgiMOSzKTJmvHiM5ke5EGT9xK3E_bspZkKnn2M-Rv3GQrqds5JmAOP9xER43OQyZsADfwsKZCykcmaxSn9hoEXTgcxxeTEiQzjk5dCdgwbgx7o6Z2Vl58eXeNtjVcZYZUZFyYNsmXGAd6uwAAAC90RnUxKygFFRUrtvRqTCN5qpSDKiSPIScimA8OZEZThkwAu45oBDTNiwQmx5abO45RUAlQAEin-xyYDs5ZRFjbONmOfjs7AIUlGB7acsMMjnytOT8LFLQvskUDLnC9LC8DH7k9hiWWmACroA5d1QQ2SRMX9Q2vApgn2a40MDpPbzukqxEpTkRsFkAFTnG8dpEKIxBKLEEYNB_FpBEFwC-6tFoesCSgHK6eIAEuRcSshmCQNEALY7ZEGA4i25eOUBuhfFAnpesSJD2ucbWXioGMHtQmwCwOW4aj2FcORa5xyBugEn611ARqG4ZgkC2AGw4JXD6OKc5Fx6uuWcQJLmL9Nq5h9R7rsEsArlkeKDW_DkT5jDA_XJCfsuMjghfrm5x6bmhZCQcUsjsAE0q-rlX-A0ZufS3ila5GJbagE7CjcBcCCS52gxwAFG58sAxuT3mqbnKYH3me66x4Mm5VQ5TABW5r2pNCdW5gbnhufW5trlKSmXoLbmw0O25lACduT4Zeiy9uSduXAjJudqgy3FiaokAWdDnHhz05zl70HBJPBA2uY25zoDNuWcZ9JkEOHc5XORTuc6A9rmPOZe5KDiUGqxxNmBvOYCObiCfOWmZg_yguagwltljWFgAW7l5uYEoG7lYAO9aiQCL-LG5e7kUqRc5mkTMtg25b5qZOe_oJLkXuVPQiCr2cHB5ERm3uQiu97koeYA4T7mvOeyZb7lcmRipn7nKxN-5aODETH-5oHkSalC5-emJWT-5OTl_udqOPzk7dGo5qtnIOY0EVe4Z7koiYfRqcYrkfjmqUsuO6TxZtpLk_HnT7L1qMuqnJOXhXYKzub9u0nlYebu5ER6s6mcQ_zn5uEC5LjkUUdCQkDlseUrZP6lvmdkQdWCnwnLxb5mfMWr4jayHttDxlYiDOYN4cSAw2YrO7OE_pKGugnla7qN4BDl2eeM50hkB4ek5ENlYOUG4onnJ-MuOYfQ2eYgijnmJAIF5ssDaeerZtx4Unv2ZpfHSYKZ5VwmaeZggarm0ABU5EdnVYD4E7sH0iqah1sqL7O3h03TR2eaMwtleUMW5VwAH4duMC-mBKLNZmdnAGduMrHlKIlg5ytl8kVo5GtmD8lXZejkGMGQ5nuBGOYqkJjkG9N3ZmUw0Hl5qRAwYbo1p7oGOGaBZ7iB8WSMk_FGSSWdGE4g6iDeBcFnW8HRZpkmhSQhZ9FloWfF42FlZ2Z5JAojSSKnZikkSbrhZbhoWSWT-zaFWWQc8FpZtKb3xhemWAYJZFCHCWUKsolk9sU7I2lloNl22H9FBWOZxL8p3NqNRzZbZlgaATymkuDNRvMFURCC4UEAXsSQqy1Gu3HCmvirQQP4q1MnBKhTMlymbAkJ04EQLhAqp7ylLmZYQgqaAYZfIlZnbylVpteno1Le2ESjRwrXat5bSYGkuF6gr-qppm6mZsTupMHEfSHhRcRBo0CZ0_8D5rHupA1mANMCptPigqdz4wOmTKXTRVKrN-pWpUVmQcTupp1Ac-UCw7PmxAJz5VfqAMJaCfirxcIj51rjWalbQgDhCsak6xnFa-YyJWkEVsdVgoQCsAOhwBvkDeckUZPkmjFAAlPkYANT5y_qi9FGpA5m8kLvgWqkeQHWsO6npCBmY2149ZM4A45ircMtpwvoR0UqMh5HBHq_a_ILfsYZuDPnJUTgACTGvYD0c1WBs0mzSkPkewFexgcAd0X1gSflLUWHMHpinbPCZJeEm8RREp7HvsZH5X7HvsQBx-FnC2pZeMQDxAOH5Qm4vse_6sqDvsYZuy6Q0WQWZAtYbqdZgb3y36UjCHenTbER8XfmNdHcA-VmgSIH51PpFkOEWDvjSyQDo0caGCPD5Kvmeyda4u-o8iBP5yMnbntP5yvkwyUj5iai76lPeoW6T-Ur5s_kb-Qv5iOT0gnv5a_kH-ar5krjTOnOpI_noQIG6xGFb9ODg-Bz9-akcg_m0qSEAFsivmcP570KtrA7gWAA1bgH53_kXEHf5S_hfOWk5wvnwAHqQoXlVEDf5t2DABelAxg7QBYAF6WBu7gAF9NFABaF4S_hrAWAFMAUO4PZuqAXTYOgFRGBTyZWpOAVv5kRgyzls1mVp1ZkNvqGZaWnQFFqxZwmzGARZTfm0BdVp_ijrtP-ZZGngBUH5NbgkYWAFpfF7mVlAqPpHmfe2uZzL2aJY_U4vYTGkDSbFHgPhJjpOSCSsUviaaYQg2mm12HrRaDmKwFlU8kDmKAo6ki6Y0L-abuDUujCp-W6PxK8QqW4MWqqIdzwLjFQ5cnEUeJ8IMDnPyMdQgvjgkFZE95x6kUg5iCLYMSQ50CyJ_MaqifyCVuUxO9GqQIGIX3Gj2UKsFgByaTX5HDDN-UT5tH58REe2fERFmZT4zAV4GalgBfkx0e-xhCmxmedozoBzMVE0rAXE-dIJuGhkYKUoBTHrMVvoA7wD4YEFwQBVMUJuYOnSBV0Ahm7Ljijx5ZaLUSn5Ofl5nNQFoX6E-RFp0mmZad9x-ISntp8GuGhf8e_RP9FBuu95YwVIQgoxBOHiMZ95JlBSQP_R19GP0QD5s7bCRAgxn9EvyaIRa4gpBbGZNGobBU2233lEKm0F0Pk5-UukBwWZgBvI0aaN-VXuaDFCMRIxk3H0ke_gaQXvSIX5BFlZBTZuyQXpBIZuQXHpBbPc37Hb5LapAFkjeUkF9wjU-ogFaAW3-bG6oHEKSFOgz_k8BXkFKunVOWrpP-EDePN0YIXoQFM5vL7gBeWpjvkHmZbmPR4_vhVAuIWkBWBgRulE4BHRN6i2QvT06DCkhX_5q3gBkGBgpIWheQyFFUAf-VbQlIWbaSSFSAUq4CEIhIX9YYsUFkjwhbiFpfH4hY9pghkq4fUeWa6YhRM59wjwhViF7P6wKBHRIoUIcfiF5IWH4JSFmdjXegzWw3kCMvCFxeDvoGVZGKAYhVdQcOHcBYQFNCh7FK8QKVbChWaFooX3OuKFR2nzgE4u0oVXUPG5rAA2hYH5tLT92Wgw1oVChYH5GwgsrrsIJoV3ABsIx0DV0OOm4YW7bGS0mnnOhTXQGeadSs9aT-44hXlcqf6B3NQUzY4vKtxgpcAUAfkA23DJAFdWu1bagkVAy2asAKtmY2ApUdrwPGR7FBEAqtyZcVcxAniFntqCpQptZuGQjH4npvKA-z73UPumZybl3o2RKa7PPGqRaIVDgHWF9sE-9DIZrul0ee-ZzuCfmYU8hnmbiv_pqfRxhY4aMgmNxDUUuIGNhR2e_NJ0KtXQbYWLAR2FKUFHJkOANRT9hRAGekDwhbLOJ4Vpqerx54WB-bbY0nEcSFZ5DR6yhRZICoWoQqk8xfk4AM_53-B_BXRI37HhkASeTUHNBdYqtErKXKk8piCIwbuOPqqgRVH-svnq2Uz5lhA4tJO6sOn2gKtpgta4SN0ANRnNgEZ4HPjKhf6E5Rn7ZmBFAglahdqCvRQEnrGINvmAgCQR7vnlAaJ0yOje-b75xhD4UWQk4EUDic7q26lR-Q9pt5Z9APv4Bda28JJ4sGlGeVOFmVmLsWwJrlHv9soAjCkIcS1Cu35YAh1CIsIdokHCPwDFgNUAyMo_gNc8wOLtYpjuKFJBwpPmMMCaReni8ACgHnoFusIo7oRA3ywgsNSpUNILwEAg4pyHJsDIykV_AKWABkUURLrCGgjMQAZFUNJShuZUApIH0HlywkC6wvi2sMoowHmoxFJcMJqAgUUi0gLy-kVhReOyClmVwJFFeMCowDgAitKxRd5wgUWGQDDAOAChRSsi9gGgyIFFGiKwytPyKyLVoW1yX0L4tplFUErZRQTSx-KgyMFwoXCBRcpqKMDFRbVFVPBIInVFdPBOyg7C-LafctlFNbLdYh74F8gZRVlFLUXdYhk4CZ6acN1FmUWT5jTwYZHaKrFFvw7v4g1Rb7mBRaZA2UXZRTgS_ACFOK9BEI4wwrNRxO47klNCiADgwktCiB57RaD5woGbRSAAgHR9AMB0oHQbjt1Fa0XQwDlFtUVlUbDCiw5TRetF80UrImMCEwL6ykHCQUVZRZTSsUU3RSfiLJpl4o9FWUUvRd1ioXofRQDFn3IhRVdFZsb5MhbGHuaBRc1FKUVXRS95mgDDRYVFV0XAyFaAkUVrRfzyMUWrFnVITkW4AMXKPvhSQaCIMkBwitVKSABXwhnwL6zeepkg_ADyAAoA8gDyAEAAA`} mdxType=\"Playground\">\n  <Map viewport={{\n        center: [0.026, 123.61],\n        zoom: 5\n      }} mdxType=\"Map\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}