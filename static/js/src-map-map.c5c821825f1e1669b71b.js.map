{"version":3,"sources":["/Users/joseangel/Workspace/map-components/src/map/glmap/map.css","/Users/joseangel/Workspace/map-components/src/map/lib/Pack.js","/Users/joseangel/Workspace/map-components/src/map/lib/pelagosClient.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/tracks.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/layers.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/shared.js","/Users/joseangel/Workspace/map-components/src/map/config.js","/Users/joseangel/Workspace/map-components/src/map/module/module.actions.js","/Users/joseangel/Workspace/map-components/src/map/module/module.selectors.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.selectors.js","/Users/joseangel/Workspace/map-components/src/map/constants.js","/Users/joseangel/Workspace/map-components/src/map/utils/buildEndpoint.js","/Users/joseangel/Workspace/map-components/src/map/utils/heatmapTileData.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmapTiles.actions.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmap.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/viewport.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/interaction.actions.js","/Users/joseangel/Workspace/map-components/src/map/utils/map-colors.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/HeatmapSubLayer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/HeatmapLayer.js","/Users/joseangel/Workspace/map-components/src/map/tracks/TracksLayer.js","/Users/joseangel/Workspace/map-components/src/map/activity/ActivityLayers.js","/Users/joseangel/Workspace/map-components/src/map/activity/ActivityLayers.container.js","/Users/joseangel/Workspace/map-components/src/map/glmap/Map.js","/Users/joseangel/Workspace/map-components/src/map/glmap/Map.container.js","/Users/joseangel/Workspace/map-components/src/map/glmap/style.reducer.js","/Users/joseangel/Workspace/map-components/src/map/utils/getMainGeomType.js","/Users/joseangel/Workspace/map-components/src/map/glmap/style.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/viewport.reducer.js","/Users/joseangel/Workspace/map-components/src/map/store/index.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.actions.js","/Users/joseangel/Workspace/map-components/src/map/utils/withReducerTypes.js","/Users/joseangel/Workspace/map-components/src/map/module/module.reducer.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.reducer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmap.reducer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmapTiles.reducer.js","/Users/joseangel/Workspace/map-components/src/map/glmap/interaction.reducer.js","/Users/joseangel/Workspace/map-components/src/map/store/reducers.js","/Users/joseangel/Workspace/map-components/src/map/map.js","/Users/joseangel/Workspace/map-components/src/map/basemaps/index.js","/Users/joseangel/Workspace/map-components/src/map/map.mdx"],"names":["module","exports","byname","Uint8","size","Uint8Array","BYTES_PER_ELEMENT","array","getter","setter","Int8","Int8Array","Uint16","Uint16Array","Int16","Int16Array","Uint32","Uint32Array","Int32","Int32Array","Float32","Float32Array","Float64","Float64Array","writeStringToArrayBuffer","str","start","end","buf","bufstart","undefined","length","i","charCodeAt","arrayBufferToString","String","fromCharCode","apply","Pack","typemap","byarray","pack","typespec","value","littleendian","ArrayBuffer","DataView","stringToArrayBuffer","res","Uint8ClampedArray","buffer","name","spec","PelagosClient","this","MAGIC_COOKIE","url","token","Promise","resolve","reject","request","XMLHttpRequest","open","setRequestHeader","responseType","onload","handleData","bind","onerror","send","self","error","readyState","success","status","isFileUri","response","byteLength","dataView","headerLen","cookie","slice","getInt32","offset","headerIsLoaded","header","JSON","parse","rowLen","colsByName","colidx","cols","col","idx","type","multiplier","min","max","orientation","errorLoading","toString","allLoaded","result","rowidx","row","val","colValues","eval","trackTypes","id","PropTypes","string","isRequired","data","object","color","oneOf","layerTemporalExtents","arrayOf","number","fitBoundsOnLoad","bool","heatmapLayerTypes","tilesetId","subtype","visible","hue","opacity","filters","shape","filterValues","endpoints","temporalExtents","temporalExtentsLess","interactive","basemapLayerTypes","staticLayerTypes","selected","selectedFeatures","field","values","highlighted","higlightedFeatures","showLabels","isCustom","gl","popupTypes","content","node","latitude","longitude","viewportTypes","zoom","center","VESSELS_BASE_RADIUS","MAX_SPRITES_PER_LAYER","STATIC_LAYERS_CARTO_ENDPOINT","STATIC_LAYERS_CARTO_TILES_ENDPOINT","TILES_URL_NEEDING_AUTHENTICATION","initModule","props","dispatch","payload","startLoader","state","loaderId","timestamp","Date","getTime","map","onLoadStart","completeLoader","getState","loaders","onLoadComplete","onViewportChange","interactionState","callback","viewport","bounds","canZoomIn","canZoomOut","mouseLatLong","setTemporalExtent","temporalExtent","setHighlightTemporalExtent","highlightTemporalExtent","closePopup","onClosePopup","setCursor","cursor","getTemporalExtent","getHighlightTemporalExtent","getTracksData","tracks","getGeojsonTracks","createSelector","filter","t","getGeojsonTracksReady","mergeStyles","style1","style2","sources","layers","filterGeojsonByTimerange","geojson","features","featuresFiltered","reduce","filteredFeatures","feature","properties","coordinateProperties","times","filtered","geometry","coordinates","filteredCoordinates","coordinate","index","timeCoordinate","push","filteredFeature","getFullTracksStyles","hasTemporalExtent","hasTracks","timerange","acc","track","source","style","paint","getHighlightedTrackStyles","getTracksStyles","trackStyles","highlightedTrackStyles","TRANSITION_TYPE","ZOOM","BRUSH_RENDERING_STYLE","NORMAL","BULLSEYE","BRUSH_ZOOM_RENDERING_STYLE","RADIAL_GRADIENT","CIRCLE","CUSTOM_LAYERS_SUBTYPES","raster","urlTemplate","urlParams","templateSettings","interpolate","template","urlTemplateCompiled","getTemporalTileURLs","params","urls","forEach","extent","startTimeISO","toISOString","endTimeISO","tileCoordinates","x","y","z","buildEndpoint","temporalExtentsIndices","indexOf","getTilePromises","tilesetUrl","promises","urlIndex","obtainTile","getCleanVectorArrays","rawTileData","vectorArray","groupData","cleanVectorArrays","columns","currentArray","totalVectorArraysLength","sumBy","a","filteredColumns","column","console","warn","key","cumulatedOffsets","appendValues","set","getTilePlaybackData","prevPlaybackData","tilePlaybackData","zoomFactorRadius","convert","getZoomFactorRadius","zoomFactorRadiusRenderingMode","getZoomFactorRadiusRenderingMode","zoomFactorOpacity","getZoomFactorOpacity","columnsArr","Object","keys","c","storedColumns","concat","sigma","weight","hidden","pull","uniq","numPoints","newFrames","timeIndexes","point","timeIndex","getOffsetedTimeAtPrecision","datetime","lngLatToWorld","worldX","worldY","radius","sigmaToRadius","weightToOpacity","series","frame","addTracksPointsRenderingData","hasFishing","getTracksPlaybackData","playbackData","vesselSatisfiesFilters","every","selectVesselsAt","tileData","tileQuery","startIndex","endIndex","currentFilters","vessels","toleranceRadiusInWorldUnits","f","wx","wy","pass","some","vesselSatisfiesAllFilters","vessel","getTilecoverLimits","viewportZoom","Math","ceil","tilesAvailable","min_zoom","max_zoom","flushToReleaseTiles","heatmapTiles","currentToLoadTileUids","currentTilesToReleaseUids","currentToReleaseTileUids","releaseTiles","markTileAsLoaded","tileUids","flushTileState","forceLoadingAllVisibleTiles","currentVisibleTiles","tilesToLoad","tilesToReleaseUids","currentLoadedTiles","visibleTile","find","uid","loadedTile","tilesToLoadUids","tile","getTile","updateLoadedTiles","debouncedFlushState","debounce","updateHeatmapTilesFromViewport","mapViewport","width","height","currentTransition","boundsViewport","PerspectiveMercatorViewport","unproject","wn","es","w","s","e","n","boundsPolygonsCoordinates","limits","w1","e2","geom","viewportTilesCoords","tilecover","tiles","viewportTilesIndexes","indexes","visibleTiles","coords","prevZoom","queryHeatmapVessels","temporalExtentIndexes","uids","highlightVesselFromHeatmap","ADD_REFERENCE_TILE","HIGHLIGHT_VESSELS","UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES","UPDATE_HEATMAP_TILE","getTemporalExtentsVisibleIndices","loadTemporalExtent","currentExtentStart","currentExtentEnd","indices","temporalExtentStart","getTiles","layerIds","referenceTiles","newTemporalExtentsToLoad","loaderID","join","heatmapLayers","heatmap","tilesByLayer","allPromises","layerId","heatmapLayerHeader","referenceTile","temporalExtentsIndicesLoaded","queriedTemporalExtentsIndices","visibleTemporalExtentsIndices","temporalExtentsIndicesToLoad","difference","tilePromise","Error","pelagosPromises","allLayerPromises","all","then","loadedLayerId","loadLayerTile","parseLayerTile","visibleHeatmapLayers","visibleHeatmapLayersIds","loadAllTilesForLayer","addHeatmapLayer","layer","removeHeatmapLayer","updateLayerLoadTemporalExtents","indicesToAddByLayer","heatmapLayer","oldVisibleTemporalExtentsIndices","newVisibleTemporalExtentsIndices","indicesAdded","indicesRemoved","layerIdsWithIndicesToAdd","_queryHeatmap","layersVessels","availableTiles","bestTile","isCluster","isMouseCluster","isEmpty","layerVesselsResult","foundVessels","layersVesselsResults","layerVessels","v","uniqBy","clearHighlightedVessels","clickableCluster","highlightedVessels","layerPayload","highlightableCluster","highlightClickedVessel","clearHighlightedClickedVessel","updateHeatmapLayers","newLayers","currentLoadTemporalExtent","prevLayersDict","newLayer","prevLayer","prevLayerId","l","setBounds","setViewport","updateViewport","viewportUpdate","transitionTo","increment","transitionToZoom","transitionEnd","zoomIntoVesselCenter","fitToBounds","vp","fitBounds","minLng","minLat","maxLng","maxLat","padding","exportNativeViewport","nativeViewport","topLeftPx","bottomRightPx","topLeftWorld","pixelsToWorld","pixelUnprojectionMatrix","bottomRightWorld","leftWorldScaled","scale","rightWorldScaled","northWest","southEast","north","south","west","east","getAreaKm2","glFeature","area","toLocaleString","maximumFractionDigits","getFeature","fields","fieldsDefinition","metadata","fieldsKeys","k","fd","fieldKey","def","label","title","isLink","isMain","mainField","getFields","mapInteraction","interactionType","glFeatures","glGetSource","legacyHeatmapFeature","currentStyle","mapStyle","toJS","event","currentLegacyHeatmapData","count","group","clusterPromises","getStaticLayerIdFromGlFeature","cluster","clusterPromise","clusterId","cluster_id","glSource","getClusterExpansionZoom","err1","getClusterLeaves","err2","children","childrenFeatures","child","getCluster","autoClusterZoom","clusterBehavior","clusterZoom","onClick","onHover","COLOR_HUES","orange","peach","yellow","green","brightGreen","lightBlue","blue","purple","pink","getKeyByValue","obj","entries","entry","rgbToHsv","_r","_g","_b","h","r","g","b","d","hsvToRgb","h_","s_","v_","parseFloat","floor","p","q","mod","round","hueToRgbDefaults","hueToRgbString","rgb","rgbToHexString","css","channelName","channelValue","channelStr","hueToRgbHexString","hueToClosestColor","goal","colorHueValues","closestHue","prev","curr","abs","hexToRgb","hex","exec","parseInt","rgbToRgbaString","hueToRgbaString","hexToRgba","hueIncrementToHue","hueIncrement","hueToHueIncrement","wrapHue","hueOrColorToHexColor","HeatmapSubLayer","baseTexture","renderingStyleIndex","useNormalBlendMode","stage","PIXI","particles","ParticleContainer","alpha","position","uvs","blendMode","BLEND_MODES","SCREEN","spritesPool","initialTextureFrame","Rectangle","mainVesselTexture","Texture","_setTextureFrame","clearSpriteProps","spritesProps","spritesPropsCount","destroy","textureFrame","clone","VESSELS_HUES_INCREMENTS_NUM","update","numProps","resizeSpritesPool","sprite","setTransform","numSprites","delta","toRemove","removeChildAt","toAdd","_addSprites","num","Sprite","anchor","addChild","worldToPixelsSimple","m","HeatmapLayer","_build","_destroy","_redraw","nextProps","useRadialGradientStyle","setBrushZoomRenderingStyle","rootStage","customRenderingStyle","subLayers","renderingStyle","rendering","setBrushRenderingStyle","brushRenderingStyle","toUpperCase","_setBrushRenderingStyleIndex","brushZoomRenderingStyle","cappedZoomRenderingStyle","newStyleIndex","subLayer","setRenderingStyleIndex","defaultHue","allHuesToRender","currentlyUsedHues","allHues","_createSublayer","_destroySubLayer","_setSubLayersSpritePropsForTile","numFilters","hueToRender","render","viewportLeft","viewportRight","len","fi","scaledX","scaledY","mtx","pixelProjectionMatrix","pitch","worldToPixels","pushSpriteProps","defaultOpacity","defaultSize","removeChild","React","Component","TracksLayer","Graphics","nativeLines","clear","highlightTemporalExtentIndexes","overInInner","overExtent","drawFishingCircles","fishingCirclesRadius","drawOverTrack","_drawTrack","substr","lineThickness","lineOpacity","prevSeries","prevWorldX","prevWorldY","worldOffset","circlePoints","lineStyle","duplicateWorld","currentSeries","moveTo","atDatelineWorldY","isWestToEast","worldXEnd","atDatelineEndWorldX","atDatelineStartWorldX","x1","y1","lineTo","x2","y2","beginFill","circlesLength","drawCircle","endFill","ActivityLayers","pixiReady","onTouchStart","touches","queryCoords","clientX","clientY","onMouseMove","_onTick","heatmapFadingIn","heatmapStage","_heatmapFadeinStep","setState","_context","_updateViewportSize","pixi","transparent","antialias","renderer","canvas","view","container","appendChild","baseTextureCanvas","blurFactor","tplCanvas","document","createElement","tplCtx","getContext","diameter","yCenter","gradient","createRadialGradient","rgbString","addColorStop","rgbOuter","fillStyle","fillRect","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","getVesselTexture","fromCanvas","ticker","add","viewportWidth","viewportHeight","resize","dim","wrappedLongitude","heatmapFadeinStartTimestamp","now","timeElapsed","highlightedClickedVessel","highlightLayerData","highlightFilters","shouldUseRadialGradientStyle","toggleHeatmapDimming","_startHeatmapFadein","getError","err","log","_getHighlightData","ref","BaseControl","propTypes","func","contextTypes","getHeatmapLayersAsArray","getTracksWithData","getTemporalExtentIndexes","startTimestamp","endTimestamp","getHighlightTemporalExtentIndexes","connect","ownProps","PopupWrapper","closeButton","onClose","offsetTop","tipSize","closeOnClick","defaultProps","Map","onLoad","getBounds","glMap","_ne","_sw","lat","lng","loadObserver","window","ResizeObserver","default","_containerResizeObserver","handleResizeObserver","observe","_mapContainerRef","contentRect","propsViewport","bearing","onMapInteraction","lngLat","getRef","getMap","getSource","getCursor","isDragging","transformRequest","resourceType","match","headers","Authorization","mouseOver","disconnect","maxZoom","minZoom","clickPopup","hoverPopup","hasHeatmapLayers","markers","interactiveLayerIds","className","styles","onMouseLeave","onMouseEnter","onTransitionEnd","clickRadius","marker","googleLogo","getInteractiveLayerIds","staticLayers","glLayer","glLayerId","getMapStyle","mapStyles","trackLayersIndex","lastIndexOf","finalMapStyles","mergeIn","mapStylesLayers","get","trackLayer","insert","fromJS","interaction","internalCursor","moduleCursor","long","attributions","GL_STYLE","sourceKey","attribution","setLayerStyleDefaults","layout","temporalField","visibility","initialState","cartoLayersInstanciated","basemapLayers","TYPES","geoJSON","INIT_MAP_STYLE","SET_MAP_STYLE","MARK_CARTO_LAYERS_AS_INSTANCIATED","SET_STATIC_LAYERS","SET_BASEMAP_LAYERS","setDefaultVectorTiles","currentSource","refLayerUrl","refLayerUrls","initStyle","glyphsPath","setMapStyle","setStyleTemporalExtent","applyToThrottled","glLayers","currentFilter","getIn","isLegacy","setIn","applyTemporalExtentThrottled","throttle","applyTemporalExtent","updateGLLayer","refLayer","currentStyleLayers","newStyle","glLayerIndex","findIndex","toggleLayerVisibility","isBasemap","refLayerOpacity","labelsVisibility","colorPaintProperty","currentGlLayer","glType","defaultStyles","styleType","refLayerStyle","hasFeatures","applyStyleToAllFeatures","allPaintProperties","glPaintProperty","glPaintFinalValue","selectedValue","fallbackValue","paintOrLayout","includes","originalLayerStyle","layerColorRgbString","layerColorRgb","replace","applyLayerExpressions","addCustomGLLayer","tileSize","allGeoJSONTypes","numByGLType","geoJSONType","glTypeMax","getMainGeomType","layerIndex","reverse","splice","instanciateCartoLayers","sourceId","cartoLayersPromises","sourceCartoSQL","mapConfig","options","sql","mapConfigURL","encodeURIComponent","stringify","cartoAnonymousMapUrl","fetch","json","layergroupid","catch","instanciatedCartoLayers","cartoLayer","tilesURL","newSourceId","deleteIn","commitStyleUpdates","bl","currentGLSources","workspaceGLLayers","workspaceGLLayer","finalSource","existingLayerIds","layerToAdd","layerToAddId","sourceLayer","existingLayers","newLayerGroup","newLayerIndex","findLastIndex","updateWorkspaceGLLayers","customLayers","glSources","cartoLayersToInstanciate","newSource","cartoLayerInstanciated","DEFAULT_TRANSITION","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","composeEnhancers","compose","process","MAP_REDUX_REMOTE_DEBUG","REACT_APP_MAP_REDUX_REMOTE_DEBUG","store","createStore","applyMiddleware","thunk","targetMapVessel","fitToBoundsAction","geoBounds","timelineBounds","setTimeout","TRANSITION_DURATION","ADD_TRACK","UPDATE_TRACK","getTrackDataParsed","time","Infinity","getTrackBounds","tbbox","getOldTrackBoundsFormat","addOffset","geo","loadTrack","trackHasData","trackHasUrl","cleanData","rawTrackData","statusText","finally","removeTrack","trackId","updateTracks","newTracks","prevTracks","newTrack","prevTrack","withReducerPropTypes","propTypesSchema","reducer","onAttributionsChange","withReducerTypes","instanceOf","action","loaderIndex","exact","trackData","removedTrackId","mapReducer","combineReducers","ModuleReducer","TracksReducer","assign","newTile","layerTiles","tileIndex","tileUid","releasedTileIndex","releasedRefTileIndex","newHeatmapLayers","newToLoadTilesUids","tileUidsMarkedAsLoaded","newCurrentToLoadTileUids","newMapStyle","currentZoom","mapReducers","replaceReducer","throttleApplyTemporalExtent","updateViewportFromIncomingProps","incomingViewport","MapModule","initialized","errorInfo","prevProps","currentViewport","componentStack","AVAILABLE_BASEMAPS","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","PropsTable","__codesandbox","isMDXComponent"],"mappings":"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","file":"static/js/src-map-map.3ae8bc32.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__1TLha\",\"googleLogo\":\"map_googleLogo__3lQ1y\"};","/* eslint-disable */\nvar byname = {\n  Uint8: {\n    size: Uint8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Int8: {\n    size: Int8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Uint16: {\n    size: Uint16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint16',\n    setter: 'setUint16',\n  },\n  Int16: {\n    size: Int16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt16',\n    setter: 'setInt16',\n  },\n  Uint32: {\n    size: Uint32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint32',\n    setter: 'setUint32',\n  },\n  Int32: {\n    size: Int32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt32',\n    setter: 'setInt32',\n  },\n  Float32: {\n    size: Float32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getFloat32',\n    setter: 'setFloat32',\n  },\n  Float64: {\n    size: Float64Array.BYTES_PER_ELEMENT,\n    array: 'Float64Array',\n    getter: 'getFloat64',\n    setter: 'setFloat64',\n  },\n}\n\nvar writeStringToArrayBuffer = function(str, start, end, buf, bufstart) {\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  if (bufstart == undefined) {\n    bufstart = start\n  }\n  for (var i = start; i < end; i++) {\n    buf[i - start + bufstart] = str.charCodeAt(i) & 0xff\n  }\n}\n\nvar stringToArrayBuffer = function(str, start, end) {\n  var self = this\n\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  var res = new Uint8ClampedArray(end - start)\n  writeStringToArrayBuffer(str, start, end, res, 0)\n  return res.buffer\n}\n\nvar arrayBufferToString = function(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf))\n}\n\nvar pack = function(typespec, value, littleendian) {\n  var array = new ArrayBuffer(typespec.size)\n  new DataView(array)[typespec.setter](0, value, littleendian)\n  return arrayBufferToString(array)\n}\n\nvar Pack = {\n  typemap: {\n    byname: byname,\n    byarray: {},\n  },\n  pack: pack,\n  arrayBufferToString: arrayBufferToString,\n  stringToArrayBuffer: stringToArrayBuffer,\n  writeStringToArrayBuffer: writeStringToArrayBuffer,\n}\nfor (var name in Pack.typemap.byname) {\n  var spec = Pack.typemap.byname[name]\n  spec.name = name\n  Pack.typemap.byarray[spec.array] = spec\n}\n\nexport default Pack\n","/* eslint-disable */\n\nimport Pack from './Pack'\n\nclass PelagosClient {\n  constructor() {\n    this.MAGIC_COOKIE = 'tmtx'\n  }\n\n  obtainTile(url, token) {\n    return new Promise(\n      function(resolve, reject) {\n        this.request = null\n        if (typeof XMLHttpRequest != 'undefined') {\n          this.request = new XMLHttpRequest()\n        } else {\n          throw 'XMLHttpRequest is disabled'\n        }\n        this.resolve = resolve\n        this.reject = reject\n        this.request.open('GET', url, true)\n        if (token) {\n          this.request.setRequestHeader('Authorization', `Bearer ${token}`)\n        }\n        this.request.responseType = 'arraybuffer'\n        this.request.onload = this.handleData.bind(this)\n        this.request.onerror = this.handleData.bind(this)\n        this.request.send(null)\n      }.bind(this)\n    )\n  }\n\n  handleData() {\n    var self = this\n    if (!this.request) {\n      return\n    }\n    if (this.error) {\n      return true\n    }\n\n    if (this.request.readyState == 4) {\n      /* HTTP reports success with a 200 status. The file protocol\n       reports success with zero. HTTP returns zero as a status\n       code for forbidden cross domain requests.\n       https://developer.mozilla.org/En/Using_XMLHttpRequest */\n      var success = this.request.status == 200 || (this.isFileUri && this.request.status == 0)\n      if (!success) {\n        this.resolve(null)\n        return\n      }\n    }\n\n    if (!this.request.response) {\n      return\n    }\n    var length = this.request.response.byteLength\n    var response = this.request.response\n    var dataView = new DataView(response)\n\n    if (length < 4 + 4) {\n      return\n    }\n    if (self.headerLen == null) {\n      var cookie = Pack.arrayBufferToString(response.slice(0, 4))\n      if (cookie != this.MAGIC_COOKIE) {\n        this.reject(\n          'Could not load ' +\n            this.url +\n            ' due to incorrect file format. Cookie: [' +\n            this.cookie +\n            ']'\n        )\n        return\n      }\n\n      self.headerLen = dataView.getInt32(4, true)\n\n      self.offset = 4 + 4\n    }\n    if (length < self.offset + self.headerLen) {\n      return\n    }\n    if (!self.headerIsLoaded) {\n      self.header = JSON.parse(\n        Pack.arrayBufferToString(response.slice(self.offset, self.offset + self.headerLen))\n      )\n      self.rowLen = 0\n      self.header.colsByName = {}\n      for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n        var col = self.header.cols[colidx]\n        col.idx = colidx\n        self.header.colsByName[col.name] = col\n        col.typespec = Pack.typemap.byname[col.type]\n\n        if (col.multiplier != undefined && col.min != undefined) {\n          col.min = col.min * col.multiplier\n        }\n        if (col.offset != undefined && col.min != undefined) {\n          col.min = col.min + col.offset\n        }\n        if (col.multiplier != undefined && col.max != undefined) {\n          col.max = col.max * col.multiplier\n        }\n        if (col.offset != undefined && col.max != undefined) {\n          col.max = col.max + col.offset\n        }\n\n        self.rowLen += col.typespec.size\n      }\n      self.offset += self.headerLen\n\n      // Add the padding to nearest 4-byte-boundary\n      self.offset += (4 - (self.headerLen % 4)) % 4\n\n      self.headerIsLoaded = true\n      if (self.header.orientation != 'rowwise' && self.header.orientation != 'columnwise') {\n        self.errorLoading({\n          orientation: self.header.orientation,\n          toString: function() {\n            return (\n              'Could not load ' +\n              this.url +\n              ' due to unsupported file orientation. Orientation: ' +\n              this.orientation +\n              '. Supported orientations: rowwise, columnwise.'\n            )\n          },\n        })\n        return true\n      }\n\n      // Empty tile, stop parsing.\n      if (!self.rowLen) {\n        self.allLoaded()\n        return true\n      }\n    }\n    if (self.header.orientation == 'rowwise') {\n      var result = {}\n      for (; self.offset + self.rowLen <= length; self.rowidx++) {\n        var row = {}\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n          var val = dataView[col.typespec.getter](self.offset, true)\n          row[col.name] = val\n          self.offset += col.typespec.size\n        }\n        // self.rowLoaded(row);\n\n        result[col.name] = row\n      }\n      if (self.rowidx == self.header.length) {\n        // self.allLoaded();\n        this.resolve(result)\n      } else {\n        // self.batchLoaded();\n      }\n    } else if (self.header.orientation == 'columnwise') {\n      var colValues = null\n      var result = {}\n      if (length >= self.offset + self.header.length * self.rowLen) {\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n\n          colValues = new (eval(col.typespec.array))(\n            response.slice(self.offset, self.offset + col.typespec.size * self.header.length)\n          )\n          self.offset += self.header.length * col.typespec.size\n\n          result[col.name] = colValues\n        }\n\n        // self.allLoaded();\n        this.resolve(result)\n        return true\n      }\n    }\n  }\n}\n\nexport default PelagosClient\n","import PropTypes from 'prop-types'\n\nexport const trackTypes = {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  data: PropTypes.object,\n  color: PropTypes.string,\n  type: PropTypes.oneOf(['geojson', 'pelagos', undefined]),\n  layerTemporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  fitBoundsOnLoad: PropTypes.bool,\n}\n","import PropTypes from 'prop-types'\n\nexport const heatmapLayerTypes = {\n  id: PropTypes.string.isRequired,\n  tilesetId: PropTypes.string,\n  subtype: PropTypes.string,\n  visible: PropTypes.bool,\n  hue: PropTypes.number,\n  opacity: PropTypes.number,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      // hue overrides layer hue if set\n      hue: PropTypes.number,\n      // filterValues is a dictionary in which each key is a filterable field,\n      // and values is an array of all possible values (OR filter)\n      // ie: filterValues: { category: [5, 6] }\n      filterValues: PropTypes.object,\n    })\n  ),\n  header: PropTypes.shape({\n    endpoints: PropTypes.object,\n    colsByName: PropTypes.object,\n    temporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    temporalExtentsLess: PropTypes.bool,\n  }).isRequired,\n  interactive: PropTypes.bool,\n}\n\nexport const basemapLayerTypes = {\n  id: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nexport const staticLayerTypes = {\n  id: PropTypes.string.isRequired,\n  // TODO MAP MODULE Is that needed and if so why\n  visible: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  highlighted: PropTypes.bool,\n  higlightedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  opacity: PropTypes.number,\n  color: PropTypes.string,\n  showLabels: PropTypes.bool,\n  interactive: PropTypes.bool,\n  filters: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  isCustom: PropTypes.bool,\n  subtype: PropTypes.oneOf([undefined, 'geojson', 'raster']),\n  url: PropTypes.string,\n  data: PropTypes.object,\n  gl: PropTypes.object,\n}\n","import PropTypes from 'prop-types'\n\nexport const popupTypes = {\n  content: PropTypes.node,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n}\n\nexport const viewportTypes = {\n  zoom: PropTypes.number,\n  center: PropTypes.arrayOf(PropTypes.number),\n}\n","// Application settings\nexport const TIMELINE_STEP = 24 * 60 * 60 * 1000 // 1 day\nexport const MIN_FRAME_LENGTH_MS = TIMELINE_STEP // 1 day\n\n// vessels rendering\n// from this zoom level and above, render using circle style instead of heatmap\nexport const VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD = 6\n// the base radius, it can only be scaled down by the radius factor calculated on the dataset\nexport const VESSELS_BASE_RADIUS = 8\n// in heatmap style, defines how 'blurry' a point will look. Higher = less blur\nexport const VESSELS_HEATMAP_BLUR_FACTOR = 0.15\n\nexport const ACTIVITY_HIGHLIGHT_HUE = 312\n\nexport const VESSELS_HEATMAP_DIMMING_ALPHA = 0.5\n\nexport const TRACKS_DOTS_STYLE_ZOOM_THRESHOLD = 2\n\nexport const MAX_SPRITES_PER_LAYER = 200000\n\n// interaction\n// radius of vessels lookup in pixels,\n// ie how large the clicked region should be for including vessels\nexport const VESSEL_CLICK_TOLERANCE_PX = 10\n\nexport const CLUSTER_CLICK_ZOOM_INCREMENT = 1\n\nexport const MIN_ZOOM_LEVEL = 1\n// user can zoom up to this z level, but it doesn't guarantee availability of tiles\nexport const MAX_ZOOM_LEVEL = 14\n\n// data\n// Limit tile loading for activity layers up to this z level.\n// Beyond, layer is still displayed but with coarse data from the lower zoom level\nexport const ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING = 10\n\n// Sets what should be the discrete zoom level to load tiles, from a non-discrete\n// viewport zoom values. For instance, a values of 0.5 will load z 3 with a viewport\n// z of 2 (ceiling of 2 + 0.5)\n// this has a direct impact on the number of points displayed on the map, thus on the\n// performance of the app.\nexport const TILES_LOAD_ZOOM_OFFSET = 0.5\n\nexport const STATIC_LAYERS_CARTO_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map?config=$MAPCONFIG'\nexport const STATIC_LAYERS_CARTO_TILES_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map/$LAYERGROUPID/{z}/{x}/{y}.mvt'\n\nexport const TRACKS_LAYER_IN_FRONT_OF_GROUP = 'temporal'\n\nexport const TILES_URL_NEEDING_AUTHENTICATION = 'dot-world-fishing'\n","export const INIT_MODULE = 'INIT_MODULE'\nexport const SET_TEMPORAL_EXTENT = 'SET_TEMPORAL_EXTENT'\nexport const SET_HIGHLIGHT_TEMPORAL_EXTENT = 'SET_HIGHLIGHT_TEMPORAL_EXTENT'\nexport const START_LOADER = 'START_LOADER'\nexport const COMPLETE_LOADER = 'COMPLETE_LOADER'\nexport const SET_MODULE_CURSOR = 'SET_MODULE_CURSOR'\n\nexport const initModule = (props) => (dispatch) => {\n  dispatch({\n    type: INIT_MODULE,\n    payload: props,\n  })\n}\n\nexport const startLoader = (dispatch, state, loaderId) => {\n  const timestamp = new Date().getTime()\n  const generatedLoaderId = loaderId !== undefined ? `${loaderId}_${timestamp}` : timestamp\n  dispatch({\n    type: START_LOADER,\n    payload: generatedLoaderId,\n  })\n  if (state.map.module.onLoadStart !== undefined) {\n    state.map.module.onLoadStart()\n  }\n  return loaderId\n}\n\nexport const completeLoader = (loaderId) => (dispatch, getState) => {\n  dispatch({\n    type: COMPLETE_LOADER,\n    payload: loaderId,\n  })\n  const state = getState()\n  const loaders = state.map.module.loaders\n  if (!loaders.length && state.map.module.onLoadComplete !== undefined) {\n    state.map.module.onLoadComplete()\n  }\n}\n\nexport const onViewportChange = (interactionState) => (dispatch, getState) => {\n  const state = getState()\n  const callback = state.map.module.onViewportChange\n\n  if (callback === undefined) {\n    return\n  }\n  const viewport = state.map.viewport\n\n  callback({\n    interactionState,\n    zoom: viewport.viewport.zoom,\n    center: [viewport.viewport.latitude, viewport.viewport.longitude],\n    bounds: viewport.bounds,\n    canZoomIn: viewport.canZoomIn,\n    canZoomOut: viewport.canZoomOut,\n    mouseLatLong: viewport.mouseLatLong,\n  })\n}\n\nexport const setTemporalExtent = (temporalExtent) => ({\n  type: SET_TEMPORAL_EXTENT,\n  payload: temporalExtent,\n})\n\nexport const setHighlightTemporalExtent = (highlightTemporalExtent) => ({\n  type: SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  payload: highlightTemporalExtent,\n})\n\nexport const closePopup = () => (dispatch, getState) => {\n  const state = getState()\n  if (state.map.module.onClosePopup !== undefined) {\n    state.map.module.onClosePopup()\n  }\n}\n\nexport const setCursor = (cursor) => ({\n  type: SET_MODULE_CURSOR,\n  payload: cursor,\n})\n","export const getTemporalExtent = (state) => state.map.module.temporalExtent\n\nexport const getHighlightTemporalExtent = (state) => state.map.module.highlightTemporalExtent\n","import { createSelector } from 'reselect'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\n\nexport const getTracksData = (state) => state.map.tracks.data\nexport const getGeojsonTracks = createSelector(\n  getTracksData,\n  (tracks) => tracks.filter((t) => t.type === 'geojson')\n)\nexport const getGeojsonTracksReady = createSelector(\n  getGeojsonTracks,\n  (tracks) => tracks.filter((t) => t.data !== undefined)\n)\n\nconst mergeStyles = (style1, style2) => ({\n  sources: { ...style1.sources, ...style2.sources },\n  layers: [...style1.layers, ...style2.layers],\n})\n\nconst filterGeojsonByTimerange = (geojson, { start, end }) => {\n  if (!geojson || !geojson.features) return null\n  const featuresFiltered = geojson.features.reduce((filteredFeatures, feature) => {\n    const hasTimes =\n      feature.properties &&\n      feature.properties.coordinateProperties &&\n      feature.properties.coordinateProperties.times &&\n      feature.properties.coordinateProperties.times.length > 0\n    if (hasTimes) {\n      const filtered = feature.geometry.coordinates.reduce(\n        (filteredCoordinates, coordinate, index) => {\n          const timeCoordinate = feature.properties.coordinateProperties.times[index]\n          const isInTimeline = timeCoordinate >= start && timeCoordinate <= end\n          if (isInTimeline) {\n            filteredCoordinates.coordinates.push(coordinate)\n            filteredCoordinates.times.push(timeCoordinate)\n          }\n          return filteredCoordinates\n        },\n        { coordinates: [], times: [] }\n      )\n      if (!filtered.coordinates.length) return filteredFeatures\n\n      const filteredFeature = {\n        ...feature,\n        geometry: {\n          ...feature.geometry,\n          coordinates: filtered.coordinates,\n        },\n        properties: {\n          ...feature.properties,\n          coordinateProperties: {\n            times: filtered.times,\n          },\n        },\n      }\n      filteredFeatures.push(filteredFeature)\n    }\n    return filteredFeatures\n  }, [])\n  const geojsonFiltered = {\n    ...geojson,\n    features: featuresFiltered,\n  }\n  return geojsonFiltered\n}\n\nconst getFullTracksStyles = createSelector(\n  [getTemporalExtent, getGeojsonTracksReady],\n  (temporalExtent, tracks) => {\n    const hasTemporalExtent = temporalExtent && temporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: temporalExtent[0].getTime(),\n      end: temporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}Track`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}Lines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': track.color,\n              },\n            },\n            {\n              id: `${track.id}Points`,\n              source,\n              type: 'circle',\n              filter: ['match', ['geometry-type'], ['', 'Point'], true, false],\n              paint: {\n                'circle-radius': 4,\n                'circle-color': track.color,\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nconst getHighlightedTrackStyles = createSelector(\n  [getHighlightTemporalExtent, getGeojsonTracksReady],\n  (highlightTemporalExtent, tracks) => {\n    const hasTemporalExtent = highlightTemporalExtent && highlightTemporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: highlightTemporalExtent[0].getTime(),\n      end: highlightTemporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}HighlightedTrack`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}HighlightedLines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': '#fff',\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nexport const getTracksStyles = createSelector(\n  [getFullTracksStyles, getHighlightedTrackStyles],\n  (trackStyles, highlightedTrackStyles) => {\n    if (!highlightedTrackStyles) return trackStyles\n    return mergeStyles(trackStyles, highlightedTrackStyles)\n  }\n)\n","export const GL_TRANSPARENT = 'rgba(0,0,0,0)'\n\nexport const TRANSITION_TYPE = {\n  ZOOM: 'ZOOM',\n}\n\nexport const ENCOUNTERS = 'Encounters'\n\nexport const BRUSH_RENDERING_STYLE = {\n  NORMAL: 0,\n  BULLSEYE: 2,\n}\n\nexport const BRUSH_ZOOM_RENDERING_STYLE = {\n  RADIAL_GRADIENT: 0,\n  CIRCLE: 1,\n}\n\nexport const POLYGON_LAYERS_AREA = 'POLYGON_LAYERS_AREA'\n\nexport const CUSTOM_LAYERS_SUBTYPES = {\n  geojson: 'geojson',\n  raster: 'raster',\n}\n","import template from 'lodash/template'\nimport templateSettings from 'lodash/templateSettings'\n\nexport default (urlTemplate, urlParams) => {\n  templateSettings.interpolate = /{{([\\s\\S]+?)}}/g\n  const urlTemplateCompiled = template(urlTemplate)\n  return urlTemplateCompiled(urlParams)\n}\n","import pull from 'lodash/pull'\nimport uniq from 'lodash/uniq'\nimport sumBy from 'lodash/sumBy'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport convert from '@globalfishingwatch/map-convert'\nimport buildEndpoint from './buildEndpoint'\nimport PelagosClient from '../lib/pelagosClient'\n\n/**\n * Generates the URLs to load vessel track data for a tile\n *\n * @param {string} tilesetUrl       the tileset base URL\n * @param {array} temporalExtents   all tileset temporal extents\n * @param {object} params           - tileCoordinates: this tiles tile coordinates (zoom, x, y). Will default to 0,0,0\n *                                  - temporalExtentsIndices: restrict to these temporalExtents indices\n * @returns {Array}                 an array of URLs for this tile\n */\nconst getTemporalTileURLs = (urlTemplate, temporalExtents, params = {}) => {\n  const urls = []\n\n  ;(temporalExtents || [null]).forEach((extent, index) => {\n    const urlParams = {}\n    if (extent !== null && params.temporalExtentsLess !== true) {\n      urlParams.startTimeISO = new Date(extent[0]).toISOString()\n      urlParams.endTimeISO = new Date(extent[1]).toISOString()\n    }\n    if (params.tileCoordinates) {\n      urlParams.x = params.tileCoordinates.x\n      urlParams.y = params.tileCoordinates.y\n      urlParams.z = params.tileCoordinates.zoom\n    }\n\n    const url = buildEndpoint(urlTemplate, urlParams)\n\n    if (\n      params.temporalExtentsLess === true ||\n      !params.temporalExtentsIndices ||\n      params.temporalExtentsIndices.indexOf(index) > -1\n    ) {\n      urls.push(url)\n    }\n  })\n  return urls\n}\n\n/**\n * See getTemporalTileURLs.\n */\nexport const getTilePromises = (tilesetUrl, token, temporalExtents, params = {}) => {\n  const promises = []\n  const urls = getTemporalTileURLs(tilesetUrl, temporalExtents, params)\n  for (let urlIndex = 0, length = urls.length; urlIndex < length; urlIndex++) {\n    promises.push(new PelagosClient().obtainTile(urls[urlIndex], token))\n  }\n\n  return promises\n}\n\nexport const getCleanVectorArrays = (rawTileData) =>\n  rawTileData.filter((vectorArray) => vectorArray !== null)\n\n/**\n * As data will come in multiple arrays (1 per API query/year basically), they need to be merged here\n *\n * @param cleanVectorArrays an array of objects containing a Float32Array for each vessel param (lat, lon, weight...)\n * @param columns the keys to pick on the vectorArrays (lat, lon, weight, etc)\n * @returns an object containing a Float32Array for each API_RETURNED_KEY (lat, lon, weight, etc)\n */\nexport const groupData = (cleanVectorArrays, columns) => {\n  const data = {}\n\n  const totalVectorArraysLength = sumBy(cleanVectorArrays, (a) => a.longitude.length)\n\n  const filteredColumns = columns.filter((column) => {\n    if (cleanVectorArrays[0] && cleanVectorArrays[0][column] === undefined) {\n      console.warn(`column ${column} is present in layerHeader.colsByName but not in tile data`)\n      return false\n    }\n    return true\n  })\n\n  filteredColumns.forEach((key) => {\n    data[key] = new Float32Array(totalVectorArraysLength)\n  })\n\n  let currentArray\n  let cumulatedOffsets = 0\n\n  const appendValues = (key) => {\n    data[key].set(currentArray[key], cumulatedOffsets)\n  }\n\n  for (let index = 0, length = cleanVectorArrays.length; index < length; index++) {\n    currentArray = cleanVectorArrays[index]\n    filteredColumns.forEach(appendValues)\n    cumulatedOffsets += currentArray.longitude.length\n  }\n  return data\n}\n\n/**\n * Converts Vector Array data to Playback format and stores it locally.\n * The data structure is an array indexed by a time unit, ie a set of points every day\n * This preprocessing step allows playback to play smoothly as the necessary conversions and data structure set up\n * is done once (after tile has been loaded)\n *\n * @param data the source data before indexing by day, an object containing\n *  - a vector (Float32Array) for each header's column in the case of Pelagos tiles\n *  - an array of points int the case of PBF tiles\n * @param colsByName the columns present on the dataset, determined by tileset headers\n * @param tileCoordinates x, y, z\n * @param prevPlaybackData an optional previously loaded tilePlaybackData array (when adding time range)\n */\nexport const getTilePlaybackData = (data, colsByName, tileCoordinates, prevPlaybackData) => {\n  const tilePlaybackData = prevPlaybackData === undefined ? [] : prevPlaybackData\n\n  const zoom = tileCoordinates.zoom\n  const zoomFactorRadius = convert.getZoomFactorRadius(zoom)\n  const zoomFactorRadiusRenderingMode = convert.getZoomFactorRadiusRenderingMode(zoom)\n  const zoomFactorOpacity = convert.getZoomFactorOpacity(zoom)\n\n  // store all available columns as object keys\n  const columns = {}\n  const columnsArr = Object.keys(colsByName)\n  columnsArr.forEach((c) => {\n    columns[c] = true\n  })\n\n  // columns specified by layer header columns\n  let storedColumns = [].concat(columnsArr)\n  if (columns.sigma === true) storedColumns.push('radius')\n  if (columns.weight === true) storedColumns.push('opacity')\n  if (columns.longitude === true) {\n    storedColumns.push('worldX')\n    storedColumns.push('worldY')\n  }\n  if (columns.id === true) {\n    storedColumns.push('series')\n  }\n\n  // omit values that will be transformed before being stored to playback data (ie lat -> worldY)\n  // only if hidden: true flag is set on header\n  ;['latitude', 'longitude', 'datetime'].forEach((col) => {\n    if (colsByName[col] === undefined || colsByName[col].hidden === true) {\n      pull(storedColumns, col)\n    }\n  })\n  // always pull sigma and weight\n  pull(storedColumns, 'sigma', 'weight')\n  storedColumns = uniq(storedColumns)\n\n  const numPoints = data.latitude.length\n\n  const newFrames = {}\n  const timeIndexes = []\n  for (let index = 0, length = numPoints; index < length; index++) {\n    let point = {}\n    columnsArr.forEach((c) => {\n      point[c] = data[c][index]\n    })\n\n    const timeIndex = columns.timeIndex\n      ? point.timeIndex\n      : convert.getOffsetedTimeAtPrecision(point.datetime)\n\n    // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n    const [worldX, worldY] = lngLatToWorld([point.longitude, point.latitude], 1)\n    point.worldX = worldX\n    point.worldY = worldY\n\n    if (columns.sigma) {\n      point.radius = convert.sigmaToRadius(\n        point.sigma,\n        zoomFactorRadiusRenderingMode,\n        zoomFactorRadius\n      )\n    }\n    if (columns.weight) {\n      point.opacity = convert.weightToOpacity(point.weight, zoomFactorOpacity)\n    }\n    if (columns.id) {\n      point.series = point.id\n    }\n\n    if (!newFrames[timeIndex]) {\n      timeIndexes.push(timeIndex)\n      const frame = {}\n      storedColumns.forEach((column) => {\n        frame[column] = [point[column]]\n      })\n      newFrames[timeIndex] = frame\n      continue\n    }\n    const frame = newFrames[timeIndex]\n    storedColumns.forEach((column) => {\n      frame[column].push(point[column])\n    })\n  }\n\n  // finally, copy new frames to the overall tilePlaybackData object\n  // frames previously existing here will be overwritten\n  timeIndexes.forEach((timeIndex) => {\n    tilePlaybackData[timeIndex] = newFrames[timeIndex]\n  })\n  return tilePlaybackData\n}\n\nexport const addTracksPointsRenderingData = (data) => {\n  data.hasFishing = []\n  data.worldX = []\n  data.worldY = []\n\n  for (let index = 0, length = data.weight.length; index < length; index++) {\n    const [worldX, worldY] = lngLatToWorld([data.longitude[index], data.latitude[index]], 1)\n    data.worldX[index] = worldX\n    data.worldY[index] = worldY\n    data.hasFishing[index] = data.weight[index] > 0\n  }\n  return data\n}\n\n/**\n * A simplified version of getTilePlaybackData for tracks\n * Converts Vector Array data to Playback format (organized by days) and stores it locally\n * @param vectorArray the source data before indexing by day\n */\nexport const getTracksPlaybackData = (vectorArray) => {\n  const playbackData = []\n\n  for (let index = 0, length = vectorArray.series.length; index < length; index++) {\n    const datetime = vectorArray.datetime[index]\n    const timeIndex = convert.getOffsetedTimeAtPrecision(datetime)\n\n    if (!playbackData[timeIndex]) {\n      const frame = {\n        worldX: [vectorArray.worldX[index]],\n        worldY: [vectorArray.worldY[index]],\n        series: [vectorArray.series[index]],\n        hasFishing: [vectorArray.hasFishing[index]],\n      }\n      playbackData[timeIndex] = frame\n      continue\n    }\n    const frame = playbackData[timeIndex]\n    frame.worldX.push(vectorArray.worldX[index])\n    frame.worldY.push(vectorArray.worldY[index])\n    frame.series.push(vectorArray.series[index])\n    frame.hasFishing.push(vectorArray.hasFishing[index])\n  }\n  return playbackData\n}\n\nexport const vesselSatisfiesFilters = (frame, index, filterValues) => {\n  const satisfiesFilters = Object.keys(filterValues).every((field) => {\n    if (frame[field] === undefined) {\n      // this field is not available on this layer. This can happen in an edge case described\n      // here: https://github.com/GlobalFishingWatch/map-client/issues/661#issuecomment-334496469\n      return false\n    }\n    return filterValues[field].indexOf(frame[field][index]) > -1\n  })\n  return satisfiesFilters\n}\n\nconst vesselSatisfiesAllFilters = (frame, index, filters) => {\n  const satisfiesAllFilters = filters\n    .filter((f) => f.pass !== true)\n    .some((filter) => vesselSatisfiesFilters(frame, index, filter.filterValues))\n  return satisfiesAllFilters\n}\n\nexport const selectVesselsAt = (tileData, tileQuery, startIndex, endIndex, currentFilters) => {\n  const vessels = []\n\n  const { worldX, worldY, toleranceRadiusInWorldUnits } = tileQuery\n\n  for (let f = startIndex; f < endIndex; f++) {\n    const frame = tileData[f]\n    if (frame === undefined) continue\n    for (let i = 0; i < frame.worldX.length; i++) {\n      const wx = frame.worldX[i]\n      const wy = frame.worldY[i]\n\n      if (\n        (!currentFilters.length || vesselSatisfiesAllFilters(frame, i, currentFilters)) &&\n        wx >= worldX - toleranceRadiusInWorldUnits &&\n        wx <= worldX + toleranceRadiusInWorldUnits &&\n        wy >= worldY - toleranceRadiusInWorldUnits &&\n        wy <= worldY + toleranceRadiusInWorldUnits\n      ) {\n        const vessel = {}\n\n        Object.keys(frame).forEach((key) => {\n          vessel[key] = frame[key][i]\n        })\n        vessel.timeIndex = f\n        vessels.push(vessel)\n      }\n    }\n  }\n  return vessels\n}\n\n/*\nexport const getHistogram = (tiles, propName = 'weight') => {\n  let data = tiles\n    .filter(tile => tile.ready)\n    .map(tile => tile.data\n      .map(frame => frame[propName]));\n  data = flattenDeep(data);\n  if (data.length) {\n    const bins = d3.histogram().thresholds(d3.thresholdScott)(data);\n    const x = d3.scaleLinear().domain([0, d3.max(bins, d => d.length)]).range([0, 50]);\n    console.table(bins.filter(bin => bin.length).map((bin) => {\n      const binMin = d3.min(bin).toLocaleString({ maximumFractionDigits: 2 });\n      const binMax = d3.max(bin).toLocaleString({ maximumFractionDigits: 2 });\n      return {\n        range: [binMin, binMax].join('﹣'),\n        bars: Array(Math.round(x(bin.length))).join('█'),\n        num: bin.length\n      };\n    }));\n  }\n};\n*/\n","import tilecover from '@mapbox/tile-cover/index'\nimport debounce from 'lodash/debounce'\nimport { PerspectiveMercatorViewport } from 'viewport-mercator-project'\nimport { ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING, TILES_LOAD_ZOOM_OFFSET } from '../config'\nimport {\n  getTile,\n  releaseTiles,\n  highlightVesselFromHeatmap,\n  updateLoadedTiles,\n} from './heatmap.actions'\n\nexport const SET_CURRENTLY_VISIBLE_TILES = 'SET_CURRENTLY_VISIBLE_TILES'\nexport const SET_CURRENTLY_LOADED_TILES = 'SET_CURRENTLY_LOADED_TILES'\nexport const SET_CURRENTLY_SWAPPED_TILE_UIDS = 'SET_CURRENTLY_SWAPPED_TILE_UIDS'\nexport const MARK_TILES_UIDS_AS_LOADED = 'MARK_TILES_UIDS_AS_LOADED'\nexport const RELEASE_MARKED_TILES_UIDS = 'RELEASE_MARKED_TILES_UIDS'\n\n// restrict tilecover to a single zoom level\n// could be customized to load less or more detailed tiles\nconst getTilecoverLimits = (viewportZoom) => {\n  let zoom = Math.ceil(viewportZoom + TILES_LOAD_ZOOM_OFFSET)\n  let tilesAvailable = true\n  if (zoom > ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING) {\n    zoom = ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING\n    tilesAvailable = false\n  }\n  return {\n    min_zoom: zoom,\n    max_zoom: zoom,\n    tilesAvailable,\n  }\n}\n\nconst flushToReleaseTiles = () => (dispatch, getState) => {\n  const state = getState()\n  const currentToLoadTileUids = state.map.heatmapTiles.currentToLoadTileUids\n  // console.log('Tiles left to load: ', currentToLoadTileUids);\n\n  // Tiles are released only when all to-load tiles have finished loading\n  // this is to ensure smooth visual transitions between zoom levels\n  if (!currentToLoadTileUids.length) {\n    const currentTilesToReleaseUids = state.map.heatmapTiles.currentToReleaseTileUids\n    // console.log('no more tiles to load, releasing ', currentTilesToReleaseUids);\n    dispatch(releaseTiles(currentTilesToReleaseUids))\n    dispatch({\n      type: RELEASE_MARKED_TILES_UIDS,\n    })\n  }\n}\n\nexport const markTileAsLoaded = (tileUids) => (dispatch) => {\n  dispatch({\n    type: MARK_TILES_UIDS_AS_LOADED,\n    payload: tileUids,\n  })\n  // console.log(tileUids, 'have finished loading');\n  dispatch(flushToReleaseTiles())\n}\n\nconst flushTileState = (forceLoadingAllVisibleTiles = false) => (dispatch, getState) => {\n  const state = getState()\n  const currentVisibleTiles = state.map.heatmapTiles.currentVisibleTiles\n  let tilesToLoad = []\n  const tilesToReleaseUids = []\n\n  if (forceLoadingAllVisibleTiles === true) {\n    tilesToLoad = currentVisibleTiles\n  } else {\n    const currentLoadedTiles = state.map.heatmapTiles.currentLoadedTiles\n\n    currentVisibleTiles.forEach((visibleTile) => {\n      if (currentLoadedTiles.find((t) => t.uid === visibleTile.uid) === undefined) {\n        tilesToLoad.push(visibleTile)\n      }\n    })\n\n    currentLoadedTiles.forEach((loadedTile) => {\n      if (currentVisibleTiles.find((t) => t.uid === loadedTile.uid) === undefined) {\n        tilesToReleaseUids.push(loadedTile.uid)\n      }\n    })\n  }\n\n  const tilesToLoadUids = tilesToLoad.map((t) => t.uid)\n  // console.log('force loading:', forceLoadingAllVisibleTiles)\n  // console.log('visible', currentVisibleTiles.map(t => t.uid))\n  // console.log('load', tilesToLoadUids)\n  // console.log('release', tilesToReleaseUids)\n  // console.log('----')\n\n  tilesToLoad.forEach((tile) => {\n    dispatch(getTile(tile))\n  })\n  dispatch({\n    type: SET_CURRENTLY_LOADED_TILES,\n    payload: currentVisibleTiles,\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_SWAPPED_TILE_UIDS,\n    payload: {\n      tilesToLoadUids,\n      tilesToReleaseUids,\n    },\n  })\n\n  dispatch(updateLoadedTiles())\n  dispatch(flushToReleaseTiles())\n}\n\nconst _debouncedFlushState = (dispatch) => {\n  dispatch(flushTileState())\n}\nconst debouncedFlushState = debounce(_debouncedFlushState, 500)\n\nexport const updateHeatmapTilesFromViewport = (forceLoadingAllVisibleTiles = false) => (\n  dispatch,\n  getState\n) => {\n  // if in transition, skip loading/releasing\n  // else\n  //   collect all tiles in viewport\n  //   save them to reducer: currentVisibleTiles\n  // if not zooming: flush immediately\n  //   if forceLoadingAllVisiblelTiles\n  //     get tiles from currentVisibleTiles\n  //   else\n  //     get tiles from currentVisibleTiles\n  //     make delta with currentLoadedTiles\n  //     get tiles from delta+\n  //     release tiles from delta-\n  //   save to reducer: currentVisibleTiles -> currentLoadedTiles\n  // if zooming: debounced flush to avoid \"tile spam\"\n  const mapViewport = getState().map.viewport\n  const viewport = mapViewport.viewport\n\n  // do not allow any tile update during transitions (currently only zoom)\n  // wait for the end of the transition to look at viewport and load matching tiles\n  if (!viewport.width || !viewport.height || mapViewport.currentTransition !== null) {\n    return\n  }\n\n  // instanciate a viewport instance to get lat/lon from screen top left/ bottom right bounds\n  const boundsViewport = new PerspectiveMercatorViewport(viewport)\n  const bounds = [\n    boundsViewport.unproject([0, 0]),\n    boundsViewport.unproject([viewport.width, viewport.height]),\n  ]\n\n  const [wn, es] = bounds\n  const [w, s, e, n] = [wn[0], es[1], es[0], wn[1]]\n  const boundsPolygonsCoordinates = []\n\n  const limits = getTilecoverLimits(viewport.zoom)\n  if (limits.tilesAvailable === false && forceLoadingAllVisibleTiles !== true) {\n    return\n  }\n\n  if (e > 180 || w < -180) {\n    // deal with the antimeridian situation by splitting the bounds polygon into two polygons\n    const w1 = e > 180 ? w : w + 360\n    const e1 = 180 - 0.001\n    const w2 = -180\n    const e2 = e > 180 ? e - 360 : e\n    boundsPolygonsCoordinates.push([[[w1, n], [e1, n], [e1, s], [w1, s], [w1, n]]])\n    boundsPolygonsCoordinates.push([[[w2, n], [e2, n], [e2, s], [w2, s], [w2, n]]])\n  } else {\n    boundsPolygonsCoordinates.push([[[w, n], [e, n], [e, s], [w, s], [w, n]]])\n  }\n\n  const geom = {\n    type: 'MultiPolygon',\n    coordinates: boundsPolygonsCoordinates,\n  }\n\n  // using tilecover, get xyz tile coords as well as quadkey indexes (named uid through the app)\n  const viewportTilesCoords = tilecover.tiles(geom, limits)\n  const viewportTilesIndexes = tilecover.indexes(geom, limits)\n  const visibleTiles = []\n\n  viewportTilesCoords.forEach((coords, i) => {\n    const uid = viewportTilesIndexes[i]\n    const zoom = coords[2]\n    if (zoom >= 2) {\n      visibleTiles.push({\n        tileCoordinates: {\n          x: coords[0],\n          y: coords[1],\n          zoom: coords[2],\n        },\n        uid,\n      })\n    }\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_VISIBLE_TILES,\n    payload: visibleTiles,\n  })\n\n  const isMouseWheelZooming = mapViewport.prevZoom !== viewport.zoom\n\n  if (isMouseWheelZooming === false) {\n    dispatch(flushTileState(forceLoadingAllVisibleTiles))\n  } else {\n    debouncedFlushState(dispatch)\n  }\n}\n\nexport const queryHeatmapVessels = (coords, temporalExtentIndexes) => (dispatch, getState) => {\n  // use tilecover to get what tile quadkey/uid \"belongs\" to the point\n  const geom = {\n    type: 'Point',\n    coordinates: [coords.longitude, coords.latitude],\n  }\n  const zoom = getState().map.viewport.viewport.zoom\n\n  // get quadkey for tile at current zoom level, but also neighbouring zoom levels,\n  // in case current zoom level tiles has not been loaded yet\n  const uids = [zoom, zoom - 1, zoom + 1]\n    .map((z) => getTilecoverLimits(z))\n    .map((limits) => tilecover.indexes(geom, limits))\n    .map((indexes) => indexes[0])\n\n  const query = {\n    ...coords,\n    uids,\n  }\n\n  // console.log(query);\n  dispatch(highlightVesselFromHeatmap(query, temporalExtentIndexes))\n}\n","import difference from 'lodash/difference'\nimport uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  getTilePlaybackData,\n  selectVesselsAt,\n} from '../utils/heatmapTileData'\nimport { markTileAsLoaded } from './heatmapTiles.actions'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_HEATMAP_LAYER = 'ADD_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_STYLE = 'UPDATE_HEATMAP_LAYER_STYLE'\nexport const ADD_REFERENCE_TILE = 'ADD_REFERENCE_TILE'\nexport const HIGHLIGHT_VESSELS = 'HIGHLIGHT_VESSELS'\nexport const INIT_HEATMAP_LAYERS = 'INIT_HEATMAP_LAYERS'\nexport const REMOVE_HEATMAP_LAYER = 'REMOVE_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES =\n  'UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES'\nexport const UPDATE_HEATMAP_TILE = 'UPDATE_HEATMAP_TILE'\nexport const RELEASE_HEATMAP_TILES = 'RELEASE_HEATMAP_TILES'\nexport const UPDATE_LOADED_TILES = 'UPDATE_LOADED_TILES'\nexport const HIGHLIGHT_CLICKED_VESSEL = 'HIGHLIGHT_CLICKED_VESSEL'\nexport const CLEAR_HIGHLIGHT_CLICKED_VESSEL = 'CLEAR_HIGHLIGHT_CLICKED_VESSEL'\n\n/**\n * getTemporalExtentsVisibleIndices - Compares timebar outer extent with temporal extents present on the layer header\n * @param  {array} loadTemporalExtent Current timebar outer extent\n * @param  {array} layerTemporalExtents Temporal extent present on the layer's header (an array of extent arrays)\n * @return {array}                    Indices of the layer's temporal extents that should be visible\n */\nfunction getTemporalExtentsVisibleIndices(loadTemporalExtent, layerTemporalExtents) {\n  const currentExtentStart = loadTemporalExtent[0].getTime()\n  const currentExtentEnd = loadTemporalExtent[1].getTime()\n  const indices = []\n  layerTemporalExtents.forEach((temporalExtent, index) => {\n    const temporalExtentStart = temporalExtent[0]\n    const temporalExtentEnd = temporalExtent[1]\n    if (temporalExtentEnd >= currentExtentStart && temporalExtentStart <= currentExtentEnd) {\n      indices.push(index)\n    }\n  })\n  return indices\n}\n\n/**\n * loadLayerTile - loads an heatmap tile.\n *\n * @param  {string} layerId              layer id\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {string} token                the user's token\n * @param  {array} temporalExtentsIndices which of the temporal extents from  temporalExtents should be loaded\n * @param  {string} urls                 tile endpoints provided by header\n * @param  {array} temporalExtents       all of the layer's header temporal extents\n * @param  {bool} temporalExtentsLess    true = don't try to load different tiles based on current time extent\n * @return {Promise}                     a Promise that will be resolved when tile is loaded\n */\nfunction loadLayerTile(\n  layerId,\n  tileCoordinates,\n  token,\n  temporalExtentsIndices,\n  { url, temporalExtents, temporalExtentsLess }\n) {\n  // console.log('loadLayerTile', layerId, tileCoordinates, temporalExtentsIndices)\n  if (url === undefined) {\n    throw new Error('URL/endpoints object is not available on this tilesets header')\n  }\n  const pelagosPromises = getTilePromises(url, token, temporalExtents, {\n    tileCoordinates,\n    temporalExtentsIndices,\n    temporalExtentsLess,\n  })\n  const allLayerPromises = Promise.all(pelagosPromises)\n\n  const layerTilePromise = new Promise((resolve) => {\n    allLayerPromises.then((rawTileData) => {\n      resolve({\n        loadedLayerId: layerId,\n        rawTileData,\n      })\n    })\n  })\n\n  return layerTilePromise\n}\n\n/**\n * parseLayerTile - parses an heatmap tile to a playback-ready format.\n *\n * @param  {Object} rawTileData          the raw tile data, loaded either from the pelagos client or as a MVT/PBF vector tile\n * @param  {array} colsByName            names of the columns present in the raw tiles that need to be included in the final playback data\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {array} prevPlaybackData      (optional) in case some time extent was already loaded for this tile, append to this data\n * @return {Object}                      playback-ready merged data\n */\nfunction parseLayerTile(rawTileData, colsByName, tileCoordinates, prevPlaybackData) {\n  let data\n\n  const cleanVectorArrays = getCleanVectorArrays(rawTileData)\n  data = groupData(cleanVectorArrays, Object.keys(colsByName))\n  if (Object.keys(data).length === 0) {\n    return []\n  }\n\n  const playbackData = getTilePlaybackData(data, colsByName, tileCoordinates, prevPlaybackData)\n  return playbackData\n}\n\n/**\n * getTiles - loads a bunch of heatmap tiles\n * @param  {array} layerIds                 list of layer Ids that need to be loaded for this/these tiles\n * @param  {array} referenceTiles           list of reference tiles (tile data regardless of layer) that need to be loaded\n * @param  {object} newTemporalExtentsToLoad (optional) a dict (layerId is the key) of temporal extents\n * indices that should be appended to existing data\n */\nfunction getTiles(layerIds, referenceTiles, newTemporalExtentsToLoad = undefined) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state, layerIds.join('-'))\n    const token = state.map.module.token\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const tilesByLayer = {}\n    layerIds.forEach((id) => {\n      tilesByLayer[id] = [...heatmapLayers[id].tiles]\n    })\n    const allPromises = []\n\n    layerIds.forEach((layerId) => {\n      const heatmapLayerHeader = heatmapLayers[layerId].header\n      const { temporalExtents, temporalExtentsLess, colsByName } = { ...heatmapLayerHeader }\n      const url = heatmapLayerHeader.endpoints.tiles\n\n      referenceTiles.forEach((referenceTile) => {\n        // check if tile does not already exist first\n        let tile = tilesByLayer[layerId].find((t) => t.uid === referenceTile.uid)\n        if (!tile) {\n          // console.log('create tile ', referenceTile.uid)\n          tile = {\n            uid: referenceTile.uid,\n            temporalExtentsIndicesLoaded: [],\n          }\n          tilesByLayer[layerId].push(tile)\n        } else {\n          // console.log('found tile', referenceTile.uid)\n        }\n\n        const queriedTemporalExtentsIndices =\n          newTemporalExtentsToLoad === undefined\n            ? heatmapLayers[layerId].visibleTemporalExtentsIndices\n            : newTemporalExtentsToLoad[layerId]\n\n        const temporalExtentsIndicesToLoad = difference(\n          queriedTemporalExtentsIndices,\n          tile.temporalExtentsIndicesLoaded\n        )\n\n        const tilePromise = loadLayerTile(\n          layerId,\n          referenceTile.tileCoordinates,\n          token,\n          temporalExtentsIndicesToLoad,\n          {\n            url,\n            temporalExtents,\n            temporalExtentsLess,\n          }\n        )\n\n        allPromises.push(tilePromise)\n\n        tilePromise.then(({ loadedLayerId, rawTileData }) => {\n          tile.temporalExtentsIndicesLoaded = uniq(\n            tile.temporalExtentsIndicesLoaded.concat(temporalExtentsIndicesToLoad)\n          )\n          tile.data = parseLayerTile(\n            rawTileData,\n            colsByName,\n            referenceTile.tileCoordinates,\n            tile.data\n          )\n\n          dispatch({\n            type: UPDATE_HEATMAP_TILE,\n            payload: {\n              layerId: loadedLayerId,\n              tile,\n            },\n          })\n        })\n      })\n    })\n\n    Promise.all(allPromises).then(() => {\n      dispatch(completeLoader(loaderID))\n      dispatch(markTileAsLoaded(referenceTiles.map((tile) => tile.uid)))\n    })\n  }\n}\n\n/**\n * getTile - This action is emitted when a new tile is queried from panning or zooming the map\n * This will load a tile for all currently visible heatmap layers\n *\n * @param  {object} referenceTile a reference tile containing xyz coords and uid\n */\nexport function getTile(referenceTile) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_REFERENCE_TILE,\n      payload: referenceTile,\n    })\n    const visibleHeatmapLayers = getState().map.heatmap.heatmapLayers\n    const visibleHeatmapLayersIds = Object.keys(visibleHeatmapLayers).filter(\n      (id) => visibleHeatmapLayers[id].visible === true\n    )\n\n    if (visibleHeatmapLayersIds.length) {\n      dispatch(getTiles(visibleHeatmapLayersIds, [referenceTile]))\n    }\n  }\n}\n\n/**\n * releaseTiles - This action is emitted when an existing tile is removed from panning or zooming the map\n * @param  {array} uids tile ref uids to release\n */\nexport const releaseTiles = (uids) => ({\n  type: RELEASE_HEATMAP_TILES,\n  payload: uids,\n})\n\nexport const updateLoadedTiles = () => ({\n  type: UPDATE_LOADED_TILES,\n})\n\n// triggered when a layer is added or set to visible\nfunction loadAllTilesForLayer(layerId) {\n  return (dispatch, getState) => {\n    //                current layer, all reference tiles\n    const referenceTiles = getState().map.heatmap.referenceTiles\n    dispatch(getTiles([layerId], referenceTiles))\n  }\n}\n\nexport const addHeatmapLayer = (layer, loadTemporalExtent) => (dispatch) => {\n  const layerTemporalExtents = layer.header.temporalExtents\n  dispatch({\n    type: ADD_HEATMAP_LAYER,\n    payload: {\n      ...layer,\n      // initially attach which of the temporal extents indices are visible with initial outerExtent\n      visibleTemporalExtentsIndices: getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        layerTemporalExtents\n      ),\n    },\n  })\n\n  if (layer.visible === true) {\n    dispatch(loadAllTilesForLayer(layer.id))\n  }\n}\n\nexport const removeHeatmapLayer = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_HEATMAP_LAYER,\n    payload: {\n      id,\n    },\n  })\n}\n\n/**\n * updateLayerLoadTemporalExtents - when outer time extent changes, checks if more tiles needs to be loaded\n * by comparing the outer time range with the temporalExtent already loaded on each layer.\n * @param  {array} loadTemporalExtent Current app-wide extent of tiles that need to load, expressed\n * as an array of two dates\n */\nexport function updateLayerLoadTemporalExtents(loadTemporalExtent) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const indicesToAddByLayer = {}\n\n    Object.keys(heatmapLayers).forEach((layerId) => {\n      const heatmapLayer = heatmapLayers[layerId]\n      const temporalExtents = heatmapLayer.header.temporalExtents\n      const oldVisibleTemporalExtentsIndices = heatmapLayer.visibleTemporalExtentsIndices\n      const newVisibleTemporalExtentsIndices = getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        temporalExtents\n      )\n\n      const indicesAdded = difference(\n        newVisibleTemporalExtentsIndices,\n        oldVisibleTemporalExtentsIndices\n      )\n\n      const indicesRemoved = difference(\n        oldVisibleTemporalExtentsIndices,\n        newVisibleTemporalExtentsIndices\n      )\n\n      if (indicesAdded.length || indicesRemoved.length) {\n        // add new loaded indices to heatmap layer if applicable\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n          payload: {\n            layerId,\n            newVisibleTemporalExtentsIndices,\n            indicesRemoved,\n          },\n        })\n      }\n      if (indicesAdded.length) {\n        indicesToAddByLayer[layerId] = indicesAdded\n      }\n    })\n\n    // getTiles with indices diff\n    const layerIdsWithIndicesToAdd = Object.keys(indicesToAddByLayer)\n    if (layerIdsWithIndicesToAdd.length) {\n      dispatch(\n        getTiles(layerIdsWithIndicesToAdd, state.map.heatmap.referenceTiles, indicesToAddByLayer)\n      )\n    }\n  }\n}\n\n/**\n * Returns clusters or vessels data from a tileQuery\n * @param {object} state - the application state\n * @param {string} tileQuery - the id of a heatmap layer\n * @return {object} { isEmpty, isCluster, isMouseCluster, foundVessels, layerId, tilesetId }\n */\nconst _queryHeatmap = (state, tileQuery, temporalExtentIndexes) => {\n  const layers = state.map.heatmap.heatmapLayers\n  const startIndex = temporalExtentIndexes[0]\n  const endIndex = temporalExtentIndexes[1]\n  const layersVessels = []\n\n  Object.keys(layers).forEach((layerId) => {\n    const layer = layers[layerId]\n    if (layer.visible !== true) {\n      return\n    }\n    const allPossibleTilesByPreference = tileQuery.uids.map((uid) =>\n      layer.tiles.find((tile) => tile.uid === uid)\n    )\n    const availableTiles = allPossibleTilesByPreference.filter(\n      (tile) => tile !== undefined && tile.data !== undefined\n    )\n\n    const currentFilters = layer.filters\n    if (availableTiles.length) {\n      const bestTile = availableTiles[0]\n      layersVessels.push({\n        layer,\n        vessels: selectVesselsAt(bestTile.data, tileQuery, startIndex, endIndex, currentFilters),\n      })\n    }\n  })\n\n  const layersVesselsResults = layersVessels.filter(\n    (layerVessels) => layerVessels.vessels.length > 0\n  )\n\n  // it's a cluster because of aggregation on the server side\n  let isCluster\n  // its a cluster because or multiple vessels under mouse\n  let isMouseCluster\n  let isEmpty\n  let layerVesselsResult\n  let foundVessels\n\n  if (layersVesselsResults.length === 0) {\n    isEmpty = true\n  } else if (layersVesselsResults.length > 1) {\n    // if there are points over multiple layers, consider this a cluster (ie don't select, zoom instead, or don't highlight)\n    // there's an exception if vessel selection contains an encounter, in which case it will take priority\n    isCluster = true\n  } else {\n    // layersVesselsResults should contain a single result\n    layerVesselsResult = layersVesselsResults[0]\n\n    // we can get multiple points with similar series and id, in which case\n    // we should treat that as a successful vessel query, not a cluster\n    const vessels = layerVesselsResult.vessels\n\n    if (vessels.length === 0) {\n      isEmpty = true\n    } else {\n      // look up for any negatives ids (clusters on the server side)\n      const clusteredVessels = vessels.filter((v) => v.id < 0)\n      if (clusteredVessels.length) {\n        isCluster = true\n      } else {\n        foundVessels = uniqBy(vessels, (v) => v.series)\n        isMouseCluster = foundVessels.length > 1\n      }\n    }\n  }\n\n  const layer = layerVesselsResult === undefined ? {} : layerVesselsResult.layer\n\n  return { isEmpty, isCluster, isMouseCluster, foundVessels, layer }\n}\n\nexport function clearHighlightedVessels() {\n  return {\n    type: HIGHLIGHT_VESSELS,\n    payload: {\n      isEmpty: true,\n      clickableCluster: false,\n    },\n  }\n}\n\nexport function highlightVesselFromHeatmap(tileQuery, temporalExtentIndexes) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const { layer, isEmpty, isCluster, isMouseCluster, foundVessels } = _queryHeatmap(\n      state,\n      tileQuery,\n      temporalExtentIndexes\n    )\n\n    if (\n      isCluster === true ||\n      layer.id !== undefined ||\n      state.map.heatmap.highlightedVessels.layerId !== layer.id\n    ) {\n      const layerPayload =\n        layer === undefined\n          ? null\n          : {\n              id: layer.id,\n              tilesetId: layer.tilesetId,\n              subtype: layer.subtype,\n              header: layer.header,\n            }\n      dispatch({\n        type: HIGHLIGHT_VESSELS,\n        payload: {\n          layer: layerPayload,\n          isEmpty,\n          clickableCluster: isCluster === true || isMouseCluster === true,\n          highlightableCluster: isCluster !== true,\n          foundVessels,\n        },\n      })\n    } else {\n      dispatch(clearHighlightedVessels())\n    }\n  }\n}\n\nexport const highlightClickedVessel = (id, layerId) => ({\n  type: HIGHLIGHT_CLICKED_VESSEL,\n  payload: {\n    id,\n    layerId,\n  },\n})\n\nexport const clearHighlightedClickedVessel = () => ({\n  type: CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n})\n\nexport const updateHeatmapLayers = (newLayers, currentLoadTemporalExtent) => (\n  dispatch,\n  getState\n) => {\n  if (newLayers === null) {\n    console.warn(\"New layers in updateHeatmapLayers can't be null\")\n    return\n  }\n  const prevLayersDict = getState().map.heatmap.heatmapLayers\n\n  // add and update layers\n  newLayers.forEach((newLayer) => {\n    const layerId = newLayer.id\n    const prevLayer = prevLayersDict[layerId]\n    if (prevLayer === undefined) {\n      // console.log('adding', layerId)\n      dispatch(addHeatmapLayer(newLayer, currentLoadTemporalExtent))\n    } else {\n      if (prevLayer.visible !== newLayer.visible && newLayer.visible === true) {\n        dispatch(loadAllTilesForLayer(layerId))\n      }\n      if (\n        prevLayer.visible !== newLayer.visible ||\n        prevLayer.hue !== newLayer.hue ||\n        prevLayer.opacity !== newLayer.opacity ||\n        prevLayer.filters !== newLayer.filters ||\n        prevLayer.interactive !== newLayer.interactive\n      ) {\n        // console.log('updating', layerId, ' with visibilty', newLayer.visible)\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_STYLE,\n          payload: {\n            id: newLayer.id,\n            visible: newLayer.visible,\n            hue: newLayer.hue,\n            opacity: newLayer.opacity,\n            filters: newLayer.filters,\n            interactive: newLayer.interactive,\n          },\n        })\n      }\n    }\n  })\n\n  // clean up unused layers\n  Object.keys(prevLayersDict).forEach((prevLayerId) => {\n    if (!newLayers.find((l) => l.id === prevLayerId)) {\n      dispatch(removeHeatmapLayer(prevLayerId))\n    }\n  })\n}\n","import { fitBounds, pixelsToWorld } from 'viewport-mercator-project'\nimport { updateHeatmapTilesFromViewport } from '../heatmap/heatmapTiles.actions'\nimport { onViewportChange } from '../module/module.actions'\nimport { CLUSTER_CLICK_ZOOM_INCREMENT } from '../config' // TODO MAP MODULE\n\nexport const SET_BOUNDS = 'SET_BOUNDS'\nexport const SET_VIEWPORT = 'SET_VIEWPORT'\nexport const UPDATE_VIEWPORT = 'UPDATE_VIEWPORT'\nexport const SET_ZOOM_INCREMENT = 'SET_ZOOM_INCREMENT'\nexport const SET_MOUSE_LAT_LONG = 'SET_MOUSE_LAT_LONG'\nexport const TRANSITION_END = 'TRANSITION_END'\nexport const SET_NATIVE_VIEWPORT = 'SET_NATIVE_VIEWPORT'\n\nexport const setBounds = (bounds) => ({\n  type: SET_BOUNDS,\n  payload: bounds,\n})\n\nexport const setViewport = (viewport, interactionState) => (dispatch) => {\n  dispatch({\n    type: SET_VIEWPORT,\n    payload: viewport,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange(interactionState))\n}\n\nexport const updateViewport = (viewportUpdate) => (dispatch) => {\n  dispatch({\n    type: UPDATE_VIEWPORT,\n    payload: viewportUpdate,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  // Not needed as call the callback with the same values\n  // dispatch(onViewportChange())\n}\n\nconst transitionTo = (increment, latitude = null, longitude = null, zoom = null) => (dispatch) => {\n  dispatch({\n    type: SET_ZOOM_INCREMENT,\n    payload: {\n      increment,\n      latitude,\n      longitude,\n      zoom,\n    },\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const transitionToZoom = (viewport) => (dispatch) => {\n  dispatch(transitionTo(null, viewport.center[0], viewport.center[1], viewport.zoom))\n}\n\nexport const transitionEnd = () => (dispatch) => {\n  dispatch({\n    type: TRANSITION_END,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const zoomIntoVesselCenter = (latitude, longitude, zoom = null) => (dispatch) => {\n  dispatch(transitionTo(CLUSTER_CLICK_ZOOM_INCREMENT, latitude, longitude, zoom))\n}\n\nexport const fitToBounds = (bounds) => (dispatch, getState) => {\n  const state = getState()\n  const vp = fitBounds({\n    bounds: [[bounds.minLng, bounds.minLat], [bounds.maxLng, bounds.maxLat]],\n    width: state.map.viewport.viewport.width,\n    height: state.map.viewport.viewport.height,\n    padding: 50,\n  })\n  dispatch(transitionTo(null, vp.latitude, vp.longitude, vp.zoom))\n}\n\nexport const exportNativeViewport = (nativeViewport) => (dispatch) => {\n  const topLeftPx = [0, 0]\n  const bottomRightPx = [nativeViewport.width, nativeViewport.height]\n\n  // compute left and right offsets to deal with antimeridian issue\n  const topLeftWorld = pixelsToWorld(topLeftPx, nativeViewport.pixelUnprojectionMatrix)\n  const bottomRightWorld = pixelsToWorld(bottomRightPx, nativeViewport.pixelUnprojectionMatrix)\n  const leftWorldScaled = topLeftWorld[0] / nativeViewport.scale\n  const rightWorldScaled = bottomRightWorld[0] / nativeViewport.scale\n\n  // lat/lon corners for miniglobe\n  const northWest = nativeViewport.unproject(topLeftPx)\n  const southEast = nativeViewport.unproject(bottomRightPx)\n  const bounds = {\n    north: northWest[1],\n    south: southEast[1],\n    west: northWest[0],\n    east: southEast[0],\n  }\n\n  dispatch({\n    type: SET_NATIVE_VIEWPORT,\n    payload: {\n      leftWorldScaled,\n      rightWorldScaled,\n      bounds,\n    },\n  })\n}\n","import area from '@turf/area'\nimport { POLYGON_LAYERS_AREA } from '../constants'\nimport { clearHighlightedVessels, clearHighlightedClickedVessel } from '../heatmap/heatmap.actions'\nimport { zoomIntoVesselCenter } from './viewport.actions'\n\nexport const SET_POPUP = 'SET_POPUP'\nexport const CLEAR_POPUP = 'CLEAR_POPUP'\nexport const SET_MAP_CURSOR = 'SET_MAP_CURSOR'\n\nconst getAreaKm2 = (glFeature) => {\n  const areakm2 = 10 ** -6 * area(glFeature.geometry)\n  const formatted = areakm2.toLocaleString('en-US', { maximumFractionDigits: 0 })\n  return formatted\n}\n\nconst getFields = (glFeature, source = null) => {\n  if (source === null || source === undefined) {\n    // console.warn('Couldnt find source when looking for fields of layer', sourceId)\n  }\n\n  const fieldsDefinition =\n    !source || source.metadata === undefined || source.metadata['gfw:popups'] === undefined\n      ? []\n      : source.metadata['gfw:popups']\n\n  const properties = glFeature.properties\n\n  // whitelist if 'gfw:popups' exist, if not return all\n  const fieldsKeys = Object.keys(glFeature.properties).filter(\n    (k) => fieldsDefinition.length === 0 || fieldsDefinition.find((fd) => fd.id === k) !== undefined\n  )\n\n  const fields = fieldsKeys.map((fieldKey) => {\n    const value = fieldKey === POLYGON_LAYERS_AREA ? getAreaKm2(glFeature) : properties[fieldKey]\n    const def = fieldsDefinition.find((fd) => fd.id === fieldKey) || {}\n    const label = def.label || fieldKey\n    return {\n      id: fieldKey,\n      label,\n      value,\n      title: `${label}: ${value}`,\n      isLink: def.isLink,\n      isMain: def.isMain,\n    }\n  })\n\n  const mainField =\n    fields.find((f) => f.isMain === true) ||\n    fields.find((f) => f.id === 'name') ||\n    fields.find((f) => f.id === 'id') ||\n    fields[0]\n\n  if (mainField !== undefined) {\n    mainField.isMain = true\n  }\n  return fields\n}\n\nconst getCluster = (glFeature, glGetSource) => {\n  const clusterId = glFeature.properties.cluster_id\n  const sourceId = glFeature.source\n  const glSource = glGetSource(sourceId)\n  const promise = new Promise((resolve, reject) => {\n    glSource.getClusterExpansionZoom(clusterId, (err1, zoom) => {\n      glSource.getClusterLeaves(clusterId, 99, 0, (err2, children) => {\n        if (err1 || err2) {\n          reject()\n        }\n        const childrenFeatures = children.map((child) =>\n          getFeature(child, glFeature.layer.id, glSource)\n        )\n        resolve({\n          zoom,\n          childrenFeatures,\n        })\n      })\n    })\n  })\n  return promise\n}\n\nconst getFeature = (glFeature, layerId, source) => {\n  const feature = {\n    properties: glFeature.properties,\n  }\n  const fields = getFields(glFeature, source)\n  feature.fields = fields\n\n  // Get most likely feature title\n  const mainField = fields.find((f) => f.isMain === true)\n  feature.title = mainField === undefined ? layerId : mainField.value\n\n  return feature\n}\n\nexport const mapInteraction = (interactionType, latitude, longitude, glFeatures, glGetSource) => (\n  dispatch,\n  getState\n) => {\n  if (interactionType === 'click') {\n    dispatch(clearHighlightedClickedVessel())\n  }\n\n  const currentStyle = getState().map.style.mapStyle.toJS()\n\n  const event = {\n    latitude,\n    longitude,\n    features: [],\n  }\n\n  // Collect and normalize features on legacy heatmap\n  const currentLegacyHeatmapData = getState().map.heatmap.highlightedVessels\n  let legacyHeatmapFeature\n\n  if (currentLegacyHeatmapData.isEmpty !== true) {\n    const foundVessels =\n      currentLegacyHeatmapData.foundVessels === undefined\n        ? []\n        : currentLegacyHeatmapData.foundVessels\n    const properties = foundVessels.length === 0 ? [] : foundVessels[0]\n    const isCluster = currentLegacyHeatmapData.clickableCluster === true\n    const count =\n      isCluster === true && currentLegacyHeatmapData.highlightableCluster === false\n        ? -1\n        : foundVessels.length\n    legacyHeatmapFeature = {\n      isCluster,\n      count,\n      layer: {\n        id: currentLegacyHeatmapData.layer.id,\n        group: 'legacyHeatmap',\n      },\n      properties,\n    }\n    event.features.push(legacyHeatmapFeature)\n  }\n\n  // Try to retrieve 'gfw:id' (generated when instanciating CARTO layer to preserve original style.json id)\n  // In most cases it won't exist, so fall back to source id\n  const getStaticLayerIdFromGlFeature = (glFeature) =>\n    (glFeature.layer.metadata !== undefined && glFeature.layer.metadata['gfw:id']) ||\n    glFeature.layer.source\n\n  // Collect gl features\n  const clusterPromises = []\n  const allGlFeatures = glFeatures || []\n  allGlFeatures.forEach((glFeature) => {\n    const layerId = getStaticLayerIdFromGlFeature(glFeature)\n    const source = currentStyle.sources[layerId]\n    const feature = {\n      layer: {\n        id: layerId,\n        group: glFeature.layer.metadata && glFeature.layer.metadata['mapbox:group'],\n      },\n      ...getFeature(glFeature, layerId, source),\n    }\n\n    if (glFeature.properties.cluster === true) {\n      // lookup for cluster\n      const clusterPromise = getCluster(glFeature, glGetSource).then((cluster) => {\n        feature.cluster = cluster\n        feature.count = cluster.childrenFeatures.length\n      })\n      clusterPromises.push(clusterPromise)\n      feature.isCluster = true\n    } else {\n      feature.isCluster = false\n    }\n    event.features.push(feature)\n  })\n\n  Promise.all(clusterPromises).then(() => {\n    // The whole set of features is considered a cluster\n    // if any feature is a cluster, or there is more than one feature\n    event.isCluster =\n      event.features.length > 1 || event.features.some((feature) => feature.isCluster === true)\n\n    // legacy heatmap layers can yield clusters with an unknown number of features, handle this here:\n    if (legacyHeatmapFeature !== undefined && legacyHeatmapFeature.count === -1) {\n      event.count = -1\n    } else {\n      event.count = event.features.reduce((count, feature) => {\n        let featureCount = feature.count || 1\n        return count + featureCount\n      }, 0)\n    }\n\n    if (event.count === 1) {\n      event.feature = event.features[0]\n    }\n\n    // When autoClusterZoom is set to true, we handle zoom here\n    const autoClusterZoom = getState().map.module.autoClusterZoom === true\n\n    // Check if cluster using customizable isCluster() callback\n    // If not set resolves simply to (event) => event.isCluster === true\n    const clusterBehavior = getState().map.module.isCluster(event)\n    event.isCluster = clusterBehavior\n\n    if (autoClusterZoom) {\n      if (interactionType === 'click' && event.isCluster === true) {\n        dispatch(clearHighlightedVessels())\n        const clusterZoom = event.features[0].cluster && event.features[0].cluster.zoom\n        dispatch(zoomIntoVesselCenter(latitude, longitude, clusterZoom))\n      }\n    }\n\n    let cursor = event.features.length ? 'pointer' : null\n    if (event.isCluster === true) {\n      cursor = 'zoom-in'\n    }\n\n    dispatch({\n      type: SET_MAP_CURSOR,\n      payload: cursor,\n    })\n\n    const callback =\n      interactionType === 'click' ? getState().map.module.onClick : getState().map.module.onHover\n\n    if (callback !== undefined) {\n      callback(event)\n    }\n  })\n}\n","const RGB_MAX = 255\nconst HUE_MAX = 360\nconst SV_MAX = 100\n\nexport const VESSELS_HUES_INCREMENTS_NUM = 31 // 360 / VESSELS_HUES_INCREMENTS_NUM - 1  should give a round number\nexport const VESSELS_HUES_INCREMENT = 360 / (VESSELS_HUES_INCREMENTS_NUM - 1)\n\n// Legacy: this is only here for compatibility with pre-mapbox branch workspaces\nexport const COLOR_HUES = {\n  orange: 0,\n  peach: 22,\n  yellow: 60,\n  green: 85,\n  brightGreen: 145,\n  lightBlue: 182,\n  blue: 236,\n  purple: 284,\n  pink: 312,\n}\n\n// FIXME mark explicitely as legacy. Check all usages.\nexport const getKeyByValue = (obj, value) => {\n  let result = null\n  Object.entries(obj).forEach((entry) => {\n    if (entry[1] === value) result = entry[0]\n  })\n  return result\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport const rgbToHsv = (_r, _g, _b) => {\n  const r = _r / 255\n  const g = _g / 255\n  const b = _b / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n      default:\n        h = 0\n    }\n\n    h /= 6\n  }\n\n  return [h, s, v]\n}\n\n// converts hue, saturation, luminance to an rgb object\nexport const hsvToRgb = (h_, s_, v_) => {\n  const h = ((h_ % HUE_MAX) / parseFloat(HUE_MAX)) * 6\n  const s = s_ === SV_MAX ? 1 : (s_ % SV_MAX) / parseFloat(SV_MAX)\n  const v = v_ === SV_MAX ? 1 : (v_ % SV_MAX) / parseFloat(SV_MAX)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r: Math.round(r * RGB_MAX), g: Math.round(g * RGB_MAX), b: Math.round(b * RGB_MAX) }\n}\n\n// returns an rgb string with default saturation and luminance values\nconst hueToRgbDefaults = (hue) => hsvToRgb(hue, 50, 100)\n\nexport const hueToRgbString = (hue) => {\n  const rgb = hueToRgbDefaults(hue)\n  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`\n}\n\nexport const rgbToHexString = (rgb, css) => {\n  const str = ['r', 'g', 'b']\n    .map((channelName) => {\n      const channelValue = rgb[channelName]\n      let channelStr = channelValue.toString(16)\n      if (channelValue < 16) {\n        channelStr = `0${channelStr}`\n      }\n      return channelStr\n    })\n    .join('')\n  const prefix = css === true ? '#' : '0x'\n  return `${prefix}${str}`\n}\n\nexport const hueToRgbHexString = (hue, css) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToHexString(rgb, css)\n}\n\nconst closestNumber = (numberArray, goal) =>\n  numberArray.reduce((prev, curr) => (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev))\n\nexport const hueToClosestColor = (hue) => {\n  if (hue === undefined || hue === null) return undefined\n  const colorHueValues = Object.keys(COLOR_HUES).map((key) => COLOR_HUES[key])\n  const closestHue = closestNumber(colorHueValues, hue)\n  return getKeyByValue(COLOR_HUES, closestHue)\n}\n\nexport const hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst rgbToRgbaString = (rgb, opacity) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`\n\nexport const hueToRgbaString = (hue, opacity) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hexToRgba = (hex, opacity) => {\n  const rgb = hexToRgb(hex)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hueIncrementToHue = (hueIncrement) => hueIncrement * VESSELS_HUES_INCREMENT\n\nexport const hueToHueIncrement = (hue) =>\n  Math.round((hue / 360) * (VESSELS_HUES_INCREMENTS_NUM - 1))\n\nexport const wrapHue = (hue) => hue % 360\n\nexport const hueOrColorToHexColor = (color, hue) => {\n  if (hue !== undefined) {\n    return hueToRgbHexString(hue, true)\n  }\n\n  return color\n}\n","/* global PIXI */\nimport 'pixi.js'\nimport { hueToHueIncrement, VESSELS_HUES_INCREMENTS_NUM } from '../utils/map-colors'\nimport { VESSELS_BASE_RADIUS, MAX_SPRITES_PER_LAYER } from '../config'\n\nexport default class HeatmapSubLayer {\n  constructor(baseTexture, renderingStyleIndex, hue, useNormalBlendMode = false) {\n    // this.stage = new PIXI.Container();\n    // the ParticleContainer is a faster version of the PIXI sprite container\n    this.stage = new PIXI.particles.ParticleContainer(MAX_SPRITES_PER_LAYER, {\n      scale: true,\n      alpha: true,\n      position: true,\n      uvs: true,\n    })\n    if (useNormalBlendMode === false) {\n      this.stage.blendMode = PIXI.BLEND_MODES.SCREEN\n    }\n\n    this.spritesPool = []\n\n    const initialTextureFrame = new PIXI.Rectangle(\n      0,\n      0,\n      VESSELS_BASE_RADIUS * 2,\n      VESSELS_BASE_RADIUS * 2\n    )\n    this.mainVesselTexture = new PIXI.Texture(baseTexture, initialTextureFrame)\n    this._setTextureFrame(renderingStyleIndex, hue)\n\n    this.clearSpriteProps()\n  }\n\n  clearSpriteProps() {\n    this.spritesProps = {\n      x: new Float32Array(MAX_SPRITES_PER_LAYER),\n      y: new Float32Array(MAX_SPRITES_PER_LAYER),\n      a: new Float32Array(MAX_SPRITES_PER_LAYER),\n      s: new Float32Array(MAX_SPRITES_PER_LAYER),\n    }\n    this.spritesPropsCount = 0\n  }\n\n  pushSpriteProps(x, y, a, s) {\n    this.spritesProps.x[this.spritesPropsCount] = x\n    this.spritesProps.y[this.spritesPropsCount] = y\n    this.spritesProps.a[this.spritesPropsCount] = a\n    this.spritesProps.s[this.spritesPropsCount] = s\n    this.spritesPropsCount++\n  }\n\n  setRenderingStyleIndex(renderingStyleIndex) {\n    this._setTextureFrame(renderingStyleIndex)\n  }\n\n  destroy() {\n    this.spritesPool = null\n    this.stage.destroy({ children: true })\n  }\n\n  /**\n   * Updates the main texture frame offset to show different brush styles and hues\n   * Both args are optional, if one is omitted, previous value is used\n   * @heatmapStyle bool whether to use heatmap style or solid circle style\n   * @hue number hue value between 0 and 360\n   */\n  _setTextureFrame(renderingStyleIndex = null, hue = null) {\n    const textureFrame = this.mainVesselTexture.frame.clone()\n\n    if (renderingStyleIndex !== null) {\n      // one diameter + tiny offset between 2 frames\n      textureFrame.x = VESSELS_BASE_RADIUS * 2 * renderingStyleIndex + renderingStyleIndex\n    }\n\n    if (hue !== null) {\n      let hueIncrement = hueToHueIncrement(hue)\n      if (hueIncrement === VESSELS_HUES_INCREMENTS_NUM - 1) {\n        hueIncrement = 0\n      }\n      textureFrame.y = hueIncrement * VESSELS_BASE_RADIUS * 2\n      if (hueIncrement > 0) {\n        textureFrame.y += hueIncrement\n      }\n    }\n\n    this.mainVesselTexture.frame = textureFrame\n    this.mainVesselTexture.update()\n  }\n\n  render() {\n    const numProps = this.spritesPropsCount\n    this.resizeSpritesPool()\n\n    for (let i = 0; i < numProps; i++) {\n      const sprite = this.stage.children[i]\n      const s = this.spritesProps.s[i]\n      sprite.setTransform(this.spritesProps.x[i], this.spritesProps.y[i], s, s)\n      sprite.alpha = this.spritesProps.a[i]\n    }\n\n    const numSprites = this.stage.children.length\n    for (let i = numProps; i < numSprites; i++) {\n      const sprite = this.stage.children[i]\n      sprite.x = -100\n    }\n  }\n\n  resizeSpritesPool() {\n    const numProps = this.spritesPropsCount\n    const prevNumSprites = this.stage.children.length\n    const delta = numProps - prevNumSprites\n    // console.log(prevNumSprites, '->', numProps, ' delta:', delta);\n\n    if (delta < -4999) {\n      // sprite needs to be removed. Do that progressively (max 100) to avoid UI lock\n      const toRemove = Math.min(100, -delta)\n      // console.log('removing ', toRemove);\n      for (let i = 0; i < toRemove; i++) {\n        this.stage.removeChildAt(0)\n      }\n    }\n\n    if (delta > 0) {\n      const toAdd = Math.max(5000, delta)\n      // console.log('adding ', toAdd);\n      this._addSprites(toAdd)\n    }\n  }\n\n  _addSprites(num) {\n    for (let i = 0; i < num; i++) {\n      const vessel = new PIXI.Sprite(this.mainVesselTexture)\n      vessel.anchor.x = 0.5\n      vessel.anchor.y = 0.5\n      // ParticlesContainer does not support .visible, so we just move the sprite out of the viewport\n      vessel.x = -100\n      // vessel.blendMode = PIXI.BLEND_MODES.SCREEN;\n      // vessel.filters=  [new PIXI.filters.BlurFilter(10,10)]\n      this.stage.addChild(vessel)\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport uniq from 'lodash/uniq'\nimport * as PIXI from 'pixi.js'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { BRUSH_RENDERING_STYLE, BRUSH_ZOOM_RENDERING_STYLE } from '../constants'\nimport { vesselSatisfiesFilters } from '../utils/heatmapTileData'\nimport HeatmapSubLayer from './HeatmapSubLayer'\n\n// This is a faster version of worldToPixels that omits pitch,\n// and ignores values from the matrix that are consistently = 0\nconst s = 1 / 1.5\nconst worldToPixelsSimple = (x, y, m) => {\n  const fx = s * (m[0] * x + m[4] * y + m[12])\n  const fy = s * (m[5] * y + m[13])\n  return [fx, fy]\n}\n\nclass HeatmapLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.useRadialGradientStyle !== this.props.useRadialGradientStyle) {\n      this.setBrushZoomRenderingStyle(nextProps.useRadialGradientStyle)\n    }\n  }\n\n  _build() {\n    const { layer, rootStage, useRadialGradientStyle, customRenderingStyle } = this.props\n    this.subLayers = {}\n    this.renderingStyle =\n      layer.header && layer.header.rendering ? layer.header.rendering : customRenderingStyle\n\n    this.setBrushRenderingStyle(this.renderingStyle.style)\n    this.setBrushZoomRenderingStyle(useRadialGradientStyle)\n\n    this.stage = new PIXI.Container()\n\n    rootStage.addChild(this.stage)\n  }\n\n  setBrushRenderingStyle(style = BRUSH_RENDERING_STYLE.NORMAL) {\n    if (typeof style === 'string') {\n      this.brushRenderingStyle = BRUSH_RENDERING_STYLE[style.toUpperCase()]\n    } else {\n      this.brushRenderingStyle = style\n    }\n    this._setBrushRenderingStyleIndex()\n  }\n\n  setBrushZoomRenderingStyle(useRadialGradientStyle) {\n    this.brushZoomRenderingStyle =\n      useRadialGradientStyle === true\n        ? BRUSH_ZOOM_RENDERING_STYLE.RADIAL_GRADIENT\n        : BRUSH_ZOOM_RENDERING_STYLE.CIRCLE\n    this._setBrushRenderingStyleIndex()\n  }\n\n  _setBrushRenderingStyleIndex() {\n    // only NORMAL brush styles support different zoom styles\n    const cappedZoomRenderingStyle =\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.NORMAL ? this.brushZoomRenderingStyle : 0\n    const newStyleIndex = this.brushRenderingStyle + cappedZoomRenderingStyle\n    if (newStyleIndex === this.renderingStyleIndex) {\n      return\n    }\n    this.renderingStyleIndex = newStyleIndex\n    Object.values(this.subLayers).forEach((subLayer) => {\n      subLayer.setRenderingStyleIndex(this.renderingStyleIndex)\n    })\n  }\n\n  _redraw() {\n    const { filters, baseTexture, layer } = this.props\n\n    if (\n      layer === null ||\n      layer === undefined ||\n      layer.tiles === undefined ||\n      layer.visible === false\n    ) {\n      this.stage.visible = false\n      return\n    }\n\n    this.stage.visible = true\n    this.stage.alpha = layer.opacity\n\n    const tiles = layer.tiles\n    const defaultHue = layer.hue\n    const allHuesToRender =\n      filters !== undefined && filters.length\n        ? filters\n            // pass is set to true by filterGroupActions when none of the filters fields\n            // in the filter group is supported by the layer headers\n            .filter((f) => f.pass !== true)\n            .map((f) => (f.hue === undefined ? '0' : f.hue.toString()))\n        : [defaultHue.toString()]\n    const currentlyUsedHues = Object.keys(this.subLayers)\n\n    // get all hues, old and new\n    const allHues = uniq(allHuesToRender.concat(currentlyUsedHues))\n\n    for (let i = 0; i < allHues.length; i++) {\n      const hue = allHues[i]\n      if (allHuesToRender.indexOf(hue) === -1) {\n        // not on new hues: delete sublayer\n        this._destroySubLayer(this.subLayers[hue])\n        delete this.subLayers[hue]\n        continue\n      }\n      if (currentlyUsedHues.indexOf(hue) === -1) {\n        // not on old hues: create sublayer\n        this.subLayers[hue] = this._createSublayer(baseTexture, this.renderingStyleIndex, hue)\n      }\n      this.subLayers[hue].clearSpriteProps()\n    }\n\n    if (!allHuesToRender.length) return\n    tiles.forEach((tile) => {\n      this._setSubLayersSpritePropsForTile({\n        data: tile.data,\n        numFilters: filters.length,\n        defaultHue,\n      })\n    })\n\n    allHuesToRender.forEach((hueToRender) => {\n      this.subLayers[hueToRender].render()\n    })\n  }\n\n  _setSubLayersSpritePropsForTile({ data, numFilters, defaultHue }) {\n    if (!data) {\n      return\n    }\n\n    const { startIndex, endIndex, viewport, filters, viewportLeft, viewportRight } = this.props\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let index = 0, len = frame.worldX.length; index < len; index++) {\n        let hue\n        if (filters === undefined || !filters.length) {\n          hue = defaultHue\n        }\n        for (let fi = 0; fi < numFilters; fi++) {\n          const filter = filters[fi]\n          if (vesselSatisfiesFilters(frame, index, filter.filterValues)) {\n            hue = filter.hue\n            break\n          }\n        }\n\n        // no filter passes: bail\n        if (hue === undefined) {\n          continue\n        }\n\n        // wrap worldX when point crosses the antimeridian/dateline\n        // world points go from 0 to 512. There is no way to determine if worldX is on the \"wrong\" side\n        // of the antimeridian just by looking at its value (where with lat/lon we can simply look at -/+)\n        // Therefore we compare it to the viewport's left or right boundary, depending on what is currently\n        // \"the right side\" of the antimeridian\n        let worldX = frame.worldX[index]\n        if (viewportLeft > 0 && worldX < viewportLeft) {\n          // worldX is \"behind\" viewportLeft, which means it is \"on the right\" of the antimeridian\n          worldX += 512\n        } else if (viewportLeft < 0 && worldX > viewportRight) {\n          worldX -= 512\n        }\n\n        const scaledX = worldX * viewport.scale\n        const scaledY = frame.worldY[index] * viewport.scale\n        const mtx = viewport.pixelProjectionMatrix\n\n        const [x, y] =\n          viewport.pitch === 0\n            ? worldToPixelsSimple(scaledX, scaledY, mtx)\n            : worldToPixels([scaledX, scaledY], mtx)\n\n        if (x > -10 && x < viewport.width + 10 && y > -10 && y < viewport.height + 10) {\n          this.subLayers[hue].pushSpriteProps(\n            x,\n            y,\n            frame.opacity ? frame.opacity[index] : this.renderingStyle.defaultOpacity,\n            frame.radius ? frame.radius[index] : this.renderingStyle.defaultSize\n          )\n        }\n      }\n    }\n  }\n\n  _createSublayer(baseTexture, renderingStyleIndex, hue) {\n    const subLayer = new HeatmapSubLayer(\n      baseTexture,\n      renderingStyleIndex,\n      hue,\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.BULLSEYE\n    )\n    this.stage.addChild(subLayer.stage)\n    return subLayer\n  }\n\n  _destroy() {\n    Object.values(this.subLayers).forEach(this._destroySubLayer.bind(this))\n    this.stage.destroy({ children: true })\n    const { rootStage } = this.props\n    rootStage.removeChild(this.stage)\n  }\n\n  _destroySubLayer(subLayer) {\n    this.stage.removeChild(subLayer.stage)\n    subLayer.destroy()\n  }\n\n  render() {\n    return null\n  }\n}\n\nHeatmapLayer.propTypes = {\n  layer: PropTypes.object,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  filters: PropTypes.array,\n  baseTexture: PropTypes.object,\n  useRadialGradientStyle: PropTypes.bool,\n  customRenderingStyle: PropTypes.object,\n  viewportLeft: PropTypes.number,\n  viewportRight: PropTypes.number,\n}\n\nexport default HeatmapLayer\n","/* global PIXI */\nimport 'pixi.js'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { TRACKS_DOTS_STYLE_ZOOM_THRESHOLD } from '../config'\n\nclass TracksLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  _build() {\n    const { rootStage } = this.props\n    this.stage = new PIXI.Graphics()\n    this.stage.nativeLines = true\n    rootStage.addChild(this.stage)\n  }\n\n  clear() {\n    this.stage.clear()\n  }\n\n  _redraw() {\n    const { tracks, zoom, startIndex, endIndex, highlightTemporalExtentIndexes } = this.props\n\n    this.clear()\n    if (!tracks.length) {\n      return\n    }\n\n    const overInInner =\n      highlightTemporalExtentIndexes === null\n        ? undefined\n        : [\n            Math.max(startIndex, highlightTemporalExtentIndexes[0]),\n            Math.min(endIndex, highlightTemporalExtentIndexes[1]),\n          ]\n    const overExtent = overInInner && overInInner[1] - overInInner[0] > 0 ? overInInner : undefined\n\n    let n = 0 // eslint-disable-line no-unused-vars\n\n    const drawFishingCircles = zoom > TRACKS_DOTS_STYLE_ZOOM_THRESHOLD\n    const fishingCirclesRadius = 1 + (zoom - TRACKS_DOTS_STYLE_ZOOM_THRESHOLD) * 0.5\n    const drawOverTrack = overExtent !== undefined && overExtent[0] > 0 && overExtent[1] > 0\n\n    tracks.forEach((track) => {\n      n += this._drawTrack({\n        data: track.data,\n        startIndex,\n        endIndex,\n        drawFishingCircles,\n        fishingCirclesRadius,\n        color: `0x${track.color.substr(1)}`,\n        lineThickness: 1,\n        lineOpacity: 1,\n      })\n\n      // Draw the highlight over the track when the user hovers over the Timebar\n      if (drawOverTrack === true) {\n        n += this._drawTrack({\n          data: track.data,\n          startIndex: highlightTemporalExtentIndexes[0],\n          endIndex: highlightTemporalExtentIndexes[1],\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color: '0xFFFFFF',\n          lineThickness: 2,\n          lineOpacity: 1,\n        })\n      }\n    })\n\n    // console.log(n);\n  }\n\n  /**\n   * Draws a single track (line + points)\n   *\n   * @param data track points data in 'playback form' (ie organized by days)\n   * @param extent extent, in day indices\n   * @param offset object containing info about the current situation of the map viewport, used to compute screen coords\n   * @param drawFishingCircles whether to draw fishing circles or not\n   * @param fishingCirclesRadius radius of the fishing circles\n   * @param color\n   * @param lineThickness\n   * @param lineOpacity\n   * @param worldOffset offset to use when a track crosses the dateline (ie 512 to add a second world to the right)\n   */\n  _drawTrack({\n    data,\n    startIndex,\n    endIndex,\n    drawFishingCircles,\n    fishingCirclesRadius,\n    color,\n    lineThickness,\n    lineOpacity,\n    worldOffset = 0,\n  }) {\n    const { viewport } = this.props\n\n    let n = 0\n    let prevSeries\n    let prevWorldX\n    let prevWorldY\n\n    const circlePoints = {\n      x: [],\n      y: [],\n    }\n\n    // line thickness is ignored in native mode anyways.\n    this.stage.lineStyle(lineThickness, color, lineOpacity)\n\n    let duplicateWorld = false\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let i = 0, len = frame.series.length; i < len; i++) {\n        const currentSeries = frame.series[i]\n\n        n++\n\n        const worldX = frame.worldX[i] + worldOffset\n        const worldY = frame.worldY[i]\n\n        const [x, y] = worldToPixels(\n          [worldX * viewport.scale, worldY * viewport.scale],\n          viewport.pixelProjectionMatrix\n        )\n\n        if (prevSeries !== currentSeries) {\n          this.stage.moveTo(x, y)\n        }\n\n        // more than a ½ world of distance between two points = crossing the dateline\n        if (prevWorldX && Math.abs(worldX - prevWorldX) > 256) {\n          // worldOffset === 0 -> this is the first time drawTrack is called\n          if (worldOffset === 0) {\n            // set a flag to call drawTrack again at the end of the loop\n            duplicateWorld = true\n          }\n\n          // get Y coordinate where track intersects with dateline\n          const atDatelineWorldY = prevWorldY + (worldY - prevWorldY) / 2\n\n          // whether tracks crosses dateline from west to east\n          const isWestToEast = worldX - prevWorldX < 0\n\n          const worldXEnd = worldOffset + (512 - 0.000001)\n          const worldXStart = worldOffset\n\n          // get X coordinate ending at dateline\n          const atDatelineEndWorldX = isWestToEast ? worldXEnd : worldXStart\n\n          // get X coordinate starting at dateline\n          const atDatelineStartWorldX = isWestToEast ? worldXStart : worldXEnd\n\n          const [x1, y1] = worldToPixels(\n            [atDatelineEndWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.lineTo(x1, y1)\n          const [x2, y2] = worldToPixels(\n            [atDatelineStartWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.moveTo(x2, y2)\n        }\n\n        this.stage.lineTo(x, y)\n\n        if (drawFishingCircles && frame.hasFishing[i] === true) {\n          circlePoints.x.push(x)\n          circlePoints.y.push(y)\n        }\n\n        prevWorldX = worldX\n        prevWorldY = worldY\n        prevSeries = currentSeries\n      }\n    }\n\n    if (drawFishingCircles) {\n      this.stage.lineStyle(0)\n      this.stage.beginFill(color, 1)\n      for (let i = 0, circlesLength = circlePoints.x.length; i < circlesLength; i++) {\n        this.stage.drawCircle(circlePoints.x[i], circlePoints.y[i], fishingCirclesRadius)\n      }\n      this.stage.endFill()\n    }\n\n    if (duplicateWorld === true) {\n      ;[-512, 512].forEach((offset) => {\n        this._drawTrack({\n          worldOffset: offset,\n          data,\n          startIndex,\n          endIndex,\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color,\n          lineThickness,\n          lineOpacity,\n        })\n      })\n    }\n    return n\n  }\n\n  render() {\n    return null\n  }\n}\n\nTracksLayer.propTypes = {\n  zoom: PropTypes.number,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  tracks: PropTypes.array,\n}\n\nexport default TracksLayer\n","import React, { Fragment } from 'react'\nimport * as PIXI from 'pixi.js'\nimport PropTypes from 'prop-types'\nimport { BaseControl } from 'react-map-gl'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport {\n  hsvToRgb,\n  hueToRgbString,\n  hueIncrementToHue,\n  wrapHue,\n  VESSELS_HUES_INCREMENTS_NUM,\n} from '../utils/map-colors'\nimport {\n  VESSELS_BASE_RADIUS,\n  VESSELS_HEATMAP_BLUR_FACTOR,\n  ACTIVITY_HIGHLIGHT_HUE,\n  VESSELS_HEATMAP_DIMMING_ALPHA,\n  VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD,\n  VESSEL_CLICK_TOLERANCE_PX,\n} from '../config'\nimport HeatmapLayer from '../heatmap/HeatmapLayer'\nimport TracksLayer from '../tracks/TracksLayer'\n\nconst shouldUseRadialGradientStyle = (zoom) => zoom < VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD\n\n// builds a texture spritesheet containing\n// - the heatmap style (radial gradient)\n// - the circle style that is used at higher zoom levels\n// - the 'bullseye' style used for encounters\n// as well as a number of hues for each in a 2D grid.\n// Then, only the texture frame (mesh UVs) is modified depending on the zoom level,\n// in order not to have to recreate sprites\nconst getVesselTexture = (radius, blurFactor) => {\n  const tplCanvas = document.createElement('canvas')\n  const tplCtx = tplCanvas.getContext('2d')\n  const diameter = radius * 2\n  const NUM_STYLES = 3\n  tplCanvas.width = diameter * NUM_STYLES + (NUM_STYLES - 1) // + (NUM_STYLES - 1): tiny offset between 2 frames\n  tplCanvas.height = diameter * VESSELS_HUES_INCREMENTS_NUM + VESSELS_HUES_INCREMENTS_NUM\n\n  for (let hueIncrement = 0; hueIncrement < VESSELS_HUES_INCREMENTS_NUM; hueIncrement++) {\n    const y = diameter * hueIncrement + hueIncrement\n    const yCenter = y + radius\n\n    // heatmap style\n    let x = radius\n    const gradient = tplCtx.createRadialGradient(\n      x,\n      yCenter,\n      radius * blurFactor,\n      x,\n      yCenter,\n      radius\n    )\n    const hue = hueIncrementToHue(hueIncrement)\n    const rgbString = hueToRgbString(hue)\n    gradient.addColorStop(0, rgbString)\n\n    const rgbOuter = hsvToRgb(wrapHue(hue + 30), 80, 100)\n    gradient.addColorStop(1, `rgba(${rgbOuter.r}, ${rgbOuter.g}, ${rgbOuter.b}, 0)`)\n\n    tplCtx.fillStyle = gradient\n    tplCtx.fillRect(0, y, diameter, diameter)\n\n    // circle style\n    x += diameter + 1 // tiny offset between 2 frames\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n\n    // bullseye style\n    x += diameter + 1\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.4, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.95, 0, 2 * Math.PI, false)\n    tplCtx.lineWidth = 1\n    tplCtx.strokeStyle = rgbString\n    tplCtx.stroke()\n  }\n\n  return tplCanvas\n}\n\nclass ActivityLayers extends BaseControl {\n  state = {\n    pixiReady: false,\n  }\n\n  componentDidMount() {\n    this._build()\n    this.setState({\n      pixiReady: true,\n    })\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.props.exportNativeViewport(this._context.viewport)\n\n    if (\n      nextProps.viewport.width !== this.props.viewport.width ||\n      nextProps.viewport.height !== this.props.viewport.height\n    ) {\n      this._updateViewportSize(nextProps.viewport.width, nextProps.viewport.height)\n    }\n  }\n\n  _build() {\n    const { width, height } = this.props.viewport\n\n    this.pixi = new PIXI.Application({\n      width,\n      height,\n      transparent: true,\n      antialias: true,\n    })\n\n    this.renderer = this.pixi.renderer\n    this.canvas = this.pixi.view\n    this.canvas.style.position = 'absolute'\n\n    this.container.appendChild(this.canvas)\n\n    this.stage = this.pixi.stage\n\n    const baseTextureCanvas = getVesselTexture(VESSELS_BASE_RADIUS, VESSELS_HEATMAP_BLUR_FACTOR)\n    this.baseTexture = PIXI.Texture.fromCanvas(baseTextureCanvas)\n\n    this.heatmapStage = new PIXI.Container()\n    this.stage.addChild(this.heatmapStage)\n\n    this.pixi.ticker.add(this._onTick)\n  }\n\n  _destroy() {\n    this.pixi.destroy()\n  }\n\n  _updateViewportSize(viewportWidth, viewportHeight) {\n    this.renderer.resize(viewportWidth, viewportHeight)\n  }\n\n  toggleHeatmapDimming(dim) {\n    if (this.heatmapStage === undefined) {\n      return\n    }\n    if (dim === true) {\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = dim === true ? VESSELS_HEATMAP_DIMMING_ALPHA : 1\n  }\n\n  onTouchStart = (event) => {\n    if (!event.touches.length) {\n      return\n    }\n    this.queryCoords(event.touches[0].clientX, event.touches[0].clientY)\n  }\n\n  onMouseMove = (event) => {\n    this.queryCoords(event.clientX, event.clientY)\n  }\n\n  queryCoords(x, y) {\n    // bail if all heatmap layers are set to non-interactive\n    if (this.props.heatmapLayers.every((l) => l.interactive !== true)) {\n      return\n    }\n\n    const { viewport } = this._context\n    const [longitude, latitude] = viewport.unproject([x, y])\n\n    let wrappedLongitude = longitude\n    if (wrappedLongitude > 180) {\n      wrappedLongitude -= 360\n    } else if (wrappedLongitude < -180) {\n      wrappedLongitude += 360\n    }\n\n    const [worldX, worldY] = lngLatToWorld([wrappedLongitude, latitude], 1)\n\n    const toleranceRadiusInWorldUnits = VESSEL_CLICK_TOLERANCE_PX / viewport.scale\n\n    this.props.queryHeatmapVessels(\n      {\n        longitude: wrappedLongitude,\n        latitude,\n        worldX,\n        worldY,\n        toleranceRadiusInWorldUnits,\n      },\n      this.props.temporalExtentIndexes\n    )\n  }\n\n  _onTick = () => {\n    if (this.heatmapFadingIn === true && this.heatmapStage.alpha < 1) {\n      this._heatmapFadeinStep()\n    }\n  }\n\n  _startHeatmapFadein() {\n    this.heatmapFadingIn = true\n    this.heatmapFadeinStartTimestamp = undefined\n  }\n\n  _heatmapFadeinStep() {\n    if (this.heatmapFadeinStartTimestamp === undefined) {\n      this.heatmapFadeinStartTimestamp = Date.now()\n    }\n    const timeElapsed = (Date.now() - this.heatmapFadeinStartTimestamp) / 1000\n    let alpha = this.heatmapStage.alpha + (1 - this.heatmapStage.alpha) * timeElapsed\n    if (alpha >= 1) {\n      alpha = 1\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = alpha\n  }\n\n  // FIXME move to container?\n  _getHighlightData(highlightedVessels, highlightedClickedVessel, heatmapLayers) {\n    const hue = ACTIVITY_HIGHLIGHT_HUE\n    let highlightLayerData = {\n      id: '__HIGHLIGHT__',\n      visible: true,\n      opacity: 1,\n      hue: ACTIVITY_HIGHLIGHT_HUE,\n    }\n    let highlightFilters = []\n\n    if (\n      highlightedVessels !== undefined &&\n      highlightedVessels.layer !== undefined &&\n      highlightedVessels.foundVessels !== undefined &&\n      highlightedVessels.isEmpty !== true\n    ) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedVessels.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = highlightedVessels.foundVessels.map((vessel) => ({\n        hue,\n        filterValues: {\n          series: [vessel.series],\n        },\n      }))\n    } else if (highlightedClickedVessel !== null) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedClickedVessel.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = [\n        {\n          hue,\n          filterValues: {\n            series: [highlightedClickedVessel.id],\n          },\n        },\n      ]\n    }\n    return {\n      highlightLayerData,\n      highlightFilters,\n    }\n  }\n  _render() {\n    const {\n      zoom,\n      heatmapLayers,\n      temporalExtentIndexes,\n      highlightTemporalExtentIndexes,\n      highlightedVessels,\n      highlightedClickedVessel,\n      tracks,\n      leftWorldScaled,\n      rightWorldScaled,\n    } = this.props\n    const { viewport } = this._context\n    const { pixiReady } = this.state\n\n    const startIndex = temporalExtentIndexes[0]\n    const endIndex = temporalExtentIndexes[1]\n    const useRadialGradientStyle = shouldUseRadialGradientStyle(zoom)\n\n    if (highlightedVessels.isEmpty !== true) {\n      this.toggleHeatmapDimming(true)\n    }\n    if (highlightedVessels.isEmpty === true && tracks.length === 0) {\n      this._startHeatmapFadein()\n    }\n    if (this.renderer && this.renderer.gl && this.renderer.gl.getError !== undefined) {\n      const err = this.renderer.gl.getError()\n      if (err !== 0) console.log(err)\n    }\n\n    const { highlightLayerData, highlightFilters } = this._getHighlightData(\n      highlightedVessels,\n      highlightedClickedVessel,\n      heatmapLayers\n    )\n\n    return (\n      <div\n        ref={(ref) => {\n          this.container = ref\n        }}\n        style={{ position: 'absolute' }}\n        onMouseMove={this.onMouseMove}\n        onTouchStart={this.onTouchStart}\n      >\n        {pixiReady === true && (\n          <Fragment>\n            {heatmapLayers.map((layer) => (\n              <HeatmapLayer\n                key={layer.id}\n                layer={layer}\n                filters={layer.filters || []}\n                viewport={viewport}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                baseTexture={this.baseTexture}\n                rootStage={this.heatmapStage}\n                useRadialGradientStyle={useRadialGradientStyle}\n                customRenderingStyle={{}}\n                viewportLeft={leftWorldScaled}\n                viewportRight={rightWorldScaled}\n              />\n            ))}\n            {this.stage !== undefined && (\n              <HeatmapLayer\n                key=\"highlighted\"\n                layer={highlightLayerData}\n                filters={highlightFilters}\n                viewport={viewport}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                baseTexture={this.baseTexture}\n                rootStage={this.heatmapStage}\n                useRadialGradientStyle={useRadialGradientStyle}\n                customRenderingStyle={{ defaultOpacity: 1, defaultSize: 1 }}\n                viewportLeft={leftWorldScaled}\n                viewportRight={rightWorldScaled}\n              />\n            )}\n            {this.stage !== undefined && (\n              <TracksLayer\n                tracks={tracks}\n                viewport={viewport}\n                zoom={zoom}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                highlightTemporalExtentIndexes={highlightTemporalExtentIndexes}\n                rootStage={this.stage}\n              />\n            )}\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nActivityLayers.propTypes = {\n  zoom: PropTypes.number,\n  heatmapLayers: PropTypes.array,\n  temporalExtentIndexes: PropTypes.array,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  highlightedVessels: PropTypes.object,\n  highlightedClickedVessel: PropTypes.object,\n  tracks: PropTypes.array,\n  queryHeatmapVessels: PropTypes.func,\n  exportNativeViewport: PropTypes.func,\n  leftWorldScaled: PropTypes.number,\n  rightWorldScaled: PropTypes.number,\n}\n\nActivityLayers.contextTypes = {\n  viewport: PropTypes.object,\n}\n\nexport default ActivityLayers\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport convert from '@globalfishingwatch/map-convert'\nimport { exportNativeViewport } from '../glmap/viewport.actions'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\nimport ActivityLayers from './ActivityLayers'\nimport { queryHeatmapVessels } from '../heatmap/heatmapTiles.actions'\nimport { MIN_FRAME_LENGTH_MS } from '../config'\n\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\n\nconst getHeatmapLayersAsArray = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    const a = Object.keys(heatmapLayers).map((id) => ({\n      ...heatmapLayers[id],\n    }))\n    // console.log(a)\n    return a\n  }\n)\n\nconst getTracks = (state) => state.map.tracks.data\n\nconst getTracksWithData = createSelector(\n  [getTracks],\n  (tracks) => {\n    const tracksWithData = tracks\n      .filter((t) => t.type !== 'geojson')\n      .filter((t) => t.data !== undefined)\n    return tracksWithData\n  }\n)\n\nconst getTemporalExtentIndexes = createSelector(\n  [getTemporalExtent],\n  (temporalExtent) => {\n    const startTimestamp = temporalExtent[0].getTime()\n    const endTimestamp = Math.max(\n      temporalExtent[1].getTime(),\n      temporalExtent[0].getTime() + MIN_FRAME_LENGTH_MS\n    )\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst getHighlightTemporalExtentIndexes = createSelector(\n  [getHighlightTemporalExtent],\n  (highlightTemporalExtent) => {\n    if (\n      highlightTemporalExtent === undefined ||\n      highlightTemporalExtent === null ||\n      !highlightTemporalExtent.length\n    ) {\n      return null\n    }\n    const startTimestamp = highlightTemporalExtent[0].getTime()\n    const endTimestamp = highlightTemporalExtent[1].getTime()\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst mapStateToProps = (state) => ({\n  highlightedVessels: state.map.heatmap.highlightedVessels,\n  highlightedClickedVessel: state.map.heatmap.highlightedClickedVessel,\n  viewport: state.map.viewport.viewport,\n  zoom: state.map.viewport.viewport.zoom,\n  heatmapLayers: getHeatmapLayersAsArray(state),\n  tracks: getTracksWithData(state),\n  leftWorldScaled: state.map.viewport.leftWorldScaled,\n  rightWorldScaled: state.map.viewport.rightWorldScaled,\n  temporalExtentIndexes: getTemporalExtentIndexes(state),\n  highlightTemporalExtentIndexes: getHighlightTemporalExtentIndexes(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  queryHeatmapVessels: (coords, temporalExtentIndexes) => {\n    dispatch(queryHeatmapVessels(coords, temporalExtentIndexes))\n  },\n  exportNativeViewport: (viewport) => {\n    dispatch(exportNativeViewport(viewport))\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActivityLayers)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport MapGL, { Popup, Marker } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { TILES_URL_NEEDING_AUTHENTICATION } from '../config'\nimport ActivityLayers from '../activity/ActivityLayers.container.js'\nimport styles from './map.css'\n\nconst PopupWrapper = (props) => {\n  const { latitude, longitude, children, closeButton, onClose } = props\n  return (\n    <Popup\n      latitude={latitude}\n      longitude={longitude}\n      closeButton={closeButton}\n      onClose={onClose}\n      anchor=\"bottom\"\n      offsetTop={-10}\n      tipSize={4}\n      closeOnClick={false}\n    >\n      {children}\n    </Popup>\n  )\n}\n\nPopupWrapper.propTypes = {\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  children: PropTypes.node.isRequired,\n  closeButton: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n}\n\nPopupWrapper.defaultProps = {\n  onClose: () => {},\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: true,\n    }\n    this._mapContainerRef = null\n  }\n\n  componentDidMount() {\n    if (this._mapContainerRef !== null) {\n      this.loadObserver()\n    }\n    this.setBounds()\n  }\n\n  componentDidUpdate() {\n    this.setBounds()\n  }\n\n  onLoad = () => {\n    if (this.props.onLoad !== undefined) {\n      this.props.onLoad(this.getBounds())\n    }\n  }\n\n  setBounds = () => {\n    const bounds = this.getBounds()\n    if (bounds !== null && this.props.setBounds !== undefined) {\n      this.props.setBounds(bounds)\n    }\n  }\n\n  getBounds = () => {\n    if (!this.glMap) return null\n\n    const { _ne, _sw } = this.glMap.getBounds()\n    return {\n      north: _ne.lat,\n      south: _sw.lat,\n      west: _sw.lng,\n      east: _ne.lng,\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._containerResizeObserver) {\n      this._containerResizeObserver.disconnect()\n    }\n  }\n\n  loadObserver = async () => {\n    if ('ResizeObserver' in window === false) {\n      const module = await import('resize-observer-polyfill')\n      window.ResizeObserver = module.ResizeObserver || module.default\n    }\n    this._containerResizeObserver = new ResizeObserver(this.handleResizeObserver)\n    this._containerResizeObserver.observe(this._mapContainerRef)\n  }\n\n  handleResizeObserver = (entries) => {\n    const { width, height } = entries[0].contentRect\n    const { viewport, setViewport } = this.props\n\n    if (width !== viewport.width || height !== viewport.height) {\n      setViewport({\n        ...viewport,\n        width,\n        height,\n      })\n    }\n  }\n\n  onViewportChange = (viewport, interactionState) => {\n    const propsViewport = this.props.viewport\n    if (\n      propsViewport.latitude !== viewport.latitude ||\n      propsViewport.longitude !== viewport.longitude ||\n      propsViewport.zoom !== viewport.zoom ||\n      propsViewport.bearing !== viewport.bearing ||\n      propsViewport.pitch !== viewport.pitch\n    ) {\n      this.props.setViewport(viewport, interactionState)\n    }\n  }\n\n  onMapInteraction = (event, type) => {\n    this.props.mapInteraction(\n      type,\n      event.lngLat[1],\n      event.lngLat[0],\n      event.features,\n      this.glGetSource\n    )\n  }\n\n  onHover = (event) => {\n    this.onMapInteraction(event, 'hover')\n  }\n\n  onClick = (event) => {\n    this.onMapInteraction(event, 'click')\n  }\n\n  getRef = (ref) => {\n    if (ref !== null) {\n      this.glMap = ref.getMap()\n      this.glGetSource = this.glMap.getSource.bind(this.glMap)\n    }\n  }\n\n  getCursor = ({ isDragging }) => {\n    const { cursor } = this.props\n    if (cursor === null) {\n      return isDragging ? 'grabbing' : 'grab'\n    }\n    return cursor\n  }\n\n  transformRequest = (url, resourceType) => {\n    const { token } = this.props\n    if (token !== null && resourceType === 'Tile' && url.match(TILES_URL_NEEDING_AUTHENTICATION)) {\n      return {\n        url: url,\n        headers: { Authorization: 'Bearer ' + token },\n      }\n    }\n  }\n\n  render() {\n    const {\n      viewport,\n      maxZoom,\n      minZoom,\n      transitionEnd,\n      mapStyle,\n      onClosePopup,\n      clickPopup,\n      hoverPopup,\n      hasHeatmapLayers,\n      markers,\n      interactiveLayerIds,\n    } = this.props\n\n    return (\n      <div\n        id=\"map\"\n        className={styles.map}\n        ref={(ref) => {\n          this._mapContainerRef = ref\n        }}\n        onMouseLeave={() => {\n          this.setState({ mouseOver: false })\n        }}\n        onMouseEnter={() => {\n          this.setState({ mouseOver: true })\n        }}\n      >\n        <MapGL\n          {...viewport}\n          ref={this.getRef}\n          transformRequest={this.transformRequest}\n          onTransitionEnd={transitionEnd}\n          onLoad={this.onLoad}\n          onHover={this.onHover}\n          onClick={this.onClick}\n          getCursor={this.getCursor}\n          mapStyle={mapStyle}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          onViewportChange={this.onViewportChange}\n          interactiveLayerIds={interactiveLayerIds}\n          clickRadius={4}\n        >\n          {hasHeatmapLayers !== false && <ActivityLayers />}\n          {clickPopup !== undefined && clickPopup !== null && (\n            <PopupWrapper\n              latitude={clickPopup.latitude}\n              longitude={clickPopup.longitude}\n              closeButton\n              onClose={onClosePopup}\n            >\n              {clickPopup.content}\n            </PopupWrapper>\n          )}\n          {this.state.mouseOver === true && hoverPopup !== undefined && hoverPopup !== null && (\n            <PopupWrapper\n              latitude={hoverPopup.latitude}\n              longitude={hoverPopup.longitude}\n              closeButton={false}\n            >\n              {hoverPopup.content}\n            </PopupWrapper>\n          )}\n          {markers !== null &&\n            markers.length > 0 &&\n            markers.map((marker, i) => (\n              <Marker key={i} latitude={marker.latitude} longitude={marker.longitude}>\n                {marker.content}\n              </Marker>\n            ))}\n        </MapGL>\n        <div className={styles.googleLogo} />\n      </div>\n    )\n  }\n}\n\nMap.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.object.isRequired,\n  mapStyle: PropTypes.object.isRequired,\n  clickPopup: PropTypes.object,\n  hoverPopup: PropTypes.object,\n  maxZoom: PropTypes.number.isRequired,\n  minZoom: PropTypes.number.isRequired,\n  setViewport: PropTypes.func.isRequired,\n  setBounds: PropTypes.func,\n  mapInteraction: PropTypes.func,\n  onLoad: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  transitionEnd: PropTypes.func,\n  cursor: PropTypes.string,\n  hasHeatmapLayers: PropTypes.bool.isRequired,\n  markers: PropTypes.arrayOf(\n    PropTypes.shape({\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n      content: PropTypes.node,\n    })\n  ),\n  interactiveLayerIds: PropTypes.arrayOf(PropTypes.string),\n}\n\nMap.defaultProps = {\n  token: null,\n  clickPopup: null,\n  hoverPopup: null,\n  mapInteraction: () => {},\n  onLoad: () => {},\n  onClosePopup: () => {},\n  transitionEnd: () => {},\n  cursor: null,\n  markers: null,\n  interactiveLayerIds: null,\n  setBounds: undefined,\n}\n\nexport default Map\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { fromJS } from 'immutable'\nimport { TRACKS_LAYER_IN_FRONT_OF_GROUP } from '../config'\nimport { closePopup } from '../module/module.actions.js'\nimport { getTracksStyles } from '../tracks/tracks.selectors.js'\nimport { mapInteraction } from './interaction.actions.js'\nimport { setBounds, setViewport, transitionEnd } from './viewport.actions.js'\nimport Map from './Map'\n\nconst getStaticLayers = (state) => state.map.style.staticLayers\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\nconst getInternalCursor = (state) => state.map.interaction.cursor\nconst getModuleCursor = (state) => state.map.module.cursor\n\nconst hasHeatmapLayers = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    return Object.keys(heatmapLayers).length > 0\n  }\n)\nconst getInteractiveLayerIds = createSelector(\n  [getStaticLayers],\n  // Note: here we assume that layer IDs provided with module match the GL layers that should\n  // be interactive or not, ie typically the fill layer if a label layer is present\n  (staticLayers) => {\n    return staticLayers.reduce((acc, layer) => {\n      if (!layer.interactive || !layer.visible) return acc\n      // We also need to check nested layers interactivity when custom gl layers are provided\n      if (layer.gl !== undefined) {\n        layer.gl.layers.forEach((glLayer, index) => {\n          // layers.length === 1 is used to ensure when parent layer is marked as interactive we have to\n          // have at least one interactive sublayer, then checked eah one individually\n          if (\n            layer.gl.layers.length === 1 ||\n            (glLayer.metadata !== undefined && glLayer.metadata['gfw:interactive'] === true)\n          ) {\n            const glLayerId = glLayer.id || index > 0 ? `${layer.id}-${index}` : layer.id\n            acc.push(glLayerId)\n          }\n        })\n      } else {\n        acc.push(layer.id)\n      }\n      return acc\n    }, [])\n  }\n)\n\nconst getMapStyles = (state) => state.map.style.mapStyle\nconst getMapStyle = createSelector(\n  [getMapStyles, getTracksStyles],\n  (mapStyles, trackStyles) => {\n    if (!trackStyles) return mapStyles\n\n    const currentLayerGroups = mapStyles\n      .toJS()\n      .layers.filter((l) => l.metadata !== undefined)\n      .map((l) => l.metadata['mapbox:group'])\n    const trackLayersIndex = currentLayerGroups.lastIndexOf(TRACKS_LAYER_IN_FRONT_OF_GROUP) + 1\n\n    let finalMapStyles = mapStyles.mergeIn(['sources'], trackStyles.sources)\n    let mapStylesLayers = mapStyles.get('layers')\n    trackStyles.layers.forEach((trackLayer, i) => {\n      mapStylesLayers = mapStylesLayers.insert(trackLayersIndex + i, fromJS(trackLayer))\n    })\n    finalMapStyles = finalMapStyles.set('layers', mapStylesLayers)\n    return finalMapStyles\n  }\n)\n\nconst getCursor = createSelector(\n  [getInternalCursor, getModuleCursor],\n  (internalCursor, moduleCursor) => {\n    if (moduleCursor !== null) {\n      return moduleCursor\n    }\n    return internalCursor\n  }\n)\nconst mapStateToProps = (state) => ({\n  viewport: state.map.viewport.viewport,\n  maxZoom: state.map.viewport.maxZoom,\n  minZoom: state.map.viewport.minZoom,\n  onLoad: state.map.module.onLoad,\n  cursor: getCursor(state),\n  token: state.map.module.token,\n  mapStyle: getMapStyle(state),\n  hasHeatmapLayers: hasHeatmapLayers(state),\n  interactiveLayerIds: getInteractiveLayerIds(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setViewport: (viewport, interactionState) => {\n    dispatch(setViewport(viewport, interactionState))\n  },\n  setBounds: (bounds) => {\n    dispatch(setBounds(bounds))\n  },\n  mapInteraction: (type, lat, long, features, cluster, glGetSource) => {\n    dispatch(mapInteraction(type, lat, long, features, cluster, glGetSource))\n  },\n  transitionEnd: () => {\n    dispatch(transitionEnd())\n  },\n  onClosePopup: () => {\n    dispatch(closePopup())\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map)\n","import { fromJS } from 'immutable'\nimport uniq from 'lodash/uniq'\nimport GL_STYLE from './gl-styles/style.json'\nimport {\n  SET_MAP_STYLE,\n  MARK_CARTO_LAYERS_AS_INSTANCIATED,\n  INIT_MAP_STYLE,\n  SET_STATIC_LAYERS,\n  SET_BASEMAP_LAYERS,\n} from './style.actions'\n\nconst attributions = uniq(\n  Object.keys(GL_STYLE.sources)\n    .map((sourceKey) => GL_STYLE.sources[sourceKey].attribution)\n    .filter((source) => source !== undefined)\n)\n\nexport const setLayerStyleDefaults = (layer) => {\n  if (layer.layout === undefined) {\n    layer.layout = {}\n  }\n  if (layer.paint === undefined) {\n    layer.paint = {}\n  }\n  if (layer.metadata === undefined) {\n    layer.metadata = {}\n  }\n  // initialize time filter for time-filterable layers\n  if (layer.metadata['gfw:temporal'] === true) {\n    const temporalField =\n      layer.metadata['gfw:temporalField'] === undefined\n        ? 'timestamp'\n        : layer.metadata['gfw:temporalField']\n    layer.filter = ['all', ['>', temporalField, 0], ['<', temporalField, 999999999999]]\n  }\n\n  if (layer.metadata['mapbox:group'] === undefined) {\n    layer.metadata['mapbox:group'] = 'temporal'\n  }\n\n  // set all layers to not visible except layers explicitely marked as visible (default basemap)\n  if (layer.layout.visibility !== 'visible') {\n    layer.layout.visibility = 'none'\n  }\n  return layer\n}\n\nconst setStyleDefaults = (style) => {\n  style.layers.forEach((layer) => {\n    setLayerStyleDefaults(layer)\n  })\n  return style\n}\n\nconst initialState = {\n  mapStyle: fromJS(setStyleDefaults(GL_STYLE)),\n  cartoLayersInstanciated: [],\n  staticLayers: [],\n  basemapLayers: [],\n  attributions,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_MAP_STYLE: {\n      const newMapStyle = state.mapStyle.setIn(['glyphs'], action.payload.glyphsPath)\n      return { ...state, mapStyle: newMapStyle }\n    }\n    case SET_MAP_STYLE: {\n      return { ...state, mapStyle: action.payload }\n    }\n    case SET_STATIC_LAYERS: {\n      return { ...state, staticLayers: action.payload }\n    }\n    case SET_BASEMAP_LAYERS: {\n      return { ...state, basemapLayers: action.payload }\n    }\n    case MARK_CARTO_LAYERS_AS_INSTANCIATED: {\n      const cartoLayersInstanciated = [...state.cartoLayersInstanciated, ...action.payload]\n      return { ...state, cartoLayersInstanciated }\n    }\n    default:\n      return state\n  }\n}\n","// This utility looks at GeoJSON features and returns the predominant geometry type\n\nconst TYPES = [\n  { gl: 'line', geoJSON: ['LineString', 'MultiLineString'] },\n  { gl: 'fill', geoJSON: ['Polygon', 'MultiPolygon'] },\n  { gl: 'circle', geoJSON: ['Point', 'MultiPoint'] },\n]\n\nexport default (geoJSON) => {\n  // collect all geoJSON geom types\n  const allGeoJSONTypes = geoJSON.features.map((feature) => {\n    const geom = feature.geometry\n    if (geom === undefined) {\n      return null\n    }\n    return geom.type\n  })\n\n  // collect number of geometries by GL geom types\n  const numByGLType = TYPES.map((type) => {\n    let num = 0\n    allGeoJSONTypes.forEach((geoJSONType) => {\n      if (type.geoJSON.indexOf(geoJSONType) > -1) {\n        num++\n      }\n    })\n    return { gl: type.gl, num }\n  })\n\n  // get feature types with the higher count\n  let glType = 'fill'\n  let glTypeMax = 0\n  numByGLType.forEach((t) => {\n    if (t.num > glTypeMax) {\n      glType = t.gl\n      glTypeMax = t.num\n    }\n  })\n\n  return glType\n}\n","import { fromJS } from 'immutable'\nimport convert from '@globalfishingwatch/map-convert'\nimport uniq from 'lodash/uniq'\nimport throttle from 'lodash/throttle'\nimport { hexToRgb } from '../utils/map-colors'\nimport { STATIC_LAYERS_CARTO_ENDPOINT, STATIC_LAYERS_CARTO_TILES_ENDPOINT } from '../config'\nimport { CUSTOM_LAYERS_SUBTYPES, GL_TRANSPARENT } from '../constants'\nimport GL_STYLE from './gl-styles/style.json'\nimport { setLayerStyleDefaults } from './style.reducer.js'\nimport getMainGeomType from '../utils/getMainGeomType'\n\nexport const INIT_MAP_STYLE = 'INIT_MAP_STYLE'\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE'\nexport const MARK_CARTO_LAYERS_AS_INSTANCIATED = 'MARK_CARTO_LAYERS_AS_INSTANCIATED'\nexport const SET_STATIC_LAYERS = 'SET_STATIC_LAYERS'\nexport const SET_BASEMAP_LAYERS = 'SET_BASEMAP_LAYERS'\n\nconst setDefaultVectorTiles = (currentSource, refLayerUrl) => {\n  if (currentSource.type !== 'vector') {\n    return currentSource\n  }\n  const tiles = currentSource.tiles\n  const refLayerUrls = refLayerUrl === undefined ? [] : [refLayerUrl]\n\n  const newTiles =\n    tiles !== undefined && tiles.length > 0 ? uniq([...refLayerUrls, ...tiles]) : refLayerUrls\n  return {\n    ...currentSource,\n    tiles: newTiles,\n  }\n}\n\nexport const initStyle = ({ glyphsPath }) => ({\n  type: INIT_MAP_STYLE,\n  payload: {\n    glyphsPath,\n  },\n})\n\nconst setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n})\n\nconst setStyleTemporalExtent = (dispatch, getState, temporalExtent, applyToThrottled = false) => {\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n\n  let start = Math.round(temporalExtent[0].getTime() / 1000)\n  let end = Math.round(temporalExtent[1].getTime() / 1000)\n\n  // TEMPORARY, remove later - temporal layers points should have a timestamp, this is legacy\n  // logic for legacy encounters layer that only have a 'timeIndex'\n  const startIndex = convert.getOffsetedTimeAtPrecision(temporalExtent[0].getTime())\n  const endIndex = convert.getOffsetedTimeAtPrecision(temporalExtent[1].getTime())\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    if (glLayer.metadata === undefined || glLayer.metadata['gfw:temporal'] !== true) {\n      continue\n    }\n\n    if (\n      (applyToThrottled === true && glLayer.metadata['gfw:temporal:throttled'] !== true) ||\n      (applyToThrottled === false && glLayer.metadata['gfw:temporal:throttled'] === true)\n    ) {\n      continue\n    }\n\n    // if layer is temporal, a filter must always be preset on the style.json object\n    // because each layer can have a different time field to be filtered\n    const currentFilter = style.getIn(['layers', i, 'filter']).toJS()\n    if (currentFilter === null) {\n      throw new Error('filter must be preset on style.json for temporal layer: ', glLayer.id)\n    }\n\n    // TEMPORARY, remove later - temporal layers points should have a timestamp, this is legacy\n    // logic for legacy encounters layer that only have a 'timeIndex'\n    const isLegacy = glLayer.metadata && glLayer.metadata['gfw:temporalField'] === 'timeIndex'\n    currentFilter[1][2] = isLegacy ? startIndex : start\n    currentFilter[2][2] = isLegacy ? endIndex : end\n    style = style.setIn(['layers', i, 'filter'], fromJS(currentFilter))\n  }\n  dispatch(setMapStyle(style))\n}\n\nconst applyTemporalExtentThrottled = throttle((dispatch, getState, temporalExtent) => {\n  setStyleTemporalExtent(dispatch, getState, temporalExtent, true)\n}, 400)\n\nexport const applyTemporalExtent = (temporalExtent) => (dispatch, getState) => {\n  setStyleTemporalExtent(dispatch, getState, temporalExtent)\n  applyTemporalExtentThrottled(dispatch, getState, temporalExtent)\n}\n\nconst applyLayerExpressions = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  let newStyle = style\n  const currentStyle = style.toJS()\n  const glType = currentGlLayer.type\n  const defaultStyles = currentStyle.metadata['gfw:styles']\n  const metadata = currentGlLayer.metadata\n  ;['selected', 'highlighted'].forEach((styleType) => {\n    // get selectedFeatures or highlightedFeatures\n    const features = refLayer[`${styleType}Features`]\n    const refLayerStyle = features && features.style ? features.style[glType] : {}\n    const hasFeatures = features !== null && features !== undefined && features.values.length > 0\n    const applyStyleToAllFeatures = refLayer[styleType]\n\n    const defaultStyle = defaultStyles[styleType][glType] || {}\n    const layerStyle =\n      (metadata && metadata['gfw:styles'] && metadata['gfw:styles'][styleType]) || {}\n    const allPaintProperties = { ...defaultStyle, ...layerStyle, ...refLayerStyle }\n\n    if (Object.keys(allPaintProperties).length) {\n      // go through each applicable gl paint property\n      Object.keys(allPaintProperties).forEach((glPaintProperty) => {\n        const selectedValue = allPaintProperties[glPaintProperty][0]\n        const fallbackValue = allPaintProperties[glPaintProperty][1]\n        const paintOrLayout = ['icon-size', 'icon-image'].includes(glPaintProperty)\n          ? 'layout'\n          : 'paint'\n        let glPaintFinalValue\n        if (\n          hasFeatures === false &&\n          applyStyleToAllFeatures !== true &&\n          applyStyleToAllFeatures !== false\n        ) {\n          // style reset when no features filter is declared and neither is applyAll\n          const originalLayerStyle = GL_STYLE.layers.find((l) => l.id === currentGlLayer.id)\n\n          if (originalLayerStyle !== undefined) {\n            // for reset: do not repaint with default style when layer as a custom main color property\n            if (\n              currentGlLayer.metadata &&\n              currentGlLayer.metadata['gfw:mainColorPaintProperty'] === glPaintProperty\n            ) {\n              glPaintFinalValue = null\n            } else {\n              glPaintFinalValue = originalLayerStyle[paintOrLayout][glPaintProperty]\n            }\n          } else {\n            // this will happen when no style exist in the original definition (ie custom layers)\n            // in this case set glPaintFinalValue to null and we'll just skip applying\n            // any selected/highlighted style for this layer\n            glPaintFinalValue = null\n          }\n        } else if (applyStyleToAllFeatures === true || applyStyleToAllFeatures === false) {\n          glPaintFinalValue = applyStyleToAllFeatures === true ? selectedValue : fallbackValue\n        } else {\n          let layerColorRgbString = ''\n          if (refLayer.color !== null && refLayer.color !== undefined) {\n            const layerColorRgb = hexToRgb(refLayer.color)\n            layerColorRgbString = `${layerColorRgb.r},${layerColorRgb.g},${layerColorRgb.b}`\n          }\n          glPaintFinalValue = [\n            'match',\n            ['get', features.field],\n            features.values,\n            typeof selectedValue !== 'string'\n              ? selectedValue\n              : selectedValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n            typeof fallbackValue !== 'string'\n              ? fallbackValue\n              : fallbackValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n          ]\n        }\n\n        if (glPaintFinalValue !== undefined && glPaintFinalValue !== null) {\n          newStyle = newStyle.setIn(\n            ['layers', glLayerIndex, paintOrLayout, glPaintProperty],\n            glPaintFinalValue\n          )\n        }\n      })\n    }\n  })\n  return newStyle\n}\n\nconst toggleLayerVisibility = (style, refLayer, glLayerIndex) => {\n  const visibility = refLayer.visible === true ? 'visible' : 'none'\n  return style.setIn(['layers', glLayerIndex, 'layout', 'visibility'], visibility)\n}\n\nconst updateGLLayer = (style, glLayerId, refLayer) => {\n  const currentStyle = style.toJS()\n  const currentStyleLayers = currentStyle.layers\n  let newStyle = style\n\n  const glLayerIndex = currentStyleLayers.findIndex((l) => l.id === glLayerId)\n  const glLayer = currentStyleLayers.find((l) => l.id === glLayerId)\n\n  // visibility\n  newStyle = toggleLayerVisibility(newStyle, refLayer, glLayerIndex)\n\n  if (refLayer.isBasemap === true) {\n    return newStyle\n  }\n\n  const refLayerOpacity = refLayer.opacity === undefined ? 1 : refLayer.opacity\n\n  // color/opacity\n  switch (glLayer.type) {\n    case 'fill': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-outline-color'], refLayer.color)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-color'], GL_TRANSPARENT)\n      break\n    }\n    case 'line': {\n      const color = refLayer.color || (glLayer.paint && glLayer.paint['line-color'])\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'line-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'line-color'], color)\n      break\n    }\n    case 'symbol': {\n      if (glLayer.metadata && glLayer.metadata['gfw:isLabel'] === true) {\n        const parentLayerIsVisible =\n          newStyle.getIn(['layers', glLayerIndex, 'layout', 'visibility']) === 'visible'\n        const labelsVisibility =\n          parentLayerIsVisible && refLayer.showLabels === true ? 'visible' : 'none'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'layout', 'visibility'],\n          labelsVisibility\n        )\n        if (refLayer.showLabels !== true) {\n          break\n        }\n      }\n      newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-color'], refLayer.color)\n      }\n      break\n    }\n    // Event layers and custom layers with point geom types\n    case 'circle': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-stroke-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        const colorPaintProperty =\n          glLayer && glLayer.metadata && glLayer.metadata['gfw:mainColorPaintProperty']\n            ? glLayer.metadata['gfw:mainColorPaintProperty']\n            : 'circle-color'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'paint', colorPaintProperty],\n          refLayer.color\n        )\n      }\n      break\n    }\n    case 'raster': {\n      newStyle = newStyle.setIn(\n        ['layers', glLayerIndex, 'paint', 'raster-opacity'],\n        refLayerOpacity\n      )\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  newStyle = applyLayerExpressions(newStyle, refLayer, glLayer, glLayerIndex)\n\n  return newStyle\n}\n\nconst addCustomGLLayer = (subtype, layerId, url, data) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n  const currentStyle = style.toJS()\n\n  // add source if it doesn't exist yet\n  if (currentStyle.sources[layerId] === undefined) {\n    const source = { type: subtype }\n    if (subtype === CUSTOM_LAYERS_SUBTYPES.geojson) {\n      source.data = data\n    } else if (subtype === CUSTOM_LAYERS_SUBTYPES.raster) {\n      source.tiles = [url]\n      source.tileSize = 256\n    }\n    style = style.setIn(['sources', layerId], fromJS(source))\n  }\n\n  if (currentStyle.layers.find((glLayer) => glLayer.id === layerId) === undefined) {\n    const glType = subtype === CUSTOM_LAYERS_SUBTYPES.geojson ? getMainGeomType(data) : subtype\n    const glLayer = fromJS({\n      id: layerId,\n      source: layerId,\n      type: glType,\n      layout: {},\n      paint: {},\n    })\n    const layerIndex =\n      subtype === CUSTOM_LAYERS_SUBTYPES.raster\n        ? // if raster, put at index of last raster layer except labels\n          currentStyle.layers.length -\n          1 -\n          currentStyle.layers\n            .filter((l) => l.id !== 'labels')\n            .reverse()\n            .findIndex((l) => l.type === 'raster')\n        : currentStyle.layers.length - 1\n    style = style.set('layers', style.get('layers').splice(layerIndex, 0, glLayer))\n  }\n\n  dispatch(setMapStyle(style))\n}\n\nconst updateWorkspaceGLLayers = (workspaceGLLayers) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n\n  workspaceGLLayers.forEach((workspaceGLLayer) => {\n    const { id, gl } = workspaceGLLayer\n    const finalSource = setDefaultVectorTiles(gl.source, workspaceGLLayer.url)\n    style = style.setIn(['sources', id], fromJS(finalSource))\n\n    const existingLayerIds = style\n      .get('layers')\n      .toJS()\n      .map((l) => l.id)\n    const layersToAdd = gl.layers.filter((layer, index) => {\n      const layerId = layer.id || index > 0 ? `${id}-${index}` : id\n      return !existingLayerIds.includes(layerId)\n    })\n    layersToAdd.forEach((layerToAdd, index) => {\n      // doesn't add a sufix in the first elements but it will for the following ones\n      let layerToAddId = layerToAdd.id || index > 0 ? `${id}-${index}` : id\n      const defaultGlLayer = setLayerStyleDefaults(layerToAdd)\n\n      const glLayer = {\n        ...defaultGlLayer,\n        id: layerToAddId,\n        source: id,\n      }\n\n      // set source-layer - defaults to source id\n      if (gl.source.type === 'vector') {\n        const sourceLayer =\n          layerToAdd['source-layer'] === undefined ? id : layerToAdd['source-layer']\n        glLayer['source-layer'] = sourceLayer\n      }\n\n      // find correct z-index\n      const existingLayers = style.get('layers')\n      const newLayerGroup = glLayer.metadata['mapbox:group']\n      const newLayerIndex = existingLayers.findLastIndex((l) => {\n        return newLayerGroup === l.toJS().metadata['mapbox:group']\n      })\n      style = style.set('layers', existingLayers.splice(newLayerIndex, 0, fromJS(glLayer)))\n    })\n  })\n\n  dispatch(setMapStyle(style))\n  dispatch(applyTemporalExtent(state.map.module.temporalExtent))\n}\n\nconst getCartoLayerInstanciatePromise = ({ sourceId, sourceCartoSQL }) => {\n  const mapConfig = { layers: [{ id: sourceId, options: { sql: sourceCartoSQL } }] }\n  const mapConfigURL = encodeURIComponent(JSON.stringify(mapConfig))\n  const cartoAnonymousMapUrl = STATIC_LAYERS_CARTO_ENDPOINT.replace('$MAPCONFIG', mapConfigURL)\n\n  return new Promise((resolve) => {\n    fetch(cartoAnonymousMapUrl)\n      .then((res) => {\n        if (res.status >= 400) {\n          console.warn(`loading of layer failed ${sourceId}`)\n          Promise.reject()\n          return null\n        }\n        return res.json()\n      })\n      .then((data) => {\n        resolve({\n          layergroupid: data.layergroupid,\n          sourceId,\n        })\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  })\n}\n\nconst instanciateCartoLayers = (layers) => (dispatch, getState) => {\n  dispatch({\n    type: MARK_CARTO_LAYERS_AS_INSTANCIATED,\n    payload: layers.map((layer) => layer.sourceId),\n  })\n  const cartoLayersPromises = layers.map((layer) => getCartoLayerInstanciatePromise(layer))\n  const cartoLayersPromisesPromise = Promise.all(cartoLayersPromises.map((p) => p.catch((e) => e)))\n  cartoLayersPromisesPromise\n    .then((instanciatedCartoLayers) => {\n      let style = getState().map.style.mapStyle\n      const currentStyle = style.toJS()\n      instanciatedCartoLayers.forEach((cartoLayer) => {\n        const tilesURL = STATIC_LAYERS_CARTO_TILES_ENDPOINT.replace(\n          '$LAYERGROUPID',\n          cartoLayer.layergroupid\n        )\n\n        // replace gl source with a new source that use tiles provided by Carto anonymous maps API\n        const newSourceId = `${cartoLayer.sourceId}-instanciated`\n        style = style.setIn(\n          ['sources', newSourceId],\n          fromJS({\n            type: 'vector',\n            tiles: [tilesURL],\n          })\n        )\n\n        style = style.deleteIn(['sources', cartoLayer.sourceId])\n\n        // change source in all layers that are using it (generally polygon + labels)\n        currentStyle.layers.forEach((glLayer, glLayerIndex) => {\n          if (glLayer.source === cartoLayer.sourceId) {\n            style = style.setIn(['layers', glLayerIndex, 'source'], newSourceId)\n            style = style.setIn(['layers', glLayerIndex, 'metadata', 'gfw:id'], cartoLayer.sourceId)\n            const refLayer = layers.find((l) => l.refLayer.id === cartoLayer.sourceId).refLayer\n            style = updateGLLayer(style, glLayer.id, refLayer)\n          }\n        })\n      })\n\n      dispatch(setMapStyle(style))\n    })\n    .catch((err) => {\n      console.warn(err)\n    })\n}\n\nexport const commitStyleUpdates = (staticLayers, basemapLayers) => (dispatch, getState) => {\n  // Store a copy of static and basemap layers. This is not used directly by\n  // the Map component which only needs a prepared style object\n  dispatch({\n    type: SET_STATIC_LAYERS,\n    payload: staticLayers,\n  })\n  dispatch({\n    type: SET_BASEMAP_LAYERS,\n    payload: basemapLayers,\n  })\n\n  const layers = [...staticLayers, ...basemapLayers.map((bl) => ({ ...bl, isBasemap: true }))]\n\n  const currentGLSources = getState().map.style.mapStyle.toJS().sources\n\n  // collect layers declared in workspace but not in original gl style\n  const workspaceGLLayers = layers.filter((layer) => layer.gl !== undefined)\n\n  if (workspaceGLLayers.length) {\n    // Adds the gl layers again in case the source is a dynamic geojson source\n    dispatch(updateWorkspaceGLLayers(workspaceGLLayers))\n  }\n\n  // instanciate custom layers if needed\n  const customLayers = layers.filter(\n    (layer) => layer.isCustom === true && currentGLSources[layer.id] === undefined\n  )\n  if (customLayers.length) {\n    customLayers.forEach((layer) => {\n      dispatch(addCustomGLLayer(layer.subtype, layer.id, layer.url, layer.data))\n    })\n  }\n\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n  const glSources = currentStyle.sources\n\n  const cartoLayersToInstanciate = []\n\n  // update source when needed\n  staticLayers.forEach((refLayer) => {\n    const sourceId = refLayer.id\n    if (currentGLSources[sourceId] !== undefined && refLayer.visible === true) {\n      if (refLayer.data !== undefined) {\n        style = style.setIn(['sources', sourceId, 'data'], fromJS(refLayer.data))\n      }\n      if (refLayer.url !== undefined) {\n        const newSource = setDefaultVectorTiles(currentGLSources[sourceId], refLayer.url)\n        style = style.setIn(['sources', sourceId], fromJS(newSource))\n      }\n    }\n  })\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    const sourceId = glLayer.source\n    const glSource = glSources[sourceId]\n    const layerId = (glLayer.metadata !== undefined && glLayer.metadata['gfw:id']) || sourceId\n\n    const refLayer = layers.find((l) => l.id === layerId)\n\n    if (refLayer === undefined) {\n      if (glLayer.type !== 'background') {\n        // console.warn('gl layer does not exists in workspace', glLayer);\n      }\n      continue\n    }\n\n    // check if layer is served from Carto, which means we need to instanciate it first\n    // TODO BUG: check if layer is not instanciatING too\n    const sourceCartoSQL = glSource.metadata !== undefined && glSource.metadata['gfw:carto-sql']\n    if (sourceCartoSQL !== false && sourceCartoSQL !== undefined) {\n      // only if layer is visible and has not been instanciated yet\n      const cartoLayerInstanciated = state.cartoLayersInstanciated.indexOf(sourceId) > -1\n      if (\n        refLayer.visible === true &&\n        !cartoLayerInstanciated &&\n        !cartoLayersToInstanciate.find((l) => l.sourceId === sourceId)\n      ) {\n        cartoLayersToInstanciate.push({ sourceId, sourceCartoSQL, refLayer })\n      }\n      continue\n    }\n\n    style = updateGLLayer(style, glLayer.id, refLayer)\n  }\n\n  if (cartoLayersToInstanciate.length) {\n    dispatch(instanciateCartoLayers(cartoLayersToInstanciate))\n  }\n\n  dispatch(setMapStyle(style))\n}\n","import FlyToInterpolator from 'react-map-gl/dist/esm/utils/transition/viewport-fly-to-interpolator'\nimport { easeCubic } from 'd3-ease'\nimport { MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL } from '../config'\nimport { TRANSITION_TYPE } from '../constants'\nimport {\n  SET_BOUNDS,\n  SET_VIEWPORT,\n  UPDATE_VIEWPORT,\n  SET_ZOOM_INCREMENT,\n  SET_MOUSE_LAT_LONG,\n  TRANSITION_END,\n  SET_NATIVE_VIEWPORT,\n} from './viewport.actions'\n\nexport const TRANSITION_DURATION = 500\n\nconst DEFAULT_TRANSITION = {\n  transitionDuration: TRANSITION_DURATION,\n  transitionInterpolator: new FlyToInterpolator(),\n  transitionEasing: easeCubic,\n}\n\nconst initialState = {\n  viewport: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    width: 1000,\n    height: 800,\n    bounds: {},\n  },\n  maxZoom: MAX_ZOOM_LEVEL,\n  minZoom: MIN_ZOOM_LEVEL,\n  prevZoom: 3,\n  currentTransition: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIEWPORT: {\n      return {\n        ...state,\n        viewport: action.payload,\n        canZoomIn: action.payload.zoom < state.maxZoom,\n        canZoomOut: action.payload.zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n      }\n    }\n\n    case SET_BOUNDS: {\n      return {\n        ...state,\n        bounds: action.payload,\n      }\n    }\n\n    case UPDATE_VIEWPORT: {\n      const viewport = { ...state.viewport, ...action.payload }\n      return {\n        ...state,\n        viewport,\n        prevZoom: viewport.zoom,\n      }\n    }\n\n    case SET_ZOOM_INCREMENT: {\n      const currentZoom = state.viewport.zoom\n      const zoom = Math.min(\n        state.maxZoom,\n        action.payload.zoom || currentZoom + action.payload.increment\n      )\n      const viewport = {\n        ...state.viewport,\n        ...DEFAULT_TRANSITION,\n        zoom,\n        latitude:\n          action.payload.latitude === null ? state.viewport.latitude : action.payload.latitude,\n        longitude:\n          action.payload.longitude === null ? state.viewport.longitude : action.payload.longitude,\n      }\n      return {\n        ...state,\n        viewport,\n        canZoomIn: zoom < state.maxZoom,\n        canZoomOut: zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n        currentTransition: TRANSITION_TYPE.ZOOM,\n      }\n    }\n\n    case SET_MOUSE_LAT_LONG: {\n      return { ...state, mouseLatLong: action.payload }\n    }\n\n    case TRANSITION_END: {\n      return { ...state, currentTransition: null }\n    }\n\n    case SET_NATIVE_VIEWPORT: {\n      return { ...state, ...action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n","import { compose, createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { TRANSITION_DURATION } from '../glmap/viewport.reducer'\nimport { fitToBounds as fitToBoundsAction, transitionEnd } from '../glmap/viewport.actions'\n\nlet composeEnhancers = compose\nif (\n  (process.env.MAP_REDUX_REMOTE_DEBUG || process.env.REACT_APP_MAP_REDUX_REMOTE_DEBUG) &&\n  process.env.NODE_ENV === 'development'\n) {\n  const composeWithDevTools = require('remote-redux-devtools').composeWithDevTools\n  composeEnhancers = composeWithDevTools({\n    name: 'Map module',\n    realtime: true,\n    hostname: 'localhost',\n    port: 8000,\n    maxAge: 30,\n    stateSanitizer: (state) => ({ ...state, map: { ...state.map, heatmap: 'NOT_SERIALIZED' } }),\n  })\n}\n\nconst store = createStore(() => {}, {}, composeEnhancers(applyMiddleware(thunk)))\n\nexport const targetMapVessel = (id) => {\n  const track = store.getState().map.tracks.data.find((t) => t.id === id.toString())\n  store.dispatch(fitToBoundsAction(track.geoBounds))\n\n  return track.timelineBounds\n}\nexport const fitToBounds = (bounds) => {\n  store.dispatch(fitToBoundsAction(bounds))\n  setTimeout(() => {\n    // needed as the transition end is not being called on first fitToBounds trigger\n    if (store.getState().map.viewport.currentTransition !== null) {\n      store.dispatch(transitionEnd())\n    }\n  }, TRANSITION_DURATION + 1)\n}\n\nexport default store\n","import tbbox from '@turf/bbox'\nimport { targetMapVessel } from '../store'\n\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  addTracksPointsRenderingData,\n  getTracksPlaybackData,\n} from '../utils/heatmapTileData'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_TRACK = 'ADD_TRACK'\nexport const UPDATE_TRACK = 'UPDATE_TRACK'\nexport const REMOVE_TRACK = 'REMOVE_TRACK'\n\nconst getTrackDataParsed = (geojson) => {\n  const time = { start: Infinity, end: 0 }\n  if (geojson && geojson.features) {\n    geojson.features.forEach((feature) => {\n      const hasTimes =\n        feature.properties &&\n        feature.properties.coordinateProperties &&\n        feature.properties.coordinateProperties.times &&\n        feature.properties.coordinateProperties.times.length > 0\n      if (hasTimes) {\n        feature.properties.coordinateProperties.times.forEach((datetime) => {\n          if (datetime < time.start) {\n            time.start = datetime\n          } else if (datetime > time.end) {\n            time.end = datetime\n          }\n        })\n      }\n    })\n  }\n  return {\n    geojson,\n    timelineBounds: [time.start, time.end],\n  }\n}\n\nconst getTrackBounds = (geojson) => {\n  const bounds = tbbox(geojson)\n  return {\n    minLat: bounds[3],\n    minLng: bounds[0],\n    maxLat: bounds[1],\n    maxLng: bounds[2],\n  }\n}\n\n// Deprecated tracks format parsing\nconst getOldTrackBoundsFormat = (data, addOffset = false) => {\n  const time = {\n    start: Infinity,\n    end: 0,\n  }\n  const geo = {\n    minLat: Infinity,\n    maxLat: -Infinity,\n    minLng: Infinity,\n    maxLng: -Infinity,\n  }\n  for (let i = 0, length = data.datetime.length; i < length; i++) {\n    const datetime = data.datetime[i]\n    if (datetime < time.start) {\n      time.start = datetime\n    } else if (datetime > time.end) {\n      time.end = datetime\n    }\n\n    const lat = data.latitude[i]\n    if (lat < geo.minLat) {\n      geo.minLat = lat\n    } else if (lat > geo.maxLat) {\n      geo.maxLat = lat\n    }\n\n    let lng = data.longitude[i]\n    if (addOffset === true) {\n      if (lng < 0) {\n        lng += 360\n      }\n    }\n    if (lng < geo.minLng) {\n      geo.minLng = lng\n    } else if (lng > geo.maxLng) {\n      geo.maxLng = lng\n    }\n  }\n\n  // track crosses the antimeridian\n  if (geo.maxLng - geo.minLng > 350 && addOffset === false) {\n    return getOldTrackBoundsFormat(data, true)\n  }\n\n  return {\n    time: [time.start, time.end],\n    geo,\n  }\n}\n\nfunction loadTrack(track) {\n  return (dispatch, getState) => {\n    const { id, url, type, fitBoundsOnLoad, layerTemporalExtents, color, data } = track\n    const state = getState()\n    if (state.map.tracks.data.find((t) => t.id === id)) {\n      return\n    }\n\n    const payload = {\n      id,\n      url,\n      type,\n      color,\n      fitBoundsOnLoad,\n    }\n    const trackHasData = track.data !== undefined && track.data !== null\n    const trackHasUrl = url !== undefined && url !== null && url !== ''\n    if (trackHasData) {\n      payload.data = data\n      payload.geoBounds = getTrackBounds(data)\n    }\n    dispatch({ type: ADD_TRACK, payload })\n\n    if (trackHasData || !trackHasUrl) {\n      return\n    }\n\n    const loaderID = startLoader(dispatch, state)\n    if (type !== 'geojson') {\n      // Deprecated tracks format logic to be deleted some day\n      const token = state.map.module.token\n\n      const promises = getTilePromises(url, token, layerTemporalExtents)\n\n      Promise.all(promises.map((p) => p.catch((e) => e))).then((rawTileData) => {\n        const cleanData = getCleanVectorArrays(rawTileData)\n\n        if (!cleanData.length) {\n          return\n        }\n        const rawTrackData = groupData(cleanData, [\n          'latitude',\n          'longitude',\n          'datetime',\n          'series',\n          'weight',\n          'sigma',\n        ])\n\n        const vectorArray = addTracksPointsRenderingData(rawTrackData)\n        const bounds = getOldTrackBoundsFormat(rawTrackData)\n\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id,\n            data: getTracksPlaybackData(vectorArray),\n            geoBounds: bounds.geo,\n            timelineBounds: bounds.time,\n          },\n        })\n        dispatch(completeLoader(loaderID))\n      })\n    } else {\n      fetch(url)\n        .then((res) => {\n          if (res.status >= 400) throw new Error(res.statusText)\n          return res.json()\n        })\n        .then((data) => {\n          const { geojson, timelineBounds } = getTrackDataParsed(data)\n          const geoBounds = getTrackBounds(data)\n          dispatch({\n            type: UPDATE_TRACK,\n            payload: {\n              id,\n              data: geojson,\n              geoBounds,\n              timelineBounds,\n            },\n          })\n          if (fitBoundsOnLoad) {\n            targetMapVessel(id)\n          }\n        })\n        .catch((err) => console.warn(err))\n        .finally(() => dispatch(completeLoader(loaderID)))\n    }\n  }\n}\n\nconst removeTrack = (trackId) => ({\n  type: REMOVE_TRACK,\n  payload: {\n    trackId,\n  },\n})\n\nexport const updateTracks = (newTracks = []) => (dispatch, getState) => {\n  const prevTracks = getState().map.tracks.data\n  // add and update layers\n  if (newTracks) {\n    newTracks.forEach((newTrack) => {\n      const trackId = newTrack.id\n      const prevTrack = prevTracks.find((t) => t.id === trackId)\n      if (prevTrack === undefined) {\n        dispatch(loadTrack(newTrack))\n      } else if (prevTrack.color !== newTrack.color) {\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id: newTrack.id,\n            color: newTrack.color,\n          },\n        })\n      }\n    })\n  }\n\n  // clean up unused tracks\n  prevTracks.forEach((prevTrack) => {\n    if (!newTracks || !newTracks.find((t) => t.id === prevTrack.id)) {\n      dispatch(removeTrack(prevTrack.id))\n    }\n  })\n}\n","import PropTypes from 'prop-types'\n\nconst withReducerPropTypes = (name, propTypesSchema) => (reducer) => {\n  if (process.env.NODE_ENV === 'development') {\n    return (state, action) => {\n      const result = reducer(state, action)\n      PropTypes.checkPropTypes(propTypesSchema, result, 'reducer', name)\n\n      return result\n    }\n  }\n  return reducer\n}\n\nexport default withReducerPropTypes\n","import PropTypes from 'prop-types'\nimport withReducerTypes from '../utils/withReducerTypes'\nimport {\n  INIT_MODULE,\n  SET_TEMPORAL_EXTENT,\n  SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  START_LOADER,\n  COMPLETE_LOADER,\n  SET_MODULE_CURSOR,\n} from './module.actions'\n\nconst initialState = {\n  loaders: null,\n  token: undefined,\n  temporalExtent: [new Date(1970), new Date()],\n  highlightTemporalExtent: null,\n  cursor: null,\n  onViewportChange: undefined,\n  onHover: undefined,\n  onClick: undefined,\n  onLoad: undefined,\n  onLoadStart: undefined,\n  onLoadComplete: undefined,\n  onClosePopup: undefined,\n  onAttributionsChange: undefined,\n}\n\nconst moduleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_MODULE: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    case SET_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        temporalExtent: action.payload,\n      }\n    }\n\n    case SET_HIGHLIGHT_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        highlightTemporalExtent: action.payload,\n      }\n    }\n\n    case START_LOADER: {\n      const loaders = state.loaders !== null ? [...state.loaders] : []\n      loaders.push(action.payload)\n      return { ...state, loaders }\n    }\n\n    case COMPLETE_LOADER: {\n      const loaders = [...state.loaders]\n      const loaderIndex = loaders.findIndex((l) => l === action.payload)\n      loaders.splice(loaderIndex, 1)\n      return { ...state, loaders }\n    }\n\n    case SET_MODULE_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst moduleTypes = {\n  loaders: PropTypes.arrayOf(PropTypes.number),\n  token: PropTypes.string,\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  onViewportChange: PropTypes.func,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoad: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n}\n\nexport default withReducerTypes('module', moduleTypes)(moduleReducer)\n","import PropTypes from 'prop-types'\nimport { trackTypes } from '../proptypes/tracks'\nimport withReducerTypes from '../utils/withReducerTypes'\n\nimport { ADD_TRACK, UPDATE_TRACK, REMOVE_TRACK } from './tracks.actions'\n\nconst initialState = {\n  data: [],\n}\n\nconst tracksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TRACK: {\n      const data = [...state.data, action.payload]\n      return { ...state, data }\n    }\n\n    case UPDATE_TRACK: {\n      const trackData = action.payload\n      const data = state.data.map((track) => {\n        if (track.id !== trackData.id) return track\n        return {\n          ...track,\n          ...trackData,\n        }\n      })\n      return { ...state, data }\n    }\n\n    case REMOVE_TRACK: {\n      const removedTrackId = action.payload.trackId\n      const data = state.data.filter((track) => track.id !== removedTrackId)\n      return { ...state, data }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst tracksTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      ...trackTypes,\n      data: PropTypes.object,\n      timelineBounds: PropTypes.array,\n      geoBounds: PropTypes.exact({\n        minLat: PropTypes.number,\n        minLng: PropTypes.number,\n        maxLat: PropTypes.number,\n        maxLng: PropTypes.number,\n      }),\n    })\n  ),\n}\n\nexport default withReducerTypes('tracks', tracksTypes)(tracksReducer)\n","import difference from 'lodash/difference'\nimport {\n  INIT_HEATMAP_LAYERS,\n  UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n  ADD_HEATMAP_LAYER,\n  UPDATE_HEATMAP_LAYER_STYLE,\n  REMOVE_HEATMAP_LAYER,\n  ADD_REFERENCE_TILE,\n  UPDATE_HEATMAP_TILE,\n  RELEASE_HEATMAP_TILES,\n  HIGHLIGHT_VESSELS,\n  UPDATE_LOADED_TILES,\n  HIGHLIGHT_CLICKED_VESSEL,\n  CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n} from './heatmap.actions'\n\nconst initialState = {\n  // a dict of heatmap layers (key is layer id)\n  // each containing data, url, tiles, visibleTemporalExtentsIndices\n  heatmapLayers: {},\n  // store a list of tiles currently visible in the map\n  // those are necessary when adding a new layer to know which tiles need to be loaded\n  referenceTiles: [],\n  highlightedVessels: { isEmpty: true },\n  highlightedClickedVessel: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_HEATMAP_LAYERS: {\n      return Object.assign({}, state, { heatmapLayers: action.payload })\n    }\n\n    case UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES: {\n      const heatmapLayers = state.heatmapLayers\n      heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices =\n        action.payload.newVisibleTemporalExtentsIndices\n\n      // also removing indices within each tile\n      // adding is done after tile has actually loaded\n      heatmapLayers[action.payload.layerId].tiles.forEach((tile) => {\n        tile.temporalExtentsIndicesLoaded = difference(\n          tile.temporalExtentsIndicesLoaded,\n          action.payload.indicesRemoved\n        )\n      })\n      return { ...state, heatmapLayers }\n    }\n\n    case ADD_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers, {\n        [action.payload.id]: {\n          tiles: [],\n          ...action.payload,\n        },\n      })\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case UPDATE_HEATMAP_LAYER_STYLE: {\n      const newLayer = action.payload\n      const layer = { ...state.heatmapLayers[newLayer.id], ...newLayer }\n      const heatmapLayers = { ...state.heatmapLayers, [newLayer.id]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case REMOVE_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers)\n      delete heatmapLayers[action.payload.id]\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case ADD_REFERENCE_TILE: {\n      return Object.assign({}, state, { referenceTiles: [...state.referenceTiles, action.payload] })\n    }\n\n    case UPDATE_HEATMAP_TILE: {\n      const layerId = action.payload.layerId\n      const newTile = action.payload.tile\n      const layer = { ...state.heatmapLayers[layerId] }\n      let layerTiles = [...layer.tiles]\n      const tileIndex = layerTiles.findIndex((t) => t.uid === newTile.uid)\n      if (tileIndex === -1) {\n        layerTiles.push(newTile)\n      } else {\n        layerTiles = [\n          ...layerTiles.slice(0, tileIndex),\n          newTile,\n          ...layerTiles.slice(tileIndex + 1),\n        ]\n      }\n      layer.tiles = layerTiles\n      const heatmapLayers = { ...state.heatmapLayers, [layerId]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case RELEASE_HEATMAP_TILES: {\n      const uids = action.payload\n\n      // remove tiles\n      const layerIds = Object.keys(state.heatmapLayers)\n      const heatmapLayers = { ...state.heatmapLayers }\n      layerIds.forEach((layerId) => {\n        const prevLayer = { ...heatmapLayers[layerId] }\n        uids.forEach((tileUid) => {\n          const releasedTileIndex = prevLayer.tiles.findIndex((tile) => tile.uid === tileUid)\n          if (releasedTileIndex > -1) {\n            // console.log('releasing', layerId, tileUid);\n            prevLayer.tiles.splice(releasedTileIndex, 1)\n          }\n        })\n      })\n\n      // remove reference tiles\n      let referenceTiles = [...state.referenceTiles]\n      uids.forEach((tileUid) => {\n        const releasedRefTileIndex = referenceTiles.findIndex((tile) => tile.uid === tileUid)\n        if (releasedRefTileIndex > -1) {\n          referenceTiles = [\n            ...referenceTiles.slice(0, releasedRefTileIndex),\n            ...referenceTiles.slice(releasedRefTileIndex + 1),\n          ]\n        }\n      })\n\n      return { ...state, heatmapLayers, referenceTiles }\n    }\n\n    case UPDATE_LOADED_TILES: {\n      const newHeatmapLayers = { ...state.heatmapLayers }\n      return { ...state, heatmapLayers: newHeatmapLayers }\n    }\n\n    case HIGHLIGHT_VESSELS: {\n      return Object.assign({}, state, { highlightedVessels: action.payload })\n    }\n\n    case HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: action.payload }\n    }\n\n    case CLEAR_HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import uniq from 'lodash/uniq'\nimport {\n  SET_CURRENTLY_VISIBLE_TILES,\n  SET_CURRENTLY_LOADED_TILES,\n  SET_CURRENTLY_SWAPPED_TILE_UIDS,\n  MARK_TILES_UIDS_AS_LOADED,\n  RELEASE_MARKED_TILES_UIDS,\n} from './heatmapTiles.actions'\n\nconst initialState = {\n  currentVisibleTiles: [],\n  currentLoadedTiles: [],\n  currentToLoadTileUids: [],\n  currentToReleaseTileUids: [],\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENTLY_VISIBLE_TILES: {\n      const currentVisibleTiles = [].concat(action.payload)\n      return { ...state, currentVisibleTiles }\n    }\n\n    case SET_CURRENTLY_LOADED_TILES: {\n      const currentLoadedTiles = [].concat(action.payload)\n      return { ...state, currentLoadedTiles }\n    }\n\n    case SET_CURRENTLY_SWAPPED_TILE_UIDS: {\n      const currentToLoadTileUids = uniq(\n        state.currentToLoadTileUids.concat(action.payload.tilesToLoadUids)\n      )\n      const currentToReleaseTileUids = uniq(\n        state.currentToReleaseTileUids.concat(action.payload.tilesToReleaseUids)\n      )\n      // clean to load tiles of tiles that needs to be released\n      const newToLoadTilesUids = currentToLoadTileUids.filter(\n        (tileUid) => currentToReleaseTileUids.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newToLoadTilesUids, currentToReleaseTileUids }\n    }\n\n    case MARK_TILES_UIDS_AS_LOADED: {\n      const currentToLoadTileUids = state.currentToLoadTileUids\n      const tileUidsMarkedAsLoaded = action.payload\n      const newCurrentToLoadTileUids = currentToLoadTileUids.filter(\n        (tileUid) => tileUidsMarkedAsLoaded.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newCurrentToLoadTileUids }\n    }\n\n    case RELEASE_MARKED_TILES_UIDS: {\n      return { ...state, currentToReleaseTileUids: [] }\n    }\n\n    default:\n      return state\n  }\n}\n","// TODO MAP MODULE remove whole reducer\nimport { SET_MAP_CURSOR } from './interaction.actions'\n\nconst initialState = {\n  cursor: 'progress',\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_MAP_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport ModuleReducer from '../module/module.reducer'\nimport TracksReducer from '../tracks/tracks.reducer'\nimport HeatmapReducer from '../heatmap/heatmap.reducer'\nimport HeatmapTilesReducer from '../heatmap/heatmapTiles.reducer'\nimport ViewportReducer from '../glmap/viewport.reducer'\nimport StyleReducer from '../glmap/style.reducer'\nimport InteractionReducer from '../glmap/interaction.reducer'\n\nconst mapReducer = combineReducers({\n  module: ModuleReducer,\n  tracks: TracksReducer,\n  heatmap: HeatmapReducer,\n  heatmapTiles: HeatmapTilesReducer,\n  style: StyleReducer,\n  viewport: ViewportReducer,\n  interaction: InteractionReducer,\n})\n\nexport default mapReducer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\nimport throttle from 'lodash/throttle'\nimport { trackTypes } from './proptypes/tracks'\nimport { heatmapLayerTypes, basemapLayerTypes, staticLayerTypes } from './proptypes/layers'\nimport { viewportTypes, popupTypes } from './proptypes/shared'\n\nimport Map from './glmap/Map.container'\nimport {\n  initModule,\n  setTemporalExtent,\n  setHighlightTemporalExtent,\n  setCursor,\n} from './module/module.actions'\nimport { updateViewport, transitionToZoom } from './glmap/viewport.actions'\nimport { initStyle, commitStyleUpdates, applyTemporalExtent } from './glmap/style.actions'\nimport { updateTracks } from './tracks/tracks.actions'\nimport { updateHeatmapLayers, updateLayerLoadTemporalExtents } from './heatmap/heatmap.actions'\n\nimport store from './store'\nimport mapReducers from './store/reducers'\n\nconst mapReducer = combineReducers({\n  map: mapReducers,\n})\n\nstore.replaceReducer(mapReducer)\n\nconst throttleApplyTemporalExtent = throttle((temporalExtent) => {\n  store.dispatch(applyTemporalExtent(temporalExtent))\n  store.dispatch(setTemporalExtent(temporalExtent))\n}, 16)\n\nconst updateViewportFromIncomingProps = (incomingViewport) => {\n  store.dispatch(\n    updateViewport({\n      latitude: incomingViewport.center[0],\n      longitude: incomingViewport.center[1],\n      zoom: incomingViewport.zoom,\n    })\n  )\n}\n\nclass MapModule extends React.Component {\n  state = {\n    initialized: false,\n    error: null,\n    errorInfo: null,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    })\n  }\n\n  componentDidMount() {\n    // First trigger synchronous actions that should happen before any map render\n    // At the end of this, set a flag to allow map rendering\n\n    if (this.props.viewport !== undefined) {\n      updateViewportFromIncomingProps(this.props.viewport)\n    }\n\n    // TODO\n    if (this.props.glyphsPath !== null) {\n      store.dispatch(\n        initStyle({\n          glyphsPath: this.props.glyphsPath,\n          // TODO apply URL updates here\n        })\n      )\n    }\n\n    if (this.props.onAttributionsChange !== undefined) {\n      this.props.onAttributionsChange(store.getState().map.style.attributions)\n    }\n\n    if (store && store.getState().map.module.token === undefined) {\n      store.dispatch(\n        initModule({\n          token: this.props.token,\n          autoClusterZoom: this.props.autoClusterZoom,\n          isCluster: this.props.isCluster,\n          onViewportChange: this.props.onViewportChange,\n          onHover: this.props.onHover,\n          onClick: this.props.onClick,\n          onLoad: this.props.onLoad,\n          onLoadStart: this.props.onLoadStart,\n          onLoadComplete: this.props.onLoadComplete,\n          onClosePopup: this.props.onClosePopup,\n          onAttributionsChange: this.props.onAttributionsChange,\n        })\n      )\n    }\n\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n    }\n\n    if (\n      (this.props.basemapLayers !== null && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== null && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    if (this.props.tracks !== null) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // Now trigger async actions\n\n    if (this.props.temporalExtent !== null && this.props.temporalExtent.length) {\n      throttleApplyTemporalExtent(this.props.temporalExtent)\n    }\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({\n      initialized: true,\n    })\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== null) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // tracks\n    if (this.props.tracks !== prevProps.tracks) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== prevProps.heatmapLayers) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n\n    // basemap / static layers\n    if (\n      (this.props.basemapLayers !== null && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== null && this.props.staticLayers.length)\n    ) {\n      if (\n        this.props.basemapLayers !== prevProps.basemapLayers ||\n        this.props.staticLayers !== prevProps.staticLayers\n      ) {\n        store.dispatch(\n          commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n        )\n      }\n    }\n\n    // loadTemporalExtent\n    if (this.props.loadTemporalExtent !== null && this.props.loadTemporalExtent.length) {\n      if (\n        prevProps.loadTemporalExtent === null ||\n        !prevProps.loadTemporalExtent.length ||\n        this.props.loadTemporalExtent[0].getTime() !== prevProps.loadTemporalExtent[0].getTime() ||\n        this.props.loadTemporalExtent[1].getTime() !== prevProps.loadTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(updateLayerLoadTemporalExtents(this.props.loadTemporalExtent))\n      }\n    }\n    // temporalExtent\n    if (this.props.temporalExtent !== null && this.props.temporalExtent.length) {\n      if (\n        prevProps.temporalExtent === null ||\n        !prevProps.temporalExtent.length ||\n        this.props.temporalExtent[0].getTime() !== prevProps.temporalExtent[0].getTime() ||\n        this.props.temporalExtent[1].getTime() !== prevProps.temporalExtent[1].getTime()\n      ) {\n        throttleApplyTemporalExtent(this.props.temporalExtent)\n      }\n    }\n\n    // highlightTemporalExtent\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      if (\n        prevProps.highlightTemporalExtent === null ||\n        !prevProps.highlightTemporalExtent.length ||\n        this.props.highlightTemporalExtent[0].getTime() !==\n          prevProps.highlightTemporalExtent[0].getTime() ||\n        this.props.highlightTemporalExtent[1].getTime() !==\n          prevProps.highlightTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    } else {\n      if (this.props.highlightTemporalExtent !== prevProps.highlightTemporalExtent) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    }\n\n    // viewport - since viewport will be updated internally to the module,\n    // we have to compare incoming props to existing viewport in store, ie:\n    // update viewport from incoming props ONLY if zoom or center is different\n    // from the internally stored one\n    // TODO FFS incoming lat lon should be an object, not an array\n    const currentViewport = store.getState().map.viewport.viewport\n    // stop propagating updates from outside when zooming in\n    if (\n      this.props.viewport !== undefined &&\n      store.getState().map.viewport.currentTransition === null\n    ) {\n      if (\n        currentViewport.latitude !== this.props.viewport.center[0] ||\n        currentViewport.longitude !== this.props.viewport.center[1] ||\n        currentViewport.zoom !== this.props.viewport.zoom\n      ) {\n        // if zoom delta is precisely === 1, zoom with a transition\n        if (Math.abs(currentViewport.zoom - this.props.viewport.zoom) === 1) {\n          store.dispatch(transitionToZoom(this.props.viewport))\n        } else {\n          updateViewportFromIncomingProps(this.props.viewport)\n        }\n      }\n    }\n\n    if (this.props.cursor !== prevProps.cursor) {\n      store.dispatch(setCursor(this.props.cursor))\n    }\n  }\n  render() {\n    if (this.state.error !== null) {\n      console.log(this.state.error)\n      return (\n        <div>\n          <h2>Map component crashed!</h2>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n          <div>Component Stack Error Details:</div>\n          <p className=\"red\">{this.state.errorInfo.componentStack}</p>\n        </div>\n      )\n    }\n    // won't render anything before actions in componentDidMount have been triggered\n    return this.state.initialized !== true ? null : (\n      <Provider store={store}>\n        <Map {...this.props} />\n      </Provider>\n    )\n  }\n}\n\nMapModule.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.shape(viewportTypes).isRequired,\n  autoClusterZoom: PropTypes.bool,\n  isCluster: PropTypes.func,\n  tracks: PropTypes.arrayOf(PropTypes.exact(trackTypes)),\n  heatmapLayers: PropTypes.arrayOf(PropTypes.shape(heatmapLayerTypes)),\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  highlightTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  loadTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  basemapLayers: PropTypes.arrayOf(PropTypes.shape(basemapLayerTypes)),\n  staticLayers: PropTypes.arrayOf(PropTypes.shape(staticLayerTypes)),\n  cursor: PropTypes.string,\n  // customLayers\n  hoverPopup: PropTypes.shape(popupTypes),\n  clickPopup: PropTypes.shape(popupTypes),\n  glyphsPath: PropTypes.string,\n  onViewportChange: PropTypes.func,\n  onLoad: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n  onClosePopup: PropTypes.func,\n}\n\nMapModule.defaultProps = {\n  token: null,\n  glyphsPath: null,\n  autoClusterZoom: true,\n  isCluster: (event) => event.isCluster === true,\n  highlightTemporalExtent: null,\n  tracks: null,\n  hoverPopup: null,\n  clickPopup: null,\n  heatmapLayers: null,\n  temporalExtent: null,\n  loadTemporalExtent: null,\n  basemapLayers: null,\n  staticLayers: null,\n  cursor: null,\n  onViewportChange: () => {},\n  onLoad: () => {},\n  onLoadStart: () => {},\n  onLoadComplete: () => {},\n  onClick: () => {},\n  onHover: () => {},\n  onAttributionsChange: () => {},\n  onClosePopup: () => {},\n}\n\nexport default MapModule\n","import GL_STYLE from '../glmap/gl-styles/style.json'\n\nconst AVAILABLE_BASEMAPS = GL_STYLE.metadata['gfw:basemap-layers']\n\nexport default AVAILABLE_BASEMAPS\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, PropsTable } from 'docz'\nimport Map from './index.js'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This component displays and load fishing activity and fishing-related layers on a map, used in various GFW projects:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/map-client/blob/9c5179358d4870c0fd4c2c0742917e72e6025c59/app/src/map/components/MapWrapper.jsx#L5\"\n        }}>{`Map client`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/vessel-profiles/blob/aa0e17395f6a4947bb3fdf3106cb9d0a744ba64f/src/profile/components/MapWrapper.js#L3\"\n        }}>{`Vessel profiles`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/data-portal/blob/96b1e24efcff58ade672a67229da0610d9d241ab/src/map/MapWrapper.jsx#L2\"\n        }}>{`Data portal`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"available-properties\"\n    }}>{`Available properties`}</h2>\n    <p>{`TODO: fix crash on PropsTable docz component`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<Map viewport={{ center: [0.026, 123.61], zoom: 5 }} />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      PropsTable,\n      Map\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <Map viewport={{\n        center: [0.026, 123.61],\n        zoom: 5\n      }} mdxType=\"Map\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}