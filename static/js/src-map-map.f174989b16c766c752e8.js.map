{"version":3,"sources":["/Users/joseangel/Workspace/map-components/src/map/glmap/map.css","/Users/joseangel/Workspace/map-components/src/map/lib/Pack.js","/Users/joseangel/Workspace/map-components/src/map/lib/pelagosClient.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/tracks.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/layers.js","/Users/joseangel/Workspace/map-components/src/map/proptypes/shared.js","/Users/joseangel/Workspace/map-components/src/map/config.js","/Users/joseangel/Workspace/map-components/src/map/module/module.actions.js","/Users/joseangel/Workspace/map-components/src/map/module/module.selectors.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.selectors.js","/Users/joseangel/Workspace/map-components/src/map/constants.js","/Users/joseangel/Workspace/map-components/src/map/utils/buildEndpoint.js","/Users/joseangel/Workspace/map-components/src/map/utils/heatmapTileData.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmapTiles.actions.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmap.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/viewport.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/interaction.actions.js","/Users/joseangel/Workspace/map-components/src/map/utils/map-colors.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/HeatmapSubLayer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/HeatmapLayer.js","/Users/joseangel/Workspace/map-components/src/map/activity/ActivityLayers.js","/Users/joseangel/Workspace/map-components/src/map/activity/ActivityLayers.container.js","/Users/joseangel/Workspace/map-components/src/map/glmap/Map.js","/Users/joseangel/Workspace/map-components/src/map/glmap/Map.container.js","/Users/joseangel/Workspace/map-components/src/map/glmap/style.reducer.js","/Users/joseangel/Workspace/map-components/src/map/utils/getMainGeomType.js","/Users/joseangel/Workspace/map-components/src/map/glmap/style.actions.js","/Users/joseangel/Workspace/map-components/src/map/glmap/viewport.reducer.js","/Users/joseangel/Workspace/map-components/src/map/store/index.js","/Users/joseangel/Workspace/map-components/src/map/utils/getTrackBounds.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.actions.js","/Users/joseangel/Workspace/map-components/src/map/utils/withReducerTypes.js","/Users/joseangel/Workspace/map-components/src/map/module/module.reducer.js","/Users/joseangel/Workspace/map-components/src/map/tracks/tracks.reducer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmap.reducer.js","/Users/joseangel/Workspace/map-components/src/map/heatmap/heatmapTiles.reducer.js","/Users/joseangel/Workspace/map-components/src/map/glmap/interaction.reducer.js","/Users/joseangel/Workspace/map-components/src/map/store/reducers.js","/Users/joseangel/Workspace/map-components/src/map/map.js","/Users/joseangel/Workspace/map-components/src/map/basemaps/index.js","/Users/joseangel/Workspace/map-components/src/map/map.mdx"],"names":["module","exports","byname","Uint8","size","Uint8Array","BYTES_PER_ELEMENT","array","getter","setter","Int8","Int8Array","Uint16","Uint16Array","Int16","Int16Array","Uint32","Uint32Array","Int32","Int32Array","Float32","Float32Array","Float64","Float64Array","writeStringToArrayBuffer","str","start","end","buf","bufstart","undefined","length","i","charCodeAt","arrayBufferToString","String","fromCharCode","apply","Pack","typemap","byarray","pack","typespec","value","littleendian","ArrayBuffer","DataView","stringToArrayBuffer","res","Uint8ClampedArray","buffer","name","spec","PelagosClient","this","MAGIC_COOKIE","url","token","Promise","resolve","reject","request","XMLHttpRequest","open","setRequestHeader","responseType","onload","handleData","bind","onerror","send","self","error","readyState","success","status","isFileUri","response","byteLength","dataView","headerLen","cookie","slice","getInt32","offset","headerIsLoaded","header","JSON","parse","rowLen","colsByName","colidx","cols","col","idx","type","multiplier","min","max","orientation","errorLoading","toString","allLoaded","result","rowidx","row","val","colValues","eval","trackTypes","id","PropTypes","string","isRequired","data","object","color","oneOf","layerTemporalExtents","arrayOf","number","fitBoundsOnLoad","bool","heatmapLayerTypes","tilesetId","subtype","visible","hue","opacity","filters","shape","filterValues","endpoints","temporalExtents","temporalExtentsLess","interactive","basemapLayerTypes","staticLayerTypes","selected","selectedFeatures","field","values","highlighted","higlightedFeatures","showLabels","isCustom","gl","popupTypes","content","node","latitude","longitude","viewportTypes","zoom","center","VESSELS_BASE_RADIUS","MAX_SPRITES_PER_LAYER","STATIC_LAYERS_CARTO_ENDPOINT","STATIC_LAYERS_CARTO_TILES_ENDPOINT","TILES_URL_NEEDING_AUTHENTICATION","initModule","props","dispatch","payload","startLoader","state","loaderId","timestamp","Date","getTime","map","onLoadStart","completeLoader","getState","loaders","onLoadComplete","onViewportChange","interactionState","callback","viewport","bounds","canZoomIn","canZoomOut","mouseLatLong","setTemporalExtent","temporalExtent","setHighlightTemporalExtent","highlightTemporalExtent","closePopup","onClosePopup","setCursor","cursor","getTemporalExtent","getHighlightTemporalExtent","getTracksData","tracks","getGeojsonTracksReady","createSelector","filter","t","mergeStyles","style1","style2","sources","layers","filterGeojsonByTimerange","geojson","features","featuresFiltered","reduce","filteredFeatures","feature","properties","coordinateProperties","times","filtered","geometry","coordinates","filteredCoordinates","coordinate","index","timeCoordinate","push","filteredFeature","getFullTracksStyles","hasTemporalExtent","hasTracks","timerange","acc","track","source","style","paint","getHighlightedTrackStyles","getTracksStyles","trackStyles","highlightedTrackStyles","TRANSITION_TYPE","ZOOM","BRUSH_RENDERING_STYLE","NORMAL","BULLSEYE","BRUSH_ZOOM_RENDERING_STYLE","RADIAL_GRADIENT","CIRCLE","CUSTOM_LAYERS_SUBTYPES","raster","urlTemplate","urlParams","templateSettings","interpolate","template","urlTemplateCompiled","getTemporalTileURLs","params","urls","forEach","extent","startTimeISO","toISOString","endTimeISO","tileCoordinates","x","y","z","buildEndpoint","temporalExtentsIndices","indexOf","getTilePromises","tilesetUrl","promises","urlIndex","obtainTile","getCleanVectorArrays","rawTileData","vectorArray","groupData","cleanVectorArrays","columns","currentArray","totalVectorArraysLength","sumBy","a","filteredColumns","column","console","warn","key","cumulatedOffsets","appendValues","set","getTilePlaybackData","prevPlaybackData","tilePlaybackData","zoomFactorRadius","convert","getZoomFactorRadius","zoomFactorRadiusRenderingMode","getZoomFactorRadiusRenderingMode","zoomFactorOpacity","getZoomFactorOpacity","columnsArr","Object","keys","c","storedColumns","concat","sigma","weight","hidden","pull","uniq","numPoints","newFrames","timeIndexes","point","timeIndex","getOffsetedTimeAtPrecision","datetime","lngLatToWorld","worldX","worldY","radius","sigmaToRadius","weightToOpacity","series","frame","vesselSatisfiesFilters","every","selectVesselsAt","tileData","tileQuery","startIndex","endIndex","currentFilters","vessels","toleranceRadiusInWorldUnits","f","wx","wy","pass","some","vesselSatisfiesAllFilters","vessel","getTilecoverLimits","viewportZoom","Math","ceil","tilesAvailable","min_zoom","max_zoom","flushToReleaseTiles","heatmapTiles","currentToLoadTileUids","currentTilesToReleaseUids","currentToReleaseTileUids","releaseTiles","markTileAsLoaded","tileUids","flushTileState","forceLoadingAllVisibleTiles","currentVisibleTiles","tilesToLoad","tilesToReleaseUids","currentLoadedTiles","visibleTile","find","uid","loadedTile","tilesToLoadUids","tile","getTile","updateLoadedTiles","debouncedFlushState","debounce","updateHeatmapTilesFromViewport","mapViewport","width","height","currentTransition","boundsViewport","PerspectiveMercatorViewport","unproject","wn","es","w","s","e","n","boundsPolygonsCoordinates","limits","w1","e2","geom","viewportTilesCoords","tilecover","tiles","viewportTilesIndexes","indexes","visibleTiles","coords","prevZoom","queryHeatmapVessels","temporalExtentIndexes","uids","highlightVesselFromHeatmap","ADD_REFERENCE_TILE","HIGHLIGHT_VESSELS","UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES","UPDATE_HEATMAP_TILE","getTemporalExtentsVisibleIndices","loadTemporalExtent","currentExtentStart","currentExtentEnd","indices","temporalExtentStart","getTiles","layerIds","referenceTiles","newTemporalExtentsToLoad","loaderID","join","heatmapLayers","heatmap","tilesByLayer","allPromises","layerId","heatmapLayerHeader","referenceTile","temporalExtentsIndicesLoaded","queriedTemporalExtentsIndices","visibleTemporalExtentsIndices","temporalExtentsIndicesToLoad","difference","tilePromise","Error","pelagosPromises","allLayerPromises","all","then","loadedLayerId","loadLayerTile","parseLayerTile","visibleHeatmapLayers","visibleHeatmapLayersIds","loadAllTilesForLayer","addHeatmapLayer","layer","removeHeatmapLayer","updateLayerLoadTemporalExtents","indicesToAddByLayer","heatmapLayer","oldVisibleTemporalExtentsIndices","newVisibleTemporalExtentsIndices","indicesAdded","indicesRemoved","layerIdsWithIndicesToAdd","_queryHeatmap","layersVessels","availableTiles","bestTile","isCluster","isMouseCluster","isEmpty","layerVesselsResult","foundVessels","layersVesselsResults","layerVessels","v","uniqBy","clearHighlightedVessels","clickableCluster","highlightedVessels","layerPayload","highlightableCluster","highlightClickedVessel","clearHighlightedClickedVessel","updateHeatmapLayers","newLayers","currentLoadTemporalExtent","prevLayersDict","newLayer","prevLayer","prevLayerId","l","setBounds","setViewport","updateViewport","viewportUpdate","transitionTo","increment","transitionToZoom","transitionEnd","zoomIntoVesselCenter","fitToBounds","vp","fitBounds","minLng","minLat","maxLng","maxLat","padding","exportNativeViewport","nativeViewport","topLeftPx","bottomRightPx","topLeftWorld","pixelsToWorld","pixelUnprojectionMatrix","bottomRightWorld","leftWorldScaled","scale","rightWorldScaled","northWest","southEast","north","south","west","east","getAreaKm2","glFeature","area","toLocaleString","maximumFractionDigits","getFeature","fields","fieldsDefinition","metadata","fieldsKeys","k","fd","fieldKey","def","label","title","isLink","isMain","mainField","getFields","mapInteraction","interactionType","glFeatures","glGetSource","legacyHeatmapFeature","currentStyle","mapStyle","toJS","event","currentLegacyHeatmapData","count","group","clusterPromises","getStaticLayerIdFromGlFeature","cluster","clusterPromise","clusterId","cluster_id","glSource","getClusterExpansionZoom","err1","getClusterLeaves","err2","children","childrenFeatures","child","getCluster","autoClusterZoom","clusterBehavior","clusterZoom","onClick","onHover","COLOR_HUES","orange","peach","yellow","green","brightGreen","lightBlue","blue","purple","pink","getKeyByValue","obj","entries","entry","rgbToHsv","_r","_g","_b","h","r","g","b","d","hsvToRgb","h_","s_","v_","parseFloat","floor","p","q","mod","round","hueToRgbDefaults","hueToRgbString","rgb","rgbToHexString","css","channelName","channelValue","channelStr","hueToRgbHexString","hueToClosestColor","goal","colorHueValues","closestHue","prev","curr","abs","hexToRgb","hex","exec","parseInt","rgbToRgbaString","hueToRgbaString","hexToRgba","hueIncrementToHue","hueIncrement","hueToHueIncrement","wrapHue","hueOrColorToHexColor","HeatmapSubLayer","baseTexture","renderingStyleIndex","useNormalBlendMode","stage","PIXI","particles","ParticleContainer","alpha","position","uvs","blendMode","BLEND_MODES","SCREEN","spritesPool","initialTextureFrame","Rectangle","mainVesselTexture","Texture","_setTextureFrame","clearSpriteProps","spritesProps","spritesPropsCount","destroy","textureFrame","clone","VESSELS_HUES_INCREMENTS_NUM","update","numProps","resizeSpritesPool","sprite","setTransform","numSprites","delta","toRemove","removeChildAt","toAdd","_addSprites","num","Sprite","anchor","addChild","worldToPixelsSimple","m","HeatmapLayer","_build","_destroy","_redraw","nextProps","useRadialGradientStyle","setBrushZoomRenderingStyle","rootStage","customRenderingStyle","subLayers","renderingStyle","rendering","setBrushRenderingStyle","brushRenderingStyle","toUpperCase","_setBrushRenderingStyleIndex","brushZoomRenderingStyle","cappedZoomRenderingStyle","newStyleIndex","subLayer","setRenderingStyleIndex","defaultHue","allHuesToRender","currentlyUsedHues","allHues","_createSublayer","_destroySubLayer","_setSubLayersSpritePropsForTile","numFilters","hueToRender","render","viewportLeft","viewportRight","len","fi","scaledX","scaledY","mtx","pixelProjectionMatrix","pitch","worldToPixels","pushSpriteProps","defaultOpacity","defaultSize","removeChild","React","Component","ActivityLayers","pixiReady","onTouchStart","touches","queryCoords","clientX","clientY","onMouseMove","_onTick","heatmapFadingIn","heatmapStage","_heatmapFadeinStep","setState","_context","_updateViewportSize","pixi","transparent","antialias","renderer","canvas","view","container","appendChild","baseTextureCanvas","blurFactor","tplCanvas","document","createElement","tplCtx","getContext","diameter","yCenter","gradient","createRadialGradient","rgbString","addColorStop","rgbOuter","fillStyle","fillRect","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","getVesselTexture","fromCanvas","ticker","add","viewportWidth","viewportHeight","resize","dim","wrappedLongitude","heatmapFadeinStartTimestamp","now","timeElapsed","highlightedClickedVessel","highlightLayerData","highlightFilters","shouldUseRadialGradientStyle","toggleHeatmapDimming","_startHeatmapFadein","getError","err","log","_getHighlightData","ref","BaseControl","propTypes","func","contextTypes","getHeatmapLayersAsArray","getTemporalExtentIndexes","startTimestamp","endTimestamp","connect","ownProps","PopupWrapper","closeButton","onClose","offsetTop","tipSize","closeOnClick","defaultProps","Map","onLoad","getBounds","glMap","_ne","_sw","lat","lng","loadObserver","window","ResizeObserver","default","_containerResizeObserver","handleResizeObserver","observe","_mapContainerRef","contentRect","propsViewport","bearing","onMapInteraction","lngLat","getRef","getMap","getSource","getCursor","isDragging","transformRequest","resourceType","match","headers","Authorization","mouseOver","disconnect","maxZoom","minZoom","clickPopup","hoverPopup","hasHeatmapLayers","markers","interactiveLayerIds","className","styles","onMouseLeave","onMouseEnter","onTransitionEnd","clickRadius","marker","googleLogo","getInteractiveLayerIds","staticLayers","glLayer","glLayerId","getMapStyle","mapStyles","trackLayersIndex","lastIndexOf","finalMapStyles","mergeIn","mapStylesLayers","get","trackLayer","insert","fromJS","interaction","internalCursor","moduleCursor","long","attributions","GL_STYLE","sourceKey","attribution","setLayerStyleDefaults","layout","temporalField","visibility","initialState","cartoLayersInstanciated","basemapLayers","TYPES","geoJSON","INIT_MAP_STYLE","SET_MAP_STYLE","MARK_CARTO_LAYERS_AS_INSTANCIATED","SET_STATIC_LAYERS","SET_BASEMAP_LAYERS","setDefaultVectorTiles","currentSource","refLayerUrl","refLayerUrls","initStyle","glyphsPath","setMapStyle","setStyleTemporalExtent","applyToThrottled","glLayers","currentFilter","getIn","isLegacy","setIn","applyTemporalExtentThrottled","throttle","applyTemporalExtent","updateGLLayer","refLayer","currentStyleLayers","newStyle","glLayerIndex","findIndex","toggleLayerVisibility","isBasemap","refLayerOpacity","labelsVisibility","colorPaintProperty","currentGlLayer","glType","defaultStyles","styleType","refLayerStyle","hasFeatures","applyStyleToAllFeatures","allPaintProperties","glPaintProperty","glPaintFinalValue","selectedValue","fallbackValue","paintOrLayout","includes","originalLayerStyle","layerColorRgbString","layerColorRgb","replace","applyLayerExpressions","addCustomGLLayer","tileSize","allGeoJSONTypes","numByGLType","geoJSONType","glTypeMax","getMainGeomType","layerIndex","reverse","splice","instanciateCartoLayers","sourceId","cartoLayersPromises","sourceCartoSQL","mapConfig","options","sql","mapConfigURL","encodeURIComponent","stringify","cartoAnonymousMapUrl","fetch","json","layergroupid","catch","instanciatedCartoLayers","cartoLayer","tilesURL","newSourceId","deleteIn","commitStyleUpdates","bl","currentGLSources","workspaceGLLayers","workspaceGLLayer","finalSource","existingLayerIds","layerToAdd","layerToAddId","sourceLayer","existingLayers","newLayerGroup","newLayerIndex","findLastIndex","updateWorkspaceGLLayers","customLayers","glSources","cartoLayersToInstanciate","newSource","cartoLayerInstanciated","DEFAULT_TRANSITION","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","composeEnhancers","compose","process","MAP_REDUX_REMOTE_DEBUG","REACT_APP_MAP_REDUX_REMOTE_DEBUG","store","createStore","applyMiddleware","thunk","targetMapVessel","fitToBoundsAction","geoBounds","timelineBounds","setTimeout","TRANSITION_DURATION","getTrackTimeBounds","time","Infinity","getTrackBounds","tbbox","ADD_TRACK","UPDATE_TRACK","convertLegacyTrackToGeoJSON","vectorArrays","currentLng","createFeature","segId","geomType","currentSeries","currentFeature","fishingPoints","lngOffset","ll","cloneDeep","loadTrack","trackHasData","trackHasUrl","cleanData","rawTrackData","statusText","finally","removeTrack","trackId","updateTracks","newTracks","prevTracks","newTrack","prevTrack","withReducerPropTypes","propTypesSchema","reducer","onAttributionsChange","withReducerTypes","instanceOf","action","loaderIndex","exact","trackData","removedTrackId","mapReducer","combineReducers","ModuleReducer","TracksReducer","assign","newTile","layerTiles","tileIndex","tileUid","releasedTileIndex","releasedRefTileIndex","newHeatmapLayers","newToLoadTilesUids","tileUidsMarkedAsLoaded","newCurrentToLoadTileUids","newMapStyle","currentZoom","mapReducers","replaceReducer","throttleApplyTemporalExtent","updateViewportFromIncomingProps","incomingViewport","MapModule","initialized","errorInfo","prevProps","currentViewport","componentStack","AVAILABLE_BASEMAPS","layoutProps","MDXLayout","MDXContent","components","mdxType","parentName","__position","__code","__scope","Playground","PropsTable","__codesandbox","isMDXComponent"],"mappings":"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","file":"static/js/src-map-map.7926220a.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__1TLha\",\"googleLogo\":\"map_googleLogo__3lQ1y\"};","/* eslint-disable */\nvar byname = {\n  Uint8: {\n    size: Uint8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Int8: {\n    size: Int8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Uint16: {\n    size: Uint16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint16',\n    setter: 'setUint16',\n  },\n  Int16: {\n    size: Int16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt16',\n    setter: 'setInt16',\n  },\n  Uint32: {\n    size: Uint32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint32',\n    setter: 'setUint32',\n  },\n  Int32: {\n    size: Int32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt32',\n    setter: 'setInt32',\n  },\n  Float32: {\n    size: Float32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getFloat32',\n    setter: 'setFloat32',\n  },\n  Float64: {\n    size: Float64Array.BYTES_PER_ELEMENT,\n    array: 'Float64Array',\n    getter: 'getFloat64',\n    setter: 'setFloat64',\n  },\n}\n\nvar writeStringToArrayBuffer = function(str, start, end, buf, bufstart) {\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  if (bufstart == undefined) {\n    bufstart = start\n  }\n  for (var i = start; i < end; i++) {\n    buf[i - start + bufstart] = str.charCodeAt(i) & 0xff\n  }\n}\n\nvar stringToArrayBuffer = function(str, start, end) {\n  var self = this\n\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  var res = new Uint8ClampedArray(end - start)\n  writeStringToArrayBuffer(str, start, end, res, 0)\n  return res.buffer\n}\n\nvar arrayBufferToString = function(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf))\n}\n\nvar pack = function(typespec, value, littleendian) {\n  var array = new ArrayBuffer(typespec.size)\n  new DataView(array)[typespec.setter](0, value, littleendian)\n  return arrayBufferToString(array)\n}\n\nvar Pack = {\n  typemap: {\n    byname: byname,\n    byarray: {},\n  },\n  pack: pack,\n  arrayBufferToString: arrayBufferToString,\n  stringToArrayBuffer: stringToArrayBuffer,\n  writeStringToArrayBuffer: writeStringToArrayBuffer,\n}\nfor (var name in Pack.typemap.byname) {\n  var spec = Pack.typemap.byname[name]\n  spec.name = name\n  Pack.typemap.byarray[spec.array] = spec\n}\n\nexport default Pack\n","/* eslint-disable */\n\nimport Pack from './Pack'\n\nclass PelagosClient {\n  constructor() {\n    this.MAGIC_COOKIE = 'tmtx'\n  }\n\n  obtainTile(url, token) {\n    return new Promise(\n      function(resolve, reject) {\n        this.request = null\n        if (typeof XMLHttpRequest != 'undefined') {\n          this.request = new XMLHttpRequest()\n        } else {\n          throw 'XMLHttpRequest is disabled'\n        }\n        this.resolve = resolve\n        this.reject = reject\n        this.request.open('GET', url, true)\n        if (token) {\n          this.request.setRequestHeader('Authorization', `Bearer ${token}`)\n        }\n        this.request.responseType = 'arraybuffer'\n        this.request.onload = this.handleData.bind(this)\n        this.request.onerror = this.handleData.bind(this)\n        this.request.send(null)\n      }.bind(this)\n    )\n  }\n\n  handleData() {\n    var self = this\n    if (!this.request) {\n      return\n    }\n    if (this.error) {\n      return true\n    }\n\n    if (this.request.readyState == 4) {\n      /* HTTP reports success with a 200 status. The file protocol\n       reports success with zero. HTTP returns zero as a status\n       code for forbidden cross domain requests.\n       https://developer.mozilla.org/En/Using_XMLHttpRequest */\n      var success = this.request.status == 200 || (this.isFileUri && this.request.status == 0)\n      if (!success) {\n        this.resolve(null)\n        return\n      }\n    }\n\n    if (!this.request.response) {\n      return\n    }\n    var length = this.request.response.byteLength\n    var response = this.request.response\n    var dataView = new DataView(response)\n\n    if (length < 4 + 4) {\n      return\n    }\n    if (self.headerLen == null) {\n      var cookie = Pack.arrayBufferToString(response.slice(0, 4))\n      if (cookie != this.MAGIC_COOKIE) {\n        this.reject(\n          'Could not load ' +\n            this.url +\n            ' due to incorrect file format. Cookie: [' +\n            this.cookie +\n            ']'\n        )\n        return\n      }\n\n      self.headerLen = dataView.getInt32(4, true)\n\n      self.offset = 4 + 4\n    }\n    if (length < self.offset + self.headerLen) {\n      return\n    }\n    if (!self.headerIsLoaded) {\n      self.header = JSON.parse(\n        Pack.arrayBufferToString(response.slice(self.offset, self.offset + self.headerLen))\n      )\n      self.rowLen = 0\n      self.header.colsByName = {}\n      for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n        var col = self.header.cols[colidx]\n        col.idx = colidx\n        self.header.colsByName[col.name] = col\n        col.typespec = Pack.typemap.byname[col.type]\n\n        if (col.multiplier != undefined && col.min != undefined) {\n          col.min = col.min * col.multiplier\n        }\n        if (col.offset != undefined && col.min != undefined) {\n          col.min = col.min + col.offset\n        }\n        if (col.multiplier != undefined && col.max != undefined) {\n          col.max = col.max * col.multiplier\n        }\n        if (col.offset != undefined && col.max != undefined) {\n          col.max = col.max + col.offset\n        }\n\n        self.rowLen += col.typespec.size\n      }\n      self.offset += self.headerLen\n\n      // Add the padding to nearest 4-byte-boundary\n      self.offset += (4 - (self.headerLen % 4)) % 4\n\n      self.headerIsLoaded = true\n      if (self.header.orientation != 'rowwise' && self.header.orientation != 'columnwise') {\n        self.errorLoading({\n          orientation: self.header.orientation,\n          toString: function() {\n            return (\n              'Could not load ' +\n              this.url +\n              ' due to unsupported file orientation. Orientation: ' +\n              this.orientation +\n              '. Supported orientations: rowwise, columnwise.'\n            )\n          },\n        })\n        return true\n      }\n\n      // Empty tile, stop parsing.\n      if (!self.rowLen) {\n        self.allLoaded()\n        return true\n      }\n    }\n    if (self.header.orientation == 'rowwise') {\n      var result = {}\n      for (; self.offset + self.rowLen <= length; self.rowidx++) {\n        var row = {}\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n          var val = dataView[col.typespec.getter](self.offset, true)\n          row[col.name] = val\n          self.offset += col.typespec.size\n        }\n        // self.rowLoaded(row);\n\n        result[col.name] = row\n      }\n      if (self.rowidx == self.header.length) {\n        // self.allLoaded();\n        this.resolve(result)\n      } else {\n        // self.batchLoaded();\n      }\n    } else if (self.header.orientation == 'columnwise') {\n      var colValues = null\n      var result = {}\n      if (length >= self.offset + self.header.length * self.rowLen) {\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n\n          colValues = new (eval(col.typespec.array))(\n            response.slice(self.offset, self.offset + col.typespec.size * self.header.length)\n          )\n          self.offset += self.header.length * col.typespec.size\n\n          result[col.name] = colValues\n        }\n\n        // self.allLoaded();\n        this.resolve(result)\n        return true\n      }\n    }\n  }\n}\n\nexport default PelagosClient\n","import PropTypes from 'prop-types'\n\nexport const trackTypes = {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string,\n  data: PropTypes.object,\n  color: PropTypes.string,\n  type: PropTypes.oneOf(['geojson', 'pelagos', undefined]),\n  layerTemporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  fitBoundsOnLoad: PropTypes.bool,\n}\n","import PropTypes from 'prop-types'\n\nexport const heatmapLayerTypes = {\n  id: PropTypes.string.isRequired,\n  tilesetId: PropTypes.string,\n  subtype: PropTypes.string,\n  visible: PropTypes.bool,\n  hue: PropTypes.number,\n  opacity: PropTypes.number,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      // hue overrides layer hue if set\n      hue: PropTypes.number,\n      // filterValues is a dictionary in which each key is a filterable field,\n      // and values is an array of all possible values (OR filter)\n      // ie: filterValues: { category: [5, 6] }\n      filterValues: PropTypes.object,\n    })\n  ),\n  header: PropTypes.shape({\n    endpoints: PropTypes.object,\n    colsByName: PropTypes.object,\n    temporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    temporalExtentsLess: PropTypes.bool,\n  }).isRequired,\n  interactive: PropTypes.bool,\n}\n\nexport const basemapLayerTypes = {\n  id: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nexport const staticLayerTypes = {\n  id: PropTypes.string.isRequired,\n  // TODO MAP MODULE Is that needed and if so why\n  visible: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  highlighted: PropTypes.bool,\n  higlightedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  opacity: PropTypes.number,\n  color: PropTypes.string,\n  showLabels: PropTypes.bool,\n  interactive: PropTypes.bool,\n  filters: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  isCustom: PropTypes.bool,\n  subtype: PropTypes.oneOf([undefined, 'geojson', 'raster']),\n  url: PropTypes.string,\n  data: PropTypes.object,\n  gl: PropTypes.object,\n}\n","import PropTypes from 'prop-types'\n\nexport const popupTypes = {\n  content: PropTypes.node,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n}\n\nexport const viewportTypes = {\n  zoom: PropTypes.number,\n  center: PropTypes.arrayOf(PropTypes.number),\n}\n","// Application settings\nexport const TIMELINE_STEP = 24 * 60 * 60 * 1000 // 1 day\nexport const MIN_FRAME_LENGTH_MS = TIMELINE_STEP // 1 day\n\n// vessels rendering\n// from this zoom level and above, render using circle style instead of heatmap\nexport const VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD = 6\n// the base radius, it can only be scaled down by the radius factor calculated on the dataset\nexport const VESSELS_BASE_RADIUS = 8\n// in heatmap style, defines how 'blurry' a point will look. Higher = less blur\nexport const VESSELS_HEATMAP_BLUR_FACTOR = 0.15\n\nexport const ACTIVITY_HIGHLIGHT_HUE = 312\n\nexport const VESSELS_HEATMAP_DIMMING_ALPHA = 0.5\n\nexport const MAX_SPRITES_PER_LAYER = 200000\n\n// interaction\n// radius of vessels lookup in pixels,\n// ie how large the clicked region should be for including vessels\nexport const VESSEL_CLICK_TOLERANCE_PX = 10\n\nexport const CLUSTER_CLICK_ZOOM_INCREMENT = 1\n\nexport const MIN_ZOOM_LEVEL = 1\n// user can zoom up to this z level, but it doesn't guarantee availability of tiles\nexport const MAX_ZOOM_LEVEL = 14\n\n// data\n// Limit tile loading for activity layers up to this z level.\n// Beyond, layer is still displayed but with coarse data from the lower zoom level\nexport const ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING = 10\n\n// Sets what should be the discrete zoom level to load tiles, from a non-discrete\n// viewport zoom values. For instance, a values of 0.5 will load z 3 with a viewport\n// z of 2 (ceiling of 2 + 0.5)\n// this has a direct impact on the number of points displayed on the map, thus on the\n// performance of the app.\nexport const TILES_LOAD_ZOOM_OFFSET = 0.5\n\nexport const STATIC_LAYERS_CARTO_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map?config=$MAPCONFIG'\nexport const STATIC_LAYERS_CARTO_TILES_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map/$LAYERGROUPID/{z}/{x}/{y}.mvt'\n\nexport const TRACKS_LAYER_IN_FRONT_OF_GROUP = 'temporal'\n\nexport const TILES_URL_NEEDING_AUTHENTICATION = 'dot-world-fishing'\n","export const INIT_MODULE = 'INIT_MODULE'\nexport const SET_TEMPORAL_EXTENT = 'SET_TEMPORAL_EXTENT'\nexport const SET_HIGHLIGHT_TEMPORAL_EXTENT = 'SET_HIGHLIGHT_TEMPORAL_EXTENT'\nexport const START_LOADER = 'START_LOADER'\nexport const COMPLETE_LOADER = 'COMPLETE_LOADER'\nexport const SET_MODULE_CURSOR = 'SET_MODULE_CURSOR'\n\nexport const initModule = (props) => (dispatch) => {\n  dispatch({\n    type: INIT_MODULE,\n    payload: props,\n  })\n}\n\nexport const startLoader = (dispatch, state, loaderId) => {\n  const timestamp = new Date().getTime()\n  const generatedLoaderId = loaderId !== undefined ? `${loaderId}_${timestamp}` : timestamp\n  dispatch({\n    type: START_LOADER,\n    payload: generatedLoaderId,\n  })\n  if (state.map.module.onLoadStart !== undefined) {\n    state.map.module.onLoadStart()\n  }\n  return loaderId\n}\n\nexport const completeLoader = (loaderId) => (dispatch, getState) => {\n  dispatch({\n    type: COMPLETE_LOADER,\n    payload: loaderId,\n  })\n  const state = getState()\n  const loaders = state.map.module.loaders\n  if (!loaders.length && state.map.module.onLoadComplete !== undefined) {\n    state.map.module.onLoadComplete()\n  }\n}\n\nexport const onViewportChange = (interactionState) => (dispatch, getState) => {\n  const state = getState()\n  const callback = state.map.module.onViewportChange\n\n  if (callback === undefined) {\n    return\n  }\n  const viewport = state.map.viewport\n\n  callback({\n    interactionState,\n    zoom: viewport.viewport.zoom,\n    center: [viewport.viewport.latitude, viewport.viewport.longitude],\n    bounds: viewport.bounds,\n    canZoomIn: viewport.canZoomIn,\n    canZoomOut: viewport.canZoomOut,\n    mouseLatLong: viewport.mouseLatLong,\n  })\n}\n\nexport const setTemporalExtent = (temporalExtent) => ({\n  type: SET_TEMPORAL_EXTENT,\n  payload: temporalExtent,\n})\n\nexport const setHighlightTemporalExtent = (highlightTemporalExtent) => ({\n  type: SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  payload: highlightTemporalExtent,\n})\n\nexport const closePopup = () => (dispatch, getState) => {\n  const state = getState()\n  if (state.map.module.onClosePopup !== undefined) {\n    state.map.module.onClosePopup()\n  }\n}\n\nexport const setCursor = (cursor) => ({\n  type: SET_MODULE_CURSOR,\n  payload: cursor,\n})\n","export const getTemporalExtent = (state) => state.map.module.temporalExtent\n\nexport const getHighlightTemporalExtent = (state) => state.map.module.highlightTemporalExtent\n","import { createSelector } from 'reselect'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\n\nexport const getTracksData = (state) => state.map.tracks.data\n\nexport const getGeojsonTracksReady = createSelector(\n  getTracksData,\n  (tracks) => tracks.filter((t) => t.data !== undefined)\n)\n\nconst mergeStyles = (style1, style2) => ({\n  sources: { ...style1.sources, ...style2.sources },\n  layers: [...style1.layers, ...style2.layers],\n})\n\nconst filterGeojsonByTimerange = (geojson, { start, end }) => {\n  if (!geojson || !geojson.features) return null\n  const featuresFiltered = geojson.features.reduce((filteredFeatures, feature) => {\n    const hasTimes =\n      feature.properties &&\n      feature.properties.coordinateProperties &&\n      feature.properties.coordinateProperties.times &&\n      feature.properties.coordinateProperties.times.length > 0\n    if (hasTimes) {\n      const filtered = feature.geometry.coordinates.reduce(\n        (filteredCoordinates, coordinate, index) => {\n          const timeCoordinate = feature.properties.coordinateProperties.times[index]\n          const isInTimeline = timeCoordinate >= start && timeCoordinate <= end\n          if (isInTimeline) {\n            filteredCoordinates.coordinates.push(coordinate)\n            filteredCoordinates.times.push(timeCoordinate)\n          }\n          return filteredCoordinates\n        },\n        { coordinates: [], times: [] }\n      )\n      if (!filtered.coordinates.length) return filteredFeatures\n\n      const filteredFeature = {\n        ...feature,\n        geometry: {\n          ...feature.geometry,\n          coordinates: filtered.coordinates,\n        },\n        properties: {\n          ...feature.properties,\n          coordinateProperties: {\n            times: filtered.times,\n          },\n        },\n      }\n      filteredFeatures.push(filteredFeature)\n    }\n    return filteredFeatures\n  }, [])\n  const geojsonFiltered = {\n    ...geojson,\n    features: featuresFiltered,\n  }\n  return geojsonFiltered\n}\n\nconst getFullTracksStyles = createSelector(\n  [getTemporalExtent, getGeojsonTracksReady],\n  (temporalExtent, tracks) => {\n    const hasTemporalExtent = temporalExtent && temporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: temporalExtent[0].getTime(),\n      end: temporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}Track`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}Lines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': track.color,\n              },\n            },\n            {\n              id: `${track.id}Points`,\n              source,\n              type: 'circle',\n              filter: ['match', ['geometry-type'], ['', 'Point'], true, false],\n              paint: {\n                'circle-radius': 4,\n                'circle-color': track.color,\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nconst getHighlightedTrackStyles = createSelector(\n  [getHighlightTemporalExtent, getGeojsonTracksReady],\n  (highlightTemporalExtent, tracks) => {\n    const hasTemporalExtent = highlightTemporalExtent && highlightTemporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: highlightTemporalExtent[0].getTime(),\n      end: highlightTemporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}HighlightedTrack`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}HighlightedLines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': '#fff',\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nexport const getTracksStyles = createSelector(\n  [getFullTracksStyles, getHighlightedTrackStyles],\n  (trackStyles, highlightedTrackStyles) => {\n    if (!highlightedTrackStyles) return trackStyles\n    return mergeStyles(trackStyles, highlightedTrackStyles)\n  }\n)\n","export const GL_TRANSPARENT = 'rgba(0,0,0,0)'\n\nexport const TRANSITION_TYPE = {\n  ZOOM: 'ZOOM',\n}\n\nexport const ENCOUNTERS = 'Encounters'\n\nexport const BRUSH_RENDERING_STYLE = {\n  NORMAL: 0,\n  BULLSEYE: 2,\n}\n\nexport const BRUSH_ZOOM_RENDERING_STYLE = {\n  RADIAL_GRADIENT: 0,\n  CIRCLE: 1,\n}\n\nexport const POLYGON_LAYERS_AREA = 'POLYGON_LAYERS_AREA'\n\nexport const CUSTOM_LAYERS_SUBTYPES = {\n  geojson: 'geojson',\n  raster: 'raster',\n}\n","import template from 'lodash/template'\nimport templateSettings from 'lodash/templateSettings'\n\nexport default (urlTemplate, urlParams) => {\n  templateSettings.interpolate = /{{([\\s\\S]+?)}}/g\n  const urlTemplateCompiled = template(urlTemplate)\n  return urlTemplateCompiled(urlParams)\n}\n","import pull from 'lodash/pull'\nimport uniq from 'lodash/uniq'\nimport sumBy from 'lodash/sumBy'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport convert from '@globalfishingwatch/map-convert'\nimport buildEndpoint from './buildEndpoint'\nimport PelagosClient from '../lib/pelagosClient'\n\n/**\n * Generates the URLs to load vessel track data for a tile\n *\n * @param {string} tilesetUrl       the tileset base URL\n * @param {array} temporalExtents   all tileset temporal extents\n * @param {object} params           - tileCoordinates: this tiles tile coordinates (zoom, x, y). Will default to 0,0,0\n *                                  - temporalExtentsIndices: restrict to these temporalExtents indices\n * @returns {Array}                 an array of URLs for this tile\n */\nconst getTemporalTileURLs = (urlTemplate, temporalExtents, params = {}) => {\n  const urls = []\n\n  ;(temporalExtents || [null]).forEach((extent, index) => {\n    const urlParams = {}\n    if (extent !== null && params.temporalExtentsLess !== true) {\n      urlParams.startTimeISO = new Date(extent[0]).toISOString()\n      urlParams.endTimeISO = new Date(extent[1]).toISOString()\n    }\n    if (params.tileCoordinates) {\n      urlParams.x = params.tileCoordinates.x\n      urlParams.y = params.tileCoordinates.y\n      urlParams.z = params.tileCoordinates.zoom\n    }\n\n    const url = buildEndpoint(urlTemplate, urlParams)\n\n    if (\n      params.temporalExtentsLess === true ||\n      !params.temporalExtentsIndices ||\n      params.temporalExtentsIndices.indexOf(index) > -1\n    ) {\n      urls.push(url)\n    }\n  })\n  return urls\n}\n\n/**\n * See getTemporalTileURLs.\n */\nexport const getTilePromises = (tilesetUrl, token, temporalExtents, params = {}) => {\n  const promises = []\n  const urls = getTemporalTileURLs(tilesetUrl, temporalExtents, params)\n  for (let urlIndex = 0, length = urls.length; urlIndex < length; urlIndex++) {\n    promises.push(new PelagosClient().obtainTile(urls[urlIndex], token))\n  }\n\n  return promises\n}\n\nexport const getCleanVectorArrays = (rawTileData) =>\n  rawTileData.filter((vectorArray) => vectorArray !== null)\n\n/**\n * As data will come in multiple arrays (1 per API query/year basically), they need to be merged here\n *\n * @param cleanVectorArrays an array of objects containing a Float32Array for each vessel param (lat, lon, weight...)\n * @param columns the keys to pick on the vectorArrays (lat, lon, weight, etc)\n * @returns an object containing a Float32Array for each API_RETURNED_KEY (lat, lon, weight, etc)\n */\nexport const groupData = (cleanVectorArrays, columns) => {\n  const data = {}\n\n  const totalVectorArraysLength = sumBy(cleanVectorArrays, (a) => a.longitude.length)\n\n  const filteredColumns = columns.filter((column) => {\n    if (cleanVectorArrays[0] && cleanVectorArrays[0][column] === undefined) {\n      console.warn(`column ${column} is present in layerHeader.colsByName but not in tile data`)\n      return false\n    }\n    return true\n  })\n\n  filteredColumns.forEach((key) => {\n    data[key] = new Float32Array(totalVectorArraysLength)\n  })\n\n  let currentArray\n  let cumulatedOffsets = 0\n\n  const appendValues = (key) => {\n    data[key].set(currentArray[key], cumulatedOffsets)\n  }\n\n  for (let index = 0, length = cleanVectorArrays.length; index < length; index++) {\n    currentArray = cleanVectorArrays[index]\n    filteredColumns.forEach(appendValues)\n    cumulatedOffsets += currentArray.longitude.length\n  }\n  return data\n}\n\n/**\n * Converts Vector Array data to Playback format and stores it locally.\n * The data structure is an array indexed by a time unit, ie a set of points every day\n * This preprocessing step allows playback to play smoothly as the necessary conversions and data structure set up\n * is done once (after tile has been loaded)\n *\n * @param data the source data before indexing by day, an object containing\n *  - a vector (Float32Array) for each header's column in the case of Pelagos tiles\n *  - an array of points int the case of PBF tiles\n * @param colsByName the columns present on the dataset, determined by tileset headers\n * @param tileCoordinates x, y, z\n * @param prevPlaybackData an optional previously loaded tilePlaybackData array (when adding time range)\n */\nexport const getTilePlaybackData = (data, colsByName, tileCoordinates, prevPlaybackData) => {\n  const tilePlaybackData = prevPlaybackData === undefined ? [] : prevPlaybackData\n\n  const zoom = tileCoordinates.zoom\n  const zoomFactorRadius = convert.getZoomFactorRadius(zoom)\n  const zoomFactorRadiusRenderingMode = convert.getZoomFactorRadiusRenderingMode(zoom)\n  const zoomFactorOpacity = convert.getZoomFactorOpacity(zoom)\n\n  // store all available columns as object keys\n  const columns = {}\n  const columnsArr = Object.keys(colsByName)\n  columnsArr.forEach((c) => {\n    columns[c] = true\n  })\n\n  // columns specified by layer header columns\n  let storedColumns = [].concat(columnsArr)\n  if (columns.sigma === true) storedColumns.push('radius')\n  if (columns.weight === true) storedColumns.push('opacity')\n  if (columns.longitude === true) {\n    storedColumns.push('worldX')\n    storedColumns.push('worldY')\n  }\n  if (columns.id === true) {\n    storedColumns.push('series')\n  }\n\n  // omit values that will be transformed before being stored to playback data (ie lat -> worldY)\n  // only if hidden: true flag is set on header\n  ;['latitude', 'longitude', 'datetime'].forEach((col) => {\n    if (colsByName[col] === undefined || colsByName[col].hidden === true) {\n      pull(storedColumns, col)\n    }\n  })\n  // always pull sigma and weight\n  pull(storedColumns, 'sigma', 'weight')\n  storedColumns = uniq(storedColumns)\n\n  const numPoints = data.latitude.length\n\n  const newFrames = {}\n  const timeIndexes = []\n  for (let index = 0, length = numPoints; index < length; index++) {\n    let point = {}\n    columnsArr.forEach((c) => {\n      point[c] = data[c][index]\n    })\n\n    const timeIndex = columns.timeIndex\n      ? point.timeIndex\n      : convert.getOffsetedTimeAtPrecision(point.datetime)\n\n    // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n    const [worldX, worldY] = lngLatToWorld([point.longitude, point.latitude], 1)\n    point.worldX = worldX\n    point.worldY = worldY\n\n    if (columns.sigma) {\n      point.radius = convert.sigmaToRadius(\n        point.sigma,\n        zoomFactorRadiusRenderingMode,\n        zoomFactorRadius\n      )\n    }\n    if (columns.weight) {\n      point.opacity = convert.weightToOpacity(point.weight, zoomFactorOpacity)\n    }\n    if (columns.id) {\n      point.series = point.id\n    }\n\n    if (!newFrames[timeIndex]) {\n      timeIndexes.push(timeIndex)\n      const frame = {}\n      storedColumns.forEach((column) => {\n        frame[column] = [point[column]]\n      })\n      newFrames[timeIndex] = frame\n      continue\n    }\n    const frame = newFrames[timeIndex]\n    storedColumns.forEach((column) => {\n      frame[column].push(point[column])\n    })\n  }\n\n  // finally, copy new frames to the overall tilePlaybackData object\n  // frames previously existing here will be overwritten\n  timeIndexes.forEach((timeIndex) => {\n    tilePlaybackData[timeIndex] = newFrames[timeIndex]\n  })\n  return tilePlaybackData\n}\n\nexport const vesselSatisfiesFilters = (frame, index, filterValues) => {\n  const satisfiesFilters = Object.keys(filterValues).every((field) => {\n    if (frame[field] === undefined) {\n      // this field is not available on this layer. This can happen in an edge case described\n      // here: https://github.com/GlobalFishingWatch/map-client/issues/661#issuecomment-334496469\n      return false\n    }\n    return filterValues[field].indexOf(frame[field][index]) > -1\n  })\n  return satisfiesFilters\n}\n\nconst vesselSatisfiesAllFilters = (frame, index, filters) => {\n  const satisfiesAllFilters = filters\n    .filter((f) => f.pass !== true)\n    .some((filter) => vesselSatisfiesFilters(frame, index, filter.filterValues))\n  return satisfiesAllFilters\n}\n\nexport const selectVesselsAt = (tileData, tileQuery, startIndex, endIndex, currentFilters) => {\n  const vessels = []\n\n  const { worldX, worldY, toleranceRadiusInWorldUnits } = tileQuery\n\n  for (let f = startIndex; f < endIndex; f++) {\n    const frame = tileData[f]\n    if (frame === undefined) continue\n    for (let i = 0; i < frame.worldX.length; i++) {\n      const wx = frame.worldX[i]\n      const wy = frame.worldY[i]\n\n      if (\n        (!currentFilters.length || vesselSatisfiesAllFilters(frame, i, currentFilters)) &&\n        wx >= worldX - toleranceRadiusInWorldUnits &&\n        wx <= worldX + toleranceRadiusInWorldUnits &&\n        wy >= worldY - toleranceRadiusInWorldUnits &&\n        wy <= worldY + toleranceRadiusInWorldUnits\n      ) {\n        const vessel = {}\n\n        Object.keys(frame).forEach((key) => {\n          vessel[key] = frame[key][i]\n        })\n        vessel.timeIndex = f\n        vessels.push(vessel)\n      }\n    }\n  }\n  return vessels\n}\n\n/*\nexport const getHistogram = (tiles, propName = 'weight') => {\n  let data = tiles\n    .filter(tile => tile.ready)\n    .map(tile => tile.data\n      .map(frame => frame[propName]));\n  data = flattenDeep(data);\n  if (data.length) {\n    const bins = d3.histogram().thresholds(d3.thresholdScott)(data);\n    const x = d3.scaleLinear().domain([0, d3.max(bins, d => d.length)]).range([0, 50]);\n    console.table(bins.filter(bin => bin.length).map((bin) => {\n      const binMin = d3.min(bin).toLocaleString({ maximumFractionDigits: 2 });\n      const binMax = d3.max(bin).toLocaleString({ maximumFractionDigits: 2 });\n      return {\n        range: [binMin, binMax].join('﹣'),\n        bars: Array(Math.round(x(bin.length))).join('█'),\n        num: bin.length\n      };\n    }));\n  }\n};\n*/\n","import tilecover from '@mapbox/tile-cover/index'\nimport debounce from 'lodash/debounce'\nimport { PerspectiveMercatorViewport } from 'viewport-mercator-project'\nimport { ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING, TILES_LOAD_ZOOM_OFFSET } from '../config'\nimport {\n  getTile,\n  releaseTiles,\n  highlightVesselFromHeatmap,\n  updateLoadedTiles,\n} from './heatmap.actions'\n\nexport const SET_CURRENTLY_VISIBLE_TILES = 'SET_CURRENTLY_VISIBLE_TILES'\nexport const SET_CURRENTLY_LOADED_TILES = 'SET_CURRENTLY_LOADED_TILES'\nexport const SET_CURRENTLY_SWAPPED_TILE_UIDS = 'SET_CURRENTLY_SWAPPED_TILE_UIDS'\nexport const MARK_TILES_UIDS_AS_LOADED = 'MARK_TILES_UIDS_AS_LOADED'\nexport const RELEASE_MARKED_TILES_UIDS = 'RELEASE_MARKED_TILES_UIDS'\n\n// restrict tilecover to a single zoom level\n// could be customized to load less or more detailed tiles\nconst getTilecoverLimits = (viewportZoom) => {\n  let zoom = Math.ceil(viewportZoom + TILES_LOAD_ZOOM_OFFSET)\n  let tilesAvailable = true\n  if (zoom > ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING) {\n    zoom = ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING\n    tilesAvailable = false\n  }\n  return {\n    min_zoom: zoom,\n    max_zoom: zoom,\n    tilesAvailable,\n  }\n}\n\nconst flushToReleaseTiles = () => (dispatch, getState) => {\n  const state = getState()\n  const currentToLoadTileUids = state.map.heatmapTiles.currentToLoadTileUids\n  // console.log('Tiles left to load: ', currentToLoadTileUids);\n\n  // Tiles are released only when all to-load tiles have finished loading\n  // this is to ensure smooth visual transitions between zoom levels\n  if (!currentToLoadTileUids.length) {\n    const currentTilesToReleaseUids = state.map.heatmapTiles.currentToReleaseTileUids\n    // console.log('no more tiles to load, releasing ', currentTilesToReleaseUids);\n    dispatch(releaseTiles(currentTilesToReleaseUids))\n    dispatch({\n      type: RELEASE_MARKED_TILES_UIDS,\n    })\n  }\n}\n\nexport const markTileAsLoaded = (tileUids) => (dispatch) => {\n  dispatch({\n    type: MARK_TILES_UIDS_AS_LOADED,\n    payload: tileUids,\n  })\n  // console.log(tileUids, 'have finished loading');\n  dispatch(flushToReleaseTiles())\n}\n\nconst flushTileState = (forceLoadingAllVisibleTiles = false) => (dispatch, getState) => {\n  const state = getState()\n  const currentVisibleTiles = state.map.heatmapTiles.currentVisibleTiles\n  let tilesToLoad = []\n  const tilesToReleaseUids = []\n\n  if (forceLoadingAllVisibleTiles === true) {\n    tilesToLoad = currentVisibleTiles\n  } else {\n    const currentLoadedTiles = state.map.heatmapTiles.currentLoadedTiles\n\n    currentVisibleTiles.forEach((visibleTile) => {\n      if (currentLoadedTiles.find((t) => t.uid === visibleTile.uid) === undefined) {\n        tilesToLoad.push(visibleTile)\n      }\n    })\n\n    currentLoadedTiles.forEach((loadedTile) => {\n      if (currentVisibleTiles.find((t) => t.uid === loadedTile.uid) === undefined) {\n        tilesToReleaseUids.push(loadedTile.uid)\n      }\n    })\n  }\n\n  const tilesToLoadUids = tilesToLoad.map((t) => t.uid)\n  // console.log('force loading:', forceLoadingAllVisibleTiles)\n  // console.log('visible', currentVisibleTiles.map(t => t.uid))\n  // console.log('load', tilesToLoadUids)\n  // console.log('release', tilesToReleaseUids)\n  // console.log('----')\n\n  tilesToLoad.forEach((tile) => {\n    dispatch(getTile(tile))\n  })\n  dispatch({\n    type: SET_CURRENTLY_LOADED_TILES,\n    payload: currentVisibleTiles,\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_SWAPPED_TILE_UIDS,\n    payload: {\n      tilesToLoadUids,\n      tilesToReleaseUids,\n    },\n  })\n\n  dispatch(updateLoadedTiles())\n  dispatch(flushToReleaseTiles())\n}\n\nconst _debouncedFlushState = (dispatch) => {\n  dispatch(flushTileState())\n}\nconst debouncedFlushState = debounce(_debouncedFlushState, 500)\n\nexport const updateHeatmapTilesFromViewport = (forceLoadingAllVisibleTiles = false) => (\n  dispatch,\n  getState\n) => {\n  // if in transition, skip loading/releasing\n  // else\n  //   collect all tiles in viewport\n  //   save them to reducer: currentVisibleTiles\n  // if not zooming: flush immediately\n  //   if forceLoadingAllVisiblelTiles\n  //     get tiles from currentVisibleTiles\n  //   else\n  //     get tiles from currentVisibleTiles\n  //     make delta with currentLoadedTiles\n  //     get tiles from delta+\n  //     release tiles from delta-\n  //   save to reducer: currentVisibleTiles -> currentLoadedTiles\n  // if zooming: debounced flush to avoid \"tile spam\"\n  const mapViewport = getState().map.viewport\n  const viewport = mapViewport.viewport\n\n  // do not allow any tile update during transitions (currently only zoom)\n  // wait for the end of the transition to look at viewport and load matching tiles\n  if (!viewport.width || !viewport.height || mapViewport.currentTransition !== null) {\n    return\n  }\n\n  // instanciate a viewport instance to get lat/lon from screen top left/ bottom right bounds\n  const boundsViewport = new PerspectiveMercatorViewport(viewport)\n  const bounds = [\n    boundsViewport.unproject([0, 0]),\n    boundsViewport.unproject([viewport.width, viewport.height]),\n  ]\n\n  const [wn, es] = bounds\n  const [w, s, e, n] = [wn[0], es[1], es[0], wn[1]]\n  const boundsPolygonsCoordinates = []\n\n  const limits = getTilecoverLimits(viewport.zoom)\n  if (limits.tilesAvailable === false && forceLoadingAllVisibleTiles !== true) {\n    return\n  }\n\n  if (e > 180 || w < -180) {\n    // deal with the antimeridian situation by splitting the bounds polygon into two polygons\n    const w1 = e > 180 ? w : w + 360\n    const e1 = 180 - 0.001\n    const w2 = -180\n    const e2 = e > 180 ? e - 360 : e\n    boundsPolygonsCoordinates.push([[[w1, n], [e1, n], [e1, s], [w1, s], [w1, n]]])\n    boundsPolygonsCoordinates.push([[[w2, n], [e2, n], [e2, s], [w2, s], [w2, n]]])\n  } else {\n    boundsPolygonsCoordinates.push([[[w, n], [e, n], [e, s], [w, s], [w, n]]])\n  }\n\n  const geom = {\n    type: 'MultiPolygon',\n    coordinates: boundsPolygonsCoordinates,\n  }\n\n  // using tilecover, get xyz tile coords as well as quadkey indexes (named uid through the app)\n  const viewportTilesCoords = tilecover.tiles(geom, limits)\n  const viewportTilesIndexes = tilecover.indexes(geom, limits)\n  const visibleTiles = []\n\n  viewportTilesCoords.forEach((coords, i) => {\n    const uid = viewportTilesIndexes[i]\n    const zoom = coords[2]\n    if (zoom >= 2) {\n      visibleTiles.push({\n        tileCoordinates: {\n          x: coords[0],\n          y: coords[1],\n          zoom: coords[2],\n        },\n        uid,\n      })\n    }\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_VISIBLE_TILES,\n    payload: visibleTiles,\n  })\n\n  const isMouseWheelZooming = mapViewport.prevZoom !== viewport.zoom\n\n  if (isMouseWheelZooming === false) {\n    dispatch(flushTileState(forceLoadingAllVisibleTiles))\n  } else {\n    debouncedFlushState(dispatch)\n  }\n}\n\nexport const queryHeatmapVessels = (coords, temporalExtentIndexes) => (dispatch, getState) => {\n  // use tilecover to get what tile quadkey/uid \"belongs\" to the point\n  const geom = {\n    type: 'Point',\n    coordinates: [coords.longitude, coords.latitude],\n  }\n  const zoom = getState().map.viewport.viewport.zoom\n\n  // get quadkey for tile at current zoom level, but also neighbouring zoom levels,\n  // in case current zoom level tiles has not been loaded yet\n  const uids = [zoom, zoom - 1, zoom + 1]\n    .map((z) => getTilecoverLimits(z))\n    .map((limits) => tilecover.indexes(geom, limits))\n    .map((indexes) => indexes[0])\n\n  const query = {\n    ...coords,\n    uids,\n  }\n\n  // console.log(query);\n  dispatch(highlightVesselFromHeatmap(query, temporalExtentIndexes))\n}\n","import difference from 'lodash/difference'\nimport uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  getTilePlaybackData,\n  selectVesselsAt,\n} from '../utils/heatmapTileData'\nimport { markTileAsLoaded } from './heatmapTiles.actions'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_HEATMAP_LAYER = 'ADD_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_STYLE = 'UPDATE_HEATMAP_LAYER_STYLE'\nexport const ADD_REFERENCE_TILE = 'ADD_REFERENCE_TILE'\nexport const HIGHLIGHT_VESSELS = 'HIGHLIGHT_VESSELS'\nexport const INIT_HEATMAP_LAYERS = 'INIT_HEATMAP_LAYERS'\nexport const REMOVE_HEATMAP_LAYER = 'REMOVE_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES =\n  'UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES'\nexport const UPDATE_HEATMAP_TILE = 'UPDATE_HEATMAP_TILE'\nexport const RELEASE_HEATMAP_TILES = 'RELEASE_HEATMAP_TILES'\nexport const UPDATE_LOADED_TILES = 'UPDATE_LOADED_TILES'\nexport const HIGHLIGHT_CLICKED_VESSEL = 'HIGHLIGHT_CLICKED_VESSEL'\nexport const CLEAR_HIGHLIGHT_CLICKED_VESSEL = 'CLEAR_HIGHLIGHT_CLICKED_VESSEL'\n\n/**\n * getTemporalExtentsVisibleIndices - Compares timebar outer extent with temporal extents present on the layer header\n * @param  {array} loadTemporalExtent Current timebar outer extent\n * @param  {array} layerTemporalExtents Temporal extent present on the layer's header (an array of extent arrays)\n * @return {array}                    Indices of the layer's temporal extents that should be visible\n */\nfunction getTemporalExtentsVisibleIndices(loadTemporalExtent, layerTemporalExtents) {\n  const currentExtentStart = loadTemporalExtent[0].getTime()\n  const currentExtentEnd = loadTemporalExtent[1].getTime()\n  const indices = []\n  layerTemporalExtents.forEach((temporalExtent, index) => {\n    const temporalExtentStart = temporalExtent[0]\n    const temporalExtentEnd = temporalExtent[1]\n    if (temporalExtentEnd >= currentExtentStart && temporalExtentStart <= currentExtentEnd) {\n      indices.push(index)\n    }\n  })\n  return indices\n}\n\n/**\n * loadLayerTile - loads an heatmap tile.\n *\n * @param  {string} layerId              layer id\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {string} token                the user's token\n * @param  {array} temporalExtentsIndices which of the temporal extents from  temporalExtents should be loaded\n * @param  {string} urls                 tile endpoints provided by header\n * @param  {array} temporalExtents       all of the layer's header temporal extents\n * @param  {bool} temporalExtentsLess    true = don't try to load different tiles based on current time extent\n * @return {Promise}                     a Promise that will be resolved when tile is loaded\n */\nfunction loadLayerTile(\n  layerId,\n  tileCoordinates,\n  token,\n  temporalExtentsIndices,\n  { url, temporalExtents, temporalExtentsLess }\n) {\n  // console.log('loadLayerTile', layerId, tileCoordinates, temporalExtentsIndices)\n  if (url === undefined) {\n    throw new Error('URL/endpoints object is not available on this tilesets header')\n  }\n  const pelagosPromises = getTilePromises(url, token, temporalExtents, {\n    tileCoordinates,\n    temporalExtentsIndices,\n    temporalExtentsLess,\n  })\n  const allLayerPromises = Promise.all(pelagosPromises)\n\n  const layerTilePromise = new Promise((resolve) => {\n    allLayerPromises.then((rawTileData) => {\n      resolve({\n        loadedLayerId: layerId,\n        rawTileData,\n      })\n    })\n  })\n\n  return layerTilePromise\n}\n\n/**\n * parseLayerTile - parses an heatmap tile to a playback-ready format.\n *\n * @param  {Object} rawTileData          the raw tile data, loaded either from the pelagos client or as a MVT/PBF vector tile\n * @param  {array} colsByName            names of the columns present in the raw tiles that need to be included in the final playback data\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {array} prevPlaybackData      (optional) in case some time extent was already loaded for this tile, append to this data\n * @return {Object}                      playback-ready merged data\n */\nfunction parseLayerTile(rawTileData, colsByName, tileCoordinates, prevPlaybackData) {\n  let data\n\n  const cleanVectorArrays = getCleanVectorArrays(rawTileData)\n  data = groupData(cleanVectorArrays, Object.keys(colsByName))\n  if (Object.keys(data).length === 0) {\n    return []\n  }\n\n  const playbackData = getTilePlaybackData(data, colsByName, tileCoordinates, prevPlaybackData)\n  return playbackData\n}\n\n/**\n * getTiles - loads a bunch of heatmap tiles\n * @param  {array} layerIds                 list of layer Ids that need to be loaded for this/these tiles\n * @param  {array} referenceTiles           list of reference tiles (tile data regardless of layer) that need to be loaded\n * @param  {object} newTemporalExtentsToLoad (optional) a dict (layerId is the key) of temporal extents\n * indices that should be appended to existing data\n */\nfunction getTiles(layerIds, referenceTiles, newTemporalExtentsToLoad = undefined) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state, layerIds.join('-'))\n    const token = state.map.module.token\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const tilesByLayer = {}\n    layerIds.forEach((id) => {\n      tilesByLayer[id] = [...heatmapLayers[id].tiles]\n    })\n    const allPromises = []\n\n    layerIds.forEach((layerId) => {\n      const heatmapLayerHeader = heatmapLayers[layerId].header\n      const { temporalExtents, temporalExtentsLess, colsByName } = { ...heatmapLayerHeader }\n      const url = heatmapLayerHeader.endpoints.tiles\n\n      referenceTiles.forEach((referenceTile) => {\n        // check if tile does not already exist first\n        let tile = tilesByLayer[layerId].find((t) => t.uid === referenceTile.uid)\n        if (!tile) {\n          // console.log('create tile ', referenceTile.uid)\n          tile = {\n            uid: referenceTile.uid,\n            temporalExtentsIndicesLoaded: [],\n          }\n          tilesByLayer[layerId].push(tile)\n        } else {\n          // console.log('found tile', referenceTile.uid)\n        }\n\n        const queriedTemporalExtentsIndices =\n          newTemporalExtentsToLoad === undefined\n            ? heatmapLayers[layerId].visibleTemporalExtentsIndices\n            : newTemporalExtentsToLoad[layerId]\n\n        const temporalExtentsIndicesToLoad = difference(\n          queriedTemporalExtentsIndices,\n          tile.temporalExtentsIndicesLoaded\n        )\n\n        const tilePromise = loadLayerTile(\n          layerId,\n          referenceTile.tileCoordinates,\n          token,\n          temporalExtentsIndicesToLoad,\n          {\n            url,\n            temporalExtents,\n            temporalExtentsLess,\n          }\n        )\n\n        allPromises.push(tilePromise)\n\n        tilePromise.then(({ loadedLayerId, rawTileData }) => {\n          tile.temporalExtentsIndicesLoaded = uniq(\n            tile.temporalExtentsIndicesLoaded.concat(temporalExtentsIndicesToLoad)\n          )\n          tile.data = parseLayerTile(\n            rawTileData,\n            colsByName,\n            referenceTile.tileCoordinates,\n            tile.data\n          )\n\n          dispatch({\n            type: UPDATE_HEATMAP_TILE,\n            payload: {\n              layerId: loadedLayerId,\n              tile,\n            },\n          })\n        })\n      })\n    })\n\n    Promise.all(allPromises).then(() => {\n      dispatch(completeLoader(loaderID))\n      dispatch(markTileAsLoaded(referenceTiles.map((tile) => tile.uid)))\n    })\n  }\n}\n\n/**\n * getTile - This action is emitted when a new tile is queried from panning or zooming the map\n * This will load a tile for all currently visible heatmap layers\n *\n * @param  {object} referenceTile a reference tile containing xyz coords and uid\n */\nexport function getTile(referenceTile) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_REFERENCE_TILE,\n      payload: referenceTile,\n    })\n    const visibleHeatmapLayers = getState().map.heatmap.heatmapLayers\n    const visibleHeatmapLayersIds = Object.keys(visibleHeatmapLayers).filter(\n      (id) => visibleHeatmapLayers[id].visible === true\n    )\n\n    if (visibleHeatmapLayersIds.length) {\n      dispatch(getTiles(visibleHeatmapLayersIds, [referenceTile]))\n    }\n  }\n}\n\n/**\n * releaseTiles - This action is emitted when an existing tile is removed from panning or zooming the map\n * @param  {array} uids tile ref uids to release\n */\nexport const releaseTiles = (uids) => ({\n  type: RELEASE_HEATMAP_TILES,\n  payload: uids,\n})\n\nexport const updateLoadedTiles = () => ({\n  type: UPDATE_LOADED_TILES,\n})\n\n// triggered when a layer is added or set to visible\nfunction loadAllTilesForLayer(layerId) {\n  return (dispatch, getState) => {\n    //                current layer, all reference tiles\n    const referenceTiles = getState().map.heatmap.referenceTiles\n    dispatch(getTiles([layerId], referenceTiles))\n  }\n}\n\nexport const addHeatmapLayer = (layer, loadTemporalExtent) => (dispatch) => {\n  const layerTemporalExtents = layer.header.temporalExtents\n  dispatch({\n    type: ADD_HEATMAP_LAYER,\n    payload: {\n      ...layer,\n      // initially attach which of the temporal extents indices are visible with initial outerExtent\n      visibleTemporalExtentsIndices: getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        layerTemporalExtents\n      ),\n    },\n  })\n\n  if (layer.visible === true) {\n    dispatch(loadAllTilesForLayer(layer.id))\n  }\n}\n\nexport const removeHeatmapLayer = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_HEATMAP_LAYER,\n    payload: {\n      id,\n    },\n  })\n}\n\n/**\n * updateLayerLoadTemporalExtents - when outer time extent changes, checks if more tiles needs to be loaded\n * by comparing the outer time range with the temporalExtent already loaded on each layer.\n * @param  {array} loadTemporalExtent Current app-wide extent of tiles that need to load, expressed\n * as an array of two dates\n */\nexport function updateLayerLoadTemporalExtents(loadTemporalExtent) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const indicesToAddByLayer = {}\n\n    Object.keys(heatmapLayers).forEach((layerId) => {\n      const heatmapLayer = heatmapLayers[layerId]\n      const temporalExtents = heatmapLayer.header.temporalExtents\n      const oldVisibleTemporalExtentsIndices = heatmapLayer.visibleTemporalExtentsIndices\n      const newVisibleTemporalExtentsIndices = getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        temporalExtents\n      )\n\n      const indicesAdded = difference(\n        newVisibleTemporalExtentsIndices,\n        oldVisibleTemporalExtentsIndices\n      )\n\n      const indicesRemoved = difference(\n        oldVisibleTemporalExtentsIndices,\n        newVisibleTemporalExtentsIndices\n      )\n\n      if (indicesAdded.length || indicesRemoved.length) {\n        // add new loaded indices to heatmap layer if applicable\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n          payload: {\n            layerId,\n            newVisibleTemporalExtentsIndices,\n            indicesRemoved,\n          },\n        })\n      }\n      if (indicesAdded.length) {\n        indicesToAddByLayer[layerId] = indicesAdded\n      }\n    })\n\n    // getTiles with indices diff\n    const layerIdsWithIndicesToAdd = Object.keys(indicesToAddByLayer)\n    if (layerIdsWithIndicesToAdd.length) {\n      dispatch(\n        getTiles(layerIdsWithIndicesToAdd, state.map.heatmap.referenceTiles, indicesToAddByLayer)\n      )\n    }\n  }\n}\n\n/**\n * Returns clusters or vessels data from a tileQuery\n * @param {object} state - the application state\n * @param {string} tileQuery - the id of a heatmap layer\n * @return {object} { isEmpty, isCluster, isMouseCluster, foundVessels, layerId, tilesetId }\n */\nconst _queryHeatmap = (state, tileQuery, temporalExtentIndexes) => {\n  const layers = state.map.heatmap.heatmapLayers\n  const startIndex = temporalExtentIndexes[0]\n  const endIndex = temporalExtentIndexes[1]\n  const layersVessels = []\n\n  Object.keys(layers).forEach((layerId) => {\n    const layer = layers[layerId]\n    if (layer.visible !== true) {\n      return\n    }\n    const allPossibleTilesByPreference = tileQuery.uids.map((uid) =>\n      layer.tiles.find((tile) => tile.uid === uid)\n    )\n    const availableTiles = allPossibleTilesByPreference.filter(\n      (tile) => tile !== undefined && tile.data !== undefined\n    )\n\n    const currentFilters = layer.filters\n    if (availableTiles.length) {\n      const bestTile = availableTiles[0]\n      layersVessels.push({\n        layer,\n        vessels: selectVesselsAt(bestTile.data, tileQuery, startIndex, endIndex, currentFilters),\n      })\n    }\n  })\n\n  const layersVesselsResults = layersVessels.filter(\n    (layerVessels) => layerVessels.vessels.length > 0\n  )\n\n  // it's a cluster because of aggregation on the server side\n  let isCluster\n  // its a cluster because or multiple vessels under mouse\n  let isMouseCluster\n  let isEmpty\n  let layerVesselsResult\n  let foundVessels\n\n  if (layersVesselsResults.length === 0) {\n    isEmpty = true\n  } else if (layersVesselsResults.length > 1) {\n    // if there are points over multiple layers, consider this a cluster (ie don't select, zoom instead, or don't highlight)\n    // there's an exception if vessel selection contains an encounter, in which case it will take priority\n    isCluster = true\n  } else {\n    // layersVesselsResults should contain a single result\n    layerVesselsResult = layersVesselsResults[0]\n\n    // we can get multiple points with similar series and id, in which case\n    // we should treat that as a successful vessel query, not a cluster\n    const vessels = layerVesselsResult.vessels\n\n    if (vessels.length === 0) {\n      isEmpty = true\n    } else {\n      // look up for any negatives ids (clusters on the server side)\n      const clusteredVessels = vessels.filter((v) => v.id < 0)\n      if (clusteredVessels.length) {\n        isCluster = true\n      } else {\n        foundVessels = uniqBy(vessels, (v) => v.series)\n        isMouseCluster = foundVessels.length > 1\n      }\n    }\n  }\n\n  const layer = layerVesselsResult === undefined ? {} : layerVesselsResult.layer\n\n  return { isEmpty, isCluster, isMouseCluster, foundVessels, layer }\n}\n\nexport function clearHighlightedVessels() {\n  return {\n    type: HIGHLIGHT_VESSELS,\n    payload: {\n      isEmpty: true,\n      clickableCluster: false,\n    },\n  }\n}\n\nexport function highlightVesselFromHeatmap(tileQuery, temporalExtentIndexes) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const { layer, isEmpty, isCluster, isMouseCluster, foundVessels } = _queryHeatmap(\n      state,\n      tileQuery,\n      temporalExtentIndexes\n    )\n\n    if (\n      isCluster === true ||\n      layer.id !== undefined ||\n      state.map.heatmap.highlightedVessels.layerId !== layer.id\n    ) {\n      const layerPayload =\n        layer === undefined\n          ? null\n          : {\n              id: layer.id,\n              tilesetId: layer.tilesetId,\n              subtype: layer.subtype,\n              header: layer.header,\n            }\n      dispatch({\n        type: HIGHLIGHT_VESSELS,\n        payload: {\n          layer: layerPayload,\n          isEmpty,\n          clickableCluster: isCluster === true || isMouseCluster === true,\n          highlightableCluster: isCluster !== true,\n          foundVessels,\n        },\n      })\n    } else {\n      dispatch(clearHighlightedVessels())\n    }\n  }\n}\n\nexport const highlightClickedVessel = (id, layerId) => ({\n  type: HIGHLIGHT_CLICKED_VESSEL,\n  payload: {\n    id,\n    layerId,\n  },\n})\n\nexport const clearHighlightedClickedVessel = () => ({\n  type: CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n})\n\nexport const updateHeatmapLayers = (newLayers, currentLoadTemporalExtent) => (\n  dispatch,\n  getState\n) => {\n  if (newLayers === null) {\n    console.warn(\"New layers in updateHeatmapLayers can't be null\")\n    return\n  }\n  const prevLayersDict = getState().map.heatmap.heatmapLayers\n\n  // add and update layers\n  newLayers.forEach((newLayer) => {\n    const layerId = newLayer.id\n    const prevLayer = prevLayersDict[layerId]\n    if (prevLayer === undefined) {\n      // console.log('adding', layerId)\n      dispatch(addHeatmapLayer(newLayer, currentLoadTemporalExtent))\n    } else {\n      if (prevLayer.visible !== newLayer.visible && newLayer.visible === true) {\n        dispatch(loadAllTilesForLayer(layerId))\n      }\n      if (\n        prevLayer.visible !== newLayer.visible ||\n        prevLayer.hue !== newLayer.hue ||\n        prevLayer.opacity !== newLayer.opacity ||\n        prevLayer.filters !== newLayer.filters ||\n        prevLayer.interactive !== newLayer.interactive\n      ) {\n        // console.log('updating', layerId, ' with visibilty', newLayer.visible)\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_STYLE,\n          payload: {\n            id: newLayer.id,\n            visible: newLayer.visible,\n            hue: newLayer.hue,\n            opacity: newLayer.opacity,\n            filters: newLayer.filters,\n            interactive: newLayer.interactive,\n          },\n        })\n      }\n    }\n  })\n\n  // clean up unused layers\n  Object.keys(prevLayersDict).forEach((prevLayerId) => {\n    if (!newLayers.find((l) => l.id === prevLayerId)) {\n      dispatch(removeHeatmapLayer(prevLayerId))\n    }\n  })\n}\n","import { fitBounds, pixelsToWorld } from 'viewport-mercator-project'\nimport { updateHeatmapTilesFromViewport } from '../heatmap/heatmapTiles.actions'\nimport { onViewportChange } from '../module/module.actions'\nimport { CLUSTER_CLICK_ZOOM_INCREMENT } from '../config' // TODO MAP MODULE\n\nexport const SET_BOUNDS = 'SET_BOUNDS'\nexport const SET_VIEWPORT = 'SET_VIEWPORT'\nexport const UPDATE_VIEWPORT = 'UPDATE_VIEWPORT'\nexport const SET_ZOOM_INCREMENT = 'SET_ZOOM_INCREMENT'\nexport const SET_MOUSE_LAT_LONG = 'SET_MOUSE_LAT_LONG'\nexport const TRANSITION_END = 'TRANSITION_END'\nexport const SET_NATIVE_VIEWPORT = 'SET_NATIVE_VIEWPORT'\n\nexport const setBounds = (bounds) => ({\n  type: SET_BOUNDS,\n  payload: bounds,\n})\n\nexport const setViewport = (viewport, interactionState) => (dispatch) => {\n  dispatch({\n    type: SET_VIEWPORT,\n    payload: viewport,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange(interactionState))\n}\n\nexport const updateViewport = (viewportUpdate) => (dispatch) => {\n  dispatch({\n    type: UPDATE_VIEWPORT,\n    payload: viewportUpdate,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  // Not needed as call the callback with the same values\n  // dispatch(onViewportChange())\n}\n\nconst transitionTo = (increment, latitude = null, longitude = null, zoom = null) => (dispatch) => {\n  dispatch({\n    type: SET_ZOOM_INCREMENT,\n    payload: {\n      increment,\n      latitude,\n      longitude,\n      zoom,\n    },\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const transitionToZoom = (viewport) => (dispatch) => {\n  dispatch(transitionTo(null, viewport.center[0], viewport.center[1], viewport.zoom))\n}\n\nexport const transitionEnd = () => (dispatch) => {\n  dispatch({\n    type: TRANSITION_END,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const zoomIntoVesselCenter = (latitude, longitude, zoom = null) => (dispatch) => {\n  dispatch(transitionTo(CLUSTER_CLICK_ZOOM_INCREMENT, latitude, longitude, zoom))\n}\n\nexport const fitToBounds = (bounds) => (dispatch, getState) => {\n  const state = getState()\n  const vp = fitBounds({\n    bounds: [[bounds.minLng, bounds.minLat], [bounds.maxLng, bounds.maxLat]],\n    width: state.map.viewport.viewport.width,\n    height: state.map.viewport.viewport.height,\n    padding: 50,\n  })\n  dispatch(transitionTo(null, vp.latitude, vp.longitude, vp.zoom))\n}\n\nexport const exportNativeViewport = (nativeViewport) => (dispatch) => {\n  const topLeftPx = [0, 0]\n  const bottomRightPx = [nativeViewport.width, nativeViewport.height]\n\n  // compute left and right offsets to deal with antimeridian issue\n  const topLeftWorld = pixelsToWorld(topLeftPx, nativeViewport.pixelUnprojectionMatrix)\n  const bottomRightWorld = pixelsToWorld(bottomRightPx, nativeViewport.pixelUnprojectionMatrix)\n  const leftWorldScaled = topLeftWorld[0] / nativeViewport.scale\n  const rightWorldScaled = bottomRightWorld[0] / nativeViewport.scale\n\n  // lat/lon corners for miniglobe\n  const northWest = nativeViewport.unproject(topLeftPx)\n  const southEast = nativeViewport.unproject(bottomRightPx)\n  const bounds = {\n    north: northWest[1],\n    south: southEast[1],\n    west: northWest[0],\n    east: southEast[0],\n  }\n\n  dispatch({\n    type: SET_NATIVE_VIEWPORT,\n    payload: {\n      leftWorldScaled,\n      rightWorldScaled,\n      bounds,\n    },\n  })\n}\n","import area from '@turf/area'\nimport { POLYGON_LAYERS_AREA } from '../constants'\nimport { clearHighlightedVessels, clearHighlightedClickedVessel } from '../heatmap/heatmap.actions'\nimport { zoomIntoVesselCenter } from './viewport.actions'\n\nexport const SET_POPUP = 'SET_POPUP'\nexport const CLEAR_POPUP = 'CLEAR_POPUP'\nexport const SET_MAP_CURSOR = 'SET_MAP_CURSOR'\n\nconst getAreaKm2 = (glFeature) => {\n  const areakm2 = 10 ** -6 * area(glFeature.geometry)\n  const formatted = areakm2.toLocaleString('en-US', { maximumFractionDigits: 0 })\n  return formatted\n}\n\nconst getFields = (glFeature, source = null) => {\n  if (source === null || source === undefined) {\n    // console.warn('Couldnt find source when looking for fields of layer', sourceId)\n  }\n\n  const fieldsDefinition =\n    !source || source.metadata === undefined || source.metadata['gfw:popups'] === undefined\n      ? []\n      : source.metadata['gfw:popups']\n\n  const properties = glFeature.properties\n\n  // whitelist if 'gfw:popups' exist, if not return all\n  const fieldsKeys = Object.keys(glFeature.properties).filter(\n    (k) => fieldsDefinition.length === 0 || fieldsDefinition.find((fd) => fd.id === k) !== undefined\n  )\n\n  const fields = fieldsKeys.map((fieldKey) => {\n    const value = fieldKey === POLYGON_LAYERS_AREA ? getAreaKm2(glFeature) : properties[fieldKey]\n    const def = fieldsDefinition.find((fd) => fd.id === fieldKey) || {}\n    const label = def.label || fieldKey\n    return {\n      id: fieldKey,\n      label,\n      value,\n      title: `${label}: ${value}`,\n      isLink: def.isLink,\n      isMain: def.isMain,\n    }\n  })\n\n  const mainField =\n    fields.find((f) => f.isMain === true) ||\n    fields.find((f) => f.id === 'name') ||\n    fields.find((f) => f.id === 'id') ||\n    fields[0]\n\n  if (mainField !== undefined) {\n    mainField.isMain = true\n  }\n  return fields\n}\n\nconst getCluster = (glFeature, glGetSource) => {\n  const clusterId = glFeature.properties.cluster_id\n  const sourceId = glFeature.source\n  const glSource = glGetSource(sourceId)\n  const promise = new Promise((resolve, reject) => {\n    glSource.getClusterExpansionZoom(clusterId, (err1, zoom) => {\n      glSource.getClusterLeaves(clusterId, 99, 0, (err2, children) => {\n        if (err1 || err2) {\n          reject()\n        }\n        const childrenFeatures = children.map((child) =>\n          getFeature(child, glFeature.layer.id, glSource)\n        )\n        resolve({\n          zoom,\n          childrenFeatures,\n        })\n      })\n    })\n  })\n  return promise\n}\n\nconst getFeature = (glFeature, layerId, source) => {\n  const feature = {\n    properties: glFeature.properties,\n  }\n  const fields = getFields(glFeature, source)\n  feature.fields = fields\n\n  // Get most likely feature title\n  const mainField = fields.find((f) => f.isMain === true)\n  feature.title = mainField === undefined ? layerId : mainField.value\n\n  return feature\n}\n\nexport const mapInteraction = (interactionType, latitude, longitude, glFeatures, glGetSource) => (\n  dispatch,\n  getState\n) => {\n  if (interactionType === 'click') {\n    dispatch(clearHighlightedClickedVessel())\n  }\n\n  const currentStyle = getState().map.style.mapStyle.toJS()\n\n  const event = {\n    latitude,\n    longitude,\n    features: [],\n  }\n\n  // Collect and normalize features on legacy heatmap\n  const currentLegacyHeatmapData = getState().map.heatmap.highlightedVessels\n  let legacyHeatmapFeature\n\n  if (currentLegacyHeatmapData.isEmpty !== true) {\n    const foundVessels =\n      currentLegacyHeatmapData.foundVessels === undefined\n        ? []\n        : currentLegacyHeatmapData.foundVessels\n    const properties = foundVessels.length === 0 ? [] : foundVessels[0]\n    const isCluster = currentLegacyHeatmapData.clickableCluster === true\n    const count =\n      isCluster === true && currentLegacyHeatmapData.highlightableCluster === false\n        ? -1\n        : foundVessels.length\n    legacyHeatmapFeature = {\n      isCluster,\n      count,\n      layer: {\n        id: currentLegacyHeatmapData.layer.id,\n        group: 'legacyHeatmap',\n      },\n      properties,\n    }\n    event.features.push(legacyHeatmapFeature)\n  }\n\n  // Try to retrieve 'gfw:id' (generated when instanciating CARTO layer to preserve original style.json id)\n  // In most cases it won't exist, so fall back to source id\n  const getStaticLayerIdFromGlFeature = (glFeature) =>\n    (glFeature.layer.metadata !== undefined && glFeature.layer.metadata['gfw:id']) ||\n    glFeature.layer.source\n\n  // Collect gl features\n  const clusterPromises = []\n  const allGlFeatures = glFeatures || []\n  allGlFeatures.forEach((glFeature) => {\n    const layerId = getStaticLayerIdFromGlFeature(glFeature)\n    const source = currentStyle.sources[layerId]\n    const feature = {\n      layer: {\n        id: layerId,\n        group: glFeature.layer.metadata && glFeature.layer.metadata['mapbox:group'],\n      },\n      ...getFeature(glFeature, layerId, source),\n    }\n\n    if (glFeature.properties.cluster === true) {\n      // lookup for cluster\n      const clusterPromise = getCluster(glFeature, glGetSource).then((cluster) => {\n        feature.cluster = cluster\n        feature.count = cluster.childrenFeatures.length\n      })\n      clusterPromises.push(clusterPromise)\n      feature.isCluster = true\n    } else {\n      feature.isCluster = false\n    }\n    event.features.push(feature)\n  })\n\n  Promise.all(clusterPromises).then(() => {\n    // The whole set of features is considered a cluster\n    // if any feature is a cluster, or there is more than one feature\n    event.isCluster =\n      event.features.length > 1 || event.features.some((feature) => feature.isCluster === true)\n\n    // legacy heatmap layers can yield clusters with an unknown number of features, handle this here:\n    if (legacyHeatmapFeature !== undefined && legacyHeatmapFeature.count === -1) {\n      event.count = -1\n    } else {\n      event.count = event.features.reduce((count, feature) => {\n        let featureCount = feature.count || 1\n        return count + featureCount\n      }, 0)\n    }\n\n    if (event.count === 1) {\n      event.feature = event.features[0]\n    }\n\n    // When autoClusterZoom is set to true, we handle zoom here\n    const autoClusterZoom = getState().map.module.autoClusterZoom === true\n\n    // Check if cluster using customizable isCluster() callback\n    // If not set resolves simply to (event) => event.isCluster === true\n    const clusterBehavior = getState().map.module.isCluster(event)\n    event.isCluster = clusterBehavior\n\n    if (autoClusterZoom) {\n      if (interactionType === 'click' && event.isCluster === true) {\n        dispatch(clearHighlightedVessels())\n        const clusterZoom = event.features[0].cluster && event.features[0].cluster.zoom\n        dispatch(zoomIntoVesselCenter(latitude, longitude, clusterZoom))\n      }\n    }\n\n    let cursor = event.features.length ? 'pointer' : null\n    if (event.isCluster === true) {\n      cursor = 'zoom-in'\n    }\n\n    dispatch({\n      type: SET_MAP_CURSOR,\n      payload: cursor,\n    })\n\n    const callback =\n      interactionType === 'click' ? getState().map.module.onClick : getState().map.module.onHover\n\n    if (callback !== undefined) {\n      callback(event)\n    }\n  })\n}\n","const RGB_MAX = 255\nconst HUE_MAX = 360\nconst SV_MAX = 100\n\nexport const VESSELS_HUES_INCREMENTS_NUM = 31 // 360 / VESSELS_HUES_INCREMENTS_NUM - 1  should give a round number\nexport const VESSELS_HUES_INCREMENT = 360 / (VESSELS_HUES_INCREMENTS_NUM - 1)\n\n// Legacy: this is only here for compatibility with pre-mapbox branch workspaces\nexport const COLOR_HUES = {\n  orange: 0,\n  peach: 22,\n  yellow: 60,\n  green: 85,\n  brightGreen: 145,\n  lightBlue: 182,\n  blue: 236,\n  purple: 284,\n  pink: 312,\n}\n\n// FIXME mark explicitely as legacy. Check all usages.\nexport const getKeyByValue = (obj, value) => {\n  let result = null\n  Object.entries(obj).forEach((entry) => {\n    if (entry[1] === value) result = entry[0]\n  })\n  return result\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport const rgbToHsv = (_r, _g, _b) => {\n  const r = _r / 255\n  const g = _g / 255\n  const b = _b / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n      default:\n        h = 0\n    }\n\n    h /= 6\n  }\n\n  return [h, s, v]\n}\n\n// converts hue, saturation, luminance to an rgb object\nexport const hsvToRgb = (h_, s_, v_) => {\n  const h = ((h_ % HUE_MAX) / parseFloat(HUE_MAX)) * 6\n  const s = s_ === SV_MAX ? 1 : (s_ % SV_MAX) / parseFloat(SV_MAX)\n  const v = v_ === SV_MAX ? 1 : (v_ % SV_MAX) / parseFloat(SV_MAX)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r: Math.round(r * RGB_MAX), g: Math.round(g * RGB_MAX), b: Math.round(b * RGB_MAX) }\n}\n\n// returns an rgb string with default saturation and luminance values\nconst hueToRgbDefaults = (hue) => hsvToRgb(hue, 50, 100)\n\nexport const hueToRgbString = (hue) => {\n  const rgb = hueToRgbDefaults(hue)\n  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`\n}\n\nexport const rgbToHexString = (rgb, css) => {\n  const str = ['r', 'g', 'b']\n    .map((channelName) => {\n      const channelValue = rgb[channelName]\n      let channelStr = channelValue.toString(16)\n      if (channelValue < 16) {\n        channelStr = `0${channelStr}`\n      }\n      return channelStr\n    })\n    .join('')\n  const prefix = css === true ? '#' : '0x'\n  return `${prefix}${str}`\n}\n\nexport const hueToRgbHexString = (hue, css) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToHexString(rgb, css)\n}\n\nconst closestNumber = (numberArray, goal) =>\n  numberArray.reduce((prev, curr) => (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev))\n\nexport const hueToClosestColor = (hue) => {\n  if (hue === undefined || hue === null) return undefined\n  const colorHueValues = Object.keys(COLOR_HUES).map((key) => COLOR_HUES[key])\n  const closestHue = closestNumber(colorHueValues, hue)\n  return getKeyByValue(COLOR_HUES, closestHue)\n}\n\nexport const hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst rgbToRgbaString = (rgb, opacity) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`\n\nexport const hueToRgbaString = (hue, opacity) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hexToRgba = (hex, opacity) => {\n  const rgb = hexToRgb(hex)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hueIncrementToHue = (hueIncrement) => hueIncrement * VESSELS_HUES_INCREMENT\n\nexport const hueToHueIncrement = (hue) =>\n  Math.round((hue / 360) * (VESSELS_HUES_INCREMENTS_NUM - 1))\n\nexport const wrapHue = (hue) => hue % 360\n\nexport const hueOrColorToHexColor = (color, hue) => {\n  if (hue !== undefined) {\n    return hueToRgbHexString(hue, true)\n  }\n\n  return color\n}\n","/* global PIXI */\nimport 'pixi.js'\nimport { hueToHueIncrement, VESSELS_HUES_INCREMENTS_NUM } from '../utils/map-colors'\nimport { VESSELS_BASE_RADIUS, MAX_SPRITES_PER_LAYER } from '../config'\n\nexport default class HeatmapSubLayer {\n  constructor(baseTexture, renderingStyleIndex, hue, useNormalBlendMode = false) {\n    // this.stage = new PIXI.Container();\n    // the ParticleContainer is a faster version of the PIXI sprite container\n    this.stage = new PIXI.particles.ParticleContainer(MAX_SPRITES_PER_LAYER, {\n      scale: true,\n      alpha: true,\n      position: true,\n      uvs: true,\n    })\n    if (useNormalBlendMode === false) {\n      this.stage.blendMode = PIXI.BLEND_MODES.SCREEN\n    }\n\n    this.spritesPool = []\n\n    const initialTextureFrame = new PIXI.Rectangle(\n      0,\n      0,\n      VESSELS_BASE_RADIUS * 2,\n      VESSELS_BASE_RADIUS * 2\n    )\n    this.mainVesselTexture = new PIXI.Texture(baseTexture, initialTextureFrame)\n    this._setTextureFrame(renderingStyleIndex, hue)\n\n    this.clearSpriteProps()\n  }\n\n  clearSpriteProps() {\n    this.spritesProps = {\n      x: new Float32Array(MAX_SPRITES_PER_LAYER),\n      y: new Float32Array(MAX_SPRITES_PER_LAYER),\n      a: new Float32Array(MAX_SPRITES_PER_LAYER),\n      s: new Float32Array(MAX_SPRITES_PER_LAYER),\n    }\n    this.spritesPropsCount = 0\n  }\n\n  pushSpriteProps(x, y, a, s) {\n    this.spritesProps.x[this.spritesPropsCount] = x\n    this.spritesProps.y[this.spritesPropsCount] = y\n    this.spritesProps.a[this.spritesPropsCount] = a\n    this.spritesProps.s[this.spritesPropsCount] = s\n    this.spritesPropsCount++\n  }\n\n  setRenderingStyleIndex(renderingStyleIndex) {\n    this._setTextureFrame(renderingStyleIndex)\n  }\n\n  destroy() {\n    this.spritesPool = null\n    this.stage.destroy({ children: true })\n  }\n\n  /**\n   * Updates the main texture frame offset to show different brush styles and hues\n   * Both args are optional, if one is omitted, previous value is used\n   * @heatmapStyle bool whether to use heatmap style or solid circle style\n   * @hue number hue value between 0 and 360\n   */\n  _setTextureFrame(renderingStyleIndex = null, hue = null) {\n    const textureFrame = this.mainVesselTexture.frame.clone()\n\n    if (renderingStyleIndex !== null) {\n      // one diameter + tiny offset between 2 frames\n      textureFrame.x = VESSELS_BASE_RADIUS * 2 * renderingStyleIndex + renderingStyleIndex\n    }\n\n    if (hue !== null) {\n      let hueIncrement = hueToHueIncrement(hue)\n      if (hueIncrement === VESSELS_HUES_INCREMENTS_NUM - 1) {\n        hueIncrement = 0\n      }\n      textureFrame.y = hueIncrement * VESSELS_BASE_RADIUS * 2\n      if (hueIncrement > 0) {\n        textureFrame.y += hueIncrement\n      }\n    }\n\n    this.mainVesselTexture.frame = textureFrame\n    this.mainVesselTexture.update()\n  }\n\n  render() {\n    const numProps = this.spritesPropsCount\n    this.resizeSpritesPool()\n\n    for (let i = 0; i < numProps; i++) {\n      const sprite = this.stage.children[i]\n      const s = this.spritesProps.s[i]\n      sprite.setTransform(this.spritesProps.x[i], this.spritesProps.y[i], s, s)\n      sprite.alpha = this.spritesProps.a[i]\n    }\n\n    const numSprites = this.stage.children.length\n    for (let i = numProps; i < numSprites; i++) {\n      const sprite = this.stage.children[i]\n      sprite.x = -100\n    }\n  }\n\n  resizeSpritesPool() {\n    const numProps = this.spritesPropsCount\n    const prevNumSprites = this.stage.children.length\n    const delta = numProps - prevNumSprites\n    // console.log(prevNumSprites, '->', numProps, ' delta:', delta);\n\n    if (delta < -4999) {\n      // sprite needs to be removed. Do that progressively (max 100) to avoid UI lock\n      const toRemove = Math.min(100, -delta)\n      // console.log('removing ', toRemove);\n      for (let i = 0; i < toRemove; i++) {\n        this.stage.removeChildAt(0)\n      }\n    }\n\n    if (delta > 0) {\n      const toAdd = Math.max(5000, delta)\n      // console.log('adding ', toAdd);\n      this._addSprites(toAdd)\n    }\n  }\n\n  _addSprites(num) {\n    for (let i = 0; i < num; i++) {\n      const vessel = new PIXI.Sprite(this.mainVesselTexture)\n      vessel.anchor.x = 0.5\n      vessel.anchor.y = 0.5\n      // ParticlesContainer does not support .visible, so we just move the sprite out of the viewport\n      vessel.x = -100\n      // vessel.blendMode = PIXI.BLEND_MODES.SCREEN;\n      // vessel.filters=  [new PIXI.filters.BlurFilter(10,10)]\n      this.stage.addChild(vessel)\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport uniq from 'lodash/uniq'\nimport * as PIXI from 'pixi.js'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { BRUSH_RENDERING_STYLE, BRUSH_ZOOM_RENDERING_STYLE } from '../constants'\nimport { vesselSatisfiesFilters } from '../utils/heatmapTileData'\nimport HeatmapSubLayer from './HeatmapSubLayer'\n\n// This is a faster version of worldToPixels that omits pitch,\n// and ignores values from the matrix that are consistently = 0\nconst s = 1 / 1.5\nconst worldToPixelsSimple = (x, y, m) => {\n  const fx = s * (m[0] * x + m[4] * y + m[12])\n  const fy = s * (m[5] * y + m[13])\n  return [fx, fy]\n}\n\nclass HeatmapLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.useRadialGradientStyle !== this.props.useRadialGradientStyle) {\n      this.setBrushZoomRenderingStyle(nextProps.useRadialGradientStyle)\n    }\n  }\n\n  _build() {\n    const { layer, rootStage, useRadialGradientStyle, customRenderingStyle } = this.props\n    this.subLayers = {}\n    this.renderingStyle =\n      layer.header && layer.header.rendering ? layer.header.rendering : customRenderingStyle\n\n    this.setBrushRenderingStyle(this.renderingStyle.style)\n    this.setBrushZoomRenderingStyle(useRadialGradientStyle)\n\n    this.stage = new PIXI.Container()\n\n    rootStage.addChild(this.stage)\n  }\n\n  setBrushRenderingStyle(style = BRUSH_RENDERING_STYLE.NORMAL) {\n    if (typeof style === 'string') {\n      this.brushRenderingStyle = BRUSH_RENDERING_STYLE[style.toUpperCase()]\n    } else {\n      this.brushRenderingStyle = style\n    }\n    this._setBrushRenderingStyleIndex()\n  }\n\n  setBrushZoomRenderingStyle(useRadialGradientStyle) {\n    this.brushZoomRenderingStyle =\n      useRadialGradientStyle === true\n        ? BRUSH_ZOOM_RENDERING_STYLE.RADIAL_GRADIENT\n        : BRUSH_ZOOM_RENDERING_STYLE.CIRCLE\n    this._setBrushRenderingStyleIndex()\n  }\n\n  _setBrushRenderingStyleIndex() {\n    // only NORMAL brush styles support different zoom styles\n    const cappedZoomRenderingStyle =\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.NORMAL ? this.brushZoomRenderingStyle : 0\n    const newStyleIndex = this.brushRenderingStyle + cappedZoomRenderingStyle\n    if (newStyleIndex === this.renderingStyleIndex) {\n      return\n    }\n    this.renderingStyleIndex = newStyleIndex\n    Object.values(this.subLayers).forEach((subLayer) => {\n      subLayer.setRenderingStyleIndex(this.renderingStyleIndex)\n    })\n  }\n\n  _redraw() {\n    const { filters, baseTexture, layer } = this.props\n\n    if (\n      layer === null ||\n      layer === undefined ||\n      layer.tiles === undefined ||\n      layer.visible === false\n    ) {\n      this.stage.visible = false\n      return\n    }\n\n    this.stage.visible = true\n    this.stage.alpha = layer.opacity\n\n    const tiles = layer.tiles\n    const defaultHue = layer.hue\n    const allHuesToRender =\n      filters !== undefined && filters.length\n        ? filters\n            // pass is set to true by filterGroupActions when none of the filters fields\n            // in the filter group is supported by the layer headers\n            .filter((f) => f.pass !== true)\n            .map((f) => (f.hue === undefined ? '0' : f.hue.toString()))\n        : [defaultHue.toString()]\n    const currentlyUsedHues = Object.keys(this.subLayers)\n\n    // get all hues, old and new\n    const allHues = uniq(allHuesToRender.concat(currentlyUsedHues))\n\n    for (let i = 0; i < allHues.length; i++) {\n      const hue = allHues[i]\n      if (allHuesToRender.indexOf(hue) === -1) {\n        // not on new hues: delete sublayer\n        this._destroySubLayer(this.subLayers[hue])\n        delete this.subLayers[hue]\n        continue\n      }\n      if (currentlyUsedHues.indexOf(hue) === -1) {\n        // not on old hues: create sublayer\n        this.subLayers[hue] = this._createSublayer(baseTexture, this.renderingStyleIndex, hue)\n      }\n      this.subLayers[hue].clearSpriteProps()\n    }\n\n    if (!allHuesToRender.length) return\n    tiles.forEach((tile) => {\n      this._setSubLayersSpritePropsForTile({\n        data: tile.data,\n        numFilters: filters.length,\n        defaultHue,\n      })\n    })\n\n    allHuesToRender.forEach((hueToRender) => {\n      this.subLayers[hueToRender].render()\n    })\n  }\n\n  _setSubLayersSpritePropsForTile({ data, numFilters, defaultHue }) {\n    if (!data) {\n      return\n    }\n\n    const { startIndex, endIndex, viewport, filters, viewportLeft, viewportRight } = this.props\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let index = 0, len = frame.worldX.length; index < len; index++) {\n        let hue\n        if (filters === undefined || !filters.length) {\n          hue = defaultHue\n        }\n        for (let fi = 0; fi < numFilters; fi++) {\n          const filter = filters[fi]\n          if (vesselSatisfiesFilters(frame, index, filter.filterValues)) {\n            hue = filter.hue\n            break\n          }\n        }\n\n        // no filter passes: bail\n        if (hue === undefined) {\n          continue\n        }\n\n        // wrap worldX when point crosses the antimeridian/dateline\n        // world points go from 0 to 512. There is no way to determine if worldX is on the \"wrong\" side\n        // of the antimeridian just by looking at its value (where with lat/lon we can simply look at -/+)\n        // Therefore we compare it to the viewport's left or right boundary, depending on what is currently\n        // \"the right side\" of the antimeridian\n        let worldX = frame.worldX[index]\n        if (viewportLeft > 0 && worldX < viewportLeft) {\n          // worldX is \"behind\" viewportLeft, which means it is \"on the right\" of the antimeridian\n          worldX += 512\n        } else if (viewportLeft < 0 && worldX > viewportRight) {\n          worldX -= 512\n        }\n\n        const scaledX = worldX * viewport.scale\n        const scaledY = frame.worldY[index] * viewport.scale\n        const mtx = viewport.pixelProjectionMatrix\n\n        const [x, y] =\n          viewport.pitch === 0\n            ? worldToPixelsSimple(scaledX, scaledY, mtx)\n            : worldToPixels([scaledX, scaledY], mtx)\n\n        if (x > -10 && x < viewport.width + 10 && y > -10 && y < viewport.height + 10) {\n          this.subLayers[hue].pushSpriteProps(\n            x,\n            y,\n            frame.opacity ? frame.opacity[index] : this.renderingStyle.defaultOpacity,\n            frame.radius ? frame.radius[index] : this.renderingStyle.defaultSize\n          )\n        }\n      }\n    }\n  }\n\n  _createSublayer(baseTexture, renderingStyleIndex, hue) {\n    const subLayer = new HeatmapSubLayer(\n      baseTexture,\n      renderingStyleIndex,\n      hue,\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.BULLSEYE\n    )\n    this.stage.addChild(subLayer.stage)\n    return subLayer\n  }\n\n  _destroy() {\n    Object.values(this.subLayers).forEach(this._destroySubLayer.bind(this))\n    this.stage.destroy({ children: true })\n    const { rootStage } = this.props\n    rootStage.removeChild(this.stage)\n  }\n\n  _destroySubLayer(subLayer) {\n    this.stage.removeChild(subLayer.stage)\n    subLayer.destroy()\n  }\n\n  render() {\n    return null\n  }\n}\n\nHeatmapLayer.propTypes = {\n  layer: PropTypes.object,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  filters: PropTypes.array,\n  baseTexture: PropTypes.object,\n  useRadialGradientStyle: PropTypes.bool,\n  customRenderingStyle: PropTypes.object,\n  viewportLeft: PropTypes.number,\n  viewportRight: PropTypes.number,\n}\n\nexport default HeatmapLayer\n","import React, { Fragment } from 'react'\nimport * as PIXI from 'pixi.js'\nimport PropTypes from 'prop-types'\nimport { BaseControl } from 'react-map-gl'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport {\n  hsvToRgb,\n  hueToRgbString,\n  hueIncrementToHue,\n  wrapHue,\n  VESSELS_HUES_INCREMENTS_NUM,\n} from '../utils/map-colors'\nimport {\n  VESSELS_BASE_RADIUS,\n  VESSELS_HEATMAP_BLUR_FACTOR,\n  ACTIVITY_HIGHLIGHT_HUE,\n  VESSELS_HEATMAP_DIMMING_ALPHA,\n  VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD,\n  VESSEL_CLICK_TOLERANCE_PX,\n} from '../config'\nimport HeatmapLayer from '../heatmap/HeatmapLayer'\n\nconst shouldUseRadialGradientStyle = (zoom) => zoom < VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD\n\n// builds a texture spritesheet containing\n// - the heatmap style (radial gradient)\n// - the circle style that is used at higher zoom levels\n// - the 'bullseye' style used for encounters\n// as well as a number of hues for each in a 2D grid.\n// Then, only the texture frame (mesh UVs) is modified depending on the zoom level,\n// in order not to have to recreate sprites\nconst getVesselTexture = (radius, blurFactor) => {\n  const tplCanvas = document.createElement('canvas')\n  const tplCtx = tplCanvas.getContext('2d')\n  const diameter = radius * 2\n  const NUM_STYLES = 3\n  tplCanvas.width = diameter * NUM_STYLES + (NUM_STYLES - 1) // + (NUM_STYLES - 1): tiny offset between 2 frames\n  tplCanvas.height = diameter * VESSELS_HUES_INCREMENTS_NUM + VESSELS_HUES_INCREMENTS_NUM\n\n  for (let hueIncrement = 0; hueIncrement < VESSELS_HUES_INCREMENTS_NUM; hueIncrement++) {\n    const y = diameter * hueIncrement + hueIncrement\n    const yCenter = y + radius\n\n    // heatmap style\n    let x = radius\n    const gradient = tplCtx.createRadialGradient(\n      x,\n      yCenter,\n      radius * blurFactor,\n      x,\n      yCenter,\n      radius\n    )\n    const hue = hueIncrementToHue(hueIncrement)\n    const rgbString = hueToRgbString(hue)\n    gradient.addColorStop(0, rgbString)\n\n    const rgbOuter = hsvToRgb(wrapHue(hue + 30), 80, 100)\n    gradient.addColorStop(1, `rgba(${rgbOuter.r}, ${rgbOuter.g}, ${rgbOuter.b}, 0)`)\n\n    tplCtx.fillStyle = gradient\n    tplCtx.fillRect(0, y, diameter, diameter)\n\n    // circle style\n    x += diameter + 1 // tiny offset between 2 frames\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n\n    // bullseye style\n    x += diameter + 1\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.4, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.95, 0, 2 * Math.PI, false)\n    tplCtx.lineWidth = 1\n    tplCtx.strokeStyle = rgbString\n    tplCtx.stroke()\n  }\n\n  return tplCanvas\n}\n\nclass ActivityLayers extends BaseControl {\n  state = {\n    pixiReady: false,\n  }\n\n  componentDidMount() {\n    this._build()\n    this.setState({\n      pixiReady: true,\n    })\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.props.exportNativeViewport(this._context.viewport)\n\n    if (\n      nextProps.viewport.width !== this.props.viewport.width ||\n      nextProps.viewport.height !== this.props.viewport.height\n    ) {\n      this._updateViewportSize(nextProps.viewport.width, nextProps.viewport.height)\n    }\n  }\n\n  _build() {\n    const { width, height } = this.props.viewport\n\n    this.pixi = new PIXI.Application({\n      width,\n      height,\n      transparent: true,\n      antialias: true,\n    })\n\n    this.renderer = this.pixi.renderer\n    this.canvas = this.pixi.view\n    this.canvas.style.position = 'absolute'\n\n    this.container.appendChild(this.canvas)\n\n    this.stage = this.pixi.stage\n\n    const baseTextureCanvas = getVesselTexture(VESSELS_BASE_RADIUS, VESSELS_HEATMAP_BLUR_FACTOR)\n    this.baseTexture = PIXI.Texture.fromCanvas(baseTextureCanvas)\n\n    this.heatmapStage = new PIXI.Container()\n    this.stage.addChild(this.heatmapStage)\n\n    this.pixi.ticker.add(this._onTick)\n  }\n\n  _destroy() {\n    this.pixi.destroy()\n  }\n\n  _updateViewportSize(viewportWidth, viewportHeight) {\n    this.renderer.resize(viewportWidth, viewportHeight)\n  }\n\n  toggleHeatmapDimming(dim) {\n    if (this.heatmapStage === undefined) {\n      return\n    }\n    if (dim === true) {\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = dim === true ? VESSELS_HEATMAP_DIMMING_ALPHA : 1\n  }\n\n  onTouchStart = (event) => {\n    if (!event.touches.length) {\n      return\n    }\n    this.queryCoords(event.touches[0].clientX, event.touches[0].clientY)\n  }\n\n  onMouseMove = (event) => {\n    this.queryCoords(event.clientX, event.clientY)\n  }\n\n  queryCoords(x, y) {\n    // bail if all heatmap layers are set to non-interactive\n    if (this.props.heatmapLayers.every((l) => l.interactive !== true)) {\n      return\n    }\n\n    const { viewport } = this._context\n    const [longitude, latitude] = viewport.unproject([x, y])\n\n    let wrappedLongitude = longitude\n    if (wrappedLongitude > 180) {\n      wrappedLongitude -= 360\n    } else if (wrappedLongitude < -180) {\n      wrappedLongitude += 360\n    }\n\n    const [worldX, worldY] = lngLatToWorld([wrappedLongitude, latitude], 1)\n\n    const toleranceRadiusInWorldUnits = VESSEL_CLICK_TOLERANCE_PX / viewport.scale\n\n    this.props.queryHeatmapVessels(\n      {\n        longitude: wrappedLongitude,\n        latitude,\n        worldX,\n        worldY,\n        toleranceRadiusInWorldUnits,\n      },\n      this.props.temporalExtentIndexes\n    )\n  }\n\n  _onTick = () => {\n    if (this.heatmapFadingIn === true && this.heatmapStage.alpha < 1) {\n      this._heatmapFadeinStep()\n    }\n  }\n\n  _startHeatmapFadein() {\n    this.heatmapFadingIn = true\n    this.heatmapFadeinStartTimestamp = undefined\n  }\n\n  _heatmapFadeinStep() {\n    if (this.heatmapFadeinStartTimestamp === undefined) {\n      this.heatmapFadeinStartTimestamp = Date.now()\n    }\n    const timeElapsed = (Date.now() - this.heatmapFadeinStartTimestamp) / 1000\n    let alpha = this.heatmapStage.alpha + (1 - this.heatmapStage.alpha) * timeElapsed\n    if (alpha >= 1) {\n      alpha = 1\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = alpha\n  }\n\n  // FIXME move to container?\n  _getHighlightData(highlightedVessels, highlightedClickedVessel, heatmapLayers) {\n    const hue = ACTIVITY_HIGHLIGHT_HUE\n    let highlightLayerData = {\n      id: '__HIGHLIGHT__',\n      visible: true,\n      opacity: 1,\n      hue: ACTIVITY_HIGHLIGHT_HUE,\n    }\n    let highlightFilters = []\n\n    if (\n      highlightedVessels !== undefined &&\n      highlightedVessels.layer !== undefined &&\n      highlightedVessels.foundVessels !== undefined &&\n      highlightedVessels.isEmpty !== true\n    ) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedVessels.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = highlightedVessels.foundVessels.map((vessel) => ({\n        hue,\n        filterValues: {\n          series: [vessel.series],\n        },\n      }))\n    } else if (highlightedClickedVessel !== null) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedClickedVessel.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = [\n        {\n          hue,\n          filterValues: {\n            series: [highlightedClickedVessel.id],\n          },\n        },\n      ]\n    }\n    return {\n      highlightLayerData,\n      highlightFilters,\n    }\n  }\n  _render() {\n    const {\n      zoom,\n      heatmapLayers,\n      temporalExtentIndexes,\n      highlightedVessels,\n      highlightedClickedVessel,\n      leftWorldScaled,\n      rightWorldScaled,\n    } = this.props\n    const { viewport } = this._context\n    const { pixiReady } = this.state\n\n    const startIndex = temporalExtentIndexes[0]\n    const endIndex = temporalExtentIndexes[1]\n    const useRadialGradientStyle = shouldUseRadialGradientStyle(zoom)\n\n    if (highlightedVessels.isEmpty !== true) {\n      this.toggleHeatmapDimming(true)\n    }\n    if (highlightedVessels.isEmpty === true) {\n      this._startHeatmapFadein()\n    }\n    if (this.renderer && this.renderer.gl && this.renderer.gl.getError !== undefined) {\n      const err = this.renderer.gl.getError()\n      if (err !== 0) console.log(err)\n    }\n\n    const { highlightLayerData, highlightFilters } = this._getHighlightData(\n      highlightedVessels,\n      highlightedClickedVessel,\n      heatmapLayers\n    )\n\n    return (\n      <div\n        ref={(ref) => {\n          this.container = ref\n        }}\n        style={{ position: 'absolute' }}\n        onMouseMove={this.onMouseMove}\n        onTouchStart={this.onTouchStart}\n      >\n        {pixiReady === true && (\n          <Fragment>\n            {heatmapLayers.map((layer) => (\n              <HeatmapLayer\n                key={layer.id}\n                layer={layer}\n                filters={layer.filters || []}\n                viewport={viewport}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                baseTexture={this.baseTexture}\n                rootStage={this.heatmapStage}\n                useRadialGradientStyle={useRadialGradientStyle}\n                customRenderingStyle={{}}\n                viewportLeft={leftWorldScaled}\n                viewportRight={rightWorldScaled}\n              />\n            ))}\n            {this.stage !== undefined && (\n              <HeatmapLayer\n                key=\"highlighted\"\n                layer={highlightLayerData}\n                filters={highlightFilters}\n                viewport={viewport}\n                startIndex={startIndex}\n                endIndex={endIndex}\n                baseTexture={this.baseTexture}\n                rootStage={this.heatmapStage}\n                useRadialGradientStyle={useRadialGradientStyle}\n                customRenderingStyle={{ defaultOpacity: 1, defaultSize: 1 }}\n                viewportLeft={leftWorldScaled}\n                viewportRight={rightWorldScaled}\n              />\n            )}\n          </Fragment>\n        )}\n      </div>\n    )\n  }\n}\n\nActivityLayers.propTypes = {\n  zoom: PropTypes.number,\n  heatmapLayers: PropTypes.array,\n  temporalExtentIndexes: PropTypes.array,\n  highlightedVessels: PropTypes.object,\n  highlightedClickedVessel: PropTypes.object,\n  queryHeatmapVessels: PropTypes.func,\n  exportNativeViewport: PropTypes.func,\n  leftWorldScaled: PropTypes.number,\n  rightWorldScaled: PropTypes.number,\n}\n\nActivityLayers.contextTypes = {\n  viewport: PropTypes.object,\n}\n\nexport default ActivityLayers\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport convert from '@globalfishingwatch/map-convert'\nimport { exportNativeViewport } from '../glmap/viewport.actions'\nimport { getTemporalExtent } from '../module/module.selectors'\nimport ActivityLayers from './ActivityLayers'\nimport { queryHeatmapVessels } from '../heatmap/heatmapTiles.actions'\nimport { MIN_FRAME_LENGTH_MS } from '../config'\n\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\n\nconst getHeatmapLayersAsArray = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    const a = Object.keys(heatmapLayers).map((id) => ({\n      ...heatmapLayers[id],\n    }))\n    // console.log(a)\n    return a\n  }\n)\n\nconst getTemporalExtentIndexes = createSelector(\n  [getTemporalExtent],\n  (temporalExtent) => {\n    const startTimestamp = temporalExtent[0].getTime()\n    const endTimestamp = Math.max(\n      temporalExtent[1].getTime(),\n      temporalExtent[0].getTime() + MIN_FRAME_LENGTH_MS\n    )\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst mapStateToProps = (state) => ({\n  highlightedVessels: state.map.heatmap.highlightedVessels,\n  highlightedClickedVessel: state.map.heatmap.highlightedClickedVessel,\n  viewport: state.map.viewport.viewport,\n  zoom: state.map.viewport.viewport.zoom,\n  heatmapLayers: getHeatmapLayersAsArray(state),\n  leftWorldScaled: state.map.viewport.leftWorldScaled,\n  rightWorldScaled: state.map.viewport.rightWorldScaled,\n  temporalExtentIndexes: getTemporalExtentIndexes(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  queryHeatmapVessels: (coords, temporalExtentIndexes) => {\n    dispatch(queryHeatmapVessels(coords, temporalExtentIndexes))\n  },\n  exportNativeViewport: (viewport) => {\n    dispatch(exportNativeViewport(viewport))\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActivityLayers)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport MapGL, { Popup, Marker } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport { TILES_URL_NEEDING_AUTHENTICATION } from '../config'\nimport ActivityLayers from '../activity/ActivityLayers.container.js'\nimport styles from './map.css'\n\nconst PopupWrapper = (props) => {\n  const { latitude, longitude, children, closeButton, onClose } = props\n  return (\n    <Popup\n      latitude={latitude}\n      longitude={longitude}\n      closeButton={closeButton}\n      onClose={onClose}\n      anchor=\"bottom\"\n      offsetTop={-10}\n      tipSize={4}\n      closeOnClick={false}\n    >\n      {children}\n    </Popup>\n  )\n}\n\nPopupWrapper.propTypes = {\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n  children: PropTypes.node.isRequired,\n  closeButton: PropTypes.bool.isRequired,\n  onClose: PropTypes.func,\n}\n\nPopupWrapper.defaultProps = {\n  onClose: () => {},\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: true,\n    }\n    this._mapContainerRef = null\n  }\n\n  componentDidMount() {\n    if (this._mapContainerRef !== null) {\n      this.loadObserver()\n    }\n    this.setBounds()\n  }\n\n  componentDidUpdate() {\n    this.setBounds()\n  }\n\n  onLoad = () => {\n    if (this.props.onLoad !== undefined) {\n      this.props.onLoad(this.getBounds())\n    }\n  }\n\n  setBounds = () => {\n    const bounds = this.getBounds()\n    if (bounds !== null && this.props.setBounds !== undefined) {\n      this.props.setBounds(bounds)\n    }\n  }\n\n  getBounds = () => {\n    if (!this.glMap) return null\n\n    const { _ne, _sw } = this.glMap.getBounds()\n    return {\n      north: _ne.lat,\n      south: _sw.lat,\n      west: _sw.lng,\n      east: _ne.lng,\n    }\n  }\n\n  componentWillUnmount() {\n    if (this._containerResizeObserver) {\n      this._containerResizeObserver.disconnect()\n    }\n  }\n\n  loadObserver = async () => {\n    if ('ResizeObserver' in window === false) {\n      const module = await import('resize-observer-polyfill')\n      window.ResizeObserver = module.ResizeObserver || module.default\n    }\n    this._containerResizeObserver = new ResizeObserver(this.handleResizeObserver)\n    this._containerResizeObserver.observe(this._mapContainerRef)\n  }\n\n  handleResizeObserver = (entries) => {\n    const { width, height } = entries[0].contentRect\n    const { viewport, setViewport } = this.props\n\n    if (width !== viewport.width || height !== viewport.height) {\n      setViewport({\n        ...viewport,\n        width,\n        height,\n      })\n    }\n  }\n\n  onViewportChange = (viewport, interactionState) => {\n    const propsViewport = this.props.viewport\n    if (\n      propsViewport.latitude !== viewport.latitude ||\n      propsViewport.longitude !== viewport.longitude ||\n      propsViewport.zoom !== viewport.zoom ||\n      propsViewport.bearing !== viewport.bearing ||\n      propsViewport.pitch !== viewport.pitch\n    ) {\n      this.props.setViewport(viewport, interactionState)\n    }\n  }\n\n  onMapInteraction = (event, type) => {\n    this.props.mapInteraction(\n      type,\n      event.lngLat[1],\n      event.lngLat[0],\n      event.features,\n      this.glGetSource\n    )\n  }\n\n  onHover = (event) => {\n    this.onMapInteraction(event, 'hover')\n  }\n\n  onClick = (event) => {\n    this.onMapInteraction(event, 'click')\n  }\n\n  getRef = (ref) => {\n    if (ref !== null) {\n      this.glMap = ref.getMap()\n      this.glGetSource = this.glMap.getSource.bind(this.glMap)\n    }\n  }\n\n  getCursor = ({ isDragging }) => {\n    const { cursor } = this.props\n    if (cursor === null) {\n      return isDragging ? 'grabbing' : 'grab'\n    }\n    return cursor\n  }\n\n  transformRequest = (url, resourceType) => {\n    const { token } = this.props\n    if (token !== null && resourceType === 'Tile' && url.match(TILES_URL_NEEDING_AUTHENTICATION)) {\n      return {\n        url: url,\n        headers: { Authorization: 'Bearer ' + token },\n      }\n    }\n  }\n\n  render() {\n    const {\n      viewport,\n      maxZoom,\n      minZoom,\n      transitionEnd,\n      mapStyle,\n      onClosePopup,\n      clickPopup,\n      hoverPopup,\n      hasHeatmapLayers,\n      markers,\n      interactiveLayerIds,\n    } = this.props\n\n    return (\n      <div\n        id=\"map\"\n        className={styles.map}\n        ref={(ref) => {\n          this._mapContainerRef = ref\n        }}\n        onMouseLeave={() => {\n          this.setState({ mouseOver: false })\n        }}\n        onMouseEnter={() => {\n          this.setState({ mouseOver: true })\n        }}\n      >\n        <MapGL\n          {...viewport}\n          ref={this.getRef}\n          transformRequest={this.transformRequest}\n          onTransitionEnd={transitionEnd}\n          onLoad={this.onLoad}\n          onHover={this.onHover}\n          onClick={this.onClick}\n          getCursor={this.getCursor}\n          mapStyle={mapStyle}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          onViewportChange={this.onViewportChange}\n          interactiveLayerIds={interactiveLayerIds}\n          clickRadius={4}\n        >\n          {hasHeatmapLayers !== false && <ActivityLayers />}\n          {clickPopup !== undefined && clickPopup !== null && (\n            <PopupWrapper\n              latitude={clickPopup.latitude}\n              longitude={clickPopup.longitude}\n              closeButton\n              onClose={onClosePopup}\n            >\n              {clickPopup.content}\n            </PopupWrapper>\n          )}\n          {this.state.mouseOver === true && hoverPopup !== undefined && hoverPopup !== null && (\n            <PopupWrapper\n              latitude={hoverPopup.latitude}\n              longitude={hoverPopup.longitude}\n              closeButton={false}\n            >\n              {hoverPopup.content}\n            </PopupWrapper>\n          )}\n          {markers !== null &&\n            markers.length > 0 &&\n            markers.map((marker, i) => (\n              <Marker key={i} latitude={marker.latitude} longitude={marker.longitude}>\n                {marker.content}\n              </Marker>\n            ))}\n        </MapGL>\n        <div className={styles.googleLogo} />\n      </div>\n    )\n  }\n}\n\nMap.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.object.isRequired,\n  mapStyle: PropTypes.object.isRequired,\n  clickPopup: PropTypes.object,\n  hoverPopup: PropTypes.object,\n  maxZoom: PropTypes.number.isRequired,\n  minZoom: PropTypes.number.isRequired,\n  setViewport: PropTypes.func.isRequired,\n  setBounds: PropTypes.func,\n  mapInteraction: PropTypes.func,\n  onLoad: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  transitionEnd: PropTypes.func,\n  cursor: PropTypes.string,\n  hasHeatmapLayers: PropTypes.bool.isRequired,\n  markers: PropTypes.arrayOf(\n    PropTypes.shape({\n      latitude: PropTypes.number.isRequired,\n      longitude: PropTypes.number.isRequired,\n      content: PropTypes.node,\n    })\n  ),\n  interactiveLayerIds: PropTypes.arrayOf(PropTypes.string),\n}\n\nMap.defaultProps = {\n  token: null,\n  clickPopup: null,\n  hoverPopup: null,\n  mapInteraction: () => {},\n  onLoad: () => {},\n  onClosePopup: () => {},\n  transitionEnd: () => {},\n  cursor: null,\n  markers: null,\n  interactiveLayerIds: null,\n  setBounds: undefined,\n}\n\nexport default Map\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { fromJS } from 'immutable'\nimport { TRACKS_LAYER_IN_FRONT_OF_GROUP } from '../config'\nimport { closePopup } from '../module/module.actions.js'\nimport { getTracksStyles } from '../tracks/tracks.selectors.js'\nimport { mapInteraction } from './interaction.actions.js'\nimport { setBounds, setViewport, transitionEnd } from './viewport.actions.js'\nimport Map from './Map'\n\nconst getStaticLayers = (state) => state.map.style.staticLayers\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\nconst getInternalCursor = (state) => state.map.interaction.cursor\nconst getModuleCursor = (state) => state.map.module.cursor\n\nconst hasHeatmapLayers = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    return Object.keys(heatmapLayers).length > 0\n  }\n)\nconst getInteractiveLayerIds = createSelector(\n  [getStaticLayers],\n  // Note: here we assume that layer IDs provided with module match the GL layers that should\n  // be interactive or not, ie typically the fill layer if a label layer is present\n  (staticLayers) => {\n    return staticLayers.reduce((acc, layer) => {\n      if (!layer.interactive || !layer.visible) return acc\n      // We also need to check nested layers interactivity when custom gl layers are provided\n      if (layer.gl !== undefined) {\n        layer.gl.layers.forEach((glLayer, index) => {\n          // layers.length === 1 is used to ensure when parent layer is marked as interactive we have to\n          // have at least one interactive sublayer, then checked eah one individually\n          if (\n            layer.gl.layers.length === 1 ||\n            (glLayer.metadata !== undefined && glLayer.metadata['gfw:interactive'] === true)\n          ) {\n            const glLayerId = glLayer.id || index > 0 ? `${layer.id}-${index}` : layer.id\n            acc.push(glLayerId)\n          }\n        })\n      } else {\n        acc.push(layer.id)\n      }\n      return acc\n    }, [])\n  }\n)\n\nconst getMapStyles = (state) => state.map.style.mapStyle\nconst getMapStyle = createSelector(\n  [getMapStyles, getTracksStyles],\n  (mapStyles, trackStyles) => {\n    if (!trackStyles) return mapStyles\n\n    const currentLayerGroups = mapStyles\n      .toJS()\n      .layers.filter((l) => l.metadata !== undefined)\n      .map((l) => l.metadata['mapbox:group'])\n    const trackLayersIndex = currentLayerGroups.lastIndexOf(TRACKS_LAYER_IN_FRONT_OF_GROUP) + 1\n\n    let finalMapStyles = mapStyles.mergeIn(['sources'], trackStyles.sources)\n    let mapStylesLayers = mapStyles.get('layers')\n    trackStyles.layers.forEach((trackLayer, i) => {\n      mapStylesLayers = mapStylesLayers.insert(trackLayersIndex + i, fromJS(trackLayer))\n    })\n    finalMapStyles = finalMapStyles.set('layers', mapStylesLayers)\n    return finalMapStyles\n  }\n)\n\nconst getCursor = createSelector(\n  [getInternalCursor, getModuleCursor],\n  (internalCursor, moduleCursor) => {\n    if (moduleCursor !== null) {\n      return moduleCursor\n    }\n    return internalCursor\n  }\n)\nconst mapStateToProps = (state) => ({\n  viewport: state.map.viewport.viewport,\n  maxZoom: state.map.viewport.maxZoom,\n  minZoom: state.map.viewport.minZoom,\n  onLoad: state.map.module.onLoad,\n  cursor: getCursor(state),\n  token: state.map.module.token,\n  mapStyle: getMapStyle(state),\n  hasHeatmapLayers: hasHeatmapLayers(state),\n  interactiveLayerIds: getInteractiveLayerIds(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setViewport: (viewport, interactionState) => {\n    dispatch(setViewport(viewport, interactionState))\n  },\n  setBounds: (bounds) => {\n    dispatch(setBounds(bounds))\n  },\n  mapInteraction: (type, lat, long, features, cluster, glGetSource) => {\n    dispatch(mapInteraction(type, lat, long, features, cluster, glGetSource))\n  },\n  transitionEnd: () => {\n    dispatch(transitionEnd())\n  },\n  onClosePopup: () => {\n    dispatch(closePopup())\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map)\n","import { fromJS } from 'immutable'\nimport uniq from 'lodash/uniq'\nimport GL_STYLE from './gl-styles/style.json'\nimport {\n  SET_MAP_STYLE,\n  MARK_CARTO_LAYERS_AS_INSTANCIATED,\n  INIT_MAP_STYLE,\n  SET_STATIC_LAYERS,\n  SET_BASEMAP_LAYERS,\n} from './style.actions'\n\nconst attributions = uniq(\n  Object.keys(GL_STYLE.sources)\n    .map((sourceKey) => GL_STYLE.sources[sourceKey].attribution)\n    .filter((source) => source !== undefined)\n)\n\nexport const setLayerStyleDefaults = (layer) => {\n  if (layer.layout === undefined) {\n    layer.layout = {}\n  }\n  if (layer.paint === undefined) {\n    layer.paint = {}\n  }\n  if (layer.metadata === undefined) {\n    layer.metadata = {}\n  }\n  // initialize time filter for time-filterable layers\n  if (layer.metadata['gfw:temporal'] === true) {\n    const temporalField =\n      layer.metadata['gfw:temporalField'] === undefined\n        ? 'timestamp'\n        : layer.metadata['gfw:temporalField']\n    layer.filter = ['all', ['>', temporalField, 0], ['<', temporalField, 999999999999]]\n  }\n\n  if (layer.metadata['mapbox:group'] === undefined) {\n    layer.metadata['mapbox:group'] = 'temporal'\n  }\n\n  // set all layers to not visible except layers explicitely marked as visible (default basemap)\n  if (layer.layout.visibility !== 'visible') {\n    layer.layout.visibility = 'none'\n  }\n  return layer\n}\n\nconst setStyleDefaults = (style) => {\n  style.layers.forEach((layer) => {\n    setLayerStyleDefaults(layer)\n  })\n  return style\n}\n\nconst initialState = {\n  mapStyle: fromJS(setStyleDefaults(GL_STYLE)),\n  cartoLayersInstanciated: [],\n  staticLayers: [],\n  basemapLayers: [],\n  attributions,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_MAP_STYLE: {\n      const newMapStyle = state.mapStyle.setIn(['glyphs'], action.payload.glyphsPath)\n      return { ...state, mapStyle: newMapStyle }\n    }\n    case SET_MAP_STYLE: {\n      return { ...state, mapStyle: action.payload }\n    }\n    case SET_STATIC_LAYERS: {\n      return { ...state, staticLayers: action.payload }\n    }\n    case SET_BASEMAP_LAYERS: {\n      return { ...state, basemapLayers: action.payload }\n    }\n    case MARK_CARTO_LAYERS_AS_INSTANCIATED: {\n      const cartoLayersInstanciated = [...state.cartoLayersInstanciated, ...action.payload]\n      return { ...state, cartoLayersInstanciated }\n    }\n    default:\n      return state\n  }\n}\n","// This utility looks at GeoJSON features and returns the predominant geometry type\n\nconst TYPES = [\n  { gl: 'line', geoJSON: ['LineString', 'MultiLineString'] },\n  { gl: 'fill', geoJSON: ['Polygon', 'MultiPolygon'] },\n  { gl: 'circle', geoJSON: ['Point', 'MultiPoint'] },\n]\n\nexport default (geoJSON) => {\n  // collect all geoJSON geom types\n  const allGeoJSONTypes = geoJSON.features.map((feature) => {\n    const geom = feature.geometry\n    if (geom === undefined) {\n      return null\n    }\n    return geom.type\n  })\n\n  // collect number of geometries by GL geom types\n  const numByGLType = TYPES.map((type) => {\n    let num = 0\n    allGeoJSONTypes.forEach((geoJSONType) => {\n      if (type.geoJSON.indexOf(geoJSONType) > -1) {\n        num++\n      }\n    })\n    return { gl: type.gl, num }\n  })\n\n  // get feature types with the higher count\n  let glType = 'fill'\n  let glTypeMax = 0\n  numByGLType.forEach((t) => {\n    if (t.num > glTypeMax) {\n      glType = t.gl\n      glTypeMax = t.num\n    }\n  })\n\n  return glType\n}\n","import { fromJS } from 'immutable'\nimport convert from '@globalfishingwatch/map-convert'\nimport uniq from 'lodash/uniq'\nimport throttle from 'lodash/throttle'\nimport { hexToRgb } from '../utils/map-colors'\nimport { STATIC_LAYERS_CARTO_ENDPOINT, STATIC_LAYERS_CARTO_TILES_ENDPOINT } from '../config'\nimport { CUSTOM_LAYERS_SUBTYPES, GL_TRANSPARENT } from '../constants'\nimport GL_STYLE from './gl-styles/style.json'\nimport { setLayerStyleDefaults } from './style.reducer.js'\nimport getMainGeomType from '../utils/getMainGeomType'\n\nexport const INIT_MAP_STYLE = 'INIT_MAP_STYLE'\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE'\nexport const MARK_CARTO_LAYERS_AS_INSTANCIATED = 'MARK_CARTO_LAYERS_AS_INSTANCIATED'\nexport const SET_STATIC_LAYERS = 'SET_STATIC_LAYERS'\nexport const SET_BASEMAP_LAYERS = 'SET_BASEMAP_LAYERS'\n\nconst setDefaultVectorTiles = (currentSource, refLayerUrl) => {\n  if (currentSource.type !== 'vector') {\n    return currentSource\n  }\n  const tiles = currentSource.tiles\n  const refLayerUrls = refLayerUrl === undefined ? [] : [refLayerUrl]\n\n  const newTiles =\n    tiles !== undefined && tiles.length > 0 ? uniq([...refLayerUrls, ...tiles]) : refLayerUrls\n  return {\n    ...currentSource,\n    tiles: newTiles,\n  }\n}\n\nexport const initStyle = ({ glyphsPath }) => ({\n  type: INIT_MAP_STYLE,\n  payload: {\n    glyphsPath,\n  },\n})\n\nconst setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n})\n\nconst setStyleTemporalExtent = (dispatch, getState, temporalExtent, applyToThrottled = false) => {\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n\n  let start = Math.round(temporalExtent[0].getTime() / 1000)\n  let end = Math.round(temporalExtent[1].getTime() / 1000)\n\n  // TEMPORARY, remove later - temporal layers points should have a timestamp, this is legacy\n  // logic for legacy encounters layer that only have a 'timeIndex'\n  const startIndex = convert.getOffsetedTimeAtPrecision(temporalExtent[0].getTime())\n  const endIndex = convert.getOffsetedTimeAtPrecision(temporalExtent[1].getTime())\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    if (glLayer.metadata === undefined || glLayer.metadata['gfw:temporal'] !== true) {\n      continue\n    }\n\n    if (\n      (applyToThrottled === true && glLayer.metadata['gfw:temporal:throttled'] !== true) ||\n      (applyToThrottled === false && glLayer.metadata['gfw:temporal:throttled'] === true)\n    ) {\n      continue\n    }\n\n    // if layer is temporal, a filter must always be preset on the style.json object\n    // because each layer can have a different time field to be filtered\n    const currentFilter = style.getIn(['layers', i, 'filter']).toJS()\n    if (currentFilter === null) {\n      throw new Error('filter must be preset on style.json for temporal layer: ', glLayer.id)\n    }\n\n    // TEMPORARY, remove later - temporal layers points should have a timestamp, this is legacy\n    // logic for legacy encounters layer that only have a 'timeIndex'\n    const isLegacy = glLayer.metadata && glLayer.metadata['gfw:temporalField'] === 'timeIndex'\n    currentFilter[1][2] = isLegacy ? startIndex : start\n    currentFilter[2][2] = isLegacy ? endIndex : end\n    style = style.setIn(['layers', i, 'filter'], fromJS(currentFilter))\n  }\n  dispatch(setMapStyle(style))\n}\n\nconst applyTemporalExtentThrottled = throttle((dispatch, getState, temporalExtent) => {\n  setStyleTemporalExtent(dispatch, getState, temporalExtent, true)\n}, 400)\n\nexport const applyTemporalExtent = (temporalExtent) => (dispatch, getState) => {\n  setStyleTemporalExtent(dispatch, getState, temporalExtent)\n  applyTemporalExtentThrottled(dispatch, getState, temporalExtent)\n}\n\nconst applyLayerExpressions = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  let newStyle = style\n  const currentStyle = style.toJS()\n  const glType = currentGlLayer.type\n  const defaultStyles = currentStyle.metadata['gfw:styles']\n  const metadata = currentGlLayer.metadata\n  ;['selected', 'highlighted'].forEach((styleType) => {\n    // get selectedFeatures or highlightedFeatures\n    const features = refLayer[`${styleType}Features`]\n    const refLayerStyle = features && features.style ? features.style[glType] : {}\n    const hasFeatures = features !== null && features !== undefined && features.values.length > 0\n    const applyStyleToAllFeatures = refLayer[styleType]\n\n    const defaultStyle = defaultStyles[styleType][glType] || {}\n    const layerStyle =\n      (metadata && metadata['gfw:styles'] && metadata['gfw:styles'][styleType]) || {}\n    const allPaintProperties = { ...defaultStyle, ...layerStyle, ...refLayerStyle }\n\n    if (Object.keys(allPaintProperties).length) {\n      // go through each applicable gl paint property\n      Object.keys(allPaintProperties).forEach((glPaintProperty) => {\n        const selectedValue = allPaintProperties[glPaintProperty][0]\n        const fallbackValue = allPaintProperties[glPaintProperty][1]\n        const paintOrLayout = ['icon-size', 'icon-image'].includes(glPaintProperty)\n          ? 'layout'\n          : 'paint'\n        let glPaintFinalValue\n        if (\n          hasFeatures === false &&\n          applyStyleToAllFeatures !== true &&\n          applyStyleToAllFeatures !== false\n        ) {\n          // style reset when no features filter is declared and neither is applyAll\n          const originalLayerStyle = GL_STYLE.layers.find((l) => l.id === currentGlLayer.id)\n\n          if (originalLayerStyle !== undefined) {\n            // for reset: do not repaint with default style when layer as a custom main color property\n            if (\n              currentGlLayer.metadata &&\n              currentGlLayer.metadata['gfw:mainColorPaintProperty'] === glPaintProperty\n            ) {\n              glPaintFinalValue = null\n            } else {\n              glPaintFinalValue = originalLayerStyle[paintOrLayout][glPaintProperty]\n            }\n          } else {\n            // this will happen when no style exist in the original definition (ie custom layers)\n            // in this case set glPaintFinalValue to null and we'll just skip applying\n            // any selected/highlighted style for this layer\n            glPaintFinalValue = null\n          }\n        } else if (applyStyleToAllFeatures === true || applyStyleToAllFeatures === false) {\n          glPaintFinalValue = applyStyleToAllFeatures === true ? selectedValue : fallbackValue\n        } else {\n          let layerColorRgbString = ''\n          if (refLayer.color !== null && refLayer.color !== undefined) {\n            const layerColorRgb = hexToRgb(refLayer.color)\n            layerColorRgbString = `${layerColorRgb.r},${layerColorRgb.g},${layerColorRgb.b}`\n          }\n          glPaintFinalValue = [\n            'match',\n            ['get', features.field],\n            features.values,\n            typeof selectedValue !== 'string'\n              ? selectedValue\n              : selectedValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n            typeof fallbackValue !== 'string'\n              ? fallbackValue\n              : fallbackValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbString),\n          ]\n        }\n\n        if (glPaintFinalValue !== undefined && glPaintFinalValue !== null) {\n          newStyle = newStyle.setIn(\n            ['layers', glLayerIndex, paintOrLayout, glPaintProperty],\n            glPaintFinalValue\n          )\n        }\n      })\n    }\n  })\n  return newStyle\n}\n\nconst toggleLayerVisibility = (style, refLayer, glLayerIndex) => {\n  const visibility = refLayer.visible === true ? 'visible' : 'none'\n  return style.setIn(['layers', glLayerIndex, 'layout', 'visibility'], visibility)\n}\n\nconst updateGLLayer = (style, glLayerId, refLayer) => {\n  const currentStyle = style.toJS()\n  const currentStyleLayers = currentStyle.layers\n  let newStyle = style\n\n  const glLayerIndex = currentStyleLayers.findIndex((l) => l.id === glLayerId)\n  const glLayer = currentStyleLayers.find((l) => l.id === glLayerId)\n\n  // visibility\n  newStyle = toggleLayerVisibility(newStyle, refLayer, glLayerIndex)\n\n  if (refLayer.isBasemap === true) {\n    return newStyle\n  }\n\n  const refLayerOpacity = refLayer.opacity === undefined ? 1 : refLayer.opacity\n\n  // color/opacity\n  switch (glLayer.type) {\n    case 'fill': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-outline-color'], refLayer.color)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-color'], GL_TRANSPARENT)\n      break\n    }\n    case 'line': {\n      const color = refLayer.color || (glLayer.paint && glLayer.paint['line-color'])\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'line-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'line-color'], color)\n      break\n    }\n    case 'symbol': {\n      if (glLayer.metadata && glLayer.metadata['gfw:isLabel'] === true) {\n        const parentLayerIsVisible =\n          newStyle.getIn(['layers', glLayerIndex, 'layout', 'visibility']) === 'visible'\n        const labelsVisibility =\n          parentLayerIsVisible && refLayer.showLabels === true ? 'visible' : 'none'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'layout', 'visibility'],\n          labelsVisibility\n        )\n        if (refLayer.showLabels !== true) {\n          break\n        }\n      }\n      newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        newStyle = newStyle.setIn(['layers', glLayerIndex, 'paint', 'text-color'], refLayer.color)\n      }\n      break\n    }\n    // Event layers and custom layers with point geom types\n    case 'circle': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-stroke-opacity'], refLayerOpacity)\n\n      if (refLayer.color !== undefined) {\n        const colorPaintProperty =\n          glLayer && glLayer.metadata && glLayer.metadata['gfw:mainColorPaintProperty']\n            ? glLayer.metadata['gfw:mainColorPaintProperty']\n            : 'circle-color'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'paint', colorPaintProperty],\n          refLayer.color\n        )\n      }\n      break\n    }\n    case 'raster': {\n      newStyle = newStyle.setIn(\n        ['layers', glLayerIndex, 'paint', 'raster-opacity'],\n        refLayerOpacity\n      )\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  newStyle = applyLayerExpressions(newStyle, refLayer, glLayer, glLayerIndex)\n\n  return newStyle\n}\n\nconst addCustomGLLayer = (subtype, layerId, url, data) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n  const currentStyle = style.toJS()\n\n  // add source if it doesn't exist yet\n  if (currentStyle.sources[layerId] === undefined) {\n    const source = { type: subtype }\n    if (subtype === CUSTOM_LAYERS_SUBTYPES.geojson) {\n      source.data = data\n    } else if (subtype === CUSTOM_LAYERS_SUBTYPES.raster) {\n      source.tiles = [url]\n      source.tileSize = 256\n    }\n    style = style.setIn(['sources', layerId], fromJS(source))\n  }\n\n  if (currentStyle.layers.find((glLayer) => glLayer.id === layerId) === undefined) {\n    const glType = subtype === CUSTOM_LAYERS_SUBTYPES.geojson ? getMainGeomType(data) : subtype\n    const glLayer = fromJS({\n      id: layerId,\n      source: layerId,\n      type: glType,\n      layout: {},\n      paint: {},\n    })\n    const layerIndex =\n      subtype === CUSTOM_LAYERS_SUBTYPES.raster\n        ? // if raster, put at index of last raster layer except labels\n          currentStyle.layers.length -\n          1 -\n          currentStyle.layers\n            .filter((l) => l.id !== 'labels')\n            .reverse()\n            .findIndex((l) => l.type === 'raster')\n        : currentStyle.layers.length - 1\n    style = style.set('layers', style.get('layers').splice(layerIndex, 0, glLayer))\n  }\n\n  dispatch(setMapStyle(style))\n}\n\nconst updateWorkspaceGLLayers = (workspaceGLLayers) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n\n  workspaceGLLayers.forEach((workspaceGLLayer) => {\n    const { id, gl } = workspaceGLLayer\n    const finalSource = setDefaultVectorTiles(gl.source, workspaceGLLayer.url)\n    style = style.setIn(['sources', id], fromJS(finalSource))\n\n    const existingLayerIds = style\n      .get('layers')\n      .toJS()\n      .map((l) => l.id)\n    const layersToAdd = gl.layers.filter((layer, index) => {\n      const layerId = layer.id || index > 0 ? `${id}-${index}` : id\n      return !existingLayerIds.includes(layerId)\n    })\n    layersToAdd.forEach((layerToAdd, index) => {\n      // doesn't add a sufix in the first elements but it will for the following ones\n      let layerToAddId = layerToAdd.id || index > 0 ? `${id}-${index}` : id\n      const defaultGlLayer = setLayerStyleDefaults(layerToAdd)\n\n      const glLayer = {\n        ...defaultGlLayer,\n        id: layerToAddId,\n        source: id,\n      }\n\n      // set source-layer - defaults to source id\n      if (gl.source.type === 'vector') {\n        const sourceLayer =\n          layerToAdd['source-layer'] === undefined ? id : layerToAdd['source-layer']\n        glLayer['source-layer'] = sourceLayer\n      }\n\n      // find correct z-index\n      const existingLayers = style.get('layers')\n      const newLayerGroup = glLayer.metadata['mapbox:group']\n      const newLayerIndex = existingLayers.findLastIndex((l) => {\n        return newLayerGroup === l.toJS().metadata['mapbox:group']\n      })\n      style = style.set('layers', existingLayers.splice(newLayerIndex, 0, fromJS(glLayer)))\n    })\n  })\n\n  dispatch(setMapStyle(style))\n  dispatch(applyTemporalExtent(state.map.module.temporalExtent))\n}\n\nconst getCartoLayerInstanciatePromise = ({ sourceId, sourceCartoSQL }) => {\n  const mapConfig = { layers: [{ id: sourceId, options: { sql: sourceCartoSQL } }] }\n  const mapConfigURL = encodeURIComponent(JSON.stringify(mapConfig))\n  const cartoAnonymousMapUrl = STATIC_LAYERS_CARTO_ENDPOINT.replace('$MAPCONFIG', mapConfigURL)\n\n  return new Promise((resolve) => {\n    fetch(cartoAnonymousMapUrl)\n      .then((res) => {\n        if (res.status >= 400) {\n          console.warn(`loading of layer failed ${sourceId}`)\n          Promise.reject()\n          return null\n        }\n        return res.json()\n      })\n      .then((data) => {\n        resolve({\n          layergroupid: data.layergroupid,\n          sourceId,\n        })\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  })\n}\n\nconst instanciateCartoLayers = (layers) => (dispatch, getState) => {\n  dispatch({\n    type: MARK_CARTO_LAYERS_AS_INSTANCIATED,\n    payload: layers.map((layer) => layer.sourceId),\n  })\n  const cartoLayersPromises = layers.map((layer) => getCartoLayerInstanciatePromise(layer))\n  const cartoLayersPromisesPromise = Promise.all(cartoLayersPromises.map((p) => p.catch((e) => e)))\n  cartoLayersPromisesPromise\n    .then((instanciatedCartoLayers) => {\n      let style = getState().map.style.mapStyle\n      const currentStyle = style.toJS()\n      instanciatedCartoLayers.forEach((cartoLayer) => {\n        const tilesURL = STATIC_LAYERS_CARTO_TILES_ENDPOINT.replace(\n          '$LAYERGROUPID',\n          cartoLayer.layergroupid\n        )\n\n        // replace gl source with a new source that use tiles provided by Carto anonymous maps API\n        const newSourceId = `${cartoLayer.sourceId}-instanciated`\n        style = style.setIn(\n          ['sources', newSourceId],\n          fromJS({\n            type: 'vector',\n            tiles: [tilesURL],\n          })\n        )\n\n        style = style.deleteIn(['sources', cartoLayer.sourceId])\n\n        // change source in all layers that are using it (generally polygon + labels)\n        currentStyle.layers.forEach((glLayer, glLayerIndex) => {\n          if (glLayer.source === cartoLayer.sourceId) {\n            style = style.setIn(['layers', glLayerIndex, 'source'], newSourceId)\n            style = style.setIn(['layers', glLayerIndex, 'metadata', 'gfw:id'], cartoLayer.sourceId)\n            const refLayer = layers.find((l) => l.refLayer.id === cartoLayer.sourceId).refLayer\n            style = updateGLLayer(style, glLayer.id, refLayer)\n          }\n        })\n      })\n\n      dispatch(setMapStyle(style))\n    })\n    .catch((err) => {\n      console.warn(err)\n    })\n}\n\nexport const commitStyleUpdates = (staticLayers, basemapLayers) => (dispatch, getState) => {\n  // Store a copy of static and basemap layers. This is not used directly by\n  // the Map component which only needs a prepared style object\n  dispatch({\n    type: SET_STATIC_LAYERS,\n    payload: staticLayers,\n  })\n  dispatch({\n    type: SET_BASEMAP_LAYERS,\n    payload: basemapLayers,\n  })\n\n  const layers = [...staticLayers, ...basemapLayers.map((bl) => ({ ...bl, isBasemap: true }))]\n\n  const currentGLSources = getState().map.style.mapStyle.toJS().sources\n\n  // collect layers declared in workspace but not in original gl style\n  const workspaceGLLayers = layers.filter((layer) => layer.gl !== undefined)\n\n  if (workspaceGLLayers.length) {\n    // Adds the gl layers again in case the source is a dynamic geojson source\n    dispatch(updateWorkspaceGLLayers(workspaceGLLayers))\n  }\n\n  // instanciate custom layers if needed\n  const customLayers = layers.filter(\n    (layer) => layer.isCustom === true && currentGLSources[layer.id] === undefined\n  )\n  if (customLayers.length) {\n    customLayers.forEach((layer) => {\n      dispatch(addCustomGLLayer(layer.subtype, layer.id, layer.url, layer.data))\n    })\n  }\n\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n  const glSources = currentStyle.sources\n\n  const cartoLayersToInstanciate = []\n\n  // update source when needed\n  staticLayers.forEach((refLayer) => {\n    const sourceId = refLayer.id\n    if (currentGLSources[sourceId] !== undefined && refLayer.visible === true) {\n      if (refLayer.data !== undefined) {\n        style = style.setIn(['sources', sourceId, 'data'], fromJS(refLayer.data))\n      }\n      if (refLayer.url !== undefined) {\n        const newSource = setDefaultVectorTiles(currentGLSources[sourceId], refLayer.url)\n        style = style.setIn(['sources', sourceId], fromJS(newSource))\n      }\n    }\n  })\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    const sourceId = glLayer.source\n    const glSource = glSources[sourceId]\n    const layerId = (glLayer.metadata !== undefined && glLayer.metadata['gfw:id']) || sourceId\n\n    const refLayer = layers.find((l) => l.id === layerId)\n\n    if (refLayer === undefined) {\n      if (glLayer.type !== 'background') {\n        // console.warn('gl layer does not exists in workspace', glLayer);\n      }\n      continue\n    }\n\n    // check if layer is served from Carto, which means we need to instanciate it first\n    // TODO BUG: check if layer is not instanciatING too\n    const sourceCartoSQL = glSource.metadata !== undefined && glSource.metadata['gfw:carto-sql']\n    if (sourceCartoSQL !== false && sourceCartoSQL !== undefined) {\n      // only if layer is visible and has not been instanciated yet\n      const cartoLayerInstanciated = state.cartoLayersInstanciated.indexOf(sourceId) > -1\n      if (\n        refLayer.visible === true &&\n        !cartoLayerInstanciated &&\n        !cartoLayersToInstanciate.find((l) => l.sourceId === sourceId)\n      ) {\n        cartoLayersToInstanciate.push({ sourceId, sourceCartoSQL, refLayer })\n      }\n      continue\n    }\n\n    style = updateGLLayer(style, glLayer.id, refLayer)\n  }\n\n  if (cartoLayersToInstanciate.length) {\n    dispatch(instanciateCartoLayers(cartoLayersToInstanciate))\n  }\n\n  dispatch(setMapStyle(style))\n}\n","import FlyToInterpolator from 'react-map-gl/dist/esm/utils/transition/viewport-fly-to-interpolator'\nimport { easeCubic } from 'd3-ease'\nimport { MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL } from '../config'\nimport { TRANSITION_TYPE } from '../constants'\nimport {\n  SET_BOUNDS,\n  SET_VIEWPORT,\n  UPDATE_VIEWPORT,\n  SET_ZOOM_INCREMENT,\n  SET_MOUSE_LAT_LONG,\n  TRANSITION_END,\n  SET_NATIVE_VIEWPORT,\n} from './viewport.actions'\n\nexport const TRANSITION_DURATION = 500\n\nconst DEFAULT_TRANSITION = {\n  transitionDuration: TRANSITION_DURATION,\n  transitionInterpolator: new FlyToInterpolator(),\n  transitionEasing: easeCubic,\n}\n\nconst initialState = {\n  viewport: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    width: 1000,\n    height: 800,\n    bounds: {},\n  },\n  maxZoom: MAX_ZOOM_LEVEL,\n  minZoom: MIN_ZOOM_LEVEL,\n  prevZoom: 3,\n  currentTransition: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIEWPORT: {\n      return {\n        ...state,\n        viewport: action.payload,\n        canZoomIn: action.payload.zoom < state.maxZoom,\n        canZoomOut: action.payload.zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n      }\n    }\n\n    case SET_BOUNDS: {\n      return {\n        ...state,\n        bounds: action.payload,\n      }\n    }\n\n    case UPDATE_VIEWPORT: {\n      const viewport = { ...state.viewport, ...action.payload }\n      return {\n        ...state,\n        viewport,\n        prevZoom: viewport.zoom,\n      }\n    }\n\n    case SET_ZOOM_INCREMENT: {\n      const currentZoom = state.viewport.zoom\n      const zoom = Math.min(\n        state.maxZoom,\n        action.payload.zoom || currentZoom + action.payload.increment\n      )\n      const viewport = {\n        ...state.viewport,\n        ...DEFAULT_TRANSITION,\n        zoom,\n        latitude:\n          action.payload.latitude === null ? state.viewport.latitude : action.payload.latitude,\n        longitude:\n          action.payload.longitude === null ? state.viewport.longitude : action.payload.longitude,\n      }\n      return {\n        ...state,\n        viewport,\n        canZoomIn: zoom < state.maxZoom,\n        canZoomOut: zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n        currentTransition: TRANSITION_TYPE.ZOOM,\n      }\n    }\n\n    case SET_MOUSE_LAT_LONG: {\n      return { ...state, mouseLatLong: action.payload }\n    }\n\n    case TRANSITION_END: {\n      return { ...state, currentTransition: null }\n    }\n\n    case SET_NATIVE_VIEWPORT: {\n      return { ...state, ...action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n","import { compose, createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\n\nimport { TRANSITION_DURATION } from '../glmap/viewport.reducer'\nimport { fitToBounds as fitToBoundsAction, transitionEnd } from '../glmap/viewport.actions'\n\nlet composeEnhancers = compose\nif (\n  (process.env.MAP_REDUX_REMOTE_DEBUG || process.env.REACT_APP_MAP_REDUX_REMOTE_DEBUG) &&\n  process.env.NODE_ENV === 'development'\n) {\n  const composeWithDevTools = require('remote-redux-devtools').composeWithDevTools\n  composeEnhancers = composeWithDevTools({\n    name: 'Map module',\n    realtime: true,\n    hostname: 'localhost',\n    port: 8000,\n    maxAge: 30,\n    stateSanitizer: (state) => ({ ...state, map: { ...state.map, heatmap: 'NOT_SERIALIZED' } }),\n  })\n}\n\nconst store = createStore(() => {}, {}, composeEnhancers(applyMiddleware(thunk)))\n\nexport const targetMapVessel = (id) => {\n  const track = store.getState().map.tracks.data.find((t) => t.id === id.toString())\n  store.dispatch(fitToBoundsAction(track.geoBounds))\n\n  return track.timelineBounds\n}\nexport const fitToBounds = (bounds) => {\n  store.dispatch(fitToBoundsAction(bounds))\n  setTimeout(() => {\n    // needed as the transition end is not being called on first fitToBounds trigger\n    if (store.getState().map.viewport.currentTransition !== null) {\n      store.dispatch(transitionEnd())\n    }\n  }, TRANSITION_DURATION + 1)\n}\n\nexport default store\n","import tbbox from '@turf/bbox'\n\nexport const getTrackTimeBounds = (geojson) => {\n  const time = { start: Infinity, end: 0 }\n  if (geojson && geojson.features) {\n    geojson.features.forEach((feature) => {\n      const hasTimes =\n        feature.properties &&\n        feature.properties.coordinateProperties &&\n        feature.properties.coordinateProperties.times &&\n        feature.properties.coordinateProperties.times.length > 0\n      if (hasTimes) {\n        feature.properties.coordinateProperties.times.forEach((datetime) => {\n          if (datetime < time.start) {\n            time.start = datetime\n          } else if (datetime > time.end) {\n            time.end = datetime\n          }\n        })\n      }\n    })\n  }\n  return [time.start, time.end]\n}\n\nexport const getTrackBounds = (geojson) => {\n  const bounds = tbbox(geojson)\n  return {\n    minLat: bounds[3],\n    minLng: bounds[0],\n    maxLat: bounds[1],\n    maxLng: bounds[2],\n  }\n}\n","import cloneDeep from 'lodash/cloneDeep'\nimport { targetMapVessel } from '../store'\n\nimport { getTilePromises, getCleanVectorArrays, groupData } from '../utils/heatmapTileData'\nimport { startLoader, completeLoader } from '../module/module.actions'\nimport { getTrackBounds, getTrackTimeBounds } from '../utils/getTrackBounds'\n\nexport const ADD_TRACK = 'ADD_TRACK'\nexport const UPDATE_TRACK = 'UPDATE_TRACK'\nexport const REMOVE_TRACK = 'REMOVE_TRACK'\n\nconst convertLegacyTrackToGeoJSON = (vectorArrays) => {\n  const createFeature = (segId, type = 'track', geomType = 'LineString') => ({\n    type: 'Feature',\n    geometry: {\n      type: geomType,\n      coordinates: [],\n    },\n    properties: {\n      type,\n      segId,\n      coordinateProperties: {\n        times: [],\n      },\n    },\n  })\n\n  let currentLng\n  let currentSeries = vectorArrays.series[0]\n  let currentFeature = createFeature(currentSeries)\n  const fishingPoints = createFeature('fishing', 'fishing', 'MultiPoint')\n  const features = []\n  let lngOffset = 0\n\n  for (let index = 0, length = vectorArrays.latitude.length; index < length; index++) {\n    const series = vectorArrays.series[index]\n    const longitude = vectorArrays.longitude[index]\n    const latitude = vectorArrays.latitude[index]\n    const weight = vectorArrays.weight[index]\n\n    if (currentLng) {\n      if (longitude - currentLng < -180) {\n        lngOffset += 360\n      } else if (longitude - currentLng > 180) {\n        lngOffset -= 360\n      }\n    }\n\n    const ll = [longitude + lngOffset, latitude]\n    if (series !== currentSeries && index !== 0) {\n      features.push(cloneDeep(currentFeature))\n      currentFeature = createFeature(series)\n    }\n\n    currentFeature.geometry.coordinates.push(ll)\n    if (weight > 0) {\n      fishingPoints.geometry.coordinates.push(ll)\n      fishingPoints.properties.coordinateProperties.times.push(vectorArrays.datetime[index])\n    }\n    currentFeature.properties.coordinateProperties.times.push(vectorArrays.datetime[index])\n\n    currentSeries = series\n    currentLng = longitude\n  }\n  features.push(fishingPoints)\n\n  return {\n    type: 'FeatureCollection',\n    features,\n  }\n}\n\nfunction loadTrack(track) {\n  return (dispatch, getState) => {\n    const { id, url, type, fitBoundsOnLoad, layerTemporalExtents, color, data } = track\n    const state = getState()\n    if (state.map.tracks.data.find((t) => t.id === id)) {\n      return\n    }\n\n    const payload = {\n      id,\n      url,\n      type,\n      color,\n      fitBoundsOnLoad,\n    }\n    const trackHasData = track.data !== undefined && track.data !== null\n    const trackHasUrl = url !== undefined && url !== null && url !== ''\n    if (trackHasData) {\n      payload.data = data\n      payload.geoBounds = getTrackBounds(data)\n    }\n    dispatch({ type: ADD_TRACK, payload })\n\n    if (trackHasData || !trackHasUrl) {\n      return\n    }\n\n    const loaderID = startLoader(dispatch, state)\n    if (type !== 'geojson') {\n      // Deprecated tracks format logic to be deleted some day\n      const token = state.map.module.token\n\n      const promises = getTilePromises(url, token, layerTemporalExtents)\n\n      Promise.all(promises.map((p) => p.catch((e) => e))).then((rawTileData) => {\n        const cleanData = getCleanVectorArrays(rawTileData)\n\n        if (!cleanData.length) {\n          return\n        }\n        const rawTrackData = groupData(cleanData, [\n          'latitude',\n          'longitude',\n          'datetime',\n          'series',\n          'weight',\n          'sigma',\n        ])\n\n        const data = convertLegacyTrackToGeoJSON(rawTrackData)\n        const timelineBounds = getTrackTimeBounds(data)\n        const geoBounds = getTrackBounds(data)\n\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id,\n            data,\n            geoBounds,\n            timelineBounds,\n          },\n        })\n        dispatch(completeLoader(loaderID))\n      })\n    } else {\n      fetch(url)\n        .then((res) => {\n          if (res.status >= 400) throw new Error(res.statusText)\n          return res.json()\n        })\n        .then((data) => {\n          const timelineBounds = getTrackTimeBounds(data)\n          const geoBounds = getTrackBounds(data)\n          dispatch({\n            type: UPDATE_TRACK,\n            payload: {\n              id,\n              data,\n              geoBounds,\n              timelineBounds,\n            },\n          })\n          if (fitBoundsOnLoad) {\n            targetMapVessel(id)\n          }\n        })\n        .catch((err) => console.warn(err))\n        .finally(() => dispatch(completeLoader(loaderID)))\n    }\n  }\n}\n\nconst removeTrack = (trackId) => ({\n  type: REMOVE_TRACK,\n  payload: {\n    trackId,\n  },\n})\n\nexport const updateTracks = (newTracks = []) => (dispatch, getState) => {\n  const prevTracks = getState().map.tracks.data\n  // add and update layers\n  if (newTracks) {\n    newTracks.forEach((newTrack) => {\n      const trackId = newTrack.id\n      const prevTrack = prevTracks.find((t) => t.id === trackId)\n      if (prevTrack === undefined) {\n        dispatch(loadTrack(newTrack))\n      } else if (prevTrack.color !== newTrack.color) {\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id: newTrack.id,\n            color: newTrack.color,\n          },\n        })\n      }\n    })\n  }\n\n  // clean up unused tracks\n  prevTracks.forEach((prevTrack) => {\n    if (!newTracks || !newTracks.find((t) => t.id === prevTrack.id)) {\n      dispatch(removeTrack(prevTrack.id))\n    }\n  })\n}\n","import PropTypes from 'prop-types'\n\nconst withReducerPropTypes = (name, propTypesSchema) => (reducer) => {\n  if (process.env.NODE_ENV === 'development') {\n    return (state, action) => {\n      const result = reducer(state, action)\n      PropTypes.checkPropTypes(propTypesSchema, result, 'reducer', name)\n\n      return result\n    }\n  }\n  return reducer\n}\n\nexport default withReducerPropTypes\n","import PropTypes from 'prop-types'\nimport withReducerTypes from '../utils/withReducerTypes'\nimport {\n  INIT_MODULE,\n  SET_TEMPORAL_EXTENT,\n  SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  START_LOADER,\n  COMPLETE_LOADER,\n  SET_MODULE_CURSOR,\n} from './module.actions'\n\nconst initialState = {\n  loaders: null,\n  token: undefined,\n  temporalExtent: [new Date(1970), new Date()],\n  highlightTemporalExtent: null,\n  cursor: null,\n  onViewportChange: undefined,\n  onHover: undefined,\n  onClick: undefined,\n  onLoad: undefined,\n  onLoadStart: undefined,\n  onLoadComplete: undefined,\n  onClosePopup: undefined,\n  onAttributionsChange: undefined,\n}\n\nconst moduleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_MODULE: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    case SET_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        temporalExtent: action.payload,\n      }\n    }\n\n    case SET_HIGHLIGHT_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        highlightTemporalExtent: action.payload,\n      }\n    }\n\n    case START_LOADER: {\n      const loaders = state.loaders !== null ? [...state.loaders] : []\n      loaders.push(action.payload)\n      return { ...state, loaders }\n    }\n\n    case COMPLETE_LOADER: {\n      const loaders = [...state.loaders]\n      const loaderIndex = loaders.findIndex((l) => l === action.payload)\n      loaders.splice(loaderIndex, 1)\n      return { ...state, loaders }\n    }\n\n    case SET_MODULE_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst moduleTypes = {\n  loaders: PropTypes.arrayOf(PropTypes.number),\n  token: PropTypes.string,\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  onViewportChange: PropTypes.func,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoad: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n}\n\nexport default withReducerTypes('module', moduleTypes)(moduleReducer)\n","import PropTypes from 'prop-types'\nimport { trackTypes } from '../proptypes/tracks'\nimport withReducerTypes from '../utils/withReducerTypes'\n\nimport { ADD_TRACK, UPDATE_TRACK, REMOVE_TRACK } from './tracks.actions'\n\nconst initialState = {\n  data: [],\n}\n\nconst tracksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TRACK: {\n      const data = [...state.data, action.payload]\n      return { ...state, data }\n    }\n\n    case UPDATE_TRACK: {\n      const trackData = action.payload\n      const data = state.data.map((track) => {\n        if (track.id !== trackData.id) return track\n        return {\n          ...track,\n          ...trackData,\n        }\n      })\n      return { ...state, data }\n    }\n\n    case REMOVE_TRACK: {\n      const removedTrackId = action.payload.trackId\n      const data = state.data.filter((track) => track.id !== removedTrackId)\n      return { ...state, data }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst tracksTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      ...trackTypes,\n      data: PropTypes.object,\n      timelineBounds: PropTypes.array,\n      geoBounds: PropTypes.exact({\n        minLat: PropTypes.number,\n        minLng: PropTypes.number,\n        maxLat: PropTypes.number,\n        maxLng: PropTypes.number,\n      }),\n    })\n  ),\n}\n\nexport default withReducerTypes('tracks', tracksTypes)(tracksReducer)\n","import difference from 'lodash/difference'\nimport {\n  INIT_HEATMAP_LAYERS,\n  UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n  ADD_HEATMAP_LAYER,\n  UPDATE_HEATMAP_LAYER_STYLE,\n  REMOVE_HEATMAP_LAYER,\n  ADD_REFERENCE_TILE,\n  UPDATE_HEATMAP_TILE,\n  RELEASE_HEATMAP_TILES,\n  HIGHLIGHT_VESSELS,\n  UPDATE_LOADED_TILES,\n  HIGHLIGHT_CLICKED_VESSEL,\n  CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n} from './heatmap.actions'\n\nconst initialState = {\n  // a dict of heatmap layers (key is layer id)\n  // each containing data, url, tiles, visibleTemporalExtentsIndices\n  heatmapLayers: {},\n  // store a list of tiles currently visible in the map\n  // those are necessary when adding a new layer to know which tiles need to be loaded\n  referenceTiles: [],\n  highlightedVessels: { isEmpty: true },\n  highlightedClickedVessel: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_HEATMAP_LAYERS: {\n      return Object.assign({}, state, { heatmapLayers: action.payload })\n    }\n\n    case UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES: {\n      const heatmapLayers = state.heatmapLayers\n      heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices =\n        action.payload.newVisibleTemporalExtentsIndices\n\n      // also removing indices within each tile\n      // adding is done after tile has actually loaded\n      heatmapLayers[action.payload.layerId].tiles.forEach((tile) => {\n        tile.temporalExtentsIndicesLoaded = difference(\n          tile.temporalExtentsIndicesLoaded,\n          action.payload.indicesRemoved\n        )\n      })\n      return { ...state, heatmapLayers }\n    }\n\n    case ADD_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers, {\n        [action.payload.id]: {\n          tiles: [],\n          ...action.payload,\n        },\n      })\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case UPDATE_HEATMAP_LAYER_STYLE: {\n      const newLayer = action.payload\n      const layer = { ...state.heatmapLayers[newLayer.id], ...newLayer }\n      const heatmapLayers = { ...state.heatmapLayers, [newLayer.id]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case REMOVE_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers)\n      delete heatmapLayers[action.payload.id]\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case ADD_REFERENCE_TILE: {\n      return Object.assign({}, state, { referenceTiles: [...state.referenceTiles, action.payload] })\n    }\n\n    case UPDATE_HEATMAP_TILE: {\n      const layerId = action.payload.layerId\n      const newTile = action.payload.tile\n      const layer = { ...state.heatmapLayers[layerId] }\n      let layerTiles = [...layer.tiles]\n      const tileIndex = layerTiles.findIndex((t) => t.uid === newTile.uid)\n      if (tileIndex === -1) {\n        layerTiles.push(newTile)\n      } else {\n        layerTiles = [\n          ...layerTiles.slice(0, tileIndex),\n          newTile,\n          ...layerTiles.slice(tileIndex + 1),\n        ]\n      }\n      layer.tiles = layerTiles\n      const heatmapLayers = { ...state.heatmapLayers, [layerId]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case RELEASE_HEATMAP_TILES: {\n      const uids = action.payload\n\n      // remove tiles\n      const layerIds = Object.keys(state.heatmapLayers)\n      const heatmapLayers = { ...state.heatmapLayers }\n      layerIds.forEach((layerId) => {\n        const prevLayer = { ...heatmapLayers[layerId] }\n        uids.forEach((tileUid) => {\n          const releasedTileIndex = prevLayer.tiles.findIndex((tile) => tile.uid === tileUid)\n          if (releasedTileIndex > -1) {\n            // console.log('releasing', layerId, tileUid);\n            prevLayer.tiles.splice(releasedTileIndex, 1)\n          }\n        })\n      })\n\n      // remove reference tiles\n      let referenceTiles = [...state.referenceTiles]\n      uids.forEach((tileUid) => {\n        const releasedRefTileIndex = referenceTiles.findIndex((tile) => tile.uid === tileUid)\n        if (releasedRefTileIndex > -1) {\n          referenceTiles = [\n            ...referenceTiles.slice(0, releasedRefTileIndex),\n            ...referenceTiles.slice(releasedRefTileIndex + 1),\n          ]\n        }\n      })\n\n      return { ...state, heatmapLayers, referenceTiles }\n    }\n\n    case UPDATE_LOADED_TILES: {\n      const newHeatmapLayers = { ...state.heatmapLayers }\n      return { ...state, heatmapLayers: newHeatmapLayers }\n    }\n\n    case HIGHLIGHT_VESSELS: {\n      return Object.assign({}, state, { highlightedVessels: action.payload })\n    }\n\n    case HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: action.payload }\n    }\n\n    case CLEAR_HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import uniq from 'lodash/uniq'\nimport {\n  SET_CURRENTLY_VISIBLE_TILES,\n  SET_CURRENTLY_LOADED_TILES,\n  SET_CURRENTLY_SWAPPED_TILE_UIDS,\n  MARK_TILES_UIDS_AS_LOADED,\n  RELEASE_MARKED_TILES_UIDS,\n} from './heatmapTiles.actions'\n\nconst initialState = {\n  currentVisibleTiles: [],\n  currentLoadedTiles: [],\n  currentToLoadTileUids: [],\n  currentToReleaseTileUids: [],\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENTLY_VISIBLE_TILES: {\n      const currentVisibleTiles = [].concat(action.payload)\n      return { ...state, currentVisibleTiles }\n    }\n\n    case SET_CURRENTLY_LOADED_TILES: {\n      const currentLoadedTiles = [].concat(action.payload)\n      return { ...state, currentLoadedTiles }\n    }\n\n    case SET_CURRENTLY_SWAPPED_TILE_UIDS: {\n      const currentToLoadTileUids = uniq(\n        state.currentToLoadTileUids.concat(action.payload.tilesToLoadUids)\n      )\n      const currentToReleaseTileUids = uniq(\n        state.currentToReleaseTileUids.concat(action.payload.tilesToReleaseUids)\n      )\n      // clean to load tiles of tiles that needs to be released\n      const newToLoadTilesUids = currentToLoadTileUids.filter(\n        (tileUid) => currentToReleaseTileUids.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newToLoadTilesUids, currentToReleaseTileUids }\n    }\n\n    case MARK_TILES_UIDS_AS_LOADED: {\n      const currentToLoadTileUids = state.currentToLoadTileUids\n      const tileUidsMarkedAsLoaded = action.payload\n      const newCurrentToLoadTileUids = currentToLoadTileUids.filter(\n        (tileUid) => tileUidsMarkedAsLoaded.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newCurrentToLoadTileUids }\n    }\n\n    case RELEASE_MARKED_TILES_UIDS: {\n      return { ...state, currentToReleaseTileUids: [] }\n    }\n\n    default:\n      return state\n  }\n}\n","// TODO MAP MODULE remove whole reducer\nimport { SET_MAP_CURSOR } from './interaction.actions'\n\nconst initialState = {\n  cursor: 'progress',\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_MAP_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n    default:\n      return state\n  }\n}\n","import { combineReducers } from 'redux'\n\nimport ModuleReducer from '../module/module.reducer'\nimport TracksReducer from '../tracks/tracks.reducer'\nimport HeatmapReducer from '../heatmap/heatmap.reducer'\nimport HeatmapTilesReducer from '../heatmap/heatmapTiles.reducer'\nimport ViewportReducer from '../glmap/viewport.reducer'\nimport StyleReducer from '../glmap/style.reducer'\nimport InteractionReducer from '../glmap/interaction.reducer'\n\nconst mapReducer = combineReducers({\n  module: ModuleReducer,\n  tracks: TracksReducer,\n  heatmap: HeatmapReducer,\n  heatmapTiles: HeatmapTilesReducer,\n  style: StyleReducer,\n  viewport: ViewportReducer,\n  interaction: InteractionReducer,\n})\n\nexport default mapReducer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\nimport throttle from 'lodash/throttle'\nimport { trackTypes } from './proptypes/tracks'\nimport { heatmapLayerTypes, basemapLayerTypes, staticLayerTypes } from './proptypes/layers'\nimport { viewportTypes, popupTypes } from './proptypes/shared'\n\nimport Map from './glmap/Map.container'\nimport {\n  initModule,\n  setTemporalExtent,\n  setHighlightTemporalExtent,\n  setCursor,\n} from './module/module.actions'\nimport { updateViewport, transitionToZoom } from './glmap/viewport.actions'\nimport { initStyle, commitStyleUpdates, applyTemporalExtent } from './glmap/style.actions'\nimport { updateTracks } from './tracks/tracks.actions'\nimport { updateHeatmapLayers, updateLayerLoadTemporalExtents } from './heatmap/heatmap.actions'\n\nimport store from './store'\nimport mapReducers from './store/reducers'\n\nconst mapReducer = combineReducers({\n  map: mapReducers,\n})\n\nstore.replaceReducer(mapReducer)\n\nconst throttleApplyTemporalExtent = throttle((temporalExtent) => {\n  store.dispatch(applyTemporalExtent(temporalExtent))\n  store.dispatch(setTemporalExtent(temporalExtent))\n}, 16)\n\nconst updateViewportFromIncomingProps = (incomingViewport) => {\n  store.dispatch(\n    updateViewport({\n      latitude: incomingViewport.center[0],\n      longitude: incomingViewport.center[1],\n      zoom: incomingViewport.zoom,\n    })\n  )\n}\n\nclass MapModule extends React.Component {\n  state = {\n    initialized: false,\n    error: null,\n    errorInfo: null,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    })\n  }\n\n  componentDidMount() {\n    // First trigger synchronous actions that should happen before any map render\n    // At the end of this, set a flag to allow map rendering\n\n    if (this.props.viewport !== undefined) {\n      updateViewportFromIncomingProps(this.props.viewport)\n    }\n\n    // TODO\n    if (this.props.glyphsPath !== null) {\n      store.dispatch(\n        initStyle({\n          glyphsPath: this.props.glyphsPath,\n          // TODO apply URL updates here\n        })\n      )\n    }\n\n    if (this.props.onAttributionsChange !== undefined) {\n      this.props.onAttributionsChange(store.getState().map.style.attributions)\n    }\n\n    if (store && store.getState().map.module.token === undefined) {\n      store.dispatch(\n        initModule({\n          token: this.props.token,\n          autoClusterZoom: this.props.autoClusterZoom,\n          isCluster: this.props.isCluster,\n          onViewportChange: this.props.onViewportChange,\n          onHover: this.props.onHover,\n          onClick: this.props.onClick,\n          onLoad: this.props.onLoad,\n          onLoadStart: this.props.onLoadStart,\n          onLoadComplete: this.props.onLoadComplete,\n          onClosePopup: this.props.onClosePopup,\n          onAttributionsChange: this.props.onAttributionsChange,\n        })\n      )\n    }\n\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n    }\n\n    if (\n      (this.props.basemapLayers !== null && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== null && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    if (this.props.tracks !== null) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // Now trigger async actions\n\n    if (this.props.temporalExtent !== null && this.props.temporalExtent.length) {\n      throttleApplyTemporalExtent(this.props.temporalExtent)\n    }\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({\n      initialized: true,\n    })\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== null) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    // tracks\n    if (this.props.tracks !== prevProps.tracks) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== prevProps.heatmapLayers) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n\n    // basemap / static layers\n    if (\n      (this.props.basemapLayers !== null && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== null && this.props.staticLayers.length)\n    ) {\n      if (\n        this.props.basemapLayers !== prevProps.basemapLayers ||\n        this.props.staticLayers !== prevProps.staticLayers\n      ) {\n        store.dispatch(\n          commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n        )\n      }\n    }\n\n    // loadTemporalExtent\n    if (this.props.loadTemporalExtent !== null && this.props.loadTemporalExtent.length) {\n      if (\n        prevProps.loadTemporalExtent === null ||\n        !prevProps.loadTemporalExtent.length ||\n        this.props.loadTemporalExtent[0].getTime() !== prevProps.loadTemporalExtent[0].getTime() ||\n        this.props.loadTemporalExtent[1].getTime() !== prevProps.loadTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(updateLayerLoadTemporalExtents(this.props.loadTemporalExtent))\n      }\n    }\n    // temporalExtent\n    if (this.props.temporalExtent !== null && this.props.temporalExtent.length) {\n      if (\n        prevProps.temporalExtent === null ||\n        !prevProps.temporalExtent.length ||\n        this.props.temporalExtent[0].getTime() !== prevProps.temporalExtent[0].getTime() ||\n        this.props.temporalExtent[1].getTime() !== prevProps.temporalExtent[1].getTime()\n      ) {\n        throttleApplyTemporalExtent(this.props.temporalExtent)\n      }\n    }\n\n    // highlightTemporalExtent\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      if (\n        prevProps.highlightTemporalExtent === null ||\n        !prevProps.highlightTemporalExtent.length ||\n        this.props.highlightTemporalExtent[0].getTime() !==\n          prevProps.highlightTemporalExtent[0].getTime() ||\n        this.props.highlightTemporalExtent[1].getTime() !==\n          prevProps.highlightTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    } else {\n      if (this.props.highlightTemporalExtent !== prevProps.highlightTemporalExtent) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    }\n\n    // viewport - since viewport will be updated internally to the module,\n    // we have to compare incoming props to existing viewport in store, ie:\n    // update viewport from incoming props ONLY if zoom or center is different\n    // from the internally stored one\n    // TODO FFS incoming lat lon should be an object, not an array\n    const currentViewport = store.getState().map.viewport.viewport\n    // stop propagating updates from outside when zooming in\n    if (\n      this.props.viewport !== undefined &&\n      store.getState().map.viewport.currentTransition === null\n    ) {\n      if (\n        currentViewport.latitude !== this.props.viewport.center[0] ||\n        currentViewport.longitude !== this.props.viewport.center[1] ||\n        currentViewport.zoom !== this.props.viewport.zoom\n      ) {\n        // if zoom delta is precisely === 1, zoom with a transition\n        if (Math.abs(currentViewport.zoom - this.props.viewport.zoom) === 1) {\n          store.dispatch(transitionToZoom(this.props.viewport))\n        } else {\n          updateViewportFromIncomingProps(this.props.viewport)\n        }\n      }\n    }\n\n    if (this.props.cursor !== prevProps.cursor) {\n      store.dispatch(setCursor(this.props.cursor))\n    }\n  }\n  render() {\n    if (this.state.error !== null) {\n      console.log(this.state.error)\n      return (\n        <div>\n          <h2>Map component crashed!</h2>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n          <div>Component Stack Error Details:</div>\n          <p className=\"red\">{this.state.errorInfo.componentStack}</p>\n        </div>\n      )\n    }\n    // won't render anything before actions in componentDidMount have been triggered\n    return this.state.initialized !== true ? null : (\n      <Provider store={store}>\n        <Map {...this.props} />\n      </Provider>\n    )\n  }\n}\n\nMapModule.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.shape(viewportTypes).isRequired,\n  autoClusterZoom: PropTypes.bool,\n  isCluster: PropTypes.func,\n  tracks: PropTypes.arrayOf(PropTypes.exact(trackTypes)),\n  heatmapLayers: PropTypes.arrayOf(PropTypes.shape(heatmapLayerTypes)),\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  highlightTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  loadTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  basemapLayers: PropTypes.arrayOf(PropTypes.shape(basemapLayerTypes)),\n  staticLayers: PropTypes.arrayOf(PropTypes.shape(staticLayerTypes)),\n  cursor: PropTypes.string,\n  // customLayers\n  hoverPopup: PropTypes.shape(popupTypes),\n  clickPopup: PropTypes.shape(popupTypes),\n  glyphsPath: PropTypes.string,\n  onViewportChange: PropTypes.func,\n  onLoad: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n  onClosePopup: PropTypes.func,\n}\n\nMapModule.defaultProps = {\n  token: null,\n  glyphsPath: null,\n  autoClusterZoom: true,\n  isCluster: (event) => event.isCluster === true,\n  highlightTemporalExtent: null,\n  tracks: null,\n  hoverPopup: null,\n  clickPopup: null,\n  heatmapLayers: null,\n  temporalExtent: null,\n  loadTemporalExtent: null,\n  basemapLayers: null,\n  staticLayers: null,\n  cursor: null,\n  onViewportChange: () => {},\n  onLoad: () => {},\n  onLoadStart: () => {},\n  onLoadComplete: () => {},\n  onClick: () => {},\n  onHover: () => {},\n  onAttributionsChange: () => {},\n  onClosePopup: () => {},\n}\n\nexport default MapModule\n","import GL_STYLE from '../glmap/gl-styles/style.json'\n\nconst AVAILABLE_BASEMAPS = GL_STYLE.metadata['gfw:basemap-layers']\n\nexport default AVAILABLE_BASEMAPS\n","\nimport React from 'react'\nimport { mdx } from '@mdx-js/react'\n\n/* @jsx mdx */\nimport { Playground, PropsTable } from 'docz'\nimport Map from './index.js'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"map\"\n    }}>{`Map`}</h1>\n    <h2 {...{\n      \"id\": \"description\"\n    }}>{`Description`}</h2>\n    <p>{`This component displays and load fishing activity and fishing-related layers on a map, used in various GFW projects:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/map-client/blob/9c5179358d4870c0fd4c2c0742917e72e6025c59/app/src/map/components/MapWrapper.jsx#L5\"\n        }}>{`Map client`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/vessel-profiles/blob/aa0e17395f6a4947bb3fdf3106cb9d0a744ba64f/src/profile/components/MapWrapper.js#L3\"\n        }}>{`Vessel profiles`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"https://github.com/GlobalFishingWatch/data-portal/blob/96b1e24efcff58ade672a67229da0610d9d241ab/src/map/MapWrapper.jsx#L2\"\n        }}>{`Data portal`}</a></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"available-properties\"\n    }}>{`Available properties`}</h2>\n    <p>{`TODO: fix crash on PropsTable docz component`}</p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={0} __code={'<Map viewport={{ center: [0.026, 123.61], zoom: 5 }} />'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      PropsTable,\n      Map\n    }} __codesandbox={``} mdxType=\"Playground\">\n  <Map viewport={{\n        center: [0.026, 123.61],\n        zoom: 5\n      }} mdxType=\"Map\" />\n    </Playground>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"],"sourceRoot":""}