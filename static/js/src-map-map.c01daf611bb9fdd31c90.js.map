{"version":3,"sources":["webpack:///./src/map/glmap/map.css","webpack:///./src/map/lib/Pack.js","webpack:///./src/map/lib/pelagosClient.js","webpack:///./src/map/proptypes/tracks.js","webpack:///./src/map/proptypes/layers.js","webpack:///./src/map/proptypes/shared.js","webpack:///./src/map/config.js","webpack:///./src/map/module/module.actions.js","webpack:///./src/map/module/module.selectors.js","webpack:///./src/map/tracks/tracks.selectors.js","webpack:///./src/map/constants.js","webpack:///./src/map/utils/getPBFTile.js","webpack:///./src/map/utils/heatmapTileData.js","webpack:///./src/map/utils/buildEndpoint.js","webpack:///./src/map/heatmap/heatmapTiles.actions.js","webpack:///./src/map/heatmap/heatmap.actions.js","webpack:///./src/map/glmap/viewport.actions.js","webpack:///./src/map/glmap/interaction.actions.js","webpack:///./src/map/utils/map-colors.js","webpack:///./src/map/heatmap/HeatmapSubLayer.js","webpack:///./src/map/heatmap/HeatmapLayer.js","webpack:///./src/map/tracks/TracksLayer.js","webpack:///./src/map/activity/ActivityLayers.js","webpack:///./src/map/activity/ActivityLayers.container.js","webpack:///./src/map/glmap/Map.js","webpack:///./src/map/glmap/Map.container.js","webpack:///./src/map/utils/getMainGeomType.js","webpack:///./src/map/glmap/style.actions.js","webpack:///./src/map/tracks/tracks.actions.js","webpack:///./src/map/utils/withReducerTypes.js","webpack:///./src/map/module/module.reducer.js","webpack:///./src/map/tracks/tracks.reducer.js","webpack:///./src/map/heatmap/heatmap.reducer.js","webpack:///./src/map/heatmap/heatmapTiles.reducer.js","webpack:///./src/map/glmap/viewport.reducer.js","webpack:///./src/map/glmap/style.reducer.js","webpack:///./src/map/glmap/interaction.reducer.js","webpack:///./src/map/map.js","webpack:///./src/map/map.mdx"],"names":["module","exports","map","googleLogo","byname","Uint8","size","Uint8Array","BYTES_PER_ELEMENT","array","getter","setter","Int8","Int8Array","Uint16","Uint16Array","Int16","Int16Array","Uint32","Uint32Array","Int32","Int32Array","Float32","Float32Array","Float64","Float64Array","writeStringToArrayBuffer","str","start","end","buf","bufstart","undefined","length","i","charCodeAt","arrayBufferToString","String","fromCharCode","apply","Pack","typemap","byarray","pack","typespec","value","littleendian","ArrayBuffer","DataView","stringToArrayBuffer","res","Uint8ClampedArray","buffer","name","spec","PelagosClient","_classCallCheck","this","MAGIC_COOKIE","url","token","Promise","resolve","reject","request","XMLHttpRequest","open","setRequestHeader","concat","responseType","onload","handleData","bind","onerror","send","self","error","readyState","success","status","isFileUri","response","byteLength","dataView","headerLen","cookie","slice","getInt32","offset","headerIsLoaded","header","JSON","parse","rowLen","colsByName","colidx","cols","col","idx","type","multiplier","min","max","orientation","errorLoading","toString","allLoaded","result","rowidx","row","val","colValues","eval","trackTypes","id","PropTypes","string","isRequired","color","oneOf","layerTemporalExtents","arrayOf","number","fitBoundsOnLoad","bool","shape","hue","filterValues","object","endpoints","isPBF","temporalExtents","temporalExtentsLess","field","values","node","VESSELS_BASE_RADIUS","MAX_SPRITES_PER_LAYER","startLoader","dispatch","state","loaderId","Date","getTime","payload","onLoadStart","completeLoader","getState","loaders","Object","assign","onLoadComplete","setHighlightTemporalExtent","highlightTemporalExtent","getTemporalExtent","temporalExtent","getHighlightTemporalExtent","getGeojsonTracks","createSelector","tracks","data","filter","t","getGeojsonTracksReady","mergeStyles","style1","style2","sources","_objectSpread","layers","_toConsumableArray","filterGeojsonByTimerange","geojson","_ref","features","featuresFiltered","reduce","filteredFeatures","feature","properties","coordinateProperties","times","filtered","geometry","coordinates","filteredCoordinates","coordinate","index","timeCoordinate","push","filteredFeature","getFullTracksStyles","hasTemporalExtent","hasTracks","timerange","acc","track","source","style","_defineProperty","paint","line-width","line-color","circle-radius","circle-color","getHighlightedTrackStyles","getTracksStyles","trackStyles","highlightedTrackStyles","TRANSITION_TYPE","BRUSH_RENDERING_STYLE","NORMAL","BULLSEYE","BRUSH_ZOOM_RENDERING_STYLE","CUSTOM_LAYERS_SUBTYPES","getPBFTile","tileUrl","fetch","headers","Authorization","then","ok","Error","blob","reader","FileReader","addEventListener","pbf","Pbf","vectorTile","VectorTile","readAsArrayBuffer","catch","e","console","warn","getTemporalTileURLs","urlTemplate","params","urls","forEach","extent","urlParams","seriesgroup","startTimeISO","toISOString","endTimeISO","tileCoordinates","x","y","z","zoom","templateSettings","interpolate","template","urlTemplateCompiled","buildEndpoint","temporalExtentsIndices","indexOf","getTilePromises","tilesetUrl","promises","urlIndex","obtainTile","getCleanVectorArrays","rawTileData","vectorArray","groupData","cleanVectorArrays","columns","currentArray","totalVectorArraysLength","sumBy","a","longitude","filteredColumns","column","key","cumulatedOffsets","appendValues","set","getTilePlaybackData","prevPlaybackData","tilePlaybackData","zoomFactorRadius","convert","getZoomFactorRadius","zoomFactorRadiusRenderingMode","getZoomFactorRadiusRenderingMode","zoomFactorOpacity","getZoomFactorOpacity","columnsArr","keys","c","storedColumns","sigma","weight","hidden","pull","uniq","_loop","point","geom","toGeoJSON","latitude","timeIndex","getOffsetedTimeAtPrecision","datetime","_lngLatToWorld2","_slicedToArray","lngLatToWorld","worldX","worldY","radius","sigmaToRadius","opacity","weightToOpacity","series","frame","addTracksPointsRenderingData","hasFishing","_lngLatToWorld4","getTracksPlaybackData","playbackData","vesselSatisfiesFilters","every","selectVesselsAt","tileData","tileQuery","startIndex","endIndex","currentFilters","vessels","toleranceRadiusInWorldUnits","_loop2","f","_loop3","wx","wy","filters","pass","some","vesselSatisfiesAllFilters","vessel","getTilecoverLimits","viewportZoom","Math","ceil","tilesAvailable","min_zoom","max_zoom","flushToReleaseTiles","heatmapTiles","currentToLoadTileUids","currentTilesToReleaseUids","currentToReleaseTileUids","releaseTiles","markTileAsLoaded","tileUids","flushTileState","forceLoadingAllVisibleTiles","arguments","currentVisibleTiles","tilesToLoad","tilesToReleaseUids","currentLoadedTiles","visibleTile","find","uid","loadedTile","tilesToLoadUids","tile","referenceTile","ADD_REFERENCE_TILE","visibleHeatmapLayers","heatmap","heatmapLayers","visibleHeatmapLayersIds","visible","getTiles","updateLoadedTiles","debouncedFlushState","debounce","updateHeatmapTilesFromViewport","mapViewport","viewport","currentTransition","boundsViewport","PerspectiveMercatorViewport","bounds","unproject","width","height","wn","es","w","s","n","boundsPolygonsCoordinates","limits","w1","e2","viewportTilesCoords","tilecover","tiles","viewportTilesIndexes","indexes","visibleTiles","coords","prevZoom","queryHeatmapVessels","temporalExtentIndexes","uids","_queryHeatmap2","_queryHeatmap","layer","isEmpty","isCluster","isMouseCluster","foundVessels","highlightedVessels","layerId","HIGHLIGHT_VESSELS","tilesetId","subtype","clickableCluster","highlightableCluster","clearHighlightedVessels","highlightVesselFromHeatmap","heatmapTiles_actions_objectSpread","UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES","UPDATE_HEATMAP_TILE","getTemporalExtentsVisibleIndices","loadTemporalExtent","currentExtentStart","currentExtentEnd","indices","temporalExtentStart","layerIds","referenceTiles","newTemporalExtentsToLoad","loaderID","tilesByLayer","heatmap_actions_toConsumableArray","allPromises","heatmapLayerHeader","_heatmapLayerHeader","heatmap_actions_objectSpread","temporalExtentsIndicesLoaded","queriedTemporalExtentsIndices","visibleTemporalExtentsIndices","temporalExtentsIndicesToLoad","difference","tilePromise","pelagosPromises","allLayerPromises","all","loadedLayerId","loadLayerTile","_ref2","points","parseLayerTile","loadAllTilesForLayer","layersVessels","availableTiles","bestTile","layerVesselsResult","layersVesselsResults","layerVessels","hasEncounters","layerVessel","v","uniqBy","updateHeatmapLayers","newLayers","currentLoadTemporalExtent","prevLayersDict","newLayer","prevLayer","interactive","prevLayerId","l","transitionTo","increment","callback","onViewportChange","center","canZoomIn","canZoomOut","mouseLatLong","getFeatureMetaFields","staticLayerId","mapStyle","toJS","metadata","getStaticLayerIdFromGlFeature","glFeature","findFeature","glFeatures","mapClick","currentActivityLayersInteractionData","event","fields","metaFields","metaField","pow","area","toLocaleString","maximumFractionDigits","title","label","isLink","target","zoomIntoVesselCenter","onClick","interaction_actions_objectSpread","hsvToRgb","h_","s_","v_","h","parseFloat","floor","p","q","mod","r","g","b","round","hueToRgbDefaults","hueToRgbString","rgb","hexToRgb","hex","exec","parseInt","hueIncrementToHue","hueIncrement","wrapHue","HeatmapSubLayer","baseTexture","renderingStyleIndex","useNormalBlendMode","stage","PIXI","particles","ParticleContainer","scale","alpha","position","uvs","blendMode","BLEND_MODES","SCREEN","spritesPool","initialTextureFrame","Rectangle","mainVesselTexture","Texture","_setTextureFrame","clearSpriteProps","spritesProps","spritesPropsCount","destroy","children","textureFrame","clone","hueToHueIncrement","VESSELS_HUES_INCREMENTS_NUM","update","numProps","resizeSpritesPool","sprite","setTransform","numSprites","delta","toRemove","removeChildAt","toAdd","_addSprites","num","Sprite","anchor","addChild","worldToPixelsSimple","m","HeatmapLayer","React","Component","_build","_destroy","_redraw","nextProps","useRadialGradientStyle","props","setBrushZoomRenderingStyle","_this$props","rootStage","customRenderingStyle","subLayers","renderingStyle","rendering","setBrushRenderingStyle","brushRenderingStyle","toUpperCase","_setBrushRenderingStyleIndex","brushZoomRenderingStyle","_this","cappedZoomRenderingStyle","newStyleIndex","subLayer","setRenderingStyleIndex","_this2","_this$props2","defaultHue","allHuesToRender","currentlyUsedHues","allHues","_createSublayer","_destroySubLayer","_setSubLayersSpritePropsForTile","numFilters","hueToRender","render","_this$props3","viewportLeft","viewportRight","len","fi","scaledX","scaledY","mtx","pixelProjectionMatrix","_ref3","HeatmapLayer_slicedToArray","pitch","worldToPixels","pushSpriteProps","defaultOpacity","defaultSize","removeChild","TracksLayer","Graphics","nativeLines","clear","highlightTemporalExtentIndexes","overInInner","overExtent","drawFishingCircles","fishingCirclesRadius","drawOverTrack","_drawTrack","substr","lineThickness","lineOpacity","prevSeries","prevWorldX","prevWorldY","_ref$worldOffset","worldOffset","circlePoints","lineStyle","duplicateWorld","currentSeries","_worldToPixels2","TracksLayer_slicedToArray","moveTo","abs","atDatelineWorldY","isWestToEast","worldXEnd","atDatelineEndWorldX","atDatelineStartWorldX","_worldToPixels4","x1","y1","lineTo","_worldToPixels6","x2","y2","beginFill","circlesLength","drawCircle","endFill","ActivityLayers","touches","queryCoords","clientX","clientY","heatmapFadingIn","heatmapStage","_heatmapFadeinStep","BaseControl","exportNativeViewport","_context","_updateViewportSize","_this$props$viewport","pixi","transparent","antialias","renderer","canvas","view","container","appendChild","baseTextureCanvas","blurFactor","tplCanvas","document","createElement","tplCtx","getContext","diameter","yCenter","gradient","createRadialGradient","rgbString","addColorStop","rgbOuter","fillStyle","fillRect","beginPath","arc","PI","fill","lineWidth","strokeStyle","stroke","getVesselTexture","fromCanvas","ticker","add","_onTick","viewportWidth","viewportHeight","resize","dim","_viewport$unproject2","ActivityLayers_slicedToArray","wrappedLongitude","heatmapFadeinStartTimestamp","now","timeElapsed","highlightedClickedVessel","highlightLayerData","highlightFilters","ActivityLayers_objectSpread","leftWorldScaled","rightWorldScaled","shouldUseRadialGradientStyle","toggleHeatmapDimming","_startHeatmapFadein","err","gl","getError","log","_this$_getHighlightDa","_getHighlightData","react_default","ref","onMouseMove","onTouchStart","heatmap_HeatmapLayer","tracks_TracksLayer","propTypes","func","contextTypes","getHeatmapLayersAsArray","ActivityLayers_container_objectSpread","getTracksWithData","getTemporalExtentIndexes","startTimestamp","endTimestamp","getHighlightTemporalExtentIndexes","connect","ownProps","nativeViewport","topLeftPx","bottomRightPx","topLeftWorld","pixelsToWorld","pixelUnprojectionMatrix","bottomRightWorld","northWest","southEast","north","south","west","east","PopupWrapper","closeButton","onClose","esm","offsetTop","tipSize","closeOnClick","Map","Map_classCallCheck","Map_getPrototypeOf","call","Map_defineProperty","Map_assertThisInitialized","_mapContainerRef","mapContainerStyle","window","getComputedStyle","setViewport","Map_objectSpread","mapHover","lngLat","mouseOver","_resize","setTimeout","removeEventListener","_this3","maxZoom","minZoom","transitionEnd","onClosePopup","clickPopup","hoverPopup","cursor","interactiveLayerIds","className","styles","onMouseLeave","setState","onMouseEnter","onTransitionEnd","onHover","getCursor","isDragging","ActivityLayers_container","Map_PopupWrapper","content","getInteractiveLayerIds","staticLayers","getMapStyle","mapStyles","trackLayersIndex","lastIndexOf","finalMapStyles","mergeIn","mapStylesLayers","get","trackLayer","insert","fromJS","interaction","lat","long","popupFields","mainPopupFieldId","toLowerCase","featureTitle","objects","TYPES","geoJSON","setMapStyle","updateGLLayer","glLayerId","refLayer","currentStyleLayers","newStyle","glLayerIndex","findIndex","glLayer","visibility","setIn","toggleLayerVisibility","isBasemap","initialGLLayer","GL_STYLE","refLayerOpacity","labelsVisibility","getIn","showLabels","currentGlLayer","currentStyle","glType","defaultStyles","styleType","hasFeatures","applyStyleToAllFeatures","allPaintProperties","style_actions_objectSpread","layerColorRgb","layerColorRgbFragment","glPaintProperty","glPaintFinalValue","selectedValue","fallbackValue","paintOrLayout","replace","applyLayerExpressions","isTemporal","currentFilter","deleteIn","newFilter","applyLayerFilters","addCustomGLLayer","tileSize","allGeoJSONTypes","numByGLType","geoJSONType","glTypeMax","getMainGeomType","layout","layerIndex","reverse","splice","instanciateCartoLayers","sourceId","cartoLayersPromises","sourceCartoSQL","mapConfig","options","sql","mapConfigURL","encodeURIComponent","stringify","cartoAnonymousMapUrl","json","layergroupid","instanciatedCartoLayers","cartoLayer","tilesURL","newSourceId","commitStyleUpdates","basemapLayers","style_actions_toConsumableArray","bl","currentGLSources","workspaceGLLayers","workspaceGLLayer","finalSource","srcGlLayer","source-layer","finalLayers","addWorkspaceGLLayers","customLayers","isCustom","glLayers","glSources","cartoLayersToInstanciate","glSource","cartoLayerInstanciated","cartoLayersInstanciated","ADD_TRACK","UPDATE_TRACK","getTrackDataParsed","time","Infinity","tbbox","geoBounds","minLat","minLng","maxLat","maxLng","timelineBounds","getOldTrackBoundsFormat","addOffset","geo","lng","updateTracks","newTracks","prevTracks","newTrack","trackId","prevTrack","cleanData","rawTrackData","statusText","_getTrackDataParsed","targetMapVessel","finally","withReducerPropTypes","propTypesSchema","reducer","initialState","onAttributionsChange","withReducerTypes","instanceOf","action","module_reducer_objectSpread","module_reducer_toConsumableArray","loaderIndex","exact","tracks_reducer_objectSpread","tracks_reducer_toConsumableArray","trackData","removedTrackId","DEFAULT_TRANSITION","transitionDuration","transitionInterpolator","FlyToInterpolator","transitionEasing","easeCubic","bearing","attributions","sourceKey","attribution","mapReducer","combineReducers","ModuleReducer","TracksReducer","indicesAdded","heatmap_reducer_defineProperty","heatmap_reducer_objectSpread","heatmap_reducer_toConsumableArray","newTile","layerTiles","tileIndex","tileUid","releasedTileIndex","releasedRefTileIndex","newHeatmapLayers","heatmapTiles_reducer_objectSpread","tileUidsMarkedAsLoaded","newMapStyle","glyphsPath","style_reducer_objectSpread","style_reducer_toConsumableArray","viewport_reducer_objectSpread","currentZoom","interaction_reducer_objectSpread","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","throttleApplyTemporalExtent","throttle","applyTemporalExtent","setTemporalExtent","updateViewportFromIncomingProps","incomingViewport","viewportUpdate","MapModule","initialized","errorInfo","prevProps","indicesToAddByLayer","heatmapLayer","oldVisibleTemporalExtentsIndices","newVisibleTemporalExtentsIndices","layerIdsWithIndicesToAdd","currentViewport","componentStack","react_redux_es","Map_container","defaultProps","vp","fitBounds","padding","MDXContent","map_map_classCallCheck","map_map_possibleConstructorReturn","map_map_getPrototypeOf","components","_objectWithoutProperties","dist","parentName","href","index_m","__codesandbox","__position","__code","__scope","map_map"],"mappings":"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","file":"static/js/src-map-map.f20d5017.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"map_map__1CWd_\",\"googleLogo\":\"map_googleLogo__2KshJ\"};","var byname = {\n  Uint8: {\n    size: Uint8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Int8: {\n    size: Int8Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint8',\n    setter: 'setUint8',\n  },\n  Uint16: {\n    size: Uint16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint16',\n    setter: 'setUint16',\n  },\n  Int16: {\n    size: Int16Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt16',\n    setter: 'setInt16',\n  },\n  Uint32: {\n    size: Uint32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getUint32',\n    setter: 'setUint32',\n  },\n  Int32: {\n    size: Int32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getInt32',\n    setter: 'setInt32',\n  },\n  Float32: {\n    size: Float32Array.BYTES_PER_ELEMENT,\n    array: 'Float32Array',\n    getter: 'getFloat32',\n    setter: 'setFloat32',\n  },\n  Float64: {\n    size: Float64Array.BYTES_PER_ELEMENT,\n    array: 'Float64Array',\n    getter: 'getFloat64',\n    setter: 'setFloat64',\n  },\n}\n\nvar writeStringToArrayBuffer = function(str, start, end, buf, bufstart) {\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  if (bufstart == undefined) {\n    bufstart = start\n  }\n  for (var i = start; i < end; i++) {\n    buf[i - start + bufstart] = str.charCodeAt(i) & 0xff\n  }\n}\n\nvar stringToArrayBuffer = function(str, start, end) {\n  var self = this\n\n  if (end == undefined) {\n    end = str.length\n  }\n  if (start == undefined) {\n    start = 0\n  }\n  var res = new Uint8ClampedArray(end - start)\n  writeStringToArrayBuffer(str, start, end, res, 0)\n  return res.buffer\n}\n\nvar arrayBufferToString = function(buf) {\n  return String.fromCharCode.apply(null, new Uint8Array(buf))\n}\n\nvar pack = function(typespec, value, littleendian) {\n  var array = new ArrayBuffer(typespec.size)\n  new DataView(array)[typespec.setter](0, value, littleendian)\n  return arrayBufferToString(array)\n}\n\nvar Pack = {\n  typemap: {\n    byname: byname,\n    byarray: {},\n  },\n  pack: pack,\n  arrayBufferToString: arrayBufferToString,\n  stringToArrayBuffer: stringToArrayBuffer,\n  writeStringToArrayBuffer: writeStringToArrayBuffer,\n}\nfor (var name in Pack.typemap.byname) {\n  var spec = Pack.typemap.byname[name]\n  spec.name = name\n  Pack.typemap.byarray[spec.array] = spec\n}\n\nexport default Pack\n","import Pack from './Pack'\n\nclass PelagosClient {\n  constructor() {\n    this.MAGIC_COOKIE = 'tmtx'\n  }\n\n  obtainTile(url, token) {\n    return new Promise(\n      function(resolve, reject) {\n        this.request = null\n        if (typeof XMLHttpRequest != 'undefined') {\n          this.request = new XMLHttpRequest()\n        } else {\n          throw 'XMLHttpRequest is disabled'\n        }\n        this.resolve = resolve\n        this.reject = reject\n        this.request.open('GET', url, true)\n        if (token) {\n          this.request.setRequestHeader('Authorization', `Bearer ${token}`)\n        }\n        this.request.responseType = 'arraybuffer'\n        this.request.onload = this.handleData.bind(this)\n        this.request.onerror = this.handleData.bind(this)\n        this.request.send(null)\n      }.bind(this)\n    )\n  }\n\n  handleData() {\n    var self = this\n    if (!this.request) {\n      return\n    }\n    if (this.error) {\n      return true\n    }\n\n    if (this.request.readyState == 4) {\n      /* HTTP reports success with a 200 status. The file protocol\n       reports success with zero. HTTP returns zero as a status\n       code for forbidden cross domain requests.\n       https://developer.mozilla.org/En/Using_XMLHttpRequest */\n      var success = this.request.status == 200 || (this.isFileUri && this.request.status == 0)\n      if (!success) {\n        this.resolve(null)\n        return\n      }\n    }\n\n    if (!this.request.response) {\n      return\n    }\n    var length = this.request.response.byteLength\n    var response = this.request.response\n    var dataView = new DataView(response)\n\n    if (length < 4 + 4) {\n      return\n    }\n    if (self.headerLen == null) {\n      var cookie = Pack.arrayBufferToString(response.slice(0, 4))\n      if (cookie != this.MAGIC_COOKIE) {\n        this.reject(\n          'Could not load ' +\n            this.url +\n            ' due to incorrect file format. Cookie: [' +\n            this.cookie +\n            ']'\n        )\n        return\n      }\n\n      self.headerLen = dataView.getInt32(4, true)\n\n      self.offset = 4 + 4\n    }\n    if (length < self.offset + self.headerLen) {\n      return\n    }\n    if (!self.headerIsLoaded) {\n      self.header = JSON.parse(\n        Pack.arrayBufferToString(response.slice(self.offset, self.offset + self.headerLen))\n      )\n      self.rowLen = 0\n      self.header.colsByName = {}\n      for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n        var col = self.header.cols[colidx]\n        col.idx = colidx\n        self.header.colsByName[col.name] = col\n        col.typespec = Pack.typemap.byname[col.type]\n\n        if (col.multiplier != undefined && col.min != undefined) {\n          col.min = col.min * col.multiplier\n        }\n        if (col.offset != undefined && col.min != undefined) {\n          col.min = col.min + col.offset\n        }\n        if (col.multiplier != undefined && col.max != undefined) {\n          col.max = col.max * col.multiplier\n        }\n        if (col.offset != undefined && col.max != undefined) {\n          col.max = col.max + col.offset\n        }\n\n        self.rowLen += col.typespec.size\n      }\n      self.offset += self.headerLen\n\n      // Add the padding to nearest 4-byte-boundary\n      self.offset += (4 - (self.headerLen % 4)) % 4\n\n      self.headerIsLoaded = true\n      if (self.header.orientation != 'rowwise' && self.header.orientation != 'columnwise') {\n        self.errorLoading({\n          orientation: self.header.orientation,\n          toString: function() {\n            return (\n              'Could not load ' +\n              this.url +\n              ' due to unsupported file orientation. Orientation: ' +\n              this.orientation +\n              '. Supported orientations: rowwise, columnwise.'\n            )\n          },\n        })\n        return true\n      }\n\n      // Empty tile, stop parsing.\n      if (!self.rowLen) {\n        self.allLoaded()\n        return true\n      }\n    }\n    if (self.header.orientation == 'rowwise') {\n      var result = {}\n      for (; self.offset + self.rowLen <= length; self.rowidx++) {\n        var row = {}\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n          var val = dataView[col.typespec.getter](self.offset, true)\n          row[col.name] = val\n          self.offset += col.typespec.size\n        }\n        // self.rowLoaded(row);\n\n        result[col.name] = row\n      }\n      if (self.rowidx == self.header.length) {\n        // self.allLoaded();\n        this.resolve(result)\n      } else {\n        // self.batchLoaded();\n      }\n    } else if (self.header.orientation == 'columnwise') {\n      var colValues = null\n      var result = {}\n      if (length >= self.offset + self.header.length * self.rowLen) {\n        for (var colidx = 0; colidx < self.header.cols.length; colidx++) {\n          var col = self.header.cols[colidx]\n\n          colValues = new (eval(col.typespec.array))(\n            response.slice(self.offset, self.offset + col.typespec.size * self.header.length)\n          )\n          self.offset += self.header.length * col.typespec.size\n\n          result[col.name] = colValues\n        }\n\n        // self.allLoaded();\n        this.resolve(result)\n        return true\n      }\n    }\n  }\n}\n\nexport default PelagosClient\n","import PropTypes from 'prop-types'\n\nexport const trackTypes = {\n  id: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n  color: PropTypes.string,\n  type: PropTypes.oneOf(['geojson', undefined]),\n  layerTemporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n  fitBoundsOnLoad: PropTypes.bool,\n}\n","import PropTypes from 'prop-types'\n\nexport const heatmapLayerTypes = {\n  id: PropTypes.string.isRequired,\n  tilesetId: PropTypes.string,\n  subtype: PropTypes.string,\n  visible: PropTypes.bool,\n  hue: PropTypes.number,\n  opacity: PropTypes.number,\n  filters: PropTypes.arrayOf(\n    PropTypes.shape({\n      // hue overrides layer hue if set\n      hue: PropTypes.number,\n      // filterValues is a dictionary in which each key is a filterable field,\n      // and values is an array of all possible values (OR filter)\n      // ie: filterValues: { category: [5, 6] }\n      filterValues: PropTypes.object,\n    })\n  ),\n  header: PropTypes.shape({\n    endpoints: PropTypes.object,\n    isPBF: PropTypes.bool,\n    colsByName: PropTypes.object,\n    temporalExtents: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)),\n    temporalExtentsLess: PropTypes.bool,\n  }).isRequired,\n  interactive: PropTypes.bool,\n}\n\nexport const basemapLayerTypes = {\n  id: PropTypes.string,\n  visible: PropTypes.bool,\n}\n\nexport const staticLayerTypes = {\n  id: PropTypes.string.isRequired,\n  // TODO MAP MODULE Is that needed and if so why\n  visible: PropTypes.bool,\n  selected: PropTypes.bool,\n  selectedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  highlighted: PropTypes.bool,\n  higlightedFeatures: PropTypes.shape({\n    field: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.string),\n  }),\n  opacity: PropTypes.number,\n  color: PropTypes.string,\n  showLabels: PropTypes.bool,\n  interactive: PropTypes.bool,\n  filters: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  isCustom: PropTypes.bool,\n  subtype: PropTypes.oneOf([undefined, 'geojson', 'raster']),\n  url: PropTypes.string,\n  data: PropTypes.object,\n  gl: PropTypes.object,\n}\n","import PropTypes from 'prop-types'\n\nexport const popupTypes = {\n  content: PropTypes.node,\n  latitude: PropTypes.number.isRequired,\n  longitude: PropTypes.number.isRequired,\n}\n\nexport const viewportTypes = {\n  zoom: PropTypes.number,\n  center: PropTypes.arrayOf(PropTypes.number),\n}\n","// Application settings\nexport const TIMELINE_STEP = 24 * 60 * 60 * 1000 // 1 day\nexport const MIN_FRAME_LENGTH_MS = TIMELINE_STEP // 1 day\n\n// vessels rendering\n// from this zoom level and above, render using circle style instead of heatmap\nexport const VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD = 6\n// the base radius, it can only be scaled down by the radius factor calculated on the dataset\nexport const VESSELS_BASE_RADIUS = 8\n// in heatmap style, defines how 'blurry' a point will look. Higher = less blur\nexport const VESSELS_HEATMAP_BLUR_FACTOR = 0.15\n\nexport const ACTIVITY_HIGHLIGHT_HUE = 312\n\nexport const VESSELS_HEATMAP_DIMMING_ALPHA = 0.5\n\nexport const TRACKS_DOTS_STYLE_ZOOM_THRESHOLD = 2\n\nexport const MAX_SPRITES_PER_LAYER = 200000\n\n// interaction\n// radius of vessels lookup in pixels,\n// ie how large the clicked region should be for including vessels\nexport const VESSEL_CLICK_TOLERANCE_PX = 10\n\nexport const CLUSTER_CLICK_ZOOM_INCREMENT = 1\n\nexport const MIN_ZOOM_LEVEL = 1\n// user can zoom up to this z level, but it doesn't guarantee availability of tiles\nexport const MAX_ZOOM_LEVEL = 14\n\n// data\n// Limit tile loading for activity layers up to this z level.\n// Beyond, layer is still displayed but with coarse data from the lower zoom level\nexport const ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING = 10\n\n// Sets what should be the discrete zoom level to load tiles, from a non-discrete\n// viewport zoom values. For instance, a values of 0.5 will load z 3 with a viewport\n// z of 2 (ceiling of 2 + 0.5)\n// this has a direct impact on the number of points displayed on the map, thus on the\n// performance of the app.\nexport const TILES_LOAD_ZOOM_OFFSET = 0.5\n\nexport const STATIC_LAYERS_CARTO_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map?config=$MAPCONFIG'\nexport const STATIC_LAYERS_CARTO_TILES_ENDPOINT =\n  'https://carto.globalfishingwatch.org/user/admin/api/v1/map/$LAYERGROUPID/{z}/{x}/{y}.mvt'\n\nexport const TRACKS_LAYER_IN_FRONT_OF_GROUP = 'static'\n","export const INIT_MODULE = 'INIT_MODULE'\nexport const SET_TEMPORAL_EXTENT = 'SET_TEMPORAL_EXTENT'\nexport const SET_HIGHLIGHT_TEMPORAL_EXTENT = 'SET_HIGHLIGHT_TEMPORAL_EXTENT'\nexport const START_LOADER = 'START_LOADER'\nexport const COMPLETE_LOADER = 'COMPLETE_LOADER'\n\nexport const initModule = (props) => (dispatch) => {\n  dispatch({\n    type: INIT_MODULE,\n    payload: props,\n  })\n}\n\nexport const startLoader = (dispatch, state) => {\n  const loaderId = new Date().getTime()\n  dispatch({\n    type: START_LOADER,\n    payload: loaderId,\n  })\n  if (state.map.module.onLoadStart !== undefined) {\n    state.map.module.onLoadStart()\n  }\n  return loaderId\n}\n\nexport const completeLoader = (loaderId) => (dispatch, getState) => {\n  const state = getState()\n  const loaders = Object.assign({}, state.map.module.loaders)\n  dispatch({\n    type: COMPLETE_LOADER,\n    payload: loaderId,\n  })\n  if (!loaders.length && state.map.module.onLoadComplete !== undefined) {\n    state.map.module.onLoadComplete()\n  }\n}\n\nexport const onViewportChange = () => (dispatch, getState) => {\n  const state = getState()\n  const callback = state.map.module.onViewportChange\n\n  if (callback === undefined) {\n    return\n  }\n  const viewport = state.map.viewport\n\n  if (viewport.bounds === undefined) {\n    return\n  }\n\n  callback({\n    zoom: viewport.viewport.zoom,\n    center: [viewport.viewport.latitude, viewport.viewport.longitude],\n    bounds: viewport.bounds,\n    canZoomIn: viewport.canZoomIn,\n    canZoomOut: viewport.canZoomOut,\n    mouseLatLong: viewport.mouseLatLong,\n  })\n}\n\nexport const setTemporalExtent = (temporalExtent) => ({\n  type: SET_TEMPORAL_EXTENT,\n  payload: temporalExtent,\n})\n\nexport const setHighlightTemporalExtent = (highlightTemporalExtent) => ({\n  type: SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  payload: highlightTemporalExtent,\n})\n\nexport const closePopup = () => (dispatch, getState) => {\n  const state = getState()\n  if (state.map.module.onClosePopup !== undefined) {\n    state.map.module.onClosePopup()\n  }\n}\n","export const getTemporalExtent = (state) => state.map.module.temporalExtent\n\nexport const getHighlightTemporalExtent = (state) => state.map.module.highlightTemporalExtent\n","import { createSelector } from 'reselect'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\n\nexport const getTracksData = (state) => state.map.tracks.data\nexport const getGeojsonTracks = createSelector(\n  getTracksData,\n  (tracks) => tracks.filter((t) => t.type === 'geojson')\n)\nexport const getGeojsonTracksReady = createSelector(\n  getGeojsonTracks,\n  (tracks) => tracks.filter((t) => t.data !== undefined)\n)\n\nconst mergeStyles = (style1, style2) => ({\n  sources: { ...style1.sources, ...style2.sources },\n  layers: [...style1.layers, ...style2.layers],\n})\n\nconst filterGeojsonByTimerange = (geojson, { start, end }) => {\n  if (!geojson || !geojson.features) return null\n  const featuresFiltered = geojson.features.reduce((filteredFeatures, feature) => {\n    const hasTimes =\n      feature.properties.coordinateProperties.times &&\n      feature.properties.coordinateProperties.times.length > 0\n    if (hasTimes) {\n      const filtered = feature.geometry.coordinates.reduce(\n        (filteredCoordinates, coordinate, index) => {\n          const timeCoordinate = feature.properties.coordinateProperties.times[index]\n          const isInTimeline = timeCoordinate > start && timeCoordinate < end\n          if (isInTimeline) {\n            filteredCoordinates.coordinates.push(coordinate)\n            filteredCoordinates.times.push(timeCoordinate)\n          }\n          return filteredCoordinates\n        },\n        { coordinates: [], times: [] }\n      )\n      if (!filtered.coordinates.length) return filteredFeatures\n\n      const filteredFeature = {\n        ...feature,\n        geometry: {\n          ...feature.geometry,\n          coordinates: filtered.coordinates,\n        },\n        properties: {\n          ...feature.properties,\n          coordinateProperties: {\n            times: filtered.times,\n          },\n        },\n      }\n      filteredFeatures.push(filteredFeature)\n    }\n    return filteredFeatures\n  }, [])\n  const geojsonFiltered = {\n    ...geojson,\n    features: featuresFiltered,\n  }\n  return geojsonFiltered\n}\n\nconst getFullTracksStyles = createSelector(\n  [getTemporalExtent, getGeojsonTracksReady],\n  (temporalExtent, tracks) => {\n    const hasTemporalExtent = temporalExtent && temporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: temporalExtent[0].getTime(),\n      end: temporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}Track`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}Lines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': track.color,\n              },\n            },\n            {\n              id: `${track.id}Points`,\n              source,\n              type: 'circle',\n              filter: ['match', ['geometry-type'], ['', 'Point'], true, false],\n              paint: {\n                'circle-radius': 4,\n                'circle-color': track.color,\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nconst getHighlightedTrackStyles = createSelector(\n  [getHighlightTemporalExtent, getGeojsonTracksReady],\n  (highlightTemporalExtent, tracks) => {\n    const hasTemporalExtent = highlightTemporalExtent && highlightTemporalExtent.length > 0\n    const hasTracks = tracks && tracks.length > 0\n    if (!hasTemporalExtent || !hasTracks) return null\n\n    const timerange = {\n      start: highlightTemporalExtent[0].getTime(),\n      end: highlightTemporalExtent[1].getTime(),\n    }\n    const styles = tracks.reduce(\n      (acc, track) => {\n        if (!track.data) return acc\n\n        const source = `${track.id}HighlightedTrack`\n        const style = {\n          sources: {\n            [source]: {\n              type: 'geojson',\n              data: filterGeojsonByTimerange(track.data, timerange),\n            },\n          },\n          layers: [\n            {\n              id: `${track.id}HighlightedLines`,\n              source,\n              type: 'line',\n              paint: {\n                'line-width': 1,\n                'line-color': '#fff',\n              },\n            },\n          ],\n        }\n        return mergeStyles(acc, style)\n      },\n      { sources: {}, layers: [] }\n    )\n    return styles\n  }\n)\n\nexport const getTracksStyles = createSelector(\n  [getFullTracksStyles, getHighlightedTrackStyles],\n  (trackStyles, highlightedTrackStyles) => {\n    if (!highlightedTrackStyles) return trackStyles\n    return mergeStyles(trackStyles, highlightedTrackStyles)\n  }\n)\n","export const GL_TRANSPARENT = 'rgba(0,0,0,0)'\n\nexport const TRANSITION_TYPE = {\n  ZOOM: 'ZOOM',\n}\n\nexport const ENCOUNTERS = 'Encounters'\n\nexport const BRUSH_RENDERING_STYLE = {\n  NORMAL: 0,\n  BULLSEYE: 2,\n}\n\nexport const BRUSH_ZOOM_RENDERING_STYLE = {\n  RADIAL_GRADIENT: 0,\n  CIRCLE: 1,\n}\n\nexport const POLYGON_LAYERS_AREA = 'POLYGON_LAYERS_AREA'\n\nexport const CUSTOM_LAYERS_SUBTYPES = {\n  geojson: 'geojson',\n  raster: 'raster',\n}\n","import Pbf from 'pbf'\nimport { VectorTile } from '@mapbox/vector-tile'\n\nexport default (tileUrl, token) => {\n  const vectorTilePromise = fetch(tileUrl, {\n    headers: token\n      ? {\n          Authorization: `Bearer ${token}`,\n        }\n      : {},\n  })\n    .then((response) => {\n      if (!response.ok) {\n        throw new Error(`could not load tile ${tileUrl}`)\n      }\n      return response.blob().then((blob) => {\n        const reader = new FileReader()\n        return new Promise((resolve) => {\n          reader.addEventListener('loadend', () => {\n            // reader.result contains the contents of blob as a typed array\n            // blob.type === 'application/x-protobuf'\n            const pbf = new Pbf(reader.result)\n            const vectorTile = new VectorTile(pbf)\n            return resolve(vectorTile)\n          })\n          reader.readAsArrayBuffer(blob)\n        })\n      })\n    })\n    .catch((e) => {\n      console.warn(e)\n    })\n  return vectorTilePromise\n}\n","import pull from 'lodash/pull'\nimport uniq from 'lodash/uniq'\nimport sumBy from 'lodash/sumBy'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport convert from '@globalfishingwatch/map-convert'\nimport buildEndpoint from './buildEndpoint'\nimport PelagosClient from '../lib/pelagosClient'\n\nimport getPBFTile from './getPBFTile'\n\n/**\n * Generates the URLs to load vessel track data for a tile\n *\n * @param {string} tilesetUrl       the tileset base URL\n * @param {array} temporalExtents   all tileset temporal extents\n * @param {object} params           - seriesgroup: a seriesgroup id, used for tracks loading\n *                                  - tileCoordinates: this tiles tile coordinates (zoom, x, y). Will default to 0,0,0\n *                                  - temporalExtentsIndices: restrict to these temporalExtents indices\n * @returns {Array}                 an array of URLs for this tile\n */\nconst getTemporalTileURLs = (urlTemplate, temporalExtents, params) => {\n  const urls = []\n\n  ;(temporalExtents || [null]).forEach((extent, index) => {\n    const urlParams = {\n      id: params.seriesgroup,\n    }\n    if (extent !== null && params.temporalExtentsLess !== true) {\n      urlParams.startTimeISO = new Date(extent[0]).toISOString()\n      urlParams.endTimeISO = new Date(extent[1]).toISOString()\n    }\n    if (params.tileCoordinates) {\n      urlParams.x = params.tileCoordinates.x\n      urlParams.y = params.tileCoordinates.y\n      urlParams.z = params.tileCoordinates.zoom\n    }\n\n    const url = buildEndpoint(urlTemplate, urlParams)\n\n    if (\n      params.temporalExtentsLess === true ||\n      !params.temporalExtentsIndices ||\n      params.temporalExtentsIndices.indexOf(index) > -1\n    ) {\n      urls.push(url)\n    }\n  })\n  return urls\n}\n\n/**\n * See getTemporalTileURLs.\n */\nexport const getTilePromises = (tilesetUrl, token, temporalExtents, params) => {\n  const promises = []\n  const urls = getTemporalTileURLs(tilesetUrl, temporalExtents, params)\n  for (let urlIndex = 0, length = urls.length; urlIndex < length; urlIndex++) {\n    if (params.isPBF === true) {\n      promises.push(getPBFTile(urls[urlIndex], token))\n    } else {\n      promises.push(new PelagosClient().obtainTile(urls[urlIndex], token))\n    }\n  }\n\n  return promises\n}\n\nexport const getCleanVectorArrays = (rawTileData) =>\n  rawTileData.filter((vectorArray) => vectorArray !== null)\n\n/**\n * As data will come in multiple arrays (1 per API query/year basically), they need to be merged here\n *\n * @param cleanVectorArrays an array of objects containing a Float32Array for each vessel param (lat, lon, weight...)\n * @param columns the keys to pick on the vectorArrays (lat, lon, weight, etc)\n * @returns an object containing a Float32Array for each API_RETURNED_KEY (lat, lon, weight, etc)\n */\nexport const groupData = (cleanVectorArrays, columns) => {\n  const data = {}\n\n  const totalVectorArraysLength = sumBy(cleanVectorArrays, (a) => a.longitude.length)\n\n  const filteredColumns = columns.filter((column) => {\n    if (cleanVectorArrays[0] && cleanVectorArrays[0][column] === undefined) {\n      console.warn(`column ${column} is present in layerHeader.colsByName but not in tile data`)\n      return false\n    }\n    return true\n  })\n\n  filteredColumns.forEach((key) => {\n    data[key] = new Float32Array(totalVectorArraysLength)\n  })\n\n  let currentArray\n  let cumulatedOffsets = 0\n\n  const appendValues = (key) => {\n    data[key].set(currentArray[key], cumulatedOffsets)\n  }\n\n  for (let index = 0, length = cleanVectorArrays.length; index < length; index++) {\n    currentArray = cleanVectorArrays[index]\n    filteredColumns.forEach(appendValues)\n    cumulatedOffsets += currentArray.longitude.length\n  }\n  return data\n}\n\n/**\n * Converts Vector Array data to Playback format and stores it locally.\n * The data structure is an array indexed by a time unit, ie a set of points every day\n * This preprocessing step allows playback to play smoothly as the necessary conversions and data structure set up\n * is done once (after tile has been loaded)\n *\n * @param data the source data before indexing by day, an object containing\n *  - a vector (Float32Array) for each header's column in the case of Pelagos tiles\n *  - an array of points int the case of PBF tiles\n * @param colsByName the columns present on the dataset, determined by tileset headers\n * @param tileCoordinates x, y, z\n * @param isPBF bool whether data is a PBF vector tile (true) or a Pelagos tile (false)\n * @param prevPlaybackData an optional previously loaded tilePlaybackData array (when adding time range)\n */\nexport const getTilePlaybackData = (data, colsByName, tileCoordinates, isPBF, prevPlaybackData) => {\n  const tilePlaybackData = prevPlaybackData === undefined ? [] : prevPlaybackData\n\n  const zoom = tileCoordinates.zoom\n  const zoomFactorRadius = convert.getZoomFactorRadius(zoom)\n  const zoomFactorRadiusRenderingMode = convert.getZoomFactorRadiusRenderingMode(zoom)\n  const zoomFactorOpacity = convert.getZoomFactorOpacity(zoom)\n\n  // store all available columns as object keys\n  const columns = {}\n  const columnsArr = Object.keys(colsByName)\n  columnsArr.forEach((c) => {\n    columns[c] = true\n  })\n\n  // columns specified by layer header columns\n  let storedColumns = [].concat(columnsArr)\n  if (columns.sigma === true) storedColumns.push('radius')\n  if (columns.weight === true) storedColumns.push('opacity')\n  if (columns.longitude === true) {\n    storedColumns.push('worldX')\n    storedColumns.push('worldY')\n  }\n  if (columns.id === true) {\n    storedColumns.push('series')\n  }\n\n  // omit values that will be transformed before being stored to playback data (ie lat -> worldY)\n  // only if hidden: true flag is set on header\n  ;['latitude', 'longitude', 'datetime'].forEach((col) => {\n    if (colsByName[col] === undefined || colsByName[col].hidden === true) {\n      pull(storedColumns, col)\n    }\n  })\n  // always pull sigma and weight\n  pull(storedColumns, 'sigma', 'weight')\n  storedColumns = uniq(storedColumns)\n\n  const numPoints = isPBF === true ? data.length : data.latitude.length\n\n  for (let index = 0, length = numPoints; index < length; index++) {\n    let point\n    if (isPBF === true) {\n      const feature = data.feature(index)\n      point = feature.properties\n      // WARNING: toGeoJSON is expensive. Avoid using raw coordinates in PBF tiles, pregenerate world coords\n      // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n      const geom = feature.toGeoJSON(tileCoordinates.x, tileCoordinates.y, zoom).geometry\n        .coordinates\n      point.longitude = geom[0]\n      point.latitude = geom[1]\n    } else {\n      point = {}\n      columnsArr.forEach((c) => {\n        point[c] = data[c][index]\n      })\n    }\n\n    const timeIndex = columns.timeIndex\n      ? point.timeIndex\n      : convert.getOffsetedTimeAtPrecision(point.datetime)\n\n    // FIXME: this should not be done when headers declare worldX/Y -  if (!columns.worldX) {\n    const [worldX, worldY] = lngLatToWorld([point.longitude, point.latitude], 1)\n    point.worldX = worldX\n    point.worldY = worldY\n\n    if (columns.sigma) {\n      point.radius = convert.sigmaToRadius(\n        point.sigma,\n        zoomFactorRadiusRenderingMode,\n        zoomFactorRadius\n      )\n    }\n    if (columns.weight) {\n      point.opacity = convert.weightToOpacity(point.weight, zoomFactorOpacity)\n    }\n    if (columns.id) {\n      point.series = point.id\n    }\n\n    if (!tilePlaybackData[timeIndex]) {\n      const frame = {}\n      storedColumns.forEach((column) => {\n        frame[column] = [point[column]]\n      })\n      tilePlaybackData[timeIndex] = frame\n      continue\n    }\n    const frame = tilePlaybackData[timeIndex]\n    storedColumns.forEach((column) => {\n      frame[column].push(point[column])\n    })\n  }\n  return tilePlaybackData\n}\n\nexport const addTracksPointsRenderingData = (data) => {\n  data.hasFishing = []\n  data.worldX = []\n  data.worldY = []\n\n  for (let index = 0, length = data.weight.length; index < length; index++) {\n    const [worldX, worldY] = lngLatToWorld([data.longitude[index], data.latitude[index]], 1)\n    data.worldX[index] = worldX\n    data.worldY[index] = worldY\n    data.hasFishing[index] = data.weight[index] > 0\n  }\n  return data\n}\n\n/**\n * A simplified version of getTilePlaybackData for tracks\n * Converts Vector Array data to Playback format (organized by days) and stores it locally\n * @param vectorArray the source data before indexing by day\n */\nexport const getTracksPlaybackData = (vectorArray) => {\n  const playbackData = []\n\n  for (let index = 0, length = vectorArray.series.length; index < length; index++) {\n    const datetime = vectorArray.datetime[index]\n    const timeIndex = convert.getOffsetedTimeAtPrecision(datetime)\n\n    if (!playbackData[timeIndex]) {\n      const frame = {\n        worldX: [vectorArray.worldX[index]],\n        worldY: [vectorArray.worldY[index]],\n        series: [vectorArray.series[index]],\n        hasFishing: [vectorArray.hasFishing[index]],\n      }\n      playbackData[timeIndex] = frame\n      continue\n    }\n    const frame = playbackData[timeIndex]\n    frame.worldX.push(vectorArray.worldX[index])\n    frame.worldY.push(vectorArray.worldY[index])\n    frame.series.push(vectorArray.series[index])\n    frame.hasFishing.push(vectorArray.hasFishing[index])\n  }\n  return playbackData\n}\n\nexport const vesselSatisfiesFilters = (frame, index, filterValues) => {\n  const satisfiesFilters = Object.keys(filterValues).every((field) => {\n    if (frame[field] === undefined) {\n      // this field is not available on this layer. This can happen in an edge case described\n      // here: https://github.com/GlobalFishingWatch/map-client/issues/661#issuecomment-334496469\n      return false\n    }\n    return filterValues[field].indexOf(frame[field][index]) > -1\n  })\n  return satisfiesFilters\n}\n\nconst vesselSatisfiesAllFilters = (frame, index, filters) => {\n  const satisfiesAllFilters = filters\n    .filter((f) => f.pass !== true)\n    .some((filter) => vesselSatisfiesFilters(frame, index, filter.filterValues))\n  return satisfiesAllFilters\n}\n\nexport const selectVesselsAt = (tileData, tileQuery, startIndex, endIndex, currentFilters) => {\n  const vessels = []\n\n  const { worldX, worldY, toleranceRadiusInWorldUnits } = tileQuery\n\n  for (let f = startIndex; f < endIndex; f++) {\n    const frame = tileData[f]\n    if (frame === undefined) continue\n    for (let i = 0; i < frame.worldX.length; i++) {\n      const wx = frame.worldX[i]\n      const wy = frame.worldY[i]\n\n      if (\n        (!currentFilters.length || vesselSatisfiesAllFilters(frame, i, currentFilters)) &&\n        wx >= worldX - toleranceRadiusInWorldUnits &&\n        wx <= worldX + toleranceRadiusInWorldUnits &&\n        wy >= worldY - toleranceRadiusInWorldUnits &&\n        wy <= worldY + toleranceRadiusInWorldUnits\n      ) {\n        const vessel = {}\n\n        Object.keys(frame).forEach((key) => {\n          vessel[key] = frame[key][i]\n        })\n        vessels.push(vessel)\n      }\n    }\n  }\n  return vessels\n}\n\n/*\nexport const getHistogram = (tiles, propName = 'weight') => {\n  let data = tiles\n    .filter(tile => tile.ready)\n    .map(tile => tile.data\n      .map(frame => frame[propName]));\n  data = flattenDeep(data);\n  if (data.length) {\n    const bins = d3.histogram().thresholds(d3.thresholdScott)(data);\n    const x = d3.scaleLinear().domain([0, d3.max(bins, d => d.length)]).range([0, 50]);\n    console.table(bins.filter(bin => bin.length).map((bin) => {\n      const binMin = d3.min(bin).toLocaleString({ maximumFractionDigits: 2 });\n      const binMax = d3.max(bin).toLocaleString({ maximumFractionDigits: 2 });\n      return {\n        range: [binMin, binMax].join('﹣'),\n        bars: Array(Math.round(x(bin.length))).join('█'),\n        num: bin.length\n      };\n    }));\n  }\n};\n*/\n","import template from 'lodash/template'\nimport templateSettings from 'lodash/templateSettings'\n\nexport default (urlTemplate, urlParams) => {\n  templateSettings.interpolate = /{{([\\s\\S]+?)}}/g\n  const urlTemplateCompiled = template(urlTemplate)\n  return urlTemplateCompiled(urlParams)\n}\n","import tilecover from '@mapbox/tile-cover/index'\nimport debounce from 'lodash/debounce'\nimport { PerspectiveMercatorViewport } from 'viewport-mercator-project'\nimport { ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING, TILES_LOAD_ZOOM_OFFSET } from '../config'\nimport {\n  getTile,\n  releaseTiles,\n  highlightVesselFromHeatmap,\n  updateLoadedTiles,\n} from './heatmap.actions'\n\nexport const SET_CURRENTLY_VISIBLE_TILES = 'SET_CURRENTLY_VISIBLE_TILES'\nexport const SET_CURRENTLY_LOADED_TILES = 'SET_CURRENTLY_LOADED_TILES'\nexport const SET_CURRENTLY_SWAPPED_TILE_UIDS = 'SET_CURRENTLY_SWAPPED_TILE_UIDS'\nexport const MARK_TILES_UIDS_AS_LOADED = 'MARK_TILES_UIDS_AS_LOADED'\nexport const RELEASE_MARKED_TILES_UIDS = 'RELEASE_MARKED_TILES_UIDS'\n\n// restrict tilecover to a single zoom level\n// could be customized to load less or more detailed tiles\nconst getTilecoverLimits = (viewportZoom) => {\n  let zoom = Math.ceil(viewportZoom + TILES_LOAD_ZOOM_OFFSET)\n  let tilesAvailable = true\n  if (zoom > ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING) {\n    zoom = ACTIVITY_LAYERS_MAX_ZOOM_LEVEL_TILE_LOADING\n    tilesAvailable = false\n  }\n  return {\n    min_zoom: zoom,\n    max_zoom: zoom,\n    tilesAvailable,\n  }\n}\n\nconst flushToReleaseTiles = () => (dispatch, getState) => {\n  const state = getState()\n  const currentToLoadTileUids = state.map.heatmapTiles.currentToLoadTileUids\n  // console.log('Tiles left to load: ', currentToLoadTileUids);\n\n  // Tiles are released only when all to-load tiles have finished loading\n  // this is to ensure smooth visual transitions between zoom levels\n  if (!currentToLoadTileUids.length) {\n    const currentTilesToReleaseUids = state.map.heatmapTiles.currentToReleaseTileUids\n    // console.log('no more tiles to load, releasing ', currentTilesToReleaseUids);\n    dispatch(releaseTiles(currentTilesToReleaseUids))\n    dispatch({\n      type: RELEASE_MARKED_TILES_UIDS,\n    })\n  }\n}\n\nexport const markTileAsLoaded = (tileUids) => (dispatch) => {\n  dispatch({\n    type: MARK_TILES_UIDS_AS_LOADED,\n    payload: tileUids,\n  })\n  // console.log(tileUids, 'have finished loading');\n  dispatch(flushToReleaseTiles())\n}\n\nconst flushTileState = (forceLoadingAllVisibleTiles = false) => (dispatch, getState) => {\n  const state = getState()\n  const currentVisibleTiles = state.map.heatmapTiles.currentVisibleTiles\n  let tilesToLoad = []\n  const tilesToReleaseUids = []\n\n  if (forceLoadingAllVisibleTiles === true) {\n    tilesToLoad = currentVisibleTiles\n  } else {\n    const currentLoadedTiles = state.map.heatmapTiles.currentLoadedTiles\n\n    currentVisibleTiles.forEach((visibleTile) => {\n      if (currentLoadedTiles.find((t) => t.uid === visibleTile.uid) === undefined) {\n        tilesToLoad.push(visibleTile)\n      }\n    })\n\n    currentLoadedTiles.forEach((loadedTile) => {\n      if (currentVisibleTiles.find((t) => t.uid === loadedTile.uid) === undefined) {\n        tilesToReleaseUids.push(loadedTile.uid)\n      }\n    })\n  }\n\n  const tilesToLoadUids = tilesToLoad.map((t) => t.uid)\n  // console.log('force loading:', forceLoadingAllVisibleTiles)\n  // console.log('visible', currentVisibleTiles.map(t => t.uid))\n  // console.log('load', tilesToLoadUids)\n  // console.log('release', tilesToReleaseUids)\n  // console.log('----')\n\n  tilesToLoad.forEach((tile) => {\n    dispatch(getTile(tile))\n  })\n  dispatch({\n    type: SET_CURRENTLY_LOADED_TILES,\n    payload: currentVisibleTiles,\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_SWAPPED_TILE_UIDS,\n    payload: {\n      tilesToLoadUids,\n      tilesToReleaseUids,\n    },\n  })\n\n  dispatch(updateLoadedTiles())\n  dispatch(flushToReleaseTiles())\n}\n\nconst _debouncedFlushState = (dispatch) => {\n  dispatch(flushTileState())\n}\nconst debouncedFlushState = debounce(_debouncedFlushState, 500)\n\nexport const updateHeatmapTilesFromViewport = (forceLoadingAllVisibleTiles = false) => (\n  dispatch,\n  getState\n) => {\n  // if in transition, skip loading/releasing\n  // else\n  //   collect all tiles in viewport\n  //   save them to reducer: currentVisibleTiles\n  // if not zooming: flush immediately\n  //   if forceLoadingAllVisiblelTiles\n  //     get tiles from currentVisibleTiles\n  //   else\n  //     get tiles from currentVisibleTiles\n  //     make delta with currentLoadedTiles\n  //     get tiles from delta+\n  //     release tiles from delta-\n  //   save to reducer: currentVisibleTiles -> currentLoadedTiles\n  // if zooming: debounced flush to avoid \"tile spam\"\n  const mapViewport = getState().map.viewport\n  const viewport = mapViewport.viewport\n\n  // do not allow any tile update during transitions (currently only zoom)\n  // wait for the end of the transition to look at viewport and load matching tiles\n  if (mapViewport.currentTransition !== null) {\n    return\n  }\n\n  // instanciate a viewport instance to get lat/lon from screen top left/ bottom right bounds\n  const boundsViewport = new PerspectiveMercatorViewport(viewport)\n  const bounds = [\n    boundsViewport.unproject([0, 0]),\n    boundsViewport.unproject([viewport.width, viewport.height]),\n  ]\n\n  const [wn, es] = bounds\n  const [w, s, e, n] = [wn[0], es[1], es[0], wn[1]]\n  const boundsPolygonsCoordinates = []\n\n  const limits = getTilecoverLimits(viewport.zoom)\n  if (limits.tilesAvailable === false && forceLoadingAllVisibleTiles !== true) {\n    return\n  }\n\n  if (e > 180 || w < -180) {\n    // deal with the antimeridian situation by splitting the bounds polygon into two polygons\n    const w1 = e > 180 ? w : w + 360\n    const e1 = 180 - 0.001\n    const w2 = -180\n    const e2 = e > 180 ? e - 360 : e\n    boundsPolygonsCoordinates.push([[[w1, n], [e1, n], [e1, s], [w1, s], [w1, n]]])\n    boundsPolygonsCoordinates.push([[[w2, n], [e2, n], [e2, s], [w2, s], [w2, n]]])\n  } else {\n    boundsPolygonsCoordinates.push([[[w, n], [e, n], [e, s], [w, s], [w, n]]])\n  }\n\n  const geom = {\n    type: 'MultiPolygon',\n    coordinates: boundsPolygonsCoordinates,\n  }\n\n  // using tilecover, get xyz tile coords as well as quadkey indexes (named uid through the app)\n  const viewportTilesCoords = tilecover.tiles(geom, limits)\n  const viewportTilesIndexes = tilecover.indexes(geom, limits)\n  const visibleTiles = []\n\n  viewportTilesCoords.forEach((coords, i) => {\n    const uid = viewportTilesIndexes[i]\n    const zoom = coords[2]\n    if (zoom >= 2) {\n      visibleTiles.push({\n        tileCoordinates: {\n          x: coords[0],\n          y: coords[1],\n          zoom: coords[2],\n        },\n        uid,\n      })\n    }\n  })\n\n  dispatch({\n    type: SET_CURRENTLY_VISIBLE_TILES,\n    payload: visibleTiles,\n  })\n\n  const isMouseWheelZooming = mapViewport.prevZoom !== viewport.zoom\n\n  if (isMouseWheelZooming === false) {\n    dispatch(flushTileState(forceLoadingAllVisibleTiles))\n  } else {\n    debouncedFlushState(dispatch)\n  }\n}\n\nexport const queryHeatmapVessels = (coords, temporalExtentIndexes) => (dispatch, getState) => {\n  // use tilecover to get what tile quadkey/uid \"belongs\" to the point\n  const geom = {\n    type: 'Point',\n    coordinates: [coords.longitude, coords.latitude],\n  }\n  const zoom = getState().map.viewport.viewport.zoom\n\n  // get quadkey for tile at current zoom level, but also neighbouring zoom levels,\n  // in case current zoom level tiles has not been loaded yet\n  const uids = [zoom, zoom - 1, zoom + 1]\n    .map((z) => getTilecoverLimits(z))\n    .map((limits) => tilecover.indexes(geom, limits))\n    .map((indexes) => indexes[0])\n\n  const query = {\n    ...coords,\n    uids,\n  }\n\n  // console.log(query);\n  dispatch(highlightVesselFromHeatmap(query, temporalExtentIndexes))\n}\n","import difference from 'lodash/difference'\nimport uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  getTilePlaybackData,\n  selectVesselsAt,\n} from '../utils/heatmapTileData'\nimport { ENCOUNTERS } from '../constants'\nimport { markTileAsLoaded } from './heatmapTiles.actions'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_HEATMAP_LAYER = 'ADD_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_STYLE = 'UPDATE_HEATMAP_LAYER_STYLE'\nexport const ADD_REFERENCE_TILE = 'ADD_REFERENCE_TILE'\nexport const HIGHLIGHT_VESSELS = 'HIGHLIGHT_VESSELS'\nexport const INIT_HEATMAP_LAYERS = 'INIT_HEATMAP_LAYERS'\nexport const REMOVE_HEATMAP_LAYER = 'REMOVE_HEATMAP_LAYER'\nexport const UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES =\n  'UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES'\nexport const UPDATE_HEATMAP_TILE = 'UPDATE_HEATMAP_TILE'\nexport const RELEASE_HEATMAP_TILES = 'RELEASE_HEATMAP_TILES'\nexport const UPDATE_LOADED_TILES = 'UPDATE_LOADED_TILES'\nexport const HIGHLIGHT_CLICKED_VESSEL = 'HIGHLIGHT_CLICKED_VESSEL'\nexport const CLEAR_HIGHLIGHT_CLICKED_VESSEL = 'CLEAR_HIGHLIGHT_CLICKED_VESSEL'\n\n/**\n * getTemporalExtentsVisibleIndices - Compares timebar outer extent with temporal extents present on the layer header\n * @param  {array} loadTemporalExtent Current timebar outer extent\n * @param  {array} layerTemporalExtents Temporal extent present on the layer's header (an array of extent arrays)\n * @return {array}                    Indices of the layer's temporal extents that should be visible\n */\nfunction getTemporalExtentsVisibleIndices(loadTemporalExtent, layerTemporalExtents) {\n  const currentExtentStart = loadTemporalExtent[0].getTime()\n  const currentExtentEnd = loadTemporalExtent[1].getTime()\n  const indices = []\n  layerTemporalExtents.forEach((temporalExtent, index) => {\n    const temporalExtentStart = temporalExtent[0]\n    const temporalExtentEnd = temporalExtent[1]\n    if (temporalExtentEnd >= currentExtentStart && temporalExtentStart <= currentExtentEnd) {\n      indices.push(index)\n    }\n  })\n  return indices\n}\n\n/**\n * loadLayerTile - loads an heatmap tile.\n *\n * @param  {string} layerId              layer id\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {string} token                the user's token\n * @param  {array} temporalExtentsIndices which of the temporal extents from  temporalExtents should be loaded\n * @param  {string} urls                 tile endpoints provided by header\n * @param  {array} temporalExtents       all of the layer's header temporal extents\n * @param  {bool} temporalExtentsLess    true = don't try to load different tiles based on current time extent\n * @param  {bool} isPBF                  true = read tile as MVT + PBF tile, rather than using Pelagos client\n * @return {Promise}                     a Promise that will be resolved when tile is loaded\n */\nfunction loadLayerTile(\n  layerId,\n  tileCoordinates,\n  token,\n  temporalExtentsIndices,\n  { url, temporalExtents, temporalExtentsLess, isPBF }\n) {\n  // console.log('loadLayerTile', layerId, tileCoordinates, temporalExtentsIndices)\n  if (url === undefined) {\n    throw new Error('URL/endpoints object is not available on this tilesets header')\n  }\n  const pelagosPromises = getTilePromises(url, token, temporalExtents, {\n    tileCoordinates,\n    temporalExtentsIndices,\n    temporalExtentsLess,\n    isPBF,\n  })\n  const allLayerPromises = Promise.all(pelagosPromises)\n\n  const layerTilePromise = new Promise((resolve) => {\n    allLayerPromises.then((rawTileData) => {\n      resolve({\n        loadedLayerId: layerId,\n        rawTileData,\n      })\n    })\n  })\n\n  return layerTilePromise\n}\n\n/**\n * parseLayerTile - parses an heatmap tile to a playback-ready format.\n *\n * @param  {Object} rawTileData          the raw tile data, loaded either from the pelagos client or as a MVT/PBF vector tile\n * @param  {array} colsByName            names of the columns present in the raw tiles that need to be included in the final playback data\n * @param  {object} tileCoordinates      tile coordinates from reference tile\n * @param  {array} prevPlaybackData      (optional) in case some time extent was already loaded for this tile, append to this data\n * @return {Object}                      playback-ready merged data\n */\nfunction parseLayerTile(rawTileData, colsByName, isPBF, tileCoordinates, prevPlaybackData) {\n  let data\n  if (isPBF === true) {\n    if (\n      rawTileData === undefined ||\n      !rawTileData.length ||\n      rawTileData[0] === undefined ||\n      !Object.keys(rawTileData[0].layers).length\n    ) {\n      return []\n    }\n    data = rawTileData[0].layers.points\n  } else {\n    const cleanVectorArrays = getCleanVectorArrays(rawTileData)\n    data = groupData(cleanVectorArrays, Object.keys(colsByName))\n    if (Object.keys(data).length === 0) {\n      return []\n    }\n  }\n  const playbackData = getTilePlaybackData(\n    data,\n    colsByName,\n    tileCoordinates,\n    isPBF,\n    prevPlaybackData\n  )\n  return playbackData\n}\n\n/**\n * getTiles - loads a bunch of heatmap tiles\n * @param  {array} layerIds                 list of layer Ids that need to be loaded for this/these tiles\n * @param  {array} referenceTiles           list of reference tiles (tile data regardless of layer) that need to be loaded\n * @param  {object} newTemporalExtentsToLoad (optional) a dict (layerId is the key) of temporal extents\n * indices that should be appended to existing data\n */\nfunction getTiles(layerIds, referenceTiles, newTemporalExtentsToLoad = undefined) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state)\n    const token = state.map.module.token\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const tilesByLayer = {}\n    layerIds.forEach((id) => {\n      tilesByLayer[id] = [...heatmapLayers[id].tiles]\n    })\n    const allPromises = []\n\n    layerIds.forEach((layerId) => {\n      const heatmapLayerHeader = heatmapLayers[layerId].header\n      const { temporalExtents, temporalExtentsLess, isPBF, colsByName } = { ...heatmapLayerHeader }\n      const url = heatmapLayerHeader.endpoints.tiles\n\n      referenceTiles.forEach((referenceTile) => {\n        // check if tile does not already exist first\n        let tile = tilesByLayer[layerId].find((t) => t.uid === referenceTile.uid)\n        if (!tile) {\n          // console.log('create tile ', referenceTile.uid)\n          tile = {\n            uid: referenceTile.uid,\n            temporalExtentsIndicesLoaded: [],\n          }\n          tilesByLayer[layerId].push(tile)\n        } else {\n          // console.log('found tile', referenceTile.uid)\n        }\n\n        const queriedTemporalExtentsIndices =\n          newTemporalExtentsToLoad === undefined\n            ? heatmapLayers[layerId].visibleTemporalExtentsIndices\n            : newTemporalExtentsToLoad[layerId]\n\n        const temporalExtentsIndicesToLoad = difference(\n          queriedTemporalExtentsIndices,\n          tile.temporalExtentsIndicesLoaded\n        )\n\n        const tilePromise = loadLayerTile(\n          layerId,\n          referenceTile.tileCoordinates,\n          token,\n          temporalExtentsIndicesToLoad,\n          {\n            url,\n            temporalExtents,\n            temporalExtentsLess,\n            isPBF,\n          }\n        )\n\n        allPromises.push(tilePromise)\n\n        tilePromise.then(({ loadedLayerId, rawTileData }) => {\n          tile.temporalExtentsIndicesLoaded = uniq(\n            tile.temporalExtentsIndicesLoaded.concat(temporalExtentsIndicesToLoad)\n          )\n          tile.data = parseLayerTile(\n            rawTileData,\n            colsByName,\n            isPBF,\n            referenceTile.tileCoordinates,\n            tile.data\n          )\n\n          dispatch({\n            type: UPDATE_HEATMAP_TILE,\n            payload: {\n              layerId: loadedLayerId,\n              tile,\n            },\n          })\n        })\n      })\n    })\n\n    Promise.all(allPromises).then(() => {\n      dispatch(completeLoader(loaderID))\n      dispatch(markTileAsLoaded(referenceTiles.map((tile) => tile.uid)))\n    })\n  }\n}\n\n/**\n * getTile - This action is emitted when a new tile is queried from panning or zooming the map\n * This will load a tile for all currently visible heatmap layers\n *\n * @param  {object} referenceTile a reference tile containing xyz coords and uid\n */\nexport function getTile(referenceTile) {\n  return (dispatch, getState) => {\n    dispatch({\n      type: ADD_REFERENCE_TILE,\n      payload: referenceTile,\n    })\n    const visibleHeatmapLayers = getState().map.heatmap.heatmapLayers\n    const visibleHeatmapLayersIds = Object.keys(visibleHeatmapLayers).filter(\n      (id) => visibleHeatmapLayers[id].visible === true\n    )\n\n    if (visibleHeatmapLayersIds.length) {\n      dispatch(getTiles(visibleHeatmapLayersIds, [referenceTile]))\n    }\n  }\n}\n\n/**\n * releaseTiles - This action is emitted when an existing tile is removed from panning or zooming the map\n * @param  {array} uids tile ref uids to release\n */\nexport const releaseTiles = (uids) => ({\n  type: RELEASE_HEATMAP_TILES,\n  payload: uids,\n})\n\nexport const updateLoadedTiles = () => ({\n  type: UPDATE_LOADED_TILES,\n})\n\n// triggered when a layer is added or set to visible\nfunction loadAllTilesForLayer(layerId) {\n  return (dispatch, getState) => {\n    //                current layer, all reference tiles\n    const referenceTiles = getState().map.heatmap.referenceTiles\n    dispatch(getTiles([layerId], referenceTiles))\n  }\n}\n\nexport const addHeatmapLayer = (layer, loadTemporalExtent) => (dispatch) => {\n  const layerTemporalExtents = layer.header.temporalExtents\n  dispatch({\n    type: ADD_HEATMAP_LAYER,\n    payload: {\n      ...layer,\n      // initially attach which of the temporal extents indices are visible with initial outerExtent\n      visibleTemporalExtentsIndices: getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        layerTemporalExtents\n      ),\n    },\n  })\n\n  if (layer.visible === true) {\n    dispatch(loadAllTilesForLayer(layer.id))\n  }\n}\n\nexport const removeHeatmapLayer = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_HEATMAP_LAYER,\n    payload: {\n      id,\n    },\n  })\n}\n\n/**\n * updateLayerLoadTemporalExtents - when outer time extent changes, checks if more tiles needs to be loaded\n * by comparing the outer time range with the temporalExtent already loaded on each layer.\n * @param  {array} loadTemporalExtent Current app-wide extent of tiles that need to load, expressed\n * as an array of two dates\n */\nexport function updateLayerLoadTemporalExtents(loadTemporalExtent) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const heatmapLayers = state.map.heatmap.heatmapLayers\n    const indicesToAddByLayer = {}\n    Object.keys(heatmapLayers).forEach((layerId) => {\n      const heatmapLayer = heatmapLayers[layerId]\n      const temporalExtents = heatmapLayer.header.temporalExtents\n      const oldVisibleTemporalExtentsIndices = heatmapLayer.visibleTemporalExtentsIndices\n      const newVisibleTemporalExtentsIndices = getTemporalExtentsVisibleIndices(\n        loadTemporalExtent,\n        temporalExtents\n      )\n      const indicesAdded = difference(\n        newVisibleTemporalExtentsIndices,\n        oldVisibleTemporalExtentsIndices\n      )\n\n      if (indicesAdded.length) {\n        // add new loaded indices to heatmap layer if applicable\n        indicesToAddByLayer[layerId] = indicesAdded\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n          payload: {\n            layerId,\n            indicesAdded,\n          },\n        })\n      }\n    })\n\n    // getTiles with indices diff\n    const layerIdsWithIndicesToAdd = Object.keys(indicesToAddByLayer)\n    if (layerIdsWithIndicesToAdd.length) {\n      dispatch(\n        getTiles(layerIdsWithIndicesToAdd, state.map.heatmap.referenceTiles, indicesToAddByLayer)\n      )\n    }\n  }\n}\n\n/**\n * Returns clusters or vessels data from a tileQuery\n * @param {object} state - the application state\n * @param {string} tileQuery - the id of a heatmap layer\n * @return {object} { isEmpty, isCluster, isMouseCluster, foundVessels, layerId, tilesetId }\n */\nconst _queryHeatmap = (state, tileQuery, temporalExtentIndexes) => {\n  const layers = state.map.heatmap.heatmapLayers\n  const startIndex = temporalExtentIndexes[0]\n  const endIndex = temporalExtentIndexes[1]\n  const layersVessels = []\n\n  Object.keys(layers).forEach((layerId) => {\n    const layer = layers[layerId]\n    const allPossibleTilesByPreference = tileQuery.uids.map((uid) =>\n      layer.tiles.find((tile) => tile.uid === uid)\n    )\n    const availableTiles = allPossibleTilesByPreference.filter(\n      (tile) => tile !== undefined && tile.data !== undefined\n    )\n\n    const currentFilters = layer.filters\n    if (availableTiles.length) {\n      const bestTile = availableTiles[0]\n      layersVessels.push({\n        layer,\n        vessels: selectVesselsAt(bestTile.data, tileQuery, startIndex, endIndex, currentFilters),\n      })\n    }\n  })\n\n  const layersVesselsResults = layersVessels.filter(\n    (layerVessels) => layerVessels.vessels.length > 0\n  )\n\n  // it's a cluster because of aggregation on the server side\n  let isCluster\n  // its a cluster because or multiple vessels under mouse\n  let isMouseCluster\n  let isEmpty\n  let layerVesselsResult\n  let foundVessels\n\n  const hasEncounters =\n    layersVesselsResults.filter((layerVessel) => layerVessel.layer.subtype === ENCOUNTERS).length >\n    0\n\n  if (layersVesselsResults.length === 0) {\n    isEmpty = true\n  } else if (layersVesselsResults.length > 1 && !hasEncounters) {\n    // if there are points over multiple layers, consider this a cluster (ie don't select, zoom instead, or don't highlight)\n    // there's an exception if vessel selection contains an encounter, in which case it will take priority\n    isCluster = true\n  } else {\n    // if we have a hit with an encounters layer, use it in priority\n    // if not the layersVesselsResults should contain a single result\n    layerVesselsResult = hasEncounters\n      ? layersVesselsResults.find((layerVessel) => layerVessel.layer.subtype === ENCOUNTERS)\n      : layersVesselsResults[0]\n\n    // we can get multiple points with similar series and seriesgroup, in which case\n    // we should treat that as a successful vessel query, not a cluster\n    const vessels = layerVesselsResult.vessels\n\n    if (vessels.length === 0) {\n      isEmpty = true\n    } else {\n      // look up for any negatives seriesgroup (clusters on the server side)\n      const clusteredVessels = vessels.filter((v) => v.seriesgroup < 0)\n      if (clusteredVessels.length) {\n        isCluster = true\n      } else {\n        foundVessels = uniqBy(vessels, (v) => v.series)\n        isMouseCluster = foundVessels.length > 1\n      }\n    }\n  }\n\n  const layer = layerVesselsResult === undefined ? {} : layerVesselsResult.layer\n\n  return { isEmpty, isCluster, isMouseCluster, foundVessels, layer }\n}\n\nexport function clearHighlightedVessels() {\n  return {\n    type: HIGHLIGHT_VESSELS,\n    payload: {\n      isEmpty: true,\n      clickableCluster: false,\n    },\n  }\n}\n\nexport function highlightVesselFromHeatmap(tileQuery, temporalExtentIndexes) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const { layer, isEmpty, isCluster, isMouseCluster, foundVessels } = _queryHeatmap(\n      state,\n      tileQuery,\n      temporalExtentIndexes\n    )\n\n    if (layer.id !== undefined || state.map.heatmap.highlightedVessels.layerId !== layer.id) {\n      dispatch({\n        type: HIGHLIGHT_VESSELS,\n        payload: {\n          layer: {\n            id: layer.id,\n            tilesetId: layer.tilesetId,\n            subtype: layer.subtype,\n            header: layer.header,\n          },\n          isEmpty,\n          clickableCluster: isCluster === true || isMouseCluster === true,\n          highlightableCluster: isCluster !== true,\n          foundVessels,\n        },\n      })\n    } else {\n      dispatch(clearHighlightedVessels())\n    }\n  }\n}\n\nexport const highlightClickedVessel = (seriesgroup, layerId) => ({\n  type: HIGHLIGHT_CLICKED_VESSEL,\n  payload: {\n    seriesgroup,\n    layerId,\n  },\n})\n\nexport const clearHighlightedClickedVessel = () => ({\n  type: CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n})\n\nexport const updateHeatmapLayers = (newLayers, currentLoadTemporalExtent) => (\n  dispatch,\n  getState\n) => {\n  const prevLayersDict = getState().map.heatmap.heatmapLayers\n\n  // add and update layers\n  newLayers.forEach((newLayer) => {\n    const layerId = newLayer.id\n    const prevLayer = prevLayersDict[layerId]\n    if (prevLayer === undefined) {\n      // console.log('adding', layerId)\n      dispatch(addHeatmapLayer(newLayer, currentLoadTemporalExtent))\n    } else {\n      if (prevLayer.visible !== newLayer.visible && newLayer.visible === true) {\n        dispatch(loadAllTilesForLayer(layerId))\n      }\n      if (\n        prevLayer.visible !== newLayer.visible ||\n        prevLayer.hue !== newLayer.hue ||\n        prevLayer.opacity !== newLayer.opacity ||\n        prevLayer.filters !== newLayer.filters ||\n        prevLayer.interactive !== newLayer.interactive\n      ) {\n        // console.log('updating', layerId, ' with visibilty', newLayer.visible)\n        dispatch({\n          type: UPDATE_HEATMAP_LAYER_STYLE,\n          payload: {\n            id: newLayer.id,\n            visible: newLayer.visible,\n            hue: newLayer.hue,\n            opacity: newLayer.opacity,\n            filters: newLayer.filters,\n            interactive: newLayer.interactive,\n          },\n        })\n      }\n    }\n  })\n\n  // clean up unused layers\n  Object.keys(prevLayersDict).forEach((prevLayerId) => {\n    if (!newLayers.find((l) => l.id === prevLayerId)) {\n      dispatch(removeHeatmapLayer(prevLayerId))\n    }\n  })\n}\n","import { fitBounds, pixelsToWorld } from 'viewport-mercator-project'\nimport { updateHeatmapTilesFromViewport } from '../heatmap/heatmapTiles.actions'\nimport { onViewportChange } from '../module/module.actions'\nimport { CLUSTER_CLICK_ZOOM_INCREMENT } from '../config' // TODO MAP MODULE\n\nexport const SET_VIEWPORT = 'SET_VIEWPORT'\nexport const UPDATE_VIEWPORT = 'UPDATE_VIEWPORT'\nexport const SET_ZOOM_INCREMENT = 'SET_ZOOM_INCREMENT'\nexport const SET_MOUSE_LAT_LONG = 'SET_MOUSE_LAT_LONG'\nexport const TRANSITION_END = 'TRANSITION_END'\nexport const SET_NATIVE_VIEWPORT = 'SET_NATIVE_VIEWPORT'\n\nexport const setViewport = (viewport) => (dispatch) => {\n  dispatch({\n    type: SET_VIEWPORT,\n    payload: viewport,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const updateViewport = (viewportUpdate) => (dispatch) => {\n  dispatch({\n    type: UPDATE_VIEWPORT,\n    payload: viewportUpdate,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nconst transitionTo = (increment, latitude = null, longitude = null, zoom = null) => (dispatch) => {\n  dispatch({\n    type: SET_ZOOM_INCREMENT,\n    payload: {\n      increment,\n      latitude,\n      longitude,\n      zoom,\n    },\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const transitionToZoom = (zoom) => (dispatch) => {\n  dispatch(transitionTo(null, null, null, zoom))\n}\n\nexport const transitionEnd = () => (dispatch) => {\n  dispatch({\n    type: TRANSITION_END,\n  })\n  dispatch(updateHeatmapTilesFromViewport())\n  dispatch(onViewportChange())\n}\n\nexport const zoomIntoVesselCenter = (latitude, longitude) => (dispatch) => {\n  dispatch(transitionTo(CLUSTER_CLICK_ZOOM_INCREMENT, latitude, longitude))\n}\n\nexport const fitToBounds = (bounds) => (dispatch, getState) => {\n  const state = getState()\n  const vp = fitBounds({\n    bounds: [[bounds.minLng, bounds.minLat], [bounds.maxLng, bounds.maxLat]],\n    width: state.map.viewport.viewport.width,\n    height: state.map.viewport.viewport.height,\n    padding: 50,\n  })\n  dispatch(transitionTo(null, vp.latitude, vp.longitude, vp.zoom))\n}\n\nexport const exportNativeViewport = (nativeViewport) => (dispatch) => {\n  const topLeftPx = [0, 0]\n  const bottomRightPx = [nativeViewport.width, nativeViewport.height]\n\n  // compute left and right offsets to deal with antimeridian issue\n  const topLeftWorld = pixelsToWorld(topLeftPx, nativeViewport.pixelUnprojectionMatrix)\n  const bottomRightWorld = pixelsToWorld(bottomRightPx, nativeViewport.pixelUnprojectionMatrix)\n  const leftWorldScaled = topLeftWorld[0] / nativeViewport.scale\n  const rightWorldScaled = bottomRightWorld[0] / nativeViewport.scale\n\n  // lat/lon corners for miniglobe\n  const northWest = nativeViewport.unproject(topLeftPx)\n  const southEast = nativeViewport.unproject(bottomRightPx)\n  const bounds = {\n    north: northWest[1],\n    south: southEast[1],\n    west: northWest[0],\n    east: southEast[0],\n  }\n\n  dispatch({\n    type: SET_NATIVE_VIEWPORT,\n    payload: {\n      leftWorldScaled,\n      rightWorldScaled,\n      bounds,\n    },\n  })\n}\n","import area from '@turf/area'\nimport { POLYGON_LAYERS_AREA } from '../constants'\nimport { clearHighlightedVessels, clearHighlightedClickedVessel } from '../heatmap/heatmap.actions'\nimport { zoomIntoVesselCenter } from './viewport.actions'\n\nexport const SET_POPUP = 'SET_POPUP'\nexport const CLEAR_POPUP = 'CLEAR_POPUP'\nexport const SET_MAP_CURSOR = 'SET_MAP_CURSOR'\nexport const UPDATE_POPUP_REPORT_STATUS = 'UPDATE_POPUP_REPORT_STATUS'\n\nconst getFeatureMetaFields = (staticLayerId, state, feature) => {\n  const source = state.style.mapStyle.toJS().sources[staticLayerId]\n  if (source.type !== 'geojson') {\n    if (source.metadata === undefined || source.metadata['gfw:popups'] === undefined) {\n      return null\n    }\n    return source.metadata['gfw:popups']\n  }\n  // when layer is of type geojson (custom layer), use all feature properties available\n  return Object.keys(feature.properties).length === 0\n    ? null\n    : Object.keys(feature.properties).map((key) => ({ id: key }))\n}\n\nconst getAreaKm2 = (glFeature) => {\n  const areakm2 = 10 ** -6 * area(glFeature.geometry)\n  const formatted = areakm2.toLocaleString('en-US', { maximumFractionDigits: 0 })\n  return formatted\n}\n\nconst getStaticLayerIdFromGlFeature = (glFeature) =>\n  (glFeature.layer.metadata !== undefined && glFeature.layer.metadata['gfw:id']) ||\n  glFeature.layer.source\n\nconst findFeature = (glFeatures) => {\n  if (glFeatures === undefined || !glFeatures.length) {\n    return undefined\n  }\n  for (let i = 0; i < glFeatures.length; i++) {\n    const glFeature = glFeatures[i]\n    const staticLayerId = getStaticLayerIdFromGlFeature(glFeature)\n    if (staticLayerId !== undefined) {\n      return {\n        feature: glFeature,\n        staticLayerId,\n      }\n    }\n  }\n  return undefined\n}\n\nexport const mapHover = (latitude, longitude, features) => (dispatch, getState) => {\n  const state = getState().map\n  const currentActivityLayersInteractionData = state.heatmap.highlightedVessels\n  const { layer, isEmpty, foundVessels } = currentActivityLayersInteractionData\n\n  let cursor = null\n  const event = {\n    type: null,\n  }\n\n  if (isEmpty === true) {\n    const feature = findFeature(features, null)\n    if (feature !== undefined) {\n      const popupFields = getFeatureMetaFields(feature.staticLayerId, state, feature.feature)\n      if (popupFields !== null) {\n        const properties = feature.feature.properties\n        const mainPopupField =\n          popupFields.find((f) => f.id && f.id.toLowerCase() === 'name') ||\n          popupFields.find((f) => f.id && f.id.toLowerCase() === 'id') ||\n          popupFields.find(\n            (f) =>\n              f.id &&\n              properties[f.id] !== null &&\n              properties[f.id] !== 'null' &&\n              properties[f.id] !== undefined\n          )\n        const mainPopupFieldId = mainPopupField.id\n        const featureTitle = properties[mainPopupFieldId]\n        event.type = 'static'\n        event.layer = {\n          id: feature.staticLayerId,\n        }\n        event.target = {\n          featureTitle,\n        }\n        cursor = 'pointer'\n      }\n    }\n  } else if (isEmpty !== true) {\n    const isCluster = foundVessels === undefined || foundVessels.length > 1\n    cursor = isCluster ? 'zoom-in' : 'pointer'\n\n    event.type = 'activity'\n    // TODO MAP MODULE sometimes layerId is undefined, likely an issue with heatmap[Tiles]\n    event.layer = layer\n    event.target = {\n      objects: foundVessels,\n      isCluster,\n    }\n  }\n\n  if (cursor !== state.interaction.cursor) {\n    dispatch({\n      type: SET_MAP_CURSOR,\n      payload: cursor,\n    })\n  }\n\n  if (state.module.onHover) {\n    state.module.onHover({\n      ...event,\n      latitude,\n      longitude,\n    })\n  }\n}\n\nexport const mapClick = (latitude, longitude, features) => (dispatch, getState) => {\n  const state = getState().map\n\n  dispatch(clearHighlightedClickedVessel())\n\n  const currentActivityLayersInteractionData = state.heatmap.highlightedVessels\n\n  const { layer, isEmpty, clickableCluster, foundVessels } = currentActivityLayersInteractionData\n\n  const event = {\n    type: null,\n  }\n\n  if (isEmpty === true) {\n    const feature = findFeature(features, null)\n    if (feature !== undefined) {\n      const metaFields = getFeatureMetaFields(feature.staticLayerId, state, feature.feature)\n      let fields\n      const properties = feature.feature.properties\n      if (metaFields !== null) {\n        fields = metaFields.map((metaField) => {\n          const id = metaField.id || metaField\n          const value = id === POLYGON_LAYERS_AREA ? getAreaKm2(feature.feature) : properties[id]\n          return {\n            title: metaField.label || metaField.id,\n            isLink: metaField.isLink,\n            value,\n          }\n        })\n      }\n\n      event.type = 'static'\n      event.layer = {\n        id: feature.staticLayerId,\n      }\n      event.target = {\n        fields,\n        properties,\n      }\n    }\n  } else {\n    event.type = 'activity'\n    event.layer = layer\n    if (clickableCluster === true) {\n      dispatch(zoomIntoVesselCenter(latitude, longitude))\n      dispatch(clearHighlightedVessels())\n      event.target = {\n        isCluster: true,\n      }\n    } else {\n      event.target = foundVessels[0]\n    }\n  }\n\n  if (state.module.onClick) {\n    state.module.onClick({\n      ...event,\n      latitude,\n      longitude,\n    })\n  }\n}\n","const RGB_MAX = 255\nconst HUE_MAX = 360\nconst SV_MAX = 100\n\nexport const VESSELS_HUES_INCREMENTS_NUM = 31 // 360 / VESSELS_HUES_INCREMENTS_NUM - 1  should give a round number\nexport const VESSELS_HUES_INCREMENT = 360 / (VESSELS_HUES_INCREMENTS_NUM - 1)\n\n// Legacy: this is only here for compatibility with pre-mapbox branch workspaces\nexport const COLOR_HUES = {\n  orange: 0,\n  peach: 22,\n  yellow: 60,\n  green: 85,\n  brightGreen: 145,\n  lightBlue: 182,\n  blue: 236,\n  purple: 284,\n  pink: 312,\n}\n\n// FIXME mark explicitely as legacy. Check all usages.\nexport const getKeyByValue = (obj, value) => {\n  let result = null\n  Object.entries(obj).forEach((entry) => {\n    if (entry[1] === value) result = entry[0]\n  })\n  return result\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport const rgbToHsv = (_r, _g, _b) => {\n  const r = _r / 255\n  const g = _g / 255\n  const b = _b / 255\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      case g:\n        h = (b - r) / d + 2\n        break\n      case b:\n        h = (r - g) / d + 4\n        break\n      default:\n        h = 0\n    }\n\n    h /= 6\n  }\n\n  return [h, s, v]\n}\n\n// converts hue, saturation, luminance to an rgb object\nexport const hsvToRgb = (h_, s_, v_) => {\n  const h = ((h_ % HUE_MAX) / parseFloat(HUE_MAX)) * 6\n  const s = s_ === SV_MAX ? 1 : (s_ % SV_MAX) / parseFloat(SV_MAX)\n  const v = v_ === SV_MAX ? 1 : (v_ % SV_MAX) / parseFloat(SV_MAX)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return { r: Math.round(r * RGB_MAX), g: Math.round(g * RGB_MAX), b: Math.round(b * RGB_MAX) }\n}\n\n// returns an rgb string with default saturation and luminance values\nconst hueToRgbDefaults = (hue) => hsvToRgb(hue, 50, 100)\n\nexport const hueToRgbString = (hue) => {\n  const rgb = hueToRgbDefaults(hue)\n  return `rgb(${rgb.r}, ${rgb.g}, ${rgb.b})`\n}\n\nexport const rgbToHexString = (rgb, css) => {\n  const str = ['r', 'g', 'b']\n    .map((channelName) => {\n      const channelValue = rgb[channelName]\n      let channelStr = channelValue.toString(16)\n      if (channelValue < 16) {\n        channelStr = `0${channelStr}`\n      }\n      return channelStr\n    })\n    .join('')\n  const prefix = css === true ? '#' : '0x'\n  return `${prefix}${str}`\n}\n\nexport const hueToRgbHexString = (hue, css) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToHexString(rgb, css)\n}\n\nconst closestNumber = (numberArray, goal) =>\n  numberArray.reduce((prev, curr) => (Math.abs(curr - goal) < Math.abs(prev - goal) ? curr : prev))\n\nexport const hueToClosestColor = (hue) => {\n  if (hue === undefined || hue === null) return undefined\n  const colorHueValues = Object.keys(COLOR_HUES).map((key) => COLOR_HUES[key])\n  const closestHue = closestNumber(colorHueValues, hue)\n  return getKeyByValue(COLOR_HUES, closestHue)\n}\n\nexport const hexToRgb = (hex) => {\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex)\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : null\n}\n\nconst rgbToRgbaString = (rgb, opacity) => `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, ${opacity})`\n\nexport const hueToRgbaString = (hue, opacity) => {\n  const rgb = hueToRgbDefaults(hue)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hexToRgba = (hex, opacity) => {\n  const rgb = hexToRgb(hex)\n  return rgbToRgbaString(rgb, opacity)\n}\n\nexport const hueIncrementToHue = (hueIncrement) => hueIncrement * VESSELS_HUES_INCREMENT\n\nexport const hueToHueIncrement = (hue) =>\n  Math.round((hue / 360) * (VESSELS_HUES_INCREMENTS_NUM - 1))\n\nexport const wrapHue = (hue) => hue % 360\n\nexport const hueOrColorToHexColor = (color, hue) => {\n  if (hue !== undefined) {\n    return hueToRgbHexString(hue, true)\n  }\n\n  return color\n}\n","/* global PIXI */\nimport 'pixi.js'\nimport { hueToHueIncrement, VESSELS_HUES_INCREMENTS_NUM } from '../utils/map-colors'\nimport { VESSELS_BASE_RADIUS, MAX_SPRITES_PER_LAYER } from '../config'\n\nexport default class HeatmapSubLayer {\n  constructor(baseTexture, renderingStyleIndex, hue, useNormalBlendMode = false) {\n    // this.stage = new PIXI.Container();\n    // the ParticleContainer is a faster version of the PIXI sprite container\n    this.stage = new PIXI.particles.ParticleContainer(MAX_SPRITES_PER_LAYER, {\n      scale: true,\n      alpha: true,\n      position: true,\n      uvs: true,\n    })\n    if (useNormalBlendMode === false) {\n      this.stage.blendMode = PIXI.BLEND_MODES.SCREEN\n    }\n\n    this.spritesPool = []\n\n    const initialTextureFrame = new PIXI.Rectangle(\n      0,\n      0,\n      VESSELS_BASE_RADIUS * 2,\n      VESSELS_BASE_RADIUS * 2\n    )\n    this.mainVesselTexture = new PIXI.Texture(baseTexture, initialTextureFrame)\n    this._setTextureFrame(renderingStyleIndex, hue)\n\n    this.clearSpriteProps()\n  }\n\n  clearSpriteProps() {\n    this.spritesProps = {\n      x: new Float32Array(MAX_SPRITES_PER_LAYER),\n      y: new Float32Array(MAX_SPRITES_PER_LAYER),\n      a: new Float32Array(MAX_SPRITES_PER_LAYER),\n      s: new Float32Array(MAX_SPRITES_PER_LAYER),\n    }\n    this.spritesPropsCount = 0\n  }\n\n  pushSpriteProps(x, y, a, s) {\n    this.spritesProps.x[this.spritesPropsCount] = x\n    this.spritesProps.y[this.spritesPropsCount] = y\n    this.spritesProps.a[this.spritesPropsCount] = a\n    this.spritesProps.s[this.spritesPropsCount] = s\n    this.spritesPropsCount++\n  }\n\n  setRenderingStyleIndex(renderingStyleIndex) {\n    this._setTextureFrame(renderingStyleIndex)\n  }\n\n  destroy() {\n    this.spritesPool = null\n    this.stage.destroy({ children: true })\n  }\n\n  /**\n   * Updates the main texture frame offset to show different brush styles and hues\n   * Both args are optional, if one is omitted, previous value is used\n   * @heatmapStyle bool whether to use heatmap style or solid circle style\n   * @hue number hue value between 0 and 360\n   */\n  _setTextureFrame(renderingStyleIndex = null, hue = null) {\n    const textureFrame = this.mainVesselTexture.frame.clone()\n\n    if (renderingStyleIndex !== null) {\n      // one diameter + tiny offset between 2 frames\n      textureFrame.x = VESSELS_BASE_RADIUS * 2 * renderingStyleIndex + renderingStyleIndex\n    }\n\n    if (hue !== null) {\n      let hueIncrement = hueToHueIncrement(hue)\n      if (hueIncrement === VESSELS_HUES_INCREMENTS_NUM - 1) {\n        hueIncrement = 0\n      }\n      textureFrame.y = hueIncrement * VESSELS_BASE_RADIUS * 2\n      if (hueIncrement > 0) {\n        textureFrame.y += hueIncrement\n      }\n    }\n\n    this.mainVesselTexture.frame = textureFrame\n    this.mainVesselTexture.update()\n  }\n\n  render() {\n    const numProps = this.spritesPropsCount\n    this.resizeSpritesPool()\n\n    for (let i = 0; i < numProps; i++) {\n      const sprite = this.stage.children[i]\n      const s = this.spritesProps.s[i]\n      sprite.setTransform(this.spritesProps.x[i], this.spritesProps.y[i], s, s)\n      sprite.alpha = this.spritesProps.a[i]\n    }\n\n    const numSprites = this.stage.children.length\n    for (let i = numProps; i < numSprites; i++) {\n      const sprite = this.stage.children[i]\n      sprite.x = -100\n    }\n  }\n\n  resizeSpritesPool() {\n    const numProps = this.spritesPropsCount\n    const prevNumSprites = this.stage.children.length\n    const delta = numProps - prevNumSprites\n    // console.log(prevNumSprites, '->', numProps, ' delta:', delta);\n\n    if (delta < -4999) {\n      // sprite needs to be removed. Do that progressively (max 100) to avoid UI lock\n      const toRemove = Math.min(100, -delta)\n      // console.log('removing ', toRemove);\n      for (let i = 0; i < toRemove; i++) {\n        this.stage.removeChildAt(0)\n      }\n    }\n\n    if (delta > 0) {\n      const toAdd = Math.max(5000, delta)\n      // console.log('adding ', toAdd);\n      this._addSprites(toAdd)\n    }\n  }\n\n  _addSprites(num) {\n    for (let i = 0; i < num; i++) {\n      const vessel = new PIXI.Sprite(this.mainVesselTexture)\n      vessel.anchor.x = 0.5\n      vessel.anchor.y = 0.5\n      // ParticlesContainer does not support .visible, so we just move the sprite out of the viewport\n      vessel.x = -100\n      // vessel.blendMode = PIXI.BLEND_MODES.SCREEN;\n      // vessel.filters=  [new PIXI.filters.BlurFilter(10,10)]\n      this.stage.addChild(vessel)\n    }\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport uniq from 'lodash/uniq'\nimport * as PIXI from 'pixi.js'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { BRUSH_RENDERING_STYLE, BRUSH_ZOOM_RENDERING_STYLE } from '../constants'\nimport { vesselSatisfiesFilters } from '../utils/heatmapTileData'\nimport HeatmapSubLayer from './HeatmapSubLayer'\n\n// This is a faster version of worldToPixels that omits pitch,\n// and ignores values from the matrix that are consistently = 0\nconst s = 1 / 1.5\nconst worldToPixelsSimple = (x, y, m) => {\n  const fx = s * (m[0] * x + m[4] * y + m[12])\n  const fy = s * (m[5] * y + m[13])\n  return [fx, fy]\n}\n\nclass HeatmapLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillUnmount() {\n    this._destroy()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.useRadialGradientStyle !== this.props.useRadialGradientStyle) {\n      this.setBrushZoomRenderingStyle(nextProps.useRadialGradientStyle)\n    }\n  }\n\n  _build() {\n    const { layer, rootStage, useRadialGradientStyle, customRenderingStyle } = this.props\n    this.subLayers = {}\n    this.renderingStyle =\n      layer.header && layer.header.rendering ? layer.header.rendering : customRenderingStyle\n\n    this.setBrushRenderingStyle(this.renderingStyle.style)\n    this.setBrushZoomRenderingStyle(useRadialGradientStyle)\n\n    this.stage = new PIXI.Container()\n\n    rootStage.addChild(this.stage)\n  }\n\n  setBrushRenderingStyle(style = BRUSH_RENDERING_STYLE.NORMAL) {\n    if (typeof style === 'string') {\n      this.brushRenderingStyle = BRUSH_RENDERING_STYLE[style.toUpperCase()]\n    } else {\n      this.brushRenderingStyle = style\n    }\n    this._setBrushRenderingStyleIndex()\n  }\n\n  setBrushZoomRenderingStyle(useRadialGradientStyle) {\n    this.brushZoomRenderingStyle =\n      useRadialGradientStyle === true\n        ? BRUSH_ZOOM_RENDERING_STYLE.RADIAL_GRADIENT\n        : BRUSH_ZOOM_RENDERING_STYLE.CIRCLE\n    this._setBrushRenderingStyleIndex()\n  }\n\n  _setBrushRenderingStyleIndex() {\n    // only NORMAL brush styles support different zoom styles\n    const cappedZoomRenderingStyle =\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.NORMAL ? this.brushZoomRenderingStyle : 0\n    const newStyleIndex = this.brushRenderingStyle + cappedZoomRenderingStyle\n    if (newStyleIndex === this.renderingStyleIndex) {\n      return\n    }\n    this.renderingStyleIndex = newStyleIndex\n    Object.values(this.subLayers).forEach((subLayer) => {\n      subLayer.setRenderingStyleIndex(this.renderingStyleIndex)\n    })\n  }\n\n  _redraw() {\n    const { filters, baseTexture, layer } = this.props\n\n    if (\n      layer === null ||\n      layer === undefined ||\n      layer.tiles === undefined ||\n      layer.visible === false\n    ) {\n      this.stage.visible = false\n      return\n    }\n\n    this.stage.visible = true\n    this.stage.alpha = layer.opacity\n\n    const tiles = layer.tiles\n    const defaultHue = layer.hue\n    const allHuesToRender =\n      filters !== undefined && filters.length\n        ? filters\n            // pass is set to true by filterGroupActions when none of the filters fields\n            // in the filter group is supported by the layer headers\n            .filter((f) => f.pass !== true)\n            .map((f) => (f.hue === undefined ? '0' : f.hue.toString()))\n        : [defaultHue.toString()]\n    const currentlyUsedHues = Object.keys(this.subLayers)\n\n    // get all hues, old and new\n    const allHues = uniq(allHuesToRender.concat(currentlyUsedHues))\n\n    for (let i = 0; i < allHues.length; i++) {\n      const hue = allHues[i]\n      if (allHuesToRender.indexOf(hue) === -1) {\n        // not on new hues: delete sublayer\n        this._destroySubLayer(this.subLayers[hue])\n        delete this.subLayers[hue]\n        continue\n      }\n      if (currentlyUsedHues.indexOf(hue) === -1) {\n        // not on old hues: create sublayer\n        this.subLayers[hue] = this._createSublayer(baseTexture, this.renderingStyleIndex, hue)\n      }\n      this.subLayers[hue].clearSpriteProps()\n    }\n\n    if (!allHuesToRender.length) return\n    tiles.forEach((tile) => {\n      this._setSubLayersSpritePropsForTile({\n        data: tile.data,\n        numFilters: filters.length,\n        defaultHue,\n      })\n    })\n\n    allHuesToRender.forEach((hueToRender) => {\n      this.subLayers[hueToRender].render()\n    })\n  }\n\n  _setSubLayersSpritePropsForTile({ data, numFilters, defaultHue }) {\n    if (!data) {\n      return\n    }\n\n    const { startIndex, endIndex, viewport, filters, viewportLeft, viewportRight } = this.props\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let index = 0, len = frame.worldX.length; index < len; index++) {\n        let hue\n        if (filters === undefined || !filters.length) {\n          hue = defaultHue\n        }\n        for (let fi = 0; fi < numFilters; fi++) {\n          const filter = filters[fi]\n          if (vesselSatisfiesFilters(frame, index, filter.filterValues)) {\n            hue = filter.hue\n            break\n          }\n        }\n\n        // no filter passes: bail\n        if (hue === undefined) {\n          continue\n        }\n\n        // wrap worldX when point crosses the antimeridian/dateline\n        // world points go from 0 to 512. There is no way to determine if worldX is on the \"wrong\" side\n        // of the antimeridian just by looking at its value (where with lat/lon we can simply look at -/+)\n        // Therefore we compare it to the viewport's left or right boundary, depending on what is currently\n        // \"the right side\" of the antimeridian\n        let worldX = frame.worldX[index]\n        if (viewportLeft > 0 && worldX < viewportLeft) {\n          // worldX is \"behind\" viewportLeft, which means it is \"on the right\" of the antimeridian\n          worldX += 512\n        } else if (viewportLeft < 0 && worldX > viewportRight) {\n          worldX -= 512\n        }\n\n        const scaledX = worldX * viewport.scale\n        const scaledY = frame.worldY[index] * viewport.scale\n        const mtx = viewport.pixelProjectionMatrix\n\n        const [x, y] =\n          viewport.pitch === 0\n            ? worldToPixelsSimple(scaledX, scaledY, mtx)\n            : worldToPixels([scaledX, scaledY], mtx)\n\n        if (x > -10 && x < viewport.width + 10 && y > -10 && y < viewport.height + 10) {\n          this.subLayers[hue].pushSpriteProps(\n            x,\n            y,\n            frame.opacity ? frame.opacity[index] : this.renderingStyle.defaultOpacity,\n            frame.radius ? frame.radius[index] : this.renderingStyle.defaultSize\n          )\n        }\n      }\n    }\n  }\n\n  _createSublayer(baseTexture, renderingStyleIndex, hue) {\n    const subLayer = new HeatmapSubLayer(\n      baseTexture,\n      renderingStyleIndex,\n      hue,\n      this.brushRenderingStyle === BRUSH_RENDERING_STYLE.BULLSEYE\n    )\n    this.stage.addChild(subLayer.stage)\n    return subLayer\n  }\n\n  _destroy() {\n    Object.values(this.subLayers).forEach(this._destroySubLayer.bind(this))\n    this.stage.destroy({ children: true })\n    const { rootStage } = this.props\n    rootStage.removeChild(this.stage)\n  }\n\n  _destroySubLayer(subLayer) {\n    this.stage.removeChild(subLayer.stage)\n    subLayer.destroy()\n  }\n\n  render() {\n    return null\n  }\n}\n\nHeatmapLayer.propTypes = {\n  layer: PropTypes.object,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  filters: PropTypes.array,\n  baseTexture: PropTypes.object,\n  useRadialGradientStyle: PropTypes.bool,\n  customRenderingStyle: PropTypes.object,\n  viewportLeft: PropTypes.number,\n  viewportRight: PropTypes.number,\n}\n\nexport default HeatmapLayer\n","/* global PIXI */\nimport 'pixi.js'\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport { worldToPixels } from 'viewport-mercator-project'\nimport { TRACKS_DOTS_STYLE_ZOOM_THRESHOLD } from '../config'\n\nclass TracksLayer extends React.Component {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentDidUpdate() {\n    this._redraw()\n  }\n\n  _build() {\n    const { rootStage } = this.props\n    this.stage = new PIXI.Graphics()\n    this.stage.nativeLines = true\n    rootStage.addChild(this.stage)\n  }\n\n  clear() {\n    this.stage.clear()\n  }\n\n  _redraw() {\n    const { tracks, zoom, startIndex, endIndex, highlightTemporalExtentIndexes } = this.props\n\n    this.clear()\n    if (!tracks.length) {\n      return\n    }\n\n    const overInInner =\n      highlightTemporalExtentIndexes === null\n        ? undefined\n        : [\n            Math.max(startIndex, highlightTemporalExtentIndexes[0]),\n            Math.min(endIndex, highlightTemporalExtentIndexes[1]),\n          ]\n    const overExtent = overInInner && overInInner[1] - overInInner[0] > 0 ? overInInner : undefined\n\n    let n = 0 // eslint-disable-line no-unused-vars\n\n    const drawFishingCircles = zoom > TRACKS_DOTS_STYLE_ZOOM_THRESHOLD\n    const fishingCirclesRadius = 1 + (zoom - TRACKS_DOTS_STYLE_ZOOM_THRESHOLD) * 0.5\n    const drawOverTrack = overExtent !== undefined && overExtent[0] > 0 && overExtent[1] > 0\n\n    tracks.forEach((track) => {\n      n += this._drawTrack({\n        data: track.data,\n        startIndex,\n        endIndex,\n        drawFishingCircles,\n        fishingCirclesRadius,\n        color: `0x${track.color.substr(1)}`,\n        lineThickness: 1,\n        lineOpacity: 1,\n      })\n\n      // Draw the highlight over the track when the user hovers over the Timebar\n      if (drawOverTrack === true) {\n        n += this._drawTrack({\n          data: track.data,\n          startIndex: highlightTemporalExtentIndexes[0],\n          endIndex: highlightTemporalExtentIndexes[1],\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color: '0xFFFFFF',\n          lineThickness: 2,\n          lineOpacity: 1,\n        })\n      }\n    })\n\n    // console.log(n);\n  }\n\n  /**\n   * Draws a single track (line + points)\n   *\n   * @param data track points data in 'playback form' (ie organized by days)\n   * @param extent extent, in day indices\n   * @param offset object containing info about the current situation of the map viewport, used to compute screen coords\n   * @param drawFishingCircles whether to draw fishing circles or not\n   * @param fishingCirclesRadius radius of the fishing circles\n   * @param color\n   * @param lineThickness\n   * @param lineOpacity\n   * @param worldOffset offset to use when a track crosses the dateline (ie 512 to add a second world to the right)\n   */\n  _drawTrack({\n    data,\n    startIndex,\n    endIndex,\n    drawFishingCircles,\n    fishingCirclesRadius,\n    color,\n    lineThickness,\n    lineOpacity,\n    worldOffset = 0,\n  }) {\n    const { viewport } = this.props\n\n    let n = 0\n    let prevSeries\n    let prevWorldX\n    let prevWorldY\n\n    const circlePoints = {\n      x: [],\n      y: [],\n    }\n\n    // line thickness is ignored in native mode anyways.\n    this.stage.lineStyle(lineThickness, color, lineOpacity)\n\n    let duplicateWorld = false\n\n    for (let timeIndex = startIndex; timeIndex < endIndex; timeIndex++) {\n      const frame = data[timeIndex]\n\n      if (!frame) continue\n\n      for (let i = 0, len = frame.series.length; i < len; i++) {\n        const currentSeries = frame.series[i]\n\n        n++\n\n        const worldX = frame.worldX[i] + worldOffset\n        const worldY = frame.worldY[i]\n\n        const [x, y] = worldToPixels(\n          [worldX * viewport.scale, worldY * viewport.scale],\n          viewport.pixelProjectionMatrix\n        )\n\n        if (prevSeries !== currentSeries) {\n          this.stage.moveTo(x, y)\n        }\n\n        // more than a ½ world of distance between two points = crossing the dateline\n        if (prevWorldX && Math.abs(worldX - prevWorldX) > 256) {\n          // worldOffset === 0 -> this is the first time drawTrack is called\n          if (worldOffset === 0) {\n            // set a flag to call drawTrack again at the end of the loop\n            duplicateWorld = true\n          }\n\n          // get Y coordinate where track intersects with dateline\n          const atDatelineWorldY = prevWorldY + (worldY - prevWorldY) / 2\n\n          // whether tracks crosses dateline from west to east\n          const isWestToEast = worldX - prevWorldX < 0\n\n          const worldXEnd = worldOffset + (512 - 0.000001)\n          const worldXStart = worldOffset\n\n          // get X coordinate ending at dateline\n          const atDatelineEndWorldX = isWestToEast ? worldXEnd : worldXStart\n\n          // get X coordinate starting at dateline\n          const atDatelineStartWorldX = isWestToEast ? worldXStart : worldXEnd\n\n          const [x1, y1] = worldToPixels(\n            [atDatelineEndWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.lineTo(x1, y1)\n          const [x2, y2] = worldToPixels(\n            [atDatelineStartWorldX * viewport.scale, atDatelineWorldY * viewport.scale],\n            viewport.pixelProjectionMatrix\n          )\n          this.stage.moveTo(x2, y2)\n        }\n\n        this.stage.lineTo(x, y)\n\n        if (drawFishingCircles && frame.hasFishing[i] === true) {\n          circlePoints.x.push(x)\n          circlePoints.y.push(y)\n        }\n\n        prevWorldX = worldX\n        prevWorldY = worldY\n        prevSeries = currentSeries\n      }\n    }\n\n    if (drawFishingCircles) {\n      this.stage.lineStyle(0)\n      this.stage.beginFill(color, 1)\n      for (let i = 0, circlesLength = circlePoints.x.length; i < circlesLength; i++) {\n        this.stage.drawCircle(circlePoints.x[i], circlePoints.y[i], fishingCirclesRadius)\n      }\n      this.stage.endFill()\n    }\n\n    if (duplicateWorld === true) {\n      ;[-512, 512].forEach((offset) => {\n        this._drawTrack({\n          worldOffset: offset,\n          data,\n          startIndex,\n          endIndex,\n          drawFishingCircles,\n          fishingCirclesRadius,\n          color,\n          lineThickness,\n          lineOpacity,\n        })\n      })\n    }\n    return n\n  }\n\n  render() {\n    return null\n  }\n}\n\nTracksLayer.propTypes = {\n  zoom: PropTypes.number,\n  rootStage: PropTypes.object,\n  viewport: PropTypes.object,\n  startIndex: PropTypes.number,\n  endIndex: PropTypes.number,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  tracks: PropTypes.array,\n}\n\nexport default TracksLayer\n","import React from 'react'\nimport * as PIXI from 'pixi.js'\nimport PropTypes from 'prop-types'\nimport { BaseControl } from 'react-map-gl'\nimport { lngLatToWorld } from 'viewport-mercator-project'\nimport {\n  hsvToRgb,\n  hueToRgbString,\n  hueIncrementToHue,\n  wrapHue,\n  VESSELS_HUES_INCREMENTS_NUM,\n} from '../utils/map-colors'\nimport {\n  VESSELS_BASE_RADIUS,\n  VESSELS_HEATMAP_BLUR_FACTOR,\n  ACTIVITY_HIGHLIGHT_HUE,\n  VESSELS_HEATMAP_DIMMING_ALPHA,\n  VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD,\n  VESSEL_CLICK_TOLERANCE_PX,\n} from '../config'\nimport HeatmapLayer from '../heatmap/HeatmapLayer'\nimport TracksLayer from '../tracks/TracksLayer'\n\nconst shouldUseRadialGradientStyle = (zoom) => zoom < VESSELS_RADIAL_GRADIENT_STYLE_ZOOM_THRESHOLD\n\n// builds a texture spritesheet containing\n// - the heatmap style (radial gradient)\n// - the circle style that is used at higher zoom levels\n// - the 'bullseye' style used for encounters\n// as well as a number of hues for each in a 2D grid.\n// Then, only the texture frame (mesh UVs) is modified depending on the zoom level,\n// in order not to have to recreate sprites\nconst getVesselTexture = (radius, blurFactor) => {\n  const tplCanvas = document.createElement('canvas')\n  const tplCtx = tplCanvas.getContext('2d')\n  const diameter = radius * 2\n  const NUM_STYLES = 3\n  tplCanvas.width = diameter * NUM_STYLES + (NUM_STYLES - 1) // + (NUM_STYLES - 1): tiny offset between 2 frames\n  tplCanvas.height = diameter * VESSELS_HUES_INCREMENTS_NUM + VESSELS_HUES_INCREMENTS_NUM\n\n  for (let hueIncrement = 0; hueIncrement < VESSELS_HUES_INCREMENTS_NUM; hueIncrement++) {\n    const y = diameter * hueIncrement + hueIncrement\n    const yCenter = y + radius\n\n    // heatmap style\n    let x = radius\n    const gradient = tplCtx.createRadialGradient(\n      x,\n      yCenter,\n      radius * blurFactor,\n      x,\n      yCenter,\n      radius\n    )\n    const hue = hueIncrementToHue(hueIncrement)\n    const rgbString = hueToRgbString(hue)\n    gradient.addColorStop(0, rgbString)\n\n    const rgbOuter = hsvToRgb(wrapHue(hue + 30), 80, 100)\n    gradient.addColorStop(1, `rgba(${rgbOuter.r}, ${rgbOuter.g}, ${rgbOuter.b}, 0)`)\n\n    tplCtx.fillStyle = gradient\n    tplCtx.fillRect(0, y, diameter, diameter)\n\n    // circle style\n    x += diameter + 1 // tiny offset between 2 frames\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n\n    // bullseye style\n    x += diameter + 1\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.4, 0, 2 * Math.PI, false)\n    tplCtx.fillStyle = rgbString\n    tplCtx.fill()\n    tplCtx.beginPath()\n    tplCtx.arc(x, yCenter, radius * 0.95, 0, 2 * Math.PI, false)\n    tplCtx.lineWidth = 1\n    tplCtx.strokeStyle = rgbString\n    tplCtx.stroke()\n  }\n\n  return tplCanvas\n}\n\nclass ActivityLayers extends BaseControl {\n  componentDidMount() {\n    this._build()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.props.exportNativeViewport(this._context.viewport)\n\n    if (\n      nextProps.viewport.width !== this.props.viewport.width ||\n      nextProps.viewport.height !== this.props.viewport.height\n    ) {\n      this._updateViewportSize(nextProps.viewport.width, nextProps.viewport.height)\n    }\n  }\n\n  _build() {\n    const { width, height } = this.props.viewport\n\n    this.pixi = new PIXI.Application({\n      width,\n      height,\n      transparent: true,\n      antialias: true,\n    })\n\n    this.renderer = this.pixi.renderer\n    this.canvas = this.pixi.view\n    this.canvas.style.position = 'absolute'\n\n    this.container.appendChild(this.canvas)\n\n    this.stage = this.pixi.stage\n\n    const baseTextureCanvas = getVesselTexture(VESSELS_BASE_RADIUS, VESSELS_HEATMAP_BLUR_FACTOR)\n    this.baseTexture = PIXI.Texture.fromCanvas(baseTextureCanvas)\n\n    this.heatmapStage = new PIXI.Container()\n    this.stage.addChild(this.heatmapStage)\n\n    this.pixi.ticker.add(this._onTick)\n  }\n\n  _updateViewportSize(viewportWidth, viewportHeight) {\n    this.renderer.resize(viewportWidth, viewportHeight)\n  }\n\n  toggleHeatmapDimming(dim) {\n    if (this.heatmapStage === undefined) {\n      return\n    }\n    if (dim === true) {\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = dim === true ? VESSELS_HEATMAP_DIMMING_ALPHA : 1\n  }\n\n  onTouchStart = (event) => {\n    if (!event.touches.length) {\n      return\n    }\n    this.queryCoords(event.touches[0].clientX, event.touches[0].clientY)\n  }\n\n  onMouseMove = (event) => {\n    this.queryCoords(event.clientX, event.clientY)\n  }\n\n  queryCoords(x, y) {\n    // bail if all heatmap layers are set to non-interactive\n    if (this.props.heatmapLayers.every((l) => l.interactive !== true)) {\n      return\n    }\n\n    const { viewport } = this._context\n    const [longitude, latitude] = viewport.unproject([x, y])\n\n    let wrappedLongitude = longitude\n    if (wrappedLongitude > 180) {\n      wrappedLongitude -= 360\n    } else if (wrappedLongitude < -180) {\n      wrappedLongitude += 360\n    }\n\n    const [worldX, worldY] = lngLatToWorld([wrappedLongitude, latitude], 1)\n\n    const toleranceRadiusInWorldUnits = VESSEL_CLICK_TOLERANCE_PX / viewport.scale\n\n    this.props.queryHeatmapVessels(\n      {\n        longitude: wrappedLongitude,\n        latitude,\n        worldX,\n        worldY,\n        toleranceRadiusInWorldUnits,\n      },\n      this.props.temporalExtentIndexes\n    )\n  }\n\n  _onTick = () => {\n    if (this.heatmapFadingIn === true && this.heatmapStage.alpha < 1) {\n      this._heatmapFadeinStep()\n    }\n  }\n\n  _startHeatmapFadein() {\n    this.heatmapFadingIn = true\n    this.heatmapFadeinStartTimestamp = undefined\n  }\n\n  _heatmapFadeinStep() {\n    if (this.heatmapFadeinStartTimestamp === undefined) {\n      this.heatmapFadeinStartTimestamp = Date.now()\n    }\n    const timeElapsed = (Date.now() - this.heatmapFadeinStartTimestamp) / 1000\n    let alpha = this.heatmapStage.alpha + (1 - this.heatmapStage.alpha) * timeElapsed\n    if (alpha >= 1) {\n      alpha = 1\n      this.heatmapFadingIn = false\n    }\n    this.heatmapStage.alpha = alpha\n  }\n\n  // FIXME move to container?\n  _getHighlightData(highlightedVessels, highlightedClickedVessel, heatmapLayers) {\n    const hue = ACTIVITY_HIGHLIGHT_HUE\n    let highlightLayerData = {\n      id: '__HIGHLIGHT__',\n      visible: true,\n      opacity: 1,\n      hue: ACTIVITY_HIGHLIGHT_HUE,\n    }\n    let highlightFilters = []\n\n    if (\n      highlightedVessels !== undefined &&\n      highlightedVessels.layer !== undefined &&\n      highlightedVessels.foundVessels !== undefined &&\n      highlightedVessels.isEmpty !== true\n    ) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedVessels.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = highlightedVessels.foundVessels.map((vessel) => ({\n        hue,\n        filterValues: {\n          series: [vessel.series],\n        },\n      }))\n    } else if (highlightedClickedVessel !== null) {\n      const sourceLayer = heatmapLayers.find((l) => l.id === highlightedClickedVessel.layer.id)\n      highlightLayerData = { highlightLayerData, ...sourceLayer }\n      highlightFilters = [\n        {\n          hue,\n          filterValues: {\n            series: [highlightedClickedVessel.seriesgroup],\n          },\n        },\n      ]\n    }\n    return {\n      highlightLayerData,\n      highlightFilters,\n    }\n  }\n  _render() {\n    const {\n      zoom,\n      heatmapLayers,\n      temporalExtentIndexes,\n      highlightTemporalExtentIndexes,\n      highlightedVessels,\n      highlightedClickedVessel,\n      tracks,\n      leftWorldScaled,\n      rightWorldScaled,\n    } = this.props\n    const { viewport } = this._context\n\n    const startIndex = temporalExtentIndexes[0]\n    const endIndex = temporalExtentIndexes[1]\n    const useRadialGradientStyle = shouldUseRadialGradientStyle(zoom)\n\n    if (highlightedVessels.isEmpty !== true) {\n      this.toggleHeatmapDimming(true)\n    }\n    if (highlightedVessels.isEmpty === true && tracks.length === 0) {\n      this._startHeatmapFadein()\n    }\n    if (this.renderer) {\n      const err = this.renderer.gl.getError()\n      if (err !== 0) console.log(err)\n    }\n\n    const { highlightLayerData, highlightFilters } = this._getHighlightData(\n      highlightedVessels,\n      highlightedClickedVessel,\n      heatmapLayers\n    )\n\n    return (\n      <div\n        ref={(ref) => {\n          this.container = ref\n        }}\n        style={{ position: 'absolute' }}\n        onMouseMove={this.onMouseMove}\n        onTouchStart={this.onTouchStart}\n      >\n        {heatmapLayers.map((layer) => (\n          <HeatmapLayer\n            key={layer.id}\n            layer={layer}\n            filters={layer.filters || []}\n            viewport={viewport}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            baseTexture={this.baseTexture}\n            rootStage={this.heatmapStage}\n            useRadialGradientStyle={useRadialGradientStyle}\n            customRenderingStyle={{}}\n            viewportLeft={leftWorldScaled}\n            viewportRight={rightWorldScaled}\n          />\n        ))}\n        {this.stage !== undefined && (\n          <HeatmapLayer\n            key=\"highlighted\"\n            layer={highlightLayerData}\n            filters={highlightFilters}\n            viewport={viewport}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            baseTexture={this.baseTexture}\n            rootStage={this.heatmapStage}\n            useRadialGradientStyle={useRadialGradientStyle}\n            customRenderingStyle={{ defaultOpacity: 1, defaultSize: 1 }}\n            viewportLeft={leftWorldScaled}\n            viewportRight={rightWorldScaled}\n          />\n        )}\n        {this.stage !== undefined && (\n          <TracksLayer\n            tracks={tracks}\n            viewport={viewport}\n            zoom={zoom}\n            startIndex={startIndex}\n            endIndex={endIndex}\n            highlightTemporalExtentIndexes={highlightTemporalExtentIndexes}\n            rootStage={this.stage}\n          />\n        )}\n      </div>\n    )\n  }\n}\n\nActivityLayers.propTypes = {\n  zoom: PropTypes.number,\n  heatmapLayers: PropTypes.array,\n  temporalExtentIndexes: PropTypes.array,\n  highlightTemporalExtentIndexes: PropTypes.array,\n  highlightedVessels: PropTypes.object,\n  highlightedClickedVessel: PropTypes.object,\n  tracks: PropTypes.array,\n  queryHeatmapVessels: PropTypes.func,\n  exportNativeViewport: PropTypes.func,\n  leftWorldScaled: PropTypes.number,\n  rightWorldScaled: PropTypes.number,\n}\n\nActivityLayers.contextTypes = {\n  viewport: PropTypes.object,\n}\n\nexport default ActivityLayers\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport convert from '@globalfishingwatch/map-convert'\nimport { exportNativeViewport } from '../glmap/viewport.actions'\nimport { getTemporalExtent, getHighlightTemporalExtent } from '../module/module.selectors'\nimport ActivityLayers from './ActivityLayers'\nimport { queryHeatmapVessels } from '../heatmap/heatmapTiles.actions'\nimport { MIN_FRAME_LENGTH_MS } from '../config'\n\nconst getHeatmapLayers = (state) => state.map.heatmap.heatmapLayers\n\nconst getHeatmapLayersAsArray = createSelector(\n  [getHeatmapLayers],\n  (heatmapLayers) => {\n    const a = Object.keys(heatmapLayers).map((id) => ({\n      ...heatmapLayers[id],\n    }))\n    // console.log(a)\n    return a\n  }\n)\n\nconst getTracks = (state) => state.map.tracks.data\n\nconst getTracksWithData = createSelector(\n  [getTracks],\n  (tracks) => {\n    const tracksWithData = tracks\n      .filter((t) => t.type !== 'geojson')\n      .filter((t) => t.data !== undefined)\n    return tracksWithData\n  }\n)\n\nconst getTemporalExtentIndexes = createSelector(\n  [getTemporalExtent],\n  (temporalExtent) => {\n    const startTimestamp = temporalExtent[0].getTime()\n    const endTimestamp = Math.max(\n      temporalExtent[1].getTime(),\n      temporalExtent[0].getTime() + MIN_FRAME_LENGTH_MS\n    )\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst getHighlightTemporalExtentIndexes = createSelector(\n  [getHighlightTemporalExtent],\n  (highlightTemporalExtent) => {\n    if (\n      highlightTemporalExtent === undefined ||\n      highlightTemporalExtent === null ||\n      !highlightTemporalExtent.length\n    ) {\n      return null\n    }\n    const startTimestamp = highlightTemporalExtent[0].getTime()\n    const endTimestamp = highlightTemporalExtent[1].getTime()\n    const startIndex = convert.getOffsetedTimeAtPrecision(startTimestamp)\n    const endIndex = convert.getOffsetedTimeAtPrecision(endTimestamp)\n    return [startIndex, endIndex]\n  }\n)\n\nconst mapStateToProps = (state) => ({\n  highlightedVessels: state.map.heatmap.highlightedVessels,\n  highlightedClickedVessel: state.map.heatmap.highlightedClickedVessel,\n  viewport: state.map.viewport.viewport,\n  zoom: state.map.viewport.viewport.zoom,\n  heatmapLayers: getHeatmapLayersAsArray(state),\n  tracks: getTracksWithData(state),\n  leftWorldScaled: state.map.viewport.leftWorldScaled,\n  rightWorldScaled: state.map.viewport.rightWorldScaled,\n  temporalExtentIndexes: getTemporalExtentIndexes(state),\n  highlightTemporalExtentIndexes: getHighlightTemporalExtentIndexes(state),\n})\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  queryHeatmapVessels: (coords, temporalExtentIndexes) => {\n    dispatch(queryHeatmapVessels(coords, temporalExtentIndexes))\n  },\n  exportNativeViewport: (viewport) => {\n    dispatch(exportNativeViewport(viewport))\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ActivityLayers)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport MapGL, { Popup } from 'react-map-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\nimport ActivityLayers from '../activity/ActivityLayers.container.js'\nimport styles from './map.css'\n\nconst PopupWrapper = (props) => {\n  const { latitude, longitude, children, closeButton, onClose } = props\n  return (\n    <Popup\n      latitude={latitude}\n      longitude={longitude}\n      closeButton={closeButton}\n      onClose={onClose}\n      anchor=\"bottom\"\n      offsetTop={-10}\n      tipSize={4}\n      closeOnClick={false}\n    >\n      {children}\n    </Popup>\n  )\n}\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      mouseOver: true,\n    }\n  }\n  componentDidMount() {\n    window.addEventListener('resize', this._resize)\n    this._resize()\n\n    // useful with FOUC\n    window.setTimeout(() => this._resize(), 1)\n\n    // there is a problem with the container width computation (only with \"fat scrollbar\" browser/os configs),\n    // seems like the panels with scrollbars are taken into account or smth\n    window.setTimeout(() => this._resize(), 10000)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this._resize)\n  }\n\n  _resize = () => {\n    if (this._mapContainerRef === undefined) {\n      console.warn('Cant set viewport on a map that hasnt finished intanciating yet')\n      return\n    }\n    const mapContainerStyle = window.getComputedStyle(this._mapContainerRef)\n    const width = parseInt(mapContainerStyle.width, 10)\n    const height = parseInt(mapContainerStyle.height, 10) + 1\n\n    if (width !== this.props.viewport.width || height !== this.props.viewport.height) {\n      this.props.setViewport({\n        ...this.props.viewport,\n        width,\n        height,\n      })\n    }\n  }\n\n  onViewportChange = (viewport) => {\n    this.props.setViewport(viewport)\n  }\n\n  onHover = (event) => {\n    this.props.mapHover(event.lngLat[1], event.lngLat[0], event.features)\n  }\n\n  onClick = (event) => {\n    this.props.mapClick(event.lngLat[1], event.lngLat[0], event.features)\n  }\n\n  render() {\n    const {\n      viewport,\n      maxZoom,\n      minZoom,\n      transitionEnd,\n      mapStyle,\n      onClosePopup,\n      clickPopup,\n      hoverPopup,\n      cursor,\n      interactiveLayerIds,\n    } = this.props\n\n    return (\n      <div\n        id=\"map\"\n        className={styles.map}\n        ref={(ref) => {\n          this._mapContainerRef = ref\n        }}\n        onMouseLeave={() => {\n          this.setState({ mouseOver: false })\n        }}\n        onMouseEnter={() => {\n          this.setState({ mouseOver: true })\n        }}\n      >\n        <MapGL\n          onTransitionEnd={transitionEnd}\n          onHover={this.onHover}\n          onClick={this.onClick}\n          getCursor={({ isDragging }) => {\n            if (cursor === null) {\n              return isDragging ? 'grabbing' : 'grab'\n            }\n            return cursor\n          }}\n          mapStyle={mapStyle}\n          {...viewport}\n          maxZoom={maxZoom}\n          minZoom={minZoom}\n          onViewportChange={this.onViewportChange}\n          interactiveLayerIds={interactiveLayerIds}\n        >\n          <ActivityLayers loadTemporalExtent={this.props.loadTemporalExtent} />\n          {clickPopup !== undefined && clickPopup !== null && (\n            <PopupWrapper\n              latitude={clickPopup.latitude}\n              longitude={clickPopup.longitude}\n              closeButton\n              onClose={onClosePopup}\n            >\n              {clickPopup.content}\n            </PopupWrapper>\n          )}\n          {this.state.mouseOver === true && hoverPopup !== undefined && hoverPopup !== null && (\n            <PopupWrapper\n              latitude={hoverPopup.latitude}\n              longitude={hoverPopup.longitude}\n              closeButton={false}\n            >\n              {hoverPopup.content}\n            </PopupWrapper>\n          )}\n        </MapGL>\n        <div className={styles.googleLogo} />\n      </div>\n    )\n  }\n}\n\nMap.propTypes = {\n  viewport: PropTypes.object,\n  mapStyle: PropTypes.object,\n  clickPopup: PropTypes.object,\n  hoverPopup: PropTypes.object,\n  maxZoom: PropTypes.number,\n  minZoom: PropTypes.number,\n  setViewport: PropTypes.func,\n  mapHover: PropTypes.func,\n  mapClick: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  transitionEnd: PropTypes.func,\n  cursor: PropTypes.string,\n  interactiveLayerIds: PropTypes.arrayOf(PropTypes.string),\n}\n\nexport default Map\n","import { connect } from 'react-redux'\nimport { createSelector } from 'reselect'\nimport { fromJS } from 'immutable'\nimport { TRACKS_LAYER_IN_FRONT_OF_GROUP } from '../config'\nimport { closePopup } from '../module/module.actions.js'\nimport { getTracksStyles } from '../tracks/tracks.selectors.js'\nimport { mapHover, mapClick } from './interaction.actions.js'\nimport { setViewport, transitionEnd } from './viewport.actions.js'\nimport Map from './Map'\n\nconst getStaticLayers = (state) => state.map.style.staticLayers\n\nconst getInteractiveLayerIds = createSelector(\n  [getStaticLayers],\n  // Note: here we assume that layer IDs provided with module match the GL layers that should\n  // be interactive or not, ie typically the fill layer if a label layer is present\n  (staticLayers) =>\n    staticLayers.filter((l) => l.interactive === true && l.visible === true).map((l) => l.id)\n)\n\nconst getMapStyles = (state) => state.map.style.mapStyle\nconst getMapStyle = createSelector(\n  [getMapStyles, getTracksStyles],\n  (mapStyles, trackStyles) => {\n    if (!trackStyles) return mapStyles\n\n    const currentLayerGroups = mapStyles\n      .toJS()\n      .layers.filter((l) => l.metadata !== undefined)\n      .map((l) => l.metadata['mapbox:group'])\n    const trackLayersIndex = currentLayerGroups.lastIndexOf(TRACKS_LAYER_IN_FRONT_OF_GROUP) + 1\n\n    let finalMapStyles = mapStyles.mergeIn(['sources'], trackStyles.sources)\n    let mapStylesLayers = mapStyles.get('layers')\n    trackStyles.layers.forEach((trackLayer, i) => {\n      mapStylesLayers = mapStylesLayers.insert(trackLayersIndex + i, fromJS(trackLayer))\n    })\n    finalMapStyles = finalMapStyles.set('layers', mapStylesLayers)\n\n    return finalMapStyles\n  }\n)\n\nconst mapStateToProps = (state, ownProps) => ({\n  viewport: state.map.viewport.viewport,\n  maxZoom: state.map.viewport.maxZoom,\n  minZoom: state.map.viewport.minZoom,\n  cursor: state.map.interaction.cursor,\n  mapStyle: getMapStyle(state),\n  interactiveLayerIds: getInteractiveLayerIds(state),\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setViewport: (viewport) => {\n    dispatch(setViewport(viewport))\n  },\n  mapHover: (lat, long, features) => {\n    dispatch(mapHover(lat, long, features))\n  },\n  mapClick: (lat, long, features) => {\n    dispatch(mapClick(lat, long, features))\n  },\n  transitionEnd: () => {\n    dispatch(transitionEnd())\n  },\n  onClosePopup: () => {\n    dispatch(closePopup())\n  },\n})\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Map)\n","// This utility looks at GeoJSON features and returns the predominant geometry type\n\nconst TYPES = [\n  { gl: 'line', geoJSON: ['LineString', 'MultiLineString'] },\n  { gl: 'fill', geoJSON: ['Polygon', 'MultiPolygon'] },\n  { gl: 'circle', geoJSON: ['Point', 'MultiPoint'] },\n]\n\nexport default (geoJSON) => {\n  // collect all geoJSON geom types\n  const allGeoJSONTypes = geoJSON.features.map((feature) => {\n    const geom = feature.geometry\n    if (geom === undefined) {\n      return null\n    }\n    return geom.type\n  })\n\n  // collect number of geometries by GL geom types\n  const numByGLType = TYPES.map((type) => {\n    let num = 0\n    allGeoJSONTypes.forEach((geoJSONType) => {\n      if (type.geoJSON.indexOf(geoJSONType) > -1) {\n        num++\n      }\n    })\n    return { gl: type.gl, num }\n  })\n\n  // get feature types with the higher count\n  let glType = 'fill'\n  let glTypeMax = 0\n  numByGLType.forEach((t) => {\n    if (t.num > glTypeMax) {\n      glType = t.gl\n      glTypeMax = t.num\n    }\n  })\n\n  return glType\n}\n","import { fromJS } from 'immutable'\nimport { hexToRgb } from '../utils/map-colors'\nimport { STATIC_LAYERS_CARTO_ENDPOINT, STATIC_LAYERS_CARTO_TILES_ENDPOINT } from '../config'\nimport { CUSTOM_LAYERS_SUBTYPES, GL_TRANSPARENT } from '../constants'\nimport GL_STYLE from './gl-styles/style.json'\nimport getMainGeomType from '../utils/getMainGeomType'\n\nexport const INIT_MAP_STYLE = 'INIT_MAP_STYLE'\nexport const SET_MAP_STYLE = 'SET_MAP_STYLE'\nexport const MARK_CARTO_LAYERS_AS_INSTANCIATED = 'MARK_CARTO_LAYERS_AS_INSTANCIATED'\nexport const SET_STATIC_LAYERS = 'SET_STATIC_LAYERS'\nexport const SET_BASEMAP_LAYERS = 'SET_BASEMAP_LAYERS'\n\nexport const initStyle = ({ glyphsPath }) => ({\n  type: INIT_MAP_STYLE,\n  payload: {\n    glyphsPath,\n  },\n})\n\nconst setMapStyle = (style) => ({\n  type: SET_MAP_STYLE,\n  payload: style,\n})\n\nexport const applyTemporalExtent = (temporalExtent) => (dispatch, getState) => {\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n\n  const start = Math.round(temporalExtent[0].getTime() / 1000)\n  const end = Math.round(temporalExtent[1].getTime() / 1000)\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    if (glLayer.metadata === undefined || glLayer.metadata['gfw:temporal'] !== true) {\n      continue\n    }\n\n    // if layer is temporal, a filter must always be preset on the style.json object\n    // because each layer can have a different time field to be filtered\n    const currentFilter = style.getIn(['layers', i, 'filter']).toJS()\n    if (currentFilter === null) {\n      throw new Error('filter must be preset on style.json for temporal layer: ', glLayer.id)\n    }\n    currentFilter[1][2] = start\n    currentFilter[2][2] = end\n    style = style.setIn(['layers', i, 'filter'], fromJS(currentFilter))\n  }\n  dispatch(setMapStyle(style))\n}\n\nconst applyLayerFilters = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  const isTemporal =\n    currentGlLayer.metadata !== undefined && currentGlLayer.metadata['gfw:temporal'] === true\n\n  if (refLayer.filters === undefined) {\n    if (isTemporal === true) {\n      // only keep temporal part and clean up custom filters\n      // if layer is temporal, extract the time filter part first\n      const currentFilter = currentGlLayer.filter.slice(0, 3)\n      return style.setIn(['layers', glLayerIndex, 'filter'], fromJS(currentFilter))\n    } else if (currentGlLayer.filter !== undefined) {\n      return style.deleteIn(['layers', glLayerIndex, 'filter'])\n    }\n    return style\n  }\n\n  // if layer is temporal, extract the time filter part first\n  const currentFilter = isTemporal ? currentGlLayer.filter.slice(0, 3) : ['all']\n  const newFilter = currentFilter.concat(refLayer.filters)\n  return style.setIn(['layers', glLayerIndex, 'filter'], fromJS(newFilter))\n}\n\nconst applyLayerExpressions = (style, refLayer, currentGlLayer, glLayerIndex) => {\n  let newStyle = style\n  const currentStyle = style.toJS()\n  const glType = currentGlLayer.type\n  const defaultStyles = currentStyle.metadata['gfw:styles']\n  const metadata = currentGlLayer.metadata\n  ;['selected', 'highlighted'].forEach((styleType) => {\n    // get selectedFeatures or highlightedFeatures\n    const features = refLayer[`${styleType}Features`]\n    const hasFeatures = features !== null && features !== undefined && features.values.length > 0\n    const applyStyleToAllFeatures = refLayer[styleType]\n\n    const defaultStyle = defaultStyles[styleType][glType] || {}\n    const layerStyle =\n      (metadata && metadata['gfw:styles'] && metadata['gfw:styles'][styleType]) || {}\n    const allPaintProperties = { ...defaultStyle, ...layerStyle }\n    if (Object.keys(allPaintProperties).length) {\n      const layerColorRgb = hexToRgb(refLayer.color)\n      const layerColorRgbFragment = `${layerColorRgb.r},${layerColorRgb.g},${layerColorRgb.b}`\n      // go through each applicable gl paint property\n      Object.keys(allPaintProperties).forEach((glPaintProperty) => {\n        const selectedValue = allPaintProperties[glPaintProperty][0]\n        const fallbackValue = allPaintProperties[glPaintProperty][1]\n        const paintOrLayout = glPaintProperty === 'icon-size' ? 'layout' : 'paint'\n        let glPaintFinalValue\n        if (\n          hasFeatures === false &&\n          applyStyleToAllFeatures !== true &&\n          applyStyleToAllFeatures !== false\n        ) {\n          // style reset when no features filter is declared and neither is applyAll\n          const originalLayerStyle = GL_STYLE.layers.find((l) => l.id === currentGlLayer.id)\n          glPaintFinalValue = originalLayerStyle[paintOrLayout][glPaintProperty]\n        } else if (applyStyleToAllFeatures === true || applyStyleToAllFeatures === false) {\n          glPaintFinalValue = applyStyleToAllFeatures === true ? selectedValue : fallbackValue\n        } else {\n          glPaintFinalValue = [\n            'match',\n            ['get', features.field],\n            features.values,\n            typeof selectedValue !== 'string'\n              ? selectedValue\n              : selectedValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbFragment),\n            typeof fallbackValue !== 'string'\n              ? fallbackValue\n              : fallbackValue.replace('$REFLAYER_COLOR_RGB', layerColorRgbFragment),\n          ]\n        }\n\n        if (glPaintFinalValue !== undefined) {\n          newStyle = newStyle.setIn(\n            ['layers', glLayerIndex, paintOrLayout, glPaintProperty],\n            glPaintFinalValue\n          )\n        }\n      })\n    }\n  })\n  return newStyle\n}\n\nconst toggleLayerVisibility = (style, refLayer, glLayerIndex) => {\n  const visibility = refLayer.visible === true ? 'visible' : 'none'\n  return style.setIn(['layers', glLayerIndex, 'layout', 'visibility'], visibility)\n}\n\nconst updateGLLayer = (style, glLayerId, refLayer) => {\n  const currentStyle = style.toJS()\n  const currentStyleLayers = currentStyle.layers\n  let newStyle = style\n\n  const glLayerIndex = currentStyleLayers.findIndex((l) => l.id === glLayerId)\n  const glLayer = currentStyleLayers.find((l) => l.id === glLayerId)\n\n  // visibility\n  newStyle = toggleLayerVisibility(newStyle, refLayer, glLayerIndex)\n\n  if (refLayer.isBasemap === true) {\n    return newStyle\n  }\n\n  const initialGLLayer = GL_STYLE.layers.find((l) => l.id === glLayerId)\n  const refLayerOpacity = refLayer.opacity === undefined ? 1 : refLayer.opacity\n\n  // color/opacity\n  switch (glLayer.type) {\n    case 'fill': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-outline-color'], refLayer.color)\n        .setIn(['layers', glLayerIndex, 'paint', 'fill-color'], GL_TRANSPARENT)\n      break\n    }\n    case 'line': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'line-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'line-color'], refLayer.color)\n      break\n    }\n    case 'symbol': {\n      if (glLayer.metadata && glLayer.metadata['gfw:isLabel'] === true) {\n        const parentLayerIsVisible =\n          newStyle.getIn(['layers', glLayerIndex, 'layout', 'visibility']) === 'visible'\n        const labelsVisibility =\n          parentLayerIsVisible && refLayer.showLabels === true ? 'visible' : 'none'\n        newStyle = newStyle.setIn(\n          ['layers', glLayerIndex, 'layout', 'visibility'],\n          labelsVisibility\n        )\n        if (refLayer.showLabels !== true) {\n          break\n        }\n      }\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'text-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'text-color'], refLayer.color)\n      break\n    }\n    // Event layers and custom layers with point geom types\n    case 'circle': {\n      newStyle = newStyle\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-opacity'], refLayerOpacity)\n        .setIn(['layers', glLayerIndex, 'paint', 'circle-color'], refLayer.color)\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-radius'],\n          initialGLLayer.paint['circle-radius']\n        )\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-stroke-color'],\n          initialGLLayer.paint['circle-stroke-color'] || '#000'\n        )\n        .setIn(\n          ['layers', glLayerIndex, 'paint', 'circle-stroke-width'],\n          initialGLLayer.paint['circle-stroke-width'] || 1\n        )\n      break\n    }\n    case 'raster': {\n      newStyle = newStyle.setIn(\n        ['layers', glLayerIndex, 'paint', 'raster-opacity'],\n        refLayerOpacity\n      )\n      break\n    }\n    default: {\n      break\n    }\n  }\n\n  newStyle = applyLayerFilters(newStyle, refLayer, glLayer, glLayerIndex)\n  newStyle = applyLayerExpressions(newStyle, refLayer, glLayer, glLayerIndex)\n\n  return newStyle\n}\n\nconst addCustomGLLayer = (subtype, layerId, url, data) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n  const currentStyle = style.toJS()\n\n  if (currentStyle.sources[layerId] === undefined) {\n    const source = { type: subtype }\n    if (subtype === CUSTOM_LAYERS_SUBTYPES.geojson) {\n      source.data = data\n    } else if (subtype === CUSTOM_LAYERS_SUBTYPES.raster) {\n      source.tiles = [url]\n      source.tileSize = 256\n    }\n    style = style.setIn(['sources', layerId], fromJS(source))\n  }\n\n  if (currentStyle.layers.find((glLayer) => glLayer.id === layerId) === undefined) {\n    const glType = subtype === CUSTOM_LAYERS_SUBTYPES.geojson ? getMainGeomType(data) : subtype\n    const glLayer = fromJS({\n      id: layerId,\n      source: layerId,\n      type: glType,\n      layout: {},\n      paint: {},\n    })\n    const layerIndex =\n      subtype === CUSTOM_LAYERS_SUBTYPES.raster\n        ? // if raster, put at index of last raster layer except labels\n          currentStyle.layers.length -\n          1 -\n          currentStyle.layers\n            .filter((l) => l.id !== 'labels')\n            .reverse()\n            .findIndex((l) => l.type === 'raster')\n        : currentStyle.layers.length - 1\n    style = style.set('layers', style.get('layers').splice(layerIndex, 0, glLayer))\n  }\n\n  dispatch(setMapStyle(style))\n}\n\nconst addWorkspaceGLLayers = (workspaceGLLayers) => (dispatch, getState) => {\n  const state = getState()\n  let style = state.map.style.mapStyle\n\n  workspaceGLLayers.forEach((workspaceGLLayer) => {\n    const id = workspaceGLLayer.id\n    const gl = workspaceGLLayer.gl\n    const finalSource = fromJS(gl.source)\n    style = style.setIn(['sources', id], finalSource)\n\n    const layers = []\n    gl.layers.forEach((srcGlLayer) => {\n      const glLayer = {\n        ...srcGlLayer,\n        source: id,\n        'source-layer': id,\n      }\n      layers.push(glLayer)\n    })\n\n    const finalLayers = fromJS(layers)\n    style = style.set('layers', style.get('layers').concat(finalLayers))\n  })\n\n  dispatch(setMapStyle(style))\n\n  // TODO MAP MODULE\n  // dispatch(updateMapStyle());\n}\n\nconst getCartoLayerInstanciatePromise = ({ sourceId, sourceCartoSQL }) => {\n  const mapConfig = { layers: [{ id: sourceId, options: { sql: sourceCartoSQL } }] }\n  const mapConfigURL = encodeURIComponent(JSON.stringify(mapConfig))\n  const cartoAnonymousMapUrl = STATIC_LAYERS_CARTO_ENDPOINT.replace('$MAPCONFIG', mapConfigURL)\n\n  return new Promise((resolve) => {\n    fetch(cartoAnonymousMapUrl)\n      .then((res) => {\n        if (res.status >= 400) {\n          console.warn(`loading of layer failed ${sourceId}`)\n          Promise.reject()\n          return null\n        }\n        return res.json()\n      })\n      .then((data) => {\n        resolve({\n          layergroupid: data.layergroupid,\n          sourceId,\n        })\n      })\n      .catch((err) => {\n        console.warn(err)\n      })\n  })\n}\n\nconst instanciateCartoLayers = (layers) => (dispatch, getState) => {\n  dispatch({\n    type: MARK_CARTO_LAYERS_AS_INSTANCIATED,\n    payload: layers.map((layer) => layer.sourceId),\n  })\n  const cartoLayersPromises = layers.map((layer) => getCartoLayerInstanciatePromise(layer))\n  const cartoLayersPromisesPromise = Promise.all(cartoLayersPromises.map((p) => p.catch((e) => e)))\n  cartoLayersPromisesPromise\n    .then((instanciatedCartoLayers) => {\n      let style = getState().map.style.mapStyle\n      const currentStyle = style.toJS()\n      instanciatedCartoLayers.forEach((cartoLayer) => {\n        const tilesURL = STATIC_LAYERS_CARTO_TILES_ENDPOINT.replace(\n          '$LAYERGROUPID',\n          cartoLayer.layergroupid\n        )\n\n        // replace gl source with a new source that use tiles provided by Carto anonymous maps API\n        const newSourceId = `${cartoLayer.sourceId}-instanciated`\n        style = style.setIn(\n          ['sources', newSourceId],\n          fromJS({\n            type: 'vector',\n            tiles: [tilesURL],\n          })\n        )\n\n        // change source in all layers that are using it (genrally polygon + labels)\n        currentStyle.layers.forEach((glLayer, glLayerIndex) => {\n          if (glLayer.source === cartoLayer.sourceId) {\n            style = style.setIn(['layers', glLayerIndex, 'source'], newSourceId)\n            style = style.setIn(['layers', glLayerIndex, 'metadata', 'gfw:id'], cartoLayer.sourceId)\n            const refLayer = layers.find((l) => l.refLayer.id === cartoLayer.sourceId).refLayer\n            style = updateGLLayer(style, glLayer.id, refLayer)\n          }\n        })\n      })\n\n      dispatch(setMapStyle(style))\n    })\n    .catch((err) => {\n      console.warn(err)\n    })\n}\n\nexport const commitStyleUpdates = (staticLayers, basemapLayers) => (dispatch, getState) => {\n  // Store a copy of static and basemap layers. This is not used directly by\n  // the Map component which only needs a prepared style object\n  dispatch({\n    type: SET_STATIC_LAYERS,\n    payload: staticLayers,\n  })\n  dispatch({\n    type: SET_BASEMAP_LAYERS,\n    payload: basemapLayers,\n  })\n\n  const layers = [...staticLayers, ...basemapLayers.map((bl) => ({ ...bl, isBasemap: true }))]\n\n  const currentGLSources = getState().map.style.mapStyle.toJS().sources\n\n  // collect layers declared in workspace but not in original gl style\n  const workspaceGLLayers = layers.filter(\n    (layer) => layer.gl !== undefined && currentGLSources[layer.id] === undefined\n  )\n  if (workspaceGLLayers.length) {\n    dispatch(addWorkspaceGLLayers(workspaceGLLayers))\n  }\n\n  // instanciate custom layers if needed\n  const customLayers = layers.filter(\n    (layer) => layer.isCustom === true && currentGLSources[layer.id] === undefined\n  )\n  if (customLayers.length) {\n    customLayers.forEach((layer) => {\n      dispatch(addCustomGLLayer(layer.subtype, layer.id, layer.url, layer.data))\n    })\n  }\n\n  const state = getState().map.style\n  let style = state.mapStyle\n  const currentStyle = style.toJS()\n  const glLayers = currentStyle.layers\n  const glSources = currentStyle.sources\n\n  const cartoLayersToInstanciate = []\n\n  for (let i = 0; i < glLayers.length; i++) {\n    const glLayer = glLayers[i]\n    const sourceId = glLayer.source\n    const glSource = glSources[sourceId]\n    const layerId = (glLayer.metadata !== undefined && glLayer.metadata['gfw:id']) || sourceId\n\n    const refLayer = layers.find((l) => l.id === layerId)\n\n    if (refLayer === undefined) {\n      if (glLayer.type !== 'background') {\n        // console.warn('gl layer does not exists in workspace', glLayer);\n      }\n      continue\n    }\n\n    // check if layer is served from Carto, which means we need to instanciate it first\n    // TODO BUG: check if layer is not instanciatING too\n    const sourceCartoSQL = glSource.metadata !== undefined && glSource.metadata['gfw:carto-sql']\n    if (sourceCartoSQL !== false && sourceCartoSQL !== undefined) {\n      // only if layer is visible and has not been instanciated yet\n      const cartoLayerInstanciated = state.cartoLayersInstanciated.indexOf(sourceId) > -1\n      if (\n        refLayer.visible === true &&\n        !cartoLayerInstanciated &&\n        !cartoLayersToInstanciate.find((l) => l.sourceId === sourceId)\n      ) {\n        cartoLayersToInstanciate.push({ sourceId, sourceCartoSQL, refLayer })\n      }\n      continue\n    }\n\n    style = updateGLLayer(style, glLayer.id, refLayer)\n  }\n\n  if (cartoLayersToInstanciate.length) {\n    dispatch(instanciateCartoLayers(cartoLayersToInstanciate))\n  }\n\n  dispatch(setMapStyle(style))\n}\n","import tbbox from '@turf/bbox'\nimport { targetMapVessel } from '../map'\n\nimport {\n  getTilePromises,\n  getCleanVectorArrays,\n  groupData,\n  addTracksPointsRenderingData,\n  getTracksPlaybackData,\n} from '../utils/heatmapTileData'\nimport { startLoader, completeLoader } from '../module/module.actions'\n\nexport const ADD_TRACK = 'ADD_TRACK'\nexport const UPDATE_TRACK = 'UPDATE_TRACK'\nexport const REMOVE_TRACK = 'REMOVE_TRACK'\n\nconst getTrackDataParsed = (geojson) => {\n  const time = { start: Infinity, end: 0 }\n  if (geojson && geojson.features) {\n    geojson.features.forEach((feature) => {\n      const hasTimes =\n        feature.properties.coordinateProperties.times &&\n        feature.properties.coordinateProperties.times.length > 0\n      if (hasTimes) {\n        feature.properties.coordinateProperties.times.forEach((datetime) => {\n          if (datetime < time.start) {\n            time.start = datetime\n          } else if (datetime > time.end) {\n            time.end = datetime\n          }\n        })\n      }\n    })\n  }\n  const bounds = tbbox(geojson)\n  const geoBounds = {\n    minLat: bounds[3],\n    minLng: bounds[0],\n    maxLat: bounds[1],\n    maxLng: bounds[2],\n  }\n  return {\n    geojson,\n    geoBounds,\n    timelineBounds: [time.start, time.end],\n  }\n}\n\n// Deprecated tracks format parsing\nconst getOldTrackBoundsFormat = (data, addOffset = false) => {\n  const time = {\n    start: Infinity,\n    end: 0,\n  }\n  const geo = {\n    minLat: Infinity,\n    maxLat: -Infinity,\n    minLng: Infinity,\n    maxLng: -Infinity,\n  }\n  for (let i = 0, length = data.datetime.length; i < length; i++) {\n    const datetime = data.datetime[i]\n    if (datetime < time.start) {\n      time.start = datetime\n    } else if (datetime > time.end) {\n      time.end = datetime\n    }\n\n    const lat = data.latitude[i]\n    if (lat < geo.minLat) {\n      geo.minLat = lat\n    } else if (lat > geo.maxLat) {\n      geo.maxLat = lat\n    }\n\n    let lng = data.longitude[i]\n    if (addOffset === true) {\n      if (lng < 0) {\n        lng += 360\n      }\n    }\n    if (lng < geo.minLng) {\n      geo.minLng = lng\n    } else if (lng > geo.maxLng) {\n      geo.maxLng = lng\n    }\n  }\n\n  // track crosses the antimeridian\n  if (geo.maxLng - geo.minLng > 350 && addOffset === false) {\n    return getOldTrackBoundsFormat(data, true)\n  }\n\n  return {\n    time: [time.start, time.end],\n    geo,\n  }\n}\n\nfunction loadTrack({ id, url, type, fitBoundsOnLoad, layerTemporalExtents, color }) {\n  return (dispatch, getState) => {\n    const state = getState()\n    const loaderID = startLoader(dispatch, state)\n    if (state.map.tracks.data.find((t) => t.id === id)) {\n      return\n    }\n\n    dispatch({\n      type: ADD_TRACK,\n      payload: {\n        id,\n        url,\n        type,\n        color,\n        fitBoundsOnLoad,\n      },\n    })\n    if (type !== 'geojson') {\n      // Deprecated tracks format logic to be deleted some day\n      const token = state.map.module.token\n      const promises = getTilePromises(url, token, layerTemporalExtents, { seriesgroup: id })\n\n      Promise.all(promises.map((p) => p.catch((e) => e))).then((rawTileData) => {\n        const cleanData = getCleanVectorArrays(rawTileData)\n\n        if (!cleanData.length) {\n          return\n        }\n        const rawTrackData = groupData(cleanData, [\n          'latitude',\n          'longitude',\n          'datetime',\n          'series',\n          'weight',\n          'sigma',\n        ])\n\n        const vectorArray = addTracksPointsRenderingData(rawTrackData)\n        const bounds = getOldTrackBoundsFormat(rawTrackData)\n\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id,\n            data: getTracksPlaybackData(vectorArray),\n            geoBounds: bounds.geo,\n            timelineBounds: bounds.time,\n          },\n        })\n        dispatch(completeLoader(loaderID))\n      })\n    } else {\n      fetch(url)\n        .then((res) => {\n          if (res.status >= 400) throw new Error(res.statusText)\n          return res.json()\n        })\n        .then((data) => {\n          const { geojson, geoBounds, timelineBounds } = getTrackDataParsed(data)\n          dispatch({\n            type: UPDATE_TRACK,\n            payload: {\n              id,\n              data: geojson,\n              geoBounds,\n              timelineBounds,\n            },\n          })\n          if (fitBoundsOnLoad) {\n            targetMapVessel(id)\n          }\n        })\n        .catch((err) => console.warn(err))\n        .finally(() => dispatch(completeLoader(loaderID)))\n    }\n  }\n}\n\nconst removeTrack = (trackId) => ({\n  type: REMOVE_TRACK,\n  payload: {\n    trackId,\n  },\n})\n\nexport const updateTracks = (newTracks = []) => (dispatch, getState) => {\n  const prevTracks = getState().map.tracks.data\n  // add and update layers\n  if (newTracks) {\n    newTracks.forEach((newTrack) => {\n      const trackId = newTrack.id\n      const prevTrack = prevTracks.find((t) => t.id === trackId)\n      if (prevTrack === undefined) {\n        dispatch(loadTrack(newTrack))\n      } else if (prevTrack.color !== newTrack.color) {\n        dispatch({\n          type: UPDATE_TRACK,\n          payload: {\n            id: newTrack.id,\n            color: newTrack.color,\n          },\n        })\n      }\n    })\n  }\n\n  // clean up unused tracks\n  prevTracks.forEach((prevTrack) => {\n    if (!newTracks || !newTracks.find((t) => t.id === prevTrack.id)) {\n      dispatch(removeTrack(prevTrack.id))\n    }\n  })\n}\n","import PropTypes from 'prop-types'\n\nconst withReducerPropTypes = (name, propTypesSchema) => (reducer) => {\n  if (process.env.NODE_ENV === 'development') {\n    return (state, action) => {\n      const result = reducer(state, action)\n      PropTypes.checkPropTypes(propTypesSchema, result, 'reducer', name)\n\n      return result\n    }\n  }\n  return reducer\n}\n\nexport default withReducerPropTypes\n","import PropTypes from 'prop-types'\nimport withReducerTypes from '../utils/withReducerTypes'\nimport {\n  INIT_MODULE,\n  SET_TEMPORAL_EXTENT,\n  SET_HIGHLIGHT_TEMPORAL_EXTENT,\n  START_LOADER,\n  COMPLETE_LOADER,\n} from './module.actions'\n\nconst initialState = {\n  loaders: null,\n  token: undefined,\n  temporalExtent: [new Date(1970), new Date()],\n  highlightTemporalExtent: null,\n  onViewportChange: undefined,\n  onHover: undefined,\n  onClick: undefined,\n  onLoadStart: undefined,\n  onLoadComplete: undefined,\n  onClosePopup: undefined,\n  onAttributionsChange: undefined,\n}\n\nconst moduleReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case INIT_MODULE: {\n      return {\n        ...state,\n        ...action.payload,\n      }\n    }\n\n    case SET_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        temporalExtent: action.payload,\n      }\n    }\n\n    case SET_HIGHLIGHT_TEMPORAL_EXTENT: {\n      return {\n        ...state,\n        highlightTemporalExtent: action.payload,\n      }\n    }\n\n    case START_LOADER: {\n      const loaders = state.loaders !== null ? [...state.loaders] : []\n      loaders.push(action.payload)\n      return { ...state, loaders }\n    }\n\n    case COMPLETE_LOADER: {\n      const loaders = [...state.loaders]\n      const loaderIndex = loaders.findIndex((l) => l === action.payload)\n      loaders.splice(loaderIndex, 1)\n      return { ...state, loaders }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst moduleTypes = {\n  loaders: PropTypes.arrayOf(PropTypes.number),\n  token: PropTypes.string,\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  onViewportChange: PropTypes.func,\n  onHover: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClosePopup: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n}\n\nexport default withReducerTypes('module', moduleTypes)(moduleReducer)\n","import PropTypes from 'prop-types'\nimport { trackTypes } from '../proptypes/tracks'\nimport withReducerTypes from '../utils/withReducerTypes'\n\nimport { ADD_TRACK, UPDATE_TRACK, REMOVE_TRACK } from './tracks.actions'\n\nconst initialState = {\n  data: [],\n}\n\nconst tracksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_TRACK: {\n      const data = [...state.data, action.payload]\n      return { ...state, data }\n    }\n\n    case UPDATE_TRACK: {\n      const trackData = action.payload\n      const data = state.data.map((track) => {\n        if (track.id !== trackData.id) return track\n        return {\n          ...track,\n          ...trackData,\n        }\n      })\n      return { ...state, data }\n    }\n\n    case REMOVE_TRACK: {\n      const removedTrackId = action.payload.trackId\n      const data = state.data.filter((track) => track.id !== removedTrackId)\n      return { ...state, data }\n    }\n\n    default:\n      return state\n  }\n}\n\nconst tracksTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.exact({\n      ...trackTypes,\n      data: PropTypes.object,\n      timelineBounds: PropTypes.array,\n      geoBounds: PropTypes.exact({\n        minLat: PropTypes.number,\n        minLng: PropTypes.number,\n        maxLat: PropTypes.number,\n        maxLng: PropTypes.number,\n      }),\n    })\n  ),\n}\n\nexport default withReducerTypes('tracks', tracksTypes)(tracksReducer)\n","import uniq from 'lodash/uniq'\nimport {\n  INIT_HEATMAP_LAYERS,\n  UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES,\n  ADD_HEATMAP_LAYER,\n  UPDATE_HEATMAP_LAYER_STYLE,\n  REMOVE_HEATMAP_LAYER,\n  ADD_REFERENCE_TILE,\n  UPDATE_HEATMAP_TILE,\n  RELEASE_HEATMAP_TILES,\n  HIGHLIGHT_VESSELS,\n  UPDATE_LOADED_TILES,\n  HIGHLIGHT_CLICKED_VESSEL,\n  CLEAR_HIGHLIGHT_CLICKED_VESSEL,\n} from './heatmap.actions'\n\nconst initialState = {\n  // a dict of heatmap layers (key is layer id)\n  // each containing data, url, tiles, visibleTemporalExtentsIndices\n  heatmapLayers: {},\n  // store a list of tiles currently visible in the map\n  // those are necessary when adding a new layer to know which tiles need to be loaded\n  referenceTiles: [],\n  highlightedVessels: { isEmpty: true },\n  highlightedClickedVessel: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_HEATMAP_LAYERS: {\n      return Object.assign({}, state, { heatmapLayers: action.payload })\n    }\n\n    case UPDATE_HEATMAP_LAYER_TEMPORAL_EXTENTS_LOADED_INDICES: {\n      const heatmapLayers = state.heatmapLayers\n      let indices = heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices\n      indices = uniq(indices.concat(action.payload.indicesAdded))\n      heatmapLayers[action.payload.layerId].visibleTemporalExtentsIndices = indices\n      return Object.assign({}, state, heatmapLayers)\n    }\n\n    case ADD_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers, {\n        [action.payload.id]: {\n          tiles: [],\n          ...action.payload,\n        },\n      })\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case UPDATE_HEATMAP_LAYER_STYLE: {\n      const newLayer = action.payload\n      const layer = { ...state.heatmapLayers[newLayer.id], ...newLayer }\n      const heatmapLayers = { ...state.heatmapLayers, [newLayer.id]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case REMOVE_HEATMAP_LAYER: {\n      const heatmapLayers = Object.assign({}, state.heatmapLayers)\n      delete heatmapLayers[action.payload.layerId]\n      return Object.assign({}, state, { heatmapLayers })\n    }\n\n    case ADD_REFERENCE_TILE: {\n      return Object.assign({}, state, { referenceTiles: [...state.referenceTiles, action.payload] })\n    }\n\n    case UPDATE_HEATMAP_TILE: {\n      const layerId = action.payload.layerId\n      const newTile = action.payload.tile\n      const layer = { ...state.heatmapLayers[layerId] }\n      let layerTiles = [...layer.tiles]\n      const tileIndex = layerTiles.findIndex((t) => t.uid === newTile.uid)\n      if (tileIndex === -1) {\n        layerTiles.push(newTile)\n      } else {\n        layerTiles = [layerTiles.slice(0, tileIndex), newTile, layerTiles.slice(tileIndex + 1)]\n      }\n      layer.tiles = layerTiles\n      const heatmapLayers = { ...state.heatmapLayers, [layerId]: layer }\n      return { ...state, heatmapLayers }\n    }\n\n    case RELEASE_HEATMAP_TILES: {\n      const uids = action.payload\n\n      // remove tiles\n      const layerIds = Object.keys(state.heatmapLayers)\n      const heatmapLayers = { ...state.heatmapLayers }\n      layerIds.forEach((layerId) => {\n        const prevLayer = { ...heatmapLayers[layerId] }\n        uids.forEach((tileUid) => {\n          const releasedTileIndex = prevLayer.tiles.findIndex((tile) => tile.uid === tileUid)\n          if (releasedTileIndex > -1) {\n            // console.log('releasing', layerId, tileUid);\n            prevLayer.tiles.splice(releasedTileIndex, 1)\n          }\n        })\n      })\n\n      // remove reference tiles\n      let referenceTiles = [...state.referenceTiles]\n      uids.forEach((tileUid) => {\n        const releasedRefTileIndex = referenceTiles.findIndex((tile) => tile.uid === tileUid)\n        if (releasedRefTileIndex > -1) {\n          referenceTiles = [\n            ...referenceTiles.slice(0, releasedRefTileIndex),\n            ...referenceTiles.slice(releasedRefTileIndex + 1),\n          ]\n        }\n      })\n\n      return { ...state, heatmapLayers, referenceTiles }\n    }\n\n    case UPDATE_LOADED_TILES: {\n      const newHeatmapLayers = { ...state.heatmapLayers }\n      return { ...state, heatmapLayers: newHeatmapLayers }\n    }\n\n    case HIGHLIGHT_VESSELS: {\n      return Object.assign({}, state, { highlightedVessels: action.payload })\n    }\n\n    case HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: action.payload }\n    }\n\n    case CLEAR_HIGHLIGHT_CLICKED_VESSEL: {\n      return { ...state, highlightedClickedVessel: null }\n    }\n\n    default:\n      return state\n  }\n}\n","import uniq from 'lodash/uniq'\nimport {\n  SET_CURRENTLY_VISIBLE_TILES,\n  SET_CURRENTLY_LOADED_TILES,\n  SET_CURRENTLY_SWAPPED_TILE_UIDS,\n  MARK_TILES_UIDS_AS_LOADED,\n  RELEASE_MARKED_TILES_UIDS,\n} from './heatmapTiles.actions'\n\nconst initialState = {\n  currentVisibleTiles: [],\n  currentLoadedTiles: [],\n  currentToLoadTileUids: [],\n  currentToReleaseTileUids: [],\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_CURRENTLY_VISIBLE_TILES: {\n      const currentVisibleTiles = [].concat(action.payload)\n      return { ...state, currentVisibleTiles }\n    }\n\n    case SET_CURRENTLY_LOADED_TILES: {\n      const currentLoadedTiles = [].concat(action.payload)\n      return { ...state, currentLoadedTiles }\n    }\n\n    case SET_CURRENTLY_SWAPPED_TILE_UIDS: {\n      const currentToLoadTileUids = uniq(\n        state.currentToLoadTileUids.concat(action.payload.tilesToLoadUids)\n      )\n      const currentToReleaseTileUids = uniq(\n        state.currentToReleaseTileUids.concat(action.payload.tilesToReleaseUids)\n      )\n      // clean to load tiles of tiles that needs to be released\n      const newToLoadTilesUids = currentToLoadTileUids.filter(\n        (tileUid) => currentToReleaseTileUids.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newToLoadTilesUids, currentToReleaseTileUids }\n    }\n\n    case MARK_TILES_UIDS_AS_LOADED: {\n      const currentToLoadTileUids = state.currentToLoadTileUids\n      const tileUidsMarkedAsLoaded = action.payload\n      const newCurrentToLoadTileUids = currentToLoadTileUids.filter(\n        (tileUid) => tileUidsMarkedAsLoaded.indexOf(tileUid) === -1\n      )\n      return { ...state, currentToLoadTileUids: newCurrentToLoadTileUids }\n    }\n\n    case RELEASE_MARKED_TILES_UIDS: {\n      return { ...state, currentToReleaseTileUids: [] }\n    }\n\n    default:\n      return state\n  }\n}\n","import { FlyToInterpolator } from 'react-map-gl'\nimport { easeCubic } from 'd3-ease'\nimport { MIN_ZOOM_LEVEL, MAX_ZOOM_LEVEL } from '../config'\nimport { TRANSITION_TYPE } from '../constants'\nimport {\n  SET_VIEWPORT,\n  UPDATE_VIEWPORT,\n  SET_ZOOM_INCREMENT,\n  SET_MOUSE_LAT_LONG,\n  TRANSITION_END,\n  SET_NATIVE_VIEWPORT,\n} from './viewport.actions'\n\nconst DEFAULT_TRANSITION = {\n  transitionDuration: 500,\n  transitionInterpolator: new FlyToInterpolator(),\n  transitionEasing: easeCubic,\n}\n\nconst initialState = {\n  viewport: {\n    latitude: 0,\n    longitude: 0,\n    zoom: 3,\n    bearing: 0,\n    pitch: 0,\n    width: 1000,\n    height: 800,\n  },\n  maxZoom: MAX_ZOOM_LEVEL,\n  minZoom: MIN_ZOOM_LEVEL,\n  prevZoom: 3,\n  currentTransition: null,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_VIEWPORT: {\n      return {\n        ...state,\n        viewport: action.payload,\n        canZoomIn: action.payload.zoom < state.maxZoom,\n        canZoomOut: action.payload.zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n      }\n    }\n\n    case UPDATE_VIEWPORT: {\n      const viewport = { ...state.viewport, ...action.payload }\n      return {\n        ...state,\n        viewport,\n        prevZoom: viewport.zoom,\n      }\n    }\n\n    case SET_ZOOM_INCREMENT: {\n      const currentZoom = state.viewport.zoom\n      const zoom = Math.min(\n        state.maxZoom,\n        action.payload.zoom || currentZoom + action.payload.increment\n      )\n      const viewport = {\n        ...state.viewport,\n        ...DEFAULT_TRANSITION,\n        zoom,\n        latitude:\n          action.payload.latitude === null ? state.viewport.latitude : action.payload.latitude,\n        longitude:\n          action.payload.longitude === null ? state.viewport.longitude : action.payload.longitude,\n      }\n      return {\n        ...state,\n        viewport,\n        canZoomIn: zoom < state.maxZoom,\n        canZoomOut: zoom > state.minZoom,\n        prevZoom: state.viewport.zoom,\n        currentTransition: TRANSITION_TYPE.ZOOM,\n      }\n    }\n\n    case SET_MOUSE_LAT_LONG: {\n      return { ...state, mouseLatLong: action.payload }\n    }\n\n    case TRANSITION_END: {\n      return { ...state, currentTransition: null }\n    }\n\n    case SET_NATIVE_VIEWPORT: {\n      return { ...state, ...action.payload }\n    }\n\n    default:\n      return state\n  }\n}\n","import { fromJS } from 'immutable'\nimport uniq from 'lodash/uniq'\nimport GL_STYLE from './gl-styles/style.json'\nimport {\n  SET_MAP_STYLE,\n  MARK_CARTO_LAYERS_AS_INSTANCIATED,\n  INIT_MAP_STYLE,\n  SET_STATIC_LAYERS,\n  SET_BASEMAP_LAYERS,\n} from './style.actions'\n\nconst attributions = uniq(\n  Object.keys(GL_STYLE.sources)\n    .map((sourceKey) => GL_STYLE.sources[sourceKey].attribution)\n    .filter((source) => source !== undefined)\n)\n\nconst setStyleDefaults = (style) => {\n  style.layers.forEach((layer) => {\n    if (layer.layout === undefined) {\n      layer.layout = {}\n    }\n    if (layer.paint === undefined) {\n      layer.paint = {}\n    }\n    // initialize time filter for time-filterable layers\n    if (layer.metadata && layer.metadata['gfw:temporal'] === true) {\n      layer.filter = ['all', ['>', 'timestamp', 0], ['<', 'timestamp', 999999999999]]\n    }\n    // set all layers to not visible except layers explicitely marked as visible (default basemap)\n    if (layer.layout.visibility !== 'visible') {\n      layer.layout.visibility = 'none'\n    }\n  })\n  return style\n}\n\nconst initialState = {\n  mapStyle: fromJS(setStyleDefaults(GL_STYLE)),\n  cartoLayersInstanciated: [],\n  staticLayers: [],\n  basemapLayers: [],\n  attributions,\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case INIT_MAP_STYLE: {\n      const newMapStyle = state.mapStyle.setIn(['glyphs'], action.payload.glyphsPath)\n      return { ...state, mapStyle: newMapStyle }\n    }\n    case SET_MAP_STYLE: {\n      return { ...state, mapStyle: action.payload }\n    }\n    case SET_STATIC_LAYERS: {\n      return { ...state, staticLayers: action.payload }\n    }\n    case SET_BASEMAP_LAYERS: {\n      return { ...state, basemapLayers: action.payload }\n    }\n    case MARK_CARTO_LAYERS_AS_INSTANCIATED: {\n      const cartoLayersInstanciated = [...state.cartoLayersInstanciated, ...action.payload]\n      return { ...state, cartoLayersInstanciated }\n    }\n    default:\n      return state\n  }\n}\n","// TODO MAP MODULE remove whole reducer\nimport { SET_MAP_CURSOR } from './interaction.actions'\n\nconst initialState = {\n  cursor: 'progress',\n}\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case SET_MAP_CURSOR: {\n      return { ...state, cursor: action.payload }\n    }\n    default:\n      return state\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { compose, createStore, combineReducers, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport thunk from 'redux-thunk'\nimport throttle from 'lodash/throttle'\nimport { trackTypes } from './proptypes/tracks'\nimport { heatmapLayerTypes, basemapLayerTypes, staticLayerTypes } from './proptypes/layers'\nimport { viewportTypes, popupTypes } from './proptypes/shared'\n\nimport Map from './glmap/Map.container'\nimport { initModule, setTemporalExtent, setHighlightTemporalExtent } from './module/module.actions'\nimport { fitToBounds, updateViewport, transitionToZoom } from './glmap/viewport.actions'\nimport { initStyle, commitStyleUpdates, applyTemporalExtent } from './glmap/style.actions'\nimport { updateTracks } from './tracks/tracks.actions'\nimport { updateHeatmapLayers, updateLayerLoadTemporalExtents } from './heatmap/heatmap.actions'\nimport GL_STYLE from './glmap/gl-styles/style.json'\n\nimport ModuleReducer from './module/module.reducer'\nimport TracksReducer from './tracks/tracks.reducer'\nimport HeatmapReducer from './heatmap/heatmap.reducer'\nimport HeatmapTilesReducer from './heatmap/heatmapTiles.reducer'\nimport ViewportReducer from './glmap/viewport.reducer'\nimport StyleReducer from './glmap/style.reducer'\nimport InteractionReducer from './glmap/interaction.reducer'\n\nconst mapReducer = combineReducers({\n  module: ModuleReducer,\n  tracks: TracksReducer,\n  heatmap: HeatmapReducer,\n  heatmapTiles: HeatmapTilesReducer,\n  style: StyleReducer,\n  viewport: ViewportReducer,\n  interaction: InteractionReducer,\n})\n\nlet composeEnhancers = compose\n\n// TODO: use when minify fixed as we want to get rid of remote-redux-devtools on production\n// if (\n//   (process.env.MAP_REDUX_REMOTE_DEBUG || process.env.REACT_APP_MAP_REDUX_REMOTE_DEBUG) &&\n//   process.env.NODE_ENV === 'development'\n// ) {\n//   const composeWithDevTools = require('remote-redux-devtools').composeWithDevTools\n//   composeEnhancers = composeWithDevTools({\n//     name: 'Map module',\n//     realtime: true,\n//     hostname: 'localhost',\n//     port: 8000,\n//     maxAge: 30,\n//     stateSanitizer: (state) => ({ ...state, map: { ...state.map, heatmap: 'NOT_SERIALIZED' } }),\n//   })\n// }\n\nconst store = createStore(\n  combineReducers({\n    map: mapReducer,\n  }),\n  {},\n  composeEnhancers(applyMiddleware(thunk))\n)\n\nconst throttleApplyTemporalExtent = throttle((temporalExtent) => {\n  store.dispatch(applyTemporalExtent(temporalExtent))\n  store.dispatch(setTemporalExtent(temporalExtent))\n}, 16)\n\nconst updateViewportFromIncomingProps = (incomingViewport) => {\n  store.dispatch(\n    updateViewport({\n      latitude: incomingViewport.center[0],\n      longitude: incomingViewport.center[1],\n      zoom: incomingViewport.zoom,\n    })\n  )\n}\n\nclass MapModule extends React.Component {\n  state = {\n    initialized: false,\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo)\n    this.setState({\n      error: error,\n      errorInfo: errorInfo,\n    })\n  }\n\n  componentDidMount() {\n    // First trigger synchronous actions that should happen before any map render\n    // At the end of this, set a flag to allow map rendering\n\n    if (this.props.viewport !== undefined) {\n      updateViewportFromIncomingProps(this.props.viewport)\n    }\n\n    // TODO\n    if (this.props.glyphsPath !== undefined) {\n      store.dispatch(\n        initStyle({\n          glyphsPath: this.props.glyphsPath,\n          // TODO apply URL updates here\n        })\n      )\n    }\n\n    if (this.props.onAttributionsChange !== undefined) {\n      this.props.onAttributionsChange(store.getState().map.style.attributions)\n    }\n\n    if (store && store.getState().map.module.token === undefined) {\n      store.dispatch(\n        initModule({\n          token: this.props.token,\n          onViewportChange: this.props.onViewportChange,\n          onHover: this.props.onHover,\n          onClick: this.props.onClick,\n          onLoadStart: this.props.onLoadStart,\n          onLoadComplete: this.props.onLoadComplete,\n          onClosePopup: this.props.onClosePopup,\n          onAttributionsChange: this.props.onAttributionsChange,\n        })\n      )\n    }\n\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n    }\n\n    if (\n      (this.props.basemapLayers !== undefined && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== undefined && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    if (this.props.tracks !== undefined) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // Now trigger async actions\n\n    if (this.props.temporalExtent !== undefined && this.props.temporalExtent.length) {\n      throttleApplyTemporalExtent(this.props.temporalExtent)\n    }\n\n    // eslint-disable-next-line react/no-did-mount-set-state\n    this.setState({\n      initialized: true,\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    // tracks\n    if (this.props.tracks !== prevProps.tracks) {\n      store.dispatch(updateTracks(this.props.tracks))\n    }\n\n    // heatmap layers\n    if (this.props.heatmapLayers !== prevProps.heatmapLayers) {\n      store.dispatch(updateHeatmapLayers(this.props.heatmapLayers, this.props.loadTemporalExtent))\n    }\n\n    // basemap / static layers\n    if (\n      (this.props.basemapLayers !== undefined && this.props.basemapLayers.length) ||\n      (this.props.staticLayers !== undefined && this.props.staticLayers.length)\n    ) {\n      store.dispatch(\n        commitStyleUpdates(this.props.staticLayers || [], this.props.basemapLayers || [])\n      )\n    }\n\n    // loadTemporalExtent\n    if (this.props.loadTemporalExtent !== undefined && this.props.loadTemporalExtent.length) {\n      if (\n        prevProps.loadTemporalExtent === undefined ||\n        !prevProps.loadTemporalExtent.length ||\n        this.props.loadTemporalExtent[0].getTime() !== prevProps.loadTemporalExtent[0].getTime() ||\n        this.props.loadTemporalExtent[1].getTime() !== prevProps.loadTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(updateLayerLoadTemporalExtents(this.props.loadTemporalExtent))\n      }\n    }\n    // temporalExtent\n    if (this.props.temporalExtent !== undefined && this.props.temporalExtent.length) {\n      if (\n        prevProps.temporalExtent === undefined ||\n        !prevProps.temporalExtent.length ||\n        this.props.temporalExtent[0].getTime() !== prevProps.temporalExtent[0].getTime() ||\n        this.props.temporalExtent[1].getTime() !== prevProps.temporalExtent[1].getTime()\n      ) {\n        throttleApplyTemporalExtent(this.props.temporalExtent)\n      }\n    }\n\n    // highlightTemporalExtent\n    if (this.props.highlightTemporalExtent !== null && this.props.highlightTemporalExtent.length) {\n      if (\n        prevProps.highlightTemporalExtent === null ||\n        !prevProps.highlightTemporalExtent.length ||\n        this.props.highlightTemporalExtent[0].getTime() !==\n          prevProps.highlightTemporalExtent[0].getTime() ||\n        this.props.highlightTemporalExtent[1].getTime() !==\n          prevProps.highlightTemporalExtent[1].getTime()\n      ) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    } else {\n      if (this.props.highlightTemporalExtent !== prevProps.highlightTemporalExtent) {\n        store.dispatch(setHighlightTemporalExtent(this.props.highlightTemporalExtent))\n      }\n    }\n\n    // viewport - since viewport will be updated internally to the module,\n    // we have to compare incoming props to existing viewport in store, ie:\n    // update viewport from incoming props ONLY if zoom or center is different\n    // from the internally stored one\n    // TODO FFS incoming lat lon should be an object, not an array\n    const currentViewport = store.getState().map.viewport.viewport\n    //                                        stop propagating updates from outside when zooming in\n    if (\n      this.props.viewport !== undefined &&\n      store.getState().map.viewport.currentTransition === null\n    ) {\n      if (\n        currentViewport.latitude !== this.props.viewport.center[0] ||\n        currentViewport.longitude !== this.props.viewport.center[1] ||\n        currentViewport.zoom !== this.props.viewport.zoom\n      ) {\n        // if zoom delta is precisely === 1, zoom with a transition\n        if (Math.abs(currentViewport.zoom - this.props.viewport.zoom) === 1) {\n          store.dispatch(transitionToZoom(this.props.viewport.zoom))\n        } else {\n          updateViewportFromIncomingProps(this.props.viewport)\n        }\n      }\n    }\n  }\n  render() {\n    if (this.state.error !== undefined) {\n      console.log(this.state.error)\n      return (\n        <div>\n          <h2>Map component crashed!</h2>\n          <p className=\"red\">{this.state.error && this.state.error.toString()}</p>\n          <div>Component Stack Error Details:</div>\n          <p className=\"red\">{this.state.errorInfo.componentStack}</p>\n        </div>\n      )\n    }\n    // won't render anything before actions in componentDidMount have been triggered\n    return this.state.initialized !== true ? null : (\n      <Provider store={store}>\n        <Map {...this.props} />\n      </Provider>\n    )\n  }\n}\n\nMapModule.propTypes = {\n  token: PropTypes.string,\n  viewport: PropTypes.shape(viewportTypes),\n  tracks: PropTypes.arrayOf(PropTypes.exact(trackTypes)),\n  heatmapLayers: PropTypes.arrayOf(PropTypes.shape(heatmapLayerTypes)),\n  temporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  highlightTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  loadTemporalExtent: PropTypes.arrayOf(PropTypes.instanceOf(Date)),\n  basemapLayers: PropTypes.arrayOf(PropTypes.shape(basemapLayerTypes)),\n  staticLayers: PropTypes.arrayOf(PropTypes.shape(staticLayerTypes)),\n  // customLayers\n  hoverPopup: PropTypes.shape(popupTypes),\n  clickPopup: PropTypes.shape(popupTypes),\n  glyphsPath: PropTypes.string,\n  onViewportChange: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadComplete: PropTypes.func,\n  onClick: PropTypes.func,\n  onHover: PropTypes.func,\n  onAttributionsChange: PropTypes.func,\n  onClosePopup: PropTypes.func,\n}\n\nMapModule.defaultProps = {\n  highlightTemporalExtent: null,\n}\n\nexport default MapModule\n\nexport const targetMapVessel = (id) => {\n  const track = store.getState().map.tracks.data.find((t) => t.id === id.toString())\n  store.dispatch(fitToBounds(track.geoBounds))\n\n  return track.timelineBounds\n}\n\n// TODO MAP MODULE make it a function\nexport const AVAILABLE_BASEMAPS = GL_STYLE.metadata['gfw:basemap-layers']\n","\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  import { Playground, PropsTable } from 'docz'\nimport Map from './index.js'\n\nconst layoutProps = {\n  \n};\nexport default class MDXContent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.layout = null\n  }\n  render() {\n    const { components, ...props } = this.props\n\n    return <MDXTag\n             name=\"wrapper\"\n             \n             components={components}>\n<MDXTag name=\"h1\" components={components} props={{\"id\":\"map\"}}>{`Map`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"description\"}}>{`Description`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This component displays and load fishing activity and fishing-related layers on a map, used in various GFW projects:`}</MDXTag>\n<MDXTag name=\"ul\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/map-client/blob/9c5179358d4870c0fd4c2c0742917e72e6025c59/app/src/map/components/MapWrapper.jsx#L5\"}}>{`Map client`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/vessel-profiles/blob/aa0e17395f6a4947bb3fdf3106cb9d0a744ba64f/src/profile/components/MapWrapper.js#L3\"}}>{`Vessel profiles`}</MDXTag></MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ul\"><MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://github.com/GlobalFishingWatch/data-portal/blob/96b1e24efcff58ade672a67229da0610d9d241ab/src/map/MapWrapper.jsx#L2\"}}>{`Data portal`}</MDXTag></MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"available-properties\"}}>{`Available properties`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`TODO: fix crash on PropsTable docz component`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"basic-usage\"}}>{`Basic usage`}</MDXTag>\n<Playground __codesandbox={``} __position={0} __code={'<Map viewport={{ center: [0.026, 123.61], zoom: 5 }} />'} __scope={{props: this ? this.props : props,Map}}>\n  <Map viewport={{ center: [0.026, 123.61], zoom: 5, }} />\n</Playground>\n           </MDXTag>\n  }\n}\n  "],"sourceRoot":""}